// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
    /* eslint-disable no-undef */
    var globalObject =
      typeof globalThis !== 'undefined'
        ? globalThis
        : typeof self !== 'undefined'
        ? self
        : typeof window !== 'undefined'
        ? window
        : typeof global !== 'undefined'
        ? global
        : {};
    /* eslint-enable no-undef */
  
    // Save the require from previous bundle to this closure if any
    var previousRequire =
      typeof globalObject[parcelRequireName] === 'function' &&
      globalObject[parcelRequireName];
  
    var cache = previousRequire.cache || {};
    // Do not use `require` to prevent Webpack from trying to bundle this call
    var nodeRequire =
      typeof module !== 'undefined' &&
      typeof module.require === 'function' &&
      module.require.bind(module);
  
    function newRequire(name, jumped) {
      if (!cache[name]) {
        if (!modules[name]) {
          // if we cannot find the module within our internal map or
          // cache jump to the current global require ie. the last bundle
          // that was added to the page.
          var currentRequire =
            typeof globalObject[parcelRequireName] === 'function' &&
            globalObject[parcelRequireName];
          if (!jumped && currentRequire) {
            return currentRequire(name, true);
          }
  
          // If there are other bundles on this page the require from the
          // previous one is saved to 'previousRequire'. Repeat this as
          // many times as there are bundles until the module is found or
          // we exhaust the require chain.
          if (previousRequire) {
            return previousRequire(name, true);
          }
  
          // Try the node require function if it exists.
          if (nodeRequire && typeof name === 'string') {
            return nodeRequire(name);
          }
  
          var err = new Error("Cannot find module '" + name + "'");
          err.code = 'MODULE_NOT_FOUND';
          throw err;
        }
  
        localRequire.resolve = resolve;
        localRequire.cache = {};
  
        var module = (cache[name] = new newRequire.Module(name));
  
        modules[name][0].call(
          module.exports,
          localRequire,
          module,
          module.exports,
          this
        );
      }
  
      return cache[name].exports;
  
      function localRequire(x) {
        var res = localRequire.resolve(x);
        return res === false ? {} : newRequire(res);
      }
  
      function resolve(x) {
        var id = modules[name][1][x];
        return id != null ? id : x;
      }
    }
  
    function Module(moduleName) {
      this.id = moduleName;
      this.bundle = newRequire;
      this.exports = {};
    }
  
    newRequire.isParcelRequire = true;
    newRequire.Module = Module;
    newRequire.modules = modules;
    newRequire.cache = cache;
    newRequire.parent = previousRequire;
    newRequire.register = function (id, exports) {
      modules[id] = [
        function (require, module) {
          module.exports = exports;
        },
        {},
      ];
    };
  
    Object.defineProperty(newRequire, 'root', {
      get: function () {
        return globalObject[parcelRequireName];
      },
    });
  
    globalObject[parcelRequireName] = newRequire;
  
    for (var i = 0; i < entry.length; i++) {
      newRequire(entry[i]);
    }
  
    if (mainEntry) {
      // Expose entry point to Node, AMD or browser globals
      // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
      var mainExports = newRequire(mainEntry);
  
      // CommonJS
      if (typeof exports === 'object' && typeof module !== 'undefined') {
        module.exports = mainExports;
  
        // RequireJS
      } else if (typeof define === 'function' && define.amd) {
        define(function () {
          return mainExports;
        });
  
        // <script>
      } else if (globalName) {
        this[globalName] = mainExports;
      }
    }
  })({"jfcMC":[function(require,module,exports) {
  var global = arguments[3];
  var HMR_HOST = null;
  var HMR_PORT = null;
  var HMR_SECURE = false;
  var HMR_ENV_HASH = "d6ea1d42532a7575";
  module.bundle.HMR_BUNDLE_ID = "fe4256060641b553";
  "use strict";
  /* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, globalThis, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
  import type {
    HMRAsset,
    HMRMessage,
  } from '@parcel/reporter-dev-server/src/HMRServer.js';
  interface ParcelRequire {
    (string): mixed;
    cache: {|[string]: ParcelModule|};
    hotData: {|[string]: mixed|};
    Module: any;
    parent: ?ParcelRequire;
    isParcelRequire: true;
    modules: {|[string]: [Function, {|[string]: string|}]|};
    HMR_BUNDLE_ID: string;
    root: ParcelRequire;
  }
  interface ParcelModule {
    hot: {|
      data: mixed,
      accept(cb: (Function) => void): void,
      dispose(cb: (mixed) => void): void,
      // accept(deps: Array<string> | string, cb: (Function) => void): void,
      // decline(): void,
      _acceptCallbacks: Array<(Function) => void>,
      _disposeCallbacks: Array<(mixed) => void>,
    |};
  }
  interface ExtensionContext {
    runtime: {|
      reload(): void,
      getURL(url: string): string;
      getManifest(): {manifest_version: number, ...};
    |};
  }
  declare var module: {bundle: ParcelRequire, ...};
  declare var HMR_HOST: string;
  declare var HMR_PORT: string;
  declare var HMR_ENV_HASH: string;
  declare var HMR_SECURE: boolean;
  declare var chrome: ExtensionContext;
  declare var browser: ExtensionContext;
  declare var __parcel__import__: (string) => Promise<void>;
  declare var __parcel__importScripts__: (string) => Promise<void>;
  declare var globalThis: typeof self;
  declare var ServiceWorkerGlobalScope: Object;
  */ var OVERLAY_ID = "__parcel__error__overlay__";
  var OldModule = module.bundle.Module;
  function Module(moduleName) {
      OldModule.call(this, moduleName);
      this.hot = {
          data: module.bundle.hotData[moduleName],
          _acceptCallbacks: [],
          _disposeCallbacks: [],
          accept: function(fn) {
              this._acceptCallbacks.push(fn || function() {});
          },
          dispose: function(fn) {
              this._disposeCallbacks.push(fn);
          }
      };
      module.bundle.hotData[moduleName] = undefined;
  }
  module.bundle.Module = Module;
  module.bundle.hotData = {};
  var checkedAssets, assetsToDispose, assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
  function getHostname() {
      return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
  }
  function getPort() {
      return HMR_PORT || location.port;
  } // eslint-disable-next-line no-redeclare
  var parent = module.bundle.parent;
  if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
      var hostname = getHostname();
      var port = getPort();
      var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
      var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/"); // Web extension context
      var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome; // Safari doesn't support sourceURL in error stacks.
      // eval may also be disabled via CSP, so do a quick check.
      var supportsSourceURL = false;
      try {
          (0, eval)('throw new Error("test"); //# sourceURL=test.js');
      } catch (err) {
          supportsSourceURL = err.stack.includes("test.js");
      } // $FlowFixMe
      ws.onmessage = async function(event) {
          checkedAssets = {} /*: {|[string]: boolean|} */ ;
          assetsToAccept = [];
          assetsToDispose = [];
          var data = JSON.parse(event.data);
          if (data.type === "update") {
              // Remove error overlay if there is one
              if (typeof document !== "undefined") removeErrorOverlay();
              let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH); // Handle HMR Update
              let handled = assets.every((asset)=>{
                  return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
              });
              if (handled) {
                  console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                  if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                  await hmrApplyUpdates(assets); // Dispose all old assets.
                  let processedAssets = {} /*: {|[string]: boolean|} */ ;
                  for(let i = 0; i < assetsToDispose.length; i++){
                      let id = assetsToDispose[i][1];
                      if (!processedAssets[id]) {
                          hmrDispose(assetsToDispose[i][0], id);
                          processedAssets[id] = true;
                      }
                  } // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                  processedAssets = {};
                  for(let i = 0; i < assetsToAccept.length; i++){
                      let id = assetsToAccept[i][1];
                      if (!processedAssets[id]) {
                          hmrAccept(assetsToAccept[i][0], id);
                          processedAssets[id] = true;
                      }
                  }
              } else fullReload();
          }
          if (data.type === "error") {
              // Log parcel errors to console
              for (let ansiDiagnostic of data.diagnostics.ansi){
                  let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                  console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
              }
              if (typeof document !== "undefined") {
                  // Render the fancy html overlay
                  removeErrorOverlay();
                  var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                  document.body.appendChild(overlay);
              }
          }
      };
      ws.onerror = function(e) {
          console.error(e.message);
      };
      ws.onclose = function() {
          console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
      };
  }
  function removeErrorOverlay() {
      var overlay = document.getElementById(OVERLAY_ID);
      if (overlay) {
          overlay.remove();
          console.log("[parcel] ✨ Error resolved");
      }
  }
  function createErrorOverlay(diagnostics) {
      var overlay = document.createElement("div");
      overlay.id = OVERLAY_ID;
      let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
      for (let diagnostic of diagnostics){
          let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
              return `${p}
  <a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
  ${frame.code}`;
          }, "") : diagnostic.stack;
          errorHTML += `
        <div>
          <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
            🚨 ${diagnostic.message}
          </div>
          <pre>${stack}</pre>
          <div>
            ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
          </div>
          ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
        </div>
      `;
      }
      errorHTML += "</div>";
      overlay.innerHTML = errorHTML;
      return overlay;
  }
  function fullReload() {
      if ("reload" in location) location.reload();
      else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
  }
  function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
      var modules = bundle.modules;
      if (!modules) return [];
      var parents = [];
      var k, d, dep;
      for(k in modules)for(d in modules[k][1]){
          dep = modules[k][1][d];
          if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
              bundle,
              k
          ]);
      }
      if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
      return parents;
  }
  function updateLink(link) {
      var newLink = link.cloneNode();
      newLink.onload = function() {
          if (link.parentNode !== null) // $FlowFixMe
          link.parentNode.removeChild(link);
      };
      newLink.setAttribute("href", link.getAttribute("href").split("?")[0] + "?" + Date.now()); // $FlowFixMe
      link.parentNode.insertBefore(newLink, link.nextSibling);
  }
  var cssTimeout = null;
  function reloadCSS() {
      if (cssTimeout) return;
      cssTimeout = setTimeout(function() {
          var links = document.querySelectorAll('link[rel="stylesheet"]');
          for(var i = 0; i < links.length; i++){
              // $FlowFixMe[incompatible-type]
              var href = links[i].getAttribute("href");
              var hostname = getHostname();
              var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
              var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
              if (!absolute) updateLink(links[i]);
          }
          cssTimeout = null;
      }, 50);
  }
  function hmrDownload(asset) {
      if (asset.type === "js") {
          if (typeof document !== "undefined") {
              let script = document.createElement("script");
              script.src = asset.url + "?t=" + Date.now();
              if (asset.outputFormat === "esmodule") script.type = "module";
              return new Promise((resolve, reject)=>{
                  var _document$head;
                  script.onload = ()=>resolve(script);
                  script.onerror = reject;
                  (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
              });
          } else if (typeof importScripts === "function") {
              // Worker scripts
              if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
              else return new Promise((resolve, reject)=>{
                  try {
                      importScripts(asset.url + "?t=" + Date.now());
                      resolve();
                  } catch (err) {
                      reject(err);
                  }
              });
          }
      }
  }
  async function hmrApplyUpdates(assets) {
      global.parcelHotUpdate = Object.create(null);
      let scriptsToRemove;
      try {
          // If sourceURL comments aren't supported in eval, we need to load
          // the update from the dev server over HTTP so that stack traces
          // are correct in errors/logs. This is much slower than eval, so
          // we only do it if needed (currently just Safari).
          // https://bugs.webkit.org/show_bug.cgi?id=137297
          // This path is also taken if a CSP disallows eval.
          if (!supportsSourceURL) {
              let promises = assets.map((asset)=>{
                  var _hmrDownload;
                  return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                      // Web extension bugfix for Chromium
                      // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                      if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                          if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                              extCtx.runtime.reload();
                              return;
                          }
                          asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                          return hmrDownload(asset);
                      }
                      throw err;
                  });
              });
              scriptsToRemove = await Promise.all(promises);
          }
          assets.forEach(function(asset) {
              hmrApply(module.bundle.root, asset);
          });
      } finally{
          delete global.parcelHotUpdate;
          if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
              if (script) {
                  var _document$head2;
                  (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
              }
          });
      }
  }
  function hmrApply(bundle, asset) {
      var modules = bundle.modules;
      if (!modules) return;
      if (asset.type === "css") reloadCSS();
      else if (asset.type === "js") {
          let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
          if (deps) {
              if (modules[asset.id]) {
                  // Remove dependencies that are removed and will become orphaned.
                  // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                  let oldDeps = modules[asset.id][1];
                  for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                      let id = oldDeps[dep];
                      let parents = getParents(module.bundle.root, id);
                      if (parents.length === 1) hmrDelete(module.bundle.root, id);
                  }
              }
              if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
              // support for source maps is better with eval.
              (0, eval)(asset.output);
               // $FlowFixMe
              let fn = global.parcelHotUpdate[asset.id];
              modules[asset.id] = [
                  fn,
                  deps
              ];
          } else if (bundle.parent) hmrApply(bundle.parent, asset);
      }
  }
  function hmrDelete(bundle, id) {
      let modules = bundle.modules;
      if (!modules) return;
      if (modules[id]) {
          // Collect dependencies that will become orphaned when this module is deleted.
          let deps = modules[id][1];
          let orphans = [];
          for(let dep in deps){
              let parents = getParents(module.bundle.root, deps[dep]);
              if (parents.length === 1) orphans.push(deps[dep]);
          } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
          delete modules[id];
          delete bundle.cache[id]; // Now delete the orphans.
          orphans.forEach((id)=>{
              hmrDelete(module.bundle.root, id);
          });
      } else if (bundle.parent) hmrDelete(bundle.parent, id);
  }
  function hmrAcceptCheck(bundle, id, depsByBundle) {
      if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
       // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
      let parents = getParents(module.bundle.root, id);
      let accepted = false;
      while(parents.length > 0){
          let v = parents.shift();
          let a = hmrAcceptCheckOne(v[0], v[1], null);
          if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
          accepted = true;
          else {
              // Otherwise, queue the parents in the next level upward.
              let p = getParents(module.bundle.root, v[1]);
              if (p.length === 0) {
                  // If there are no parents, then we've reached an entry without accepting. Reload.
                  accepted = false;
                  break;
              }
              parents.push(...p);
          }
      }
      return accepted;
  }
  function hmrAcceptCheckOne(bundle, id, depsByBundle) {
      var modules = bundle.modules;
      if (!modules) return;
      if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
          // If we reached the root bundle without finding where the asset should go,
          // there's nothing to do. Mark as "accepted" so we don't reload the page.
          if (!bundle.parent) return true;
          return hmrAcceptCheck(bundle.parent, id, depsByBundle);
      }
      if (checkedAssets[id]) return true;
      checkedAssets[id] = true;
      var cached = bundle.cache[id];
      assetsToDispose.push([
          bundle,
          id
      ]);
      if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
          assetsToAccept.push([
              bundle,
              id
          ]);
          return true;
      }
  }
  function hmrDispose(bundle, id) {
      var cached = bundle.cache[id];
      bundle.hotData[id] = {};
      if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
      if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
          cb(bundle.hotData[id]);
      });
      delete bundle.cache[id];
  }
  function hmrAccept(bundle, id) {
      // Execute the module.
      bundle(id); // Run the accept callbacks in the new version of the module.
      var cached = bundle.cache[id];
      if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
          var assetsToAlsoAccept = cb(function() {
              return getParents(module.bundle.root, id);
          });
          if (assetsToAlsoAccept && assetsToAccept.length) {
              assetsToAlsoAccept.forEach(function(a) {
                  hmrDispose(a[0], a[1]);
              }); // $FlowFixMe[method-unbinding]
              assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
          }
      });
  }
  
  },{}],"bNKaB":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  var _xmtpJs = require("@xmtp/xmtp-js");
  var _ethers = require("ethers");
  var _detectProvider = require("@metamask/detect-provider");
  var _detectProviderDefault = parcelHelpers.interopDefault(_detectProvider);
  var _providers = require("@ethersproject/providers");
  var md5 = require("550b2fe03658ee0f");
  function convertTime(dateString) {
  // Create a new Date object from the dateString
  const date = new Date(dateString);
  // Get the hours and minutes from the date
  let hours = date.getHours();
  let minutes = date.getMinutes();
  // Determine whether it's AM or PM
  const ampm = hours >= 12 ? 'PM' : 'AM';
  // Convert hours to 12-hour format
  hours = hours % 12 || 12;
  // Add leading zeroes to minutes if necessary
  minutes = minutes < 10 ? '0' + minutes : minutes;
  // Combine hours, minutes, and AM/PM into a string
  const timeString = hours + ':' + minutes + ' ' + ampm;
  // Return the formatted time string
  return timeString;
  }
  
  function shortenAddress(address) {
    return address.replace(/^(.{6}).+(.{4})$/, "$1...$2");
  }
  
  function getGravatarUrlForAddress(address, size = 40, rating = "mp", defaultImage = "retro") {
    // Convert the Ethereum address to lowercase and remove the "0x" prefix
    const cleanAddress = address.toLowerCase().replace(/^0x/, "");
    
    // Hash the address using MD5
    const hash = md5(cleanAddress);
    
    // Construct the Gravatar URL with the hash and other parameters
    const baseUrl = "https://www.gravatar.com/avatar/";
    const queryString = `s=${size}&r=${rating}&d=${defaultImage}`;
    const gravatarUrl = `${baseUrl}${hash}?${queryString}`;
    
    return gravatarUrl;
  }
  
  function activateDiv(id) {
    // Get all the div elements
      var myDiv = document.getElementById('conversation-list');
    var divs = myDiv.getElementsByTagName('div');
    
    // Loop through all the divs
    for(var i = 0; i < divs.length; i++) {
      // Remove the "active" class from all the divs
      divs[i].classList.remove('bg-gray-200');
    }
    
    // Add the "bg-gray-200" class to the clicked div
    document.getElementById(id).classList.add('bg-gray-200');
  }
  
  function timeDifference(current, previous) {
  var elapsed = current - previous;
  
  if (elapsed < 0) {
      return "Invalid date";
  }
  
  var elapsedSeconds = Math.round(elapsed / 1000);
  var elapsedMinutes = Math.round(elapsed / (60 * 1000));
  var elapsedHours = Math.round(elapsed / (60 * 60 * 1000));
  var elapsedDays = Math.round(elapsed / (24 * 60 * 60 * 1000));
  var elapsedMonths = Math.round(elapsed / (30 * 24 * 60 * 60 * 1000));
  var elapsedYears = Math.round(elapsed / (365 * 24 * 60 * 60 * 1000));
  
  if (elapsedSeconds < 60) {
      return elapsedSeconds + " seconds ago";
  } else if (elapsedMinutes < 60) {
      return elapsedMinutes + " minutes ago";
  } else if (elapsedHours < 24) {
      return elapsedHours + " hours ago";
  } else if (elapsedDays < 30) {
      return elapsedDays + " days ago";
  } else if (elapsedMonths < 12) {
      return elapsedMonths + " months ago";
  } else {
      return elapsedYears + " years ago";
  }
  }
  
  
  async function runChatStart() {
     /// Get the Metamask provider
      const provider = await (0, _detectProviderDefault.default)();
      if (provider) {
          // Request access to the user's accounts
          const accounts = await provider.request({
              method: "eth_requestAccounts"
          });
          const address = accounts[0];
          // Log the user's address
          console.log(`Logged in with address: ${address}`);
  
      await window.ethereum.enable();
          const web3Provider = new (0, _providers.Web3Provider)(provider);
          const signer = web3Provider.getSigner();
  
      // Create a new XMTP client with the wallet
      const xmtp = await (0, _xmtpJs.Client).create(signer);
      // Function to start a conversation with a user
      window.startConversation = async (address)=>{
          // Create a conversation object for the given address
          const conversation = await xmtp.conversations.newConversation(address);
          // Load all existing messages in the conversation
          const messages = await conversation.messages();
          // Log the messages in the conversation
          // console.log(`Loaded ${messages.length} messages in conversation with ${address}:`);
          // messages.forEach((message)=>console.log(`[${message.senderAddress}]: ${message.content}`));
          // Return the conversation object so we can send messages later
          return conversation;
      };
      // Function to send a message in a conversation
      window.sendMessage = async (conversation, content)=>{
          // Send the message
          await conversation.send(content);
          // Log the message that was sent
          console.log(`Sent message to ${conversation.peerAddress}: ${content}`);
          // Display the message in the conversation
          const message = {
              senderAddress: address,
              content
          };
          // displayMessage(message);
      };
      window.displayConversation = async (conversation)=>{
          const conversationDiv = document.getElementById("conversation");
          conversationDiv.innerHTML = "";
          conversation.messages().then((messages)=>{
              messages.forEach((message)=>{
                      
  
                      // Example usage
                      const timeString = convertTime(message.sent.toLocaleString());
  
                  const message_box_left = `<div>
                          <div class="flex flex-col w-full items-start">
                              <div class="text-sm flex flex-col max-w-[80%] md:max-w-[50%] w-fit">
                                  <div class="flex flex-col max-w-full">
                                      <div class="whitespace-pre-wrap p-2 px-3 rounded-tl-xl rounded-tr-xl my-1 max-w-full break-words text-md pl-3 bg-gray-200 rounded-br-lg pl-2" data-testid="message-tile-text">${message.content}</div>
                                      <div class="text-xs text-gray-500 w-full flex mb-4 justify-start">${timeString}</div>
                                  </div>
                              </div>
                          </div>
                      </div>`;
  
                  const message_box_right = `<div>
                                  <div class="flex flex-col w-full items-end">
                                      <div class="text-sm flex flex-col max-w-[80%] md:max-w-[50%] w-fit">
                                          <div class="flex flex-col max-w-full">
                                              <div class="whitespace-pre-wrap p-2 px-3 rounded-tl-xl rounded-tr-xl my-1 max-w-full break-words text-md pl-3 bg-indigo-600 text-white rounded-bl-lg" data-testid="message-tile-text">${message.content}</div>
                                              <div class="text-xs text-gray-500 w-full flex mb-4 justify-end">${timeString}</div>
                                          </div>
                                      </div>
                                  </div>
                              </div>`;
  
                  if(message.senderAddress.toLowerCase() === address){
                  conversationDiv.insertAdjacentHTML('beforeend',message_box_right);
                  }else{
                  conversationDiv.insertAdjacentHTML('beforeend',message_box_left);
                  }
                      
              });
          });
      };
      window.displayMessage = async (message)=>{
          const conversationDiv = document.getElementById("conversation");
          const timeString = convertTime(message.sent.toLocaleString());
  
          const message_box_left = `<div>
                          <div class="flex flex-col w-full items-start">
                              <div class="text-sm flex flex-col max-w-[80%] md:max-w-[50%] w-fit">
                                  <div class="flex flex-col max-w-full">
                                      <div class="whitespace-pre-wrap p-2 px-3 rounded-tl-xl rounded-tr-xl my-1 max-w-full break-words text-md pl-3 bg-gray-200 rounded-br-lg pl-2" data-testid="message-tile-text">${message.content}</div>
                                      <div class="text-xs text-gray-500 w-full flex mb-4 justify-start">${timeString}</div>
                                  </div>
                              </div>
                          </div>
                      </div>`;
  
          const message_box_right = `<div>
                  <div class="flex flex-col w-full items-end">
                      <div class="text-sm flex flex-col max-w-[80%] md:max-w-[50%] w-fit">
                          <div class="flex flex-col max-w-full">
                              <div class="whitespace-pre-wrap p-2 px-3 rounded-tl-xl rounded-tr-xl my-1 max-w-full break-words text-md pl-3 bg-indigo-600 text-white rounded-bl-lg" data-testid="message-tile-text">${message.content}</div>
                              <div class="text-xs text-gray-500 w-full flex mb-4 justify-end">${timeString}</div>
                          </div>
                      </div>
                  </div>
              </div>`;
              if(message.senderAddress.toLowerCase() === address){
              conversationDiv.insertAdjacentHTML('beforeend',message_box_right);
              }else{
              conversationDiv.insertAdjacentHTML('beforeend',message_box_left);
              }
      };
  
      window.showConversationList = async (address)=>{
          // Get all existing conversations for the user
          const conversations = await xmtp.conversations.list();
          if(conversations.length <= 0){
              document.getElementById("conversation-list").style.display = 'none';
              document.getElementById("blank-list").style.display = 'flex';
          }else{
          document.getElementById("conversation-list").style.display = 'flex';
          document.getElementById("blank-list").style.display = 'none';
          const conversationList = document.getElementById("conversation-list");
          conversationList.innerHTML = "";     
          var datashow = true;
          // Display each conversation in the list
          conversations.forEach(async (conversation)=>{
          const opts = {
              // Only show messages from last 24 hours
              limit: 1,
              startTime: new Date(new Date().setDate(new Date().getDate() - 1)),
              endTime: new Date(),
          }
          const messagesInConversation = await conversation.messages();
              // if(datashow && conversation.peerAddress.toLowerCase() !== address){
              //     loadMessage(conversation.peerAddress);
              //     datashow = false;
              // }
              if((messagesInConversation.length > 0) && (conversation.peerAddress.toLowerCase() !== address)){
              const recentComingMsg = messagesInConversation[messagesInConversation.length -1];
              // Get the current date and time
              var currentDate = new Date();
              // Set the previous date to 10 days ago
              var previousDate = new Date(recentComingMsg.sent);
              // Calculate the time difference
              var timeDiff = timeDifference(currentDate, previousDate);
  
              const message_list_ui = `<div class="flex justify-between items-center border-0 border-b border-gray-200 outline-blue outline-b-0 h-min cursor-pointer bg-gray-100 p-4" tabindex="0" onclick="loadMessage('${conversation.peerAddress}')" id="${conversation.peerAddress}">
                                      <div data-testid="avatar"><img src="${getGravatarUrlForAddress(conversation.peerAddress)}" alt="hello" class="rounded-full" width="40" height="40"></div>
                                      <div class="flex flex-col items-start w-3/4 ml-3"><span class="text-md font-bold">${shortenAddress(conversation.peerAddress)}</span><span class="text-md text-gray-600 line-clamp-1 w-full break-all">${recentComingMsg.content}</span></div>
                                      <div class="text-xs text-gray-600 w-1/3 text-right ml-4 h-full">${timeDiff}</div>
                                  </div>`;
              conversationList.insertAdjacentHTML('beforeend',message_list_ui);
              }
          });
      }
      };
      window.loadMessage = async (address)=>{
              
              const conversation = await startConversation(address);
              document.getElementById('recipient-wallet-address').innerHTML = address;
              document.getElementById("peer_avatar").src = getGravatarUrlForAddress(address);
              document.getElementById("show-peer-msg-panel").style.display = 'flex';
              document.getElementById("show-blank-msg-panel").style.display = 'none';
              document.getElementById("no-msg-panel").style.display = 'none';
              activateDiv(address);
              // Display the conversation
              displayConversation(conversation);
              // Handle form submission to send a message
  
              const sendMessageForm = document.getElementById("send-message-form");
              sendMessageForm.addEventListener("click", async (event)=>{
                  event.preventDefault();
                  const messageInput = document.getElementById("message-input");
                  const content = messageInput.value.trim();
                  if (content) {
                      await sendMessage(conversation, content);
                      messageInput.value = "";
                  }
              });
              // Listen for new messages in the conversation
              for await (const message of (await conversation.streamMessages()))// Display the new message
              displayMessage(message);
      }
  
      // Log in with Metamask
      async function loginWithMetamask() {
          if (provider) {
              // Request access to the user's accounts
              const accounts = await provider.request({
                  method: "eth_requestAccounts"
              });
              const address = accounts[0];
              // Log the user's address
              console.log(`Logged in with address: ${address}`);
              // Display the conversation list
              await showConversationList(address);
              
              // // Start a conversation with the other user
            
          } else console.error("Please install Metamask to use this website");
      }
      loginWithMetamask();
      }
  }
  runChatStart();
  
  },{"@metamask/detect-provider":"2q4tK","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ","@xmtp/xmtp-js":"4pH5C","550b2fe03658ee0f":"jZ5V0","@ethersproject/providers":"bErvj","ethers":"hdHML"}],"2q4tK":[function(require,module,exports) {
  "use strict";
  /**
   * Returns a Promise that resolves to the value of window.ethereum if it is
   * set within the given timeout, or null.
   * The Promise will not reject, but an error will be thrown if invalid options
   * are provided.
   *
   * @param options - Options bag.
   * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.
   * Default: false
   * @param options.silent - Whether to silence console errors. Does not affect
   * thrown errors. Default: false
   * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to
   * be dispatched. Default: 3000
   * @returns A Promise that resolves with the Provider if it is detected within
   * given timeout, otherwise null.
   */ function detectEthereumProvider({ mustBeMetaMask =false , silent =false , timeout =3000  } = {}) {
      _validateInputs();
      let handled = false;
      return new Promise((resolve)=>{
          if (window.ethereum) handleEthereum();
          else {
              window.addEventListener("ethereum#initialized", handleEthereum, {
                  once: true
              });
              setTimeout(()=>{
                  handleEthereum();
              }, timeout);
          }
          function handleEthereum() {
              if (handled) return;
              handled = true;
              window.removeEventListener("ethereum#initialized", handleEthereum);
              const { ethereum  } = window;
              if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) resolve(ethereum);
              else {
                  const message = mustBeMetaMask && ethereum ? "Non-MetaMask window.ethereum detected." : "Unable to detect window.ethereum.";
                  !silent && console.error("@metamask/detect-provider:", message);
                  resolve(null);
              }
          }
      });
      function _validateInputs() {
          if (typeof mustBeMetaMask !== "boolean") throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);
          if (typeof silent !== "boolean") throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);
          if (typeof timeout !== "number") throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);
      }
  }
  module.exports = detectEthereumProvider;
  
  },{}],"939WJ":[function(require,module,exports) {
  exports.interopDefault = function(a) {
      return a && a.__esModule ? a : {
          default: a
      };
  };
  exports.defineInteropFlag = function(a) {
      Object.defineProperty(a, "__esModule", {
          value: true
      });
  };
  exports.exportAll = function(source, dest) {
      Object.keys(source).forEach(function(key) {
          if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
          Object.defineProperty(dest, key, {
              enumerable: true,
              get: function() {
                  return source[key];
              }
          });
      });
      return dest;
  };
  exports.export = function(dest, destName, get) {
      Object.defineProperty(dest, destName, {
          enumerable: true,
          get: get
      });
  };
  
  },{}],"4pH5C":[function(require,module,exports) {
  /*! For license information please see index.js.LICENSE.txt */ var process = require("32064c8a22df57b8");
  var Buffer = require("af17ac17e10eb3cb").Buffer;
  !function(e, t) {
      module.exports = t();
  }(this, function() {
      return (()=>{
          var __webpack_modules__ = {
              9656: function(e, t, r) {
                  "use strict";
                  var n = this && this.__importDefault || function(e) {
                      return e && e.__esModule ? e : {
                          default: e
                      };
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.utils = t.schnorr = t.verify = t.signSync = t.sign = t.getSharedSecret = t.recoverPublicKey = t.getPublicKey = t.Signature = t.Point = t.CURVE = void 0;
                  const i = n(r(9159)), o = BigInt(0), s = BigInt(1), a = BigInt(2), l = BigInt(3), u = BigInt(8), c = a ** BigInt(256), d = {
                      a: o,
                      b: BigInt(7),
                      P: c - a ** BigInt(32) - BigInt(977),
                      n: c - BigInt("432420386565659656852420866394968145599"),
                      h: s,
                      Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
                      Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
                      beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")
                  };
                  function h(e) {
                      const { a: t , b: r  } = d, n = O(e * e), i = O(n * e);
                      return O(i + t * e + r);
                  }
                  t.CURVE = d;
                  const f = d.a === o;
                  class p {
                      constructor(e, t, r){
                          this.x = e, this.y = t, this.z = r;
                      }
                      static fromAffine(e) {
                          if (!(e instanceof y)) throw new TypeError("JacobianPoint#fromAffine: expected Point");
                          return new p(e.x, e.y, s);
                      }
                      static toAffineBatch(e) {
                          const t = function(e, t = d.P) {
                              const r = e.length, n = new Array(r);
                              let i = s;
                              for(let s = 0; s < r; s++)e[s] !== o && (n[s] = i, i = O(i * e[s], t));
                              i = I(i, t);
                              for(let s = r - 1; s >= 0; s--){
                                  if (e[s] === o) continue;
                                  const r = O(i * e[s], t);
                                  e[s] = O(i * n[s], t), i = r;
                              }
                              return e;
                          }(e.map((e)=>e.z));
                          return e.map((e, r)=>e.toAffine(t[r]));
                      }
                      static normalizeZ(e) {
                          return p.toAffineBatch(e).map(p.fromAffine);
                      }
                      equals(e) {
                          const t = this, r = e, n = O(t.z * t.z), i = O(t.z * n), o = O(r.z * r.z), s = O(r.z * o);
                          return O(t.x * o) === O(n * r.x) && O(t.y * s) === O(i * r.y);
                      }
                      negate() {
                          return new p(this.x, O(-this.y), this.z);
                      }
                      double() {
                          const e = this.x, t = this.y, r = this.z, n = O(e ** a), i = O(t ** a), o = O(i ** a), s = O(a * (O(O((e + i) ** a)) - n - o)), c = O(l * n), d = O(c ** a), h = O(d - a * s), f = O(c * (s - h) - u * o), m = O(a * t * r);
                          return new p(h, f, m);
                      }
                      add(e) {
                          if (!(e instanceof p)) throw new TypeError("JacobianPoint#add: expected JacobianPoint");
                          const t = this.x, r = this.y, n = this.z, i = e.x, s = e.y, l = e.z;
                          if (i === o || s === o) return this;
                          if (t === o || r === o) return e;
                          const u = O(n ** a), c = O(l ** a), d = O(t * c), h = O(i * u), f = O(r * l * c), m = O(O(s * n) * u), y = O(h - d), g = O(m - f);
                          if (y === o) return g === o ? this.double() : p.ZERO;
                          const v = O(y ** a), b = O(y * v), w = O(d * v), _ = O(g ** a - b - a * w), S = O(g * (w - _) - f * b), E = O(n * l * y);
                          return new p(_, S, E);
                      }
                      subtract(e) {
                          return this.add(e.negate());
                      }
                      multiplyUnsafe(e) {
                          let t = R(e);
                          if (!f) {
                              let e = p.ZERO, r = this;
                              for(; t > o;)t & s && (e = e.add(r)), r = r.double(), t >>= s;
                              return e;
                          }
                          let { k1neg: r , k1: n , k2neg: i , k2: a  } = K(t), l = p.ZERO, u = p.ZERO, c = this;
                          for(; n > o || a > o;)n & s && (l = l.add(c)), a & s && (u = u.add(c)), c = c.double(), n >>= s, a >>= s;
                          return r && (l = l.negate()), i && (u = u.negate()), u = new p(O(u.x * d.beta), u.y, u.z), l.add(u);
                      }
                      precomputeWindow(e) {
                          const t = f ? 128 / e + 1 : 256 / e + 1, r = [];
                          let n = this, i = n;
                          for(let o = 0; o < t; o++){
                              i = n, r.push(i);
                              for(let t = 1; t < 2 ** (e - 1); t++)i = i.add(n), r.push(i);
                              n = i.double();
                          }
                          return r;
                      }
                      wNAF(e, t) {
                          !t && this.equals(p.BASE) && (t = y.BASE);
                          const r = t && t._WINDOW_SIZE || 1;
                          if (256 % r) throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");
                          let n = t && m.get(t);
                          n || (n = this.precomputeWindow(r), t && 1 !== r && (n = p.normalizeZ(n), m.set(t, n)));
                          let i = p.ZERO, o = p.ZERO;
                          const a = f ? 128 / r + 1 : 256 / r + 1, l = 2 ** (r - 1), u = BigInt(2 ** r - 1), c = 2 ** r, d = BigInt(r);
                          for(let t = 0; t < a; t++){
                              const r = t * l;
                              let a = Number(e & u);
                              if (e >>= d, a > l && (a -= c, e += s), 0 === a) {
                                  let e = n[r];
                                  t % 2 && (e = e.negate()), o = o.add(e);
                              } else {
                                  let e = n[r + Math.abs(a) - 1];
                                  a < 0 && (e = e.negate()), i = i.add(e);
                              }
                          }
                          return {
                              p: i,
                              f: o
                          };
                      }
                      multiply(e, t) {
                          let r, n, i = R(e);
                          if (f) {
                              let { k1neg: e , k1: o , k2neg: s , k2: a  } = K(i), { p: l , f: u  } = this.wNAF(o, t), { p: c , f: h  } = this.wNAF(a, t);
                              e && (l = l.negate()), s && (c = c.negate()), c = new p(O(c.x * d.beta), c.y, c.z), r = l.add(c), n = u.add(h);
                          } else {
                              let { p: e , f: o  } = this.wNAF(i, t);
                              r = e, n = o;
                          }
                          return p.normalizeZ([
                              r,
                              n
                          ])[0];
                      }
                      toAffine(e = I(this.z)) {
                          const t = e ** a, r = O(this.x * t), n = O(this.y * t * e);
                          return new y(r, n);
                      }
                  }
                  p.BASE = new p(d.Gx, d.Gy, s), p.ZERO = new p(o, s, o);
                  const m = new WeakMap;
                  class y {
                      constructor(e, t){
                          this.x = e, this.y = t;
                      }
                      _setWindowSize(e) {
                          this._WINDOW_SIZE = e, m.delete(this);
                      }
                      static fromCompressedHex(e) {
                          const t = 32 === e.length, r = x(t ? e : e.slice(1));
                          if (!L(r)) throw new Error("Point is not on curve");
                          let n = function(e) {
                              const { P: t  } = d, r = BigInt(6), n = BigInt(11), i = BigInt(22), o = BigInt(23), s = BigInt(44), u = BigInt(88), c = e * e * e % t, h = c * c * e % t, f = B(h, l) * h % t, p = B(f, l) * h % t, m = B(p, a) * c % t, y = B(m, n) * m % t, g = B(y, i) * y % t, v = B(g, s) * g % t, b = B(v, u) * v % t, w = B(b, s) * g % t, _ = B(w, l) * h % t, S = B(_, o) * y % t, E = B(S, r) * c % t;
                              return B(E, a);
                          }(h(r));
                          const i = (n & s) === s;
                          t ? i && (n = O(-n)) : 1 == (1 & e[0]) !== i && (n = O(-n));
                          const o = new y(r, n);
                          return o.assertValidity(), o;
                      }
                      static fromUncompressedHex(e) {
                          const t = x(e.slice(1, 33)), r = x(e.slice(33)), n = new y(t, r);
                          return n.assertValidity(), n;
                      }
                      static fromHex(e) {
                          const t = T(e), r = t[0];
                          if (32 === t.length || 33 === t.length && (2 === r || 3 === r)) return this.fromCompressedHex(t);
                          if (65 === t.length && 4 === r) return this.fromUncompressedHex(t);
                          throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${t.length}`);
                      }
                      static fromPrivateKey(e) {
                          return y.BASE.multiply(z(e));
                      }
                      static fromSignature(e, t, r) {
                          const n = U(e = T(e)), { r: i , s  } = W(t);
                          if (0 !== r && 1 !== r) throw new Error("Cannot recover signature: invalid recovery bit");
                          if (n === o) throw new Error("Cannot recover signature: msgHash cannot be 0");
                          const a = 2 + (1 & r), l = y.fromHex(`0${a}${k(i)}`), u = p.fromAffine(l).multiplyUnsafe(s), c = p.BASE.multiply(n), h = I(i, d.n), f = u.subtract(c).multiplyUnsafe(h).toAffine();
                          return f.assertValidity(), f;
                      }
                      toRawBytes(e = !1) {
                          return C(this.toHex(e));
                      }
                      toHex(e = !1) {
                          const t = k(this.x);
                          return e ? `${this.y & s ? "03" : "02"}${t}` : `04${t}${k(this.y)}`;
                      }
                      toHexX() {
                          return this.toHex(!0).slice(2);
                      }
                      toRawX() {
                          return this.toRawBytes(!0).slice(1);
                      }
                      assertValidity() {
                          const e = "Point is not on elliptic curve", { x: t , y: r  } = this;
                          if (!L(t) || !L(r)) throw new Error(e);
                          const n = O(r * r);
                          if (O(n - h(t)) !== o) throw new Error(e);
                      }
                      equals(e) {
                          return this.x === e.x && this.y === e.y;
                      }
                      negate() {
                          return new y(this.x, O(-this.y));
                      }
                      double() {
                          return p.fromAffine(this).double().toAffine();
                      }
                      add(e) {
                          return p.fromAffine(this).add(p.fromAffine(e)).toAffine();
                      }
                      subtract(e) {
                          return this.add(e.negate());
                      }
                      multiply(e) {
                          return p.fromAffine(this).multiply(e, this).toAffine();
                      }
                  }
                  function g(e) {
                      return Number.parseInt(e[0], 16) >= 8 ? "00" + e : e;
                  }
                  function v(e) {
                      if (e.length < 2 || 2 !== e[0]) throw new Error(`Invalid signature integer tag: ${E(e)}`);
                      const t = e[1], r = e.subarray(2, t + 2);
                      if (!t || r.length !== t) throw new Error("Invalid signature integer: wrong length");
                      if (0 === r[0] && r[1] <= 127) throw new Error("Invalid signature integer: trailing length");
                      return {
                          data: x(r),
                          left: e.subarray(t + 2)
                      };
                  }
                  t.Point = y, y.BASE = new y(d.Gx, d.Gy), y.ZERO = new y(o, o);
                  class b {
                      constructor(e, t){
                          this.r = e, this.s = t, this.assertValidity();
                      }
                      static fromCompact(e) {
                          const t = _(e), r = "Signature.fromCompact";
                          if ("string" != typeof e && !t) throw new TypeError(`${r}: Expected string or Uint8Array`);
                          const n = t ? E(e) : e;
                          if (128 !== n.length) throw new Error(`${r}: Expected 64-byte hex`);
                          return new b(N(n.slice(0, 64)), N(n.slice(64, 128)));
                      }
                      static fromDER(e) {
                          const t = _(e);
                          if ("string" != typeof e && !t) throw new TypeError("Signature.fromDER: Expected string or Uint8Array");
                          const { r , s: n  } = function(e) {
                              if (e.length < 2 || 48 != e[0]) throw new Error(`Invalid signature tag: ${E(e)}`);
                              if (e[1] !== e.length - 2) throw new Error("Invalid signature: incorrect length");
                              const { data: t , left: r  } = v(e.subarray(2)), { data: n , left: i  } = v(r);
                              if (i.length) throw new Error(`Invalid signature: left bytes after parsing: ${E(i)}`);
                              return {
                                  r: t,
                                  s: n
                              };
                          }(t ? e : C(e));
                          return new b(r, n);
                      }
                      static fromHex(e) {
                          return this.fromDER(e);
                      }
                      assertValidity() {
                          const { r: e , s: t  } = this;
                          if (!j(e)) throw new Error("Invalid Signature: r must be 0 < r < n");
                          if (!j(t)) throw new Error("Invalid Signature: s must be 0 < s < n");
                      }
                      hasHighS() {
                          const e = d.n >> s;
                          return this.s > e;
                      }
                      normalizeS() {
                          return this.hasHighS() ? new b(this.r, d.n - this.s) : this;
                      }
                      toDERRawBytes(e = !1) {
                          return C(this.toDERHex(e));
                      }
                      toDERHex(e = !1) {
                          const t = g(P(this.s));
                          if (e) return t;
                          const r = g(P(this.r)), n = P(r.length / 2), i = P(t.length / 2);
                          return `30${P(r.length / 2 + t.length / 2 + 4)}02${n}${r}02${i}${t}`;
                      }
                      toRawBytes() {
                          return this.toDERRawBytes();
                      }
                      toHex() {
                          return this.toDERHex();
                      }
                      toCompactRawBytes() {
                          return C(this.toCompactHex());
                      }
                      toCompactHex() {
                          return k(this.r) + k(this.s);
                      }
                  }
                  function w(...e) {
                      if (!e.every(_)) throw new Error("Uint8Array list expected");
                      if (1 === e.length) return e[0];
                      const t = e.reduce((e, t)=>e + t.length, 0), r = new Uint8Array(t);
                      for(let t = 0, n = 0; t < e.length; t++){
                          const i = e[t];
                          r.set(i, n), n += i.length;
                      }
                      return r;
                  }
                  function _(e) {
                      return e instanceof Uint8Array;
                  }
                  t.Signature = b;
                  const S = Array.from({
                      length: 256
                  }, (e, t)=>t.toString(16).padStart(2, "0"));
                  function E(e) {
                      if (!(e instanceof Uint8Array)) throw new Error("Expected Uint8Array");
                      let t = "";
                      for(let r = 0; r < e.length; r++)t += S[e[r]];
                      return t;
                  }
                  function k(e) {
                      if (e > c) throw new Error("Expected number < 2^256");
                      return e.toString(16).padStart(64, "0");
                  }
                  function A(e) {
                      return C(k(e));
                  }
                  function P(e) {
                      const t = e.toString(16);
                      return 1 & t.length ? `0${t}` : t;
                  }
                  function N(e) {
                      if ("string" != typeof e) throw new TypeError("hexToNumber: expected string, got " + typeof e);
                      return BigInt(`0x${e}`);
                  }
                  function C(e) {
                      if ("string" != typeof e) throw new TypeError("hexToBytes: expected string, got " + typeof e);
                      if (e.length % 2) throw new Error("hexToBytes: received invalid unpadded hex" + e.length);
                      const t = new Uint8Array(e.length / 2);
                      for(let r = 0; r < t.length; r++){
                          const n = 2 * r, i = e.slice(n, n + 2), o = Number.parseInt(i, 16);
                          if (Number.isNaN(o) || o < 0) throw new Error("Invalid byte sequence");
                          t[r] = o;
                      }
                      return t;
                  }
                  function x(e) {
                      return N(E(e));
                  }
                  function T(e) {
                      return e instanceof Uint8Array ? Uint8Array.from(e) : C(e);
                  }
                  function R(e) {
                      if ("number" == typeof e && Number.isSafeInteger(e) && e > 0) return BigInt(e);
                      if ("bigint" == typeof e && j(e)) return e;
                      throw new TypeError("Expected valid private scalar: 0 < scalar < curve.n");
                  }
                  function O(e, t = d.P) {
                      const r = e % t;
                      return r >= 0 ? r : t + r;
                  }
                  function B(e, t) {
                      const { P: r  } = d;
                      let n = e;
                      for(; t-- > o;)n *= n, n %= r;
                      return n;
                  }
                  function I(e, t = d.P) {
                      if (e === o || t <= o) throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);
                      let r = O(e, t), n = t, i = o, a = s, l = s, u = o;
                      for(; r !== o;){
                          const e = n / r, t = n % r, o = i - l * e, s = a - u * e;
                          n = r, r = t, i = l, a = u, l = o, u = s;
                      }
                      if (n !== s) throw new Error("invert: does not exist");
                      return O(i, t);
                  }
                  const M = (e, t)=>(e + t / a) / t, D = a ** BigInt(128);
                  function K(e) {
                      const { n: t  } = d, r = BigInt("0x3086d221a7d46bcde86c90e49284eb15"), n = -s * BigInt("0xe4437ed6010e88286f547fa90abfe4c3"), i = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), o = r, a = M(o * e, t), l = M(-n * e, t);
                      let u = O(e - a * r - l * i, t), c = O(-a * n - l * o, t);
                      const h = u > D, f = c > D;
                      if (h && (u = t - u), f && (c = t - c), u > D || c > D) throw new Error("splitScalarEndo: Endomorphism failed");
                      return {
                          k1neg: h,
                          k1: u,
                          k2neg: f,
                          k2: c
                      };
                  }
                  function U(e) {
                      const { n: t  } = d, r = 8 * e.length - 256;
                      let n = x(e);
                      return r > 0 && (n >>= BigInt(r)), n >= t && (n -= t), n;
                  }
                  class F {
                      constructor(){
                          this.v = new Uint8Array(32).fill(1), this.k = new Uint8Array(32).fill(0), this.counter = 0;
                      }
                      hmac(...e) {
                          return t.utils.hmacSha256(this.k, ...e);
                      }
                      hmacSync(...e) {
                          if ("function" != typeof t.utils.hmacSha256Sync) throw new Error("utils.hmacSha256Sync is undefined, you need to set it");
                          const r = t.utils.hmacSha256Sync(this.k, ...e);
                          if (r instanceof Promise) throw new Error("To use sync sign(), ensure utils.hmacSha256 is sync");
                          return r;
                      }
                      incr() {
                          if (this.counter >= 1e3) throw new Error("Tried 1,000 k values for sign(), all were invalid");
                          this.counter += 1;
                      }
                      async reseed(e = new Uint8Array) {
                          this.k = await this.hmac(this.v, Uint8Array.from([
                              0
                          ]), e), this.v = await this.hmac(this.v), 0 !== e.length && (this.k = await this.hmac(this.v, Uint8Array.from([
                              1
                          ]), e), this.v = await this.hmac(this.v));
                      }
                      reseedSync(e = new Uint8Array) {
                          this.k = this.hmacSync(this.v, Uint8Array.from([
                              0
                          ]), e), this.v = this.hmacSync(this.v), 0 !== e.length && (this.k = this.hmacSync(this.v, Uint8Array.from([
                              1
                          ]), e), this.v = this.hmacSync(this.v));
                      }
                      async generate() {
                          return this.incr(), this.v = await this.hmac(this.v), this.v;
                      }
                      generateSync() {
                          return this.incr(), this.v = this.hmacSync(this.v), this.v;
                      }
                  }
                  function j(e) {
                      return o < e && e < d.n;
                  }
                  function L(e) {
                      return o < e && e < d.P;
                  }
                  function q(e, t, r) {
                      const n = x(e);
                      if (!j(n)) return;
                      const { n: i  } = d, a = y.BASE.multiply(n), l = O(a.x, i);
                      if (l === o) return;
                      const u = O(I(n, i) * O(t + r * l, i), i);
                      if (u === o) return;
                      const c = new b(l, u);
                      return {
                          sig: c,
                          recovery: (a.x === c.r ? 0 : 2) | Number(a.y & s)
                      };
                  }
                  function z(e) {
                      let t;
                      if ("bigint" == typeof e) t = e;
                      else if ("number" == typeof e && Number.isSafeInteger(e) && e > 0) t = BigInt(e);
                      else if ("string" == typeof e) {
                          if (64 !== e.length) throw new Error("Expected 32 bytes of private key");
                          t = N(e);
                      } else {
                          if (!_(e)) throw new TypeError("Expected valid private key");
                          if (32 !== e.length) throw new Error("Expected 32 bytes of private key");
                          t = x(e);
                      }
                      if (!j(t)) throw new Error("Expected private key: 0 < key < n");
                      return t;
                  }
                  function V(e) {
                      return e instanceof y ? (e.assertValidity(), e) : y.fromHex(e);
                  }
                  function W(e) {
                      if (e instanceof b) return e.assertValidity(), e;
                      try {
                          return b.fromDER(e);
                      } catch (t) {
                          return b.fromCompact(e);
                      }
                  }
                  function G(e) {
                      const t = _(e), r = "string" == typeof e, n = (t || r) && e.length;
                      return t ? 33 === n || 65 === n : r ? 66 === n || 130 === n : e instanceof y;
                  }
                  function J(e) {
                      return x(e.length > 32 ? e.slice(0, 32) : e);
                  }
                  function H(e) {
                      const t = J(e), r = O(t, d.n);
                      return $(r < o ? t : r);
                  }
                  function $(e) {
                      if ("bigint" != typeof e) throw new Error("Expected bigint");
                      return C(k(e));
                  }
                  function Z(e, r, n) {
                      if (null == e) throw new Error(`sign: expected valid message hash, not "${e}"`);
                      const i = T(e), o = z(r), s = [
                          $(o),
                          H(i)
                      ];
                      if (null != n) {
                          !0 === n && (n = t.utils.randomBytes(32));
                          const e = T(n);
                          if (32 !== e.length) throw new Error("sign: Expected 32 bytes of extra data");
                          s.push(e);
                      }
                      return {
                          seed: w(...s),
                          m: J(i),
                          d: o
                      };
                  }
                  function X(e, t) {
                      let { sig: r , recovery: n  } = e;
                      const { canonical: i , der: o , recovered: s  } = Object.assign({
                          canonical: !0,
                          der: !0
                      }, t);
                      i && r.hasHighS() && (r = r.normalizeS(), n ^= 1);
                      const a = o ? r.toDERRawBytes() : r.toCompactRawBytes();
                      return s ? [
                          a,
                          n
                      ] : a;
                  }
                  t.getPublicKey = function(e, t = !1) {
                      return y.fromPrivateKey(e).toRawBytes(t);
                  }, t.recoverPublicKey = function(e, t, r) {
                      return y.fromSignature(e, t, r).toRawBytes();
                  }, t.getSharedSecret = function(e, t, r = !1) {
                      if (G(e)) throw new TypeError("getSharedSecret: first arg must be private key");
                      if (!G(t)) throw new TypeError("getSharedSecret: second arg must be public key");
                      const n = V(t);
                      return n.assertValidity(), n.multiply(z(e)).toRawBytes(r);
                  }, t.sign = async function(e, t, r = {}) {
                      const { seed: n , m: i , d: o  } = Z(e, t, r.extraEntropy);
                      let s;
                      const a = new F;
                      for(await a.reseed(n); !(s = q(await a.generate(), i, o));)await a.reseed();
                      return X(s, r);
                  }, t.signSync = function(e, t, r = {}) {
                      const { seed: n , m: i , d: o  } = Z(e, t, r.extraEntropy);
                      let s;
                      const a = new F;
                      for(a.reseedSync(n); !(s = q(a.generateSync(), i, o));)a.reseedSync();
                      return X(s, r);
                  };
                  const Q = {
                      strict: !0
                  };
                  async function Y(e, ...r) {
                      const n = new Uint8Array(e.split("").map((e)=>e.charCodeAt(0))), i = await t.utils.sha256(n);
                      return x(await t.utils.sha256(w(i, i, ...r)));
                  }
                  async function ee(e, t, r) {
                      const n = A(e);
                      return O(await Y("BIP0340/challenge", n, t.toRawX(), r), d.n);
                  }
                  function te(e) {
                      return O(e.y, a) === o;
                  }
                  t.verify = function(e, t, r, n = Q) {
                      let i;
                      try {
                          i = W(e), t = T(t);
                      } catch (e) {
                          return !1;
                      }
                      const { r: s , s: a  } = i;
                      if (n.strict && i.hasHighS()) return !1;
                      const l = U(t);
                      if (l === o) return !1;
                      let u;
                      try {
                          u = p.fromAffine(V(r));
                      } catch (e) {
                          return !1;
                      }
                      const { n: c  } = d, h = I(a, c), f = O(l * h, c), m = O(s * h, c), y = p.BASE.multiply(f), g = u.multiplyUnsafe(m);
                      return O(y.add(g).toAffine().x, c) === s;
                  };
                  class re {
                      constructor(e, t){
                          if (this.r = e, this.s = t, !L(e) || !j(t)) throw new Error("Invalid signature");
                      }
                      static fromHex(e) {
                          const t = T(e);
                          if (64 !== t.length) throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${t.length}`);
                          const r = x(t.slice(0, 32)), n = x(t.slice(32, 64));
                          return new re(r, n);
                      }
                      toHex() {
                          return k(this.r) + k(this.s);
                      }
                      toRawBytes() {
                          return C(this.toHex());
                      }
                  }
                  async function ne(e, t, r) {
                      const n = e instanceof re ? e : re.fromHex(e), i = T(t), o = V(r), s = await ee(n.r, o, i), a = y.fromPrivateKey(n.s), l = o.multiply(s), u = a.subtract(l);
                      return !(u.equals(y.BASE) || !te(u) || u.x !== n.r);
                  }
                  t.schnorr = {
                      Signature: re,
                      getPublicKey: function(e) {
                          return y.fromPrivateKey(e).toRawX();
                      },
                      sign: async function(e, r, n = t.utils.randomBytes()) {
                          if (null == e) throw new TypeError(`sign: Expected valid message, not "${e}"`);
                          const { n: i  } = d, s = T(e), a = z(r), l = T(n);
                          if (32 !== l.length) throw new TypeError("sign: Expected 32 bytes of aux randomness");
                          const u = y.fromPrivateKey(a), c = te(u) ? a : i - a, h = c ^ await Y("BIP0340/aux", l), f = O(await Y("BIP0340/nonce", A(h), u.toRawX(), s), i);
                          if (f === o) throw new Error("sign: Creation of signature failed. k is zero");
                          const p = y.fromPrivateKey(f), m = te(p) ? f : i - f, g = await ee(p.x, u, s), v = new re(p.x, O(m + g * c, i));
                          if (!await ne(v.toRawBytes(), s, u.toRawX())) throw new Error("sign: Invalid signature produced");
                          return v.toRawBytes();
                      },
                      verify: ne
                  }, y.BASE._setWindowSize(8);
                  const ie = {
                      node: i.default,
                      web: "object" == typeof self && "crypto" in self ? self.crypto : void 0
                  };
                  t.utils = {
                      isValidPrivateKey (e) {
                          try {
                              return z(e), !0;
                          } catch (e) {
                              return !1;
                          }
                      },
                      randomBytes: (e = 32)=>{
                          if (ie.web) return ie.web.getRandomValues(new Uint8Array(e));
                          if (ie.node) {
                              const { randomBytes: t  } = ie.node;
                              return Uint8Array.from(t(e));
                          }
                          throw new Error("The environment doesn't have randomBytes function");
                      },
                      randomPrivateKey: ()=>{
                          let e = 8;
                          for(; e--;){
                              const e = t.utils.randomBytes(32), r = x(e);
                              if (j(r) && r !== s) return e;
                          }
                          throw new Error("Valid private key was not found in 8 iterations. PRNG is broken");
                      },
                      bytesToHex: E,
                      mod: O,
                      sha256: async (e)=>{
                          if (ie.web) {
                              const t = await ie.web.subtle.digest("SHA-256", e.buffer);
                              return new Uint8Array(t);
                          }
                          if (ie.node) {
                              const { createHash: t  } = ie.node;
                              return Uint8Array.from(t("sha256").update(e).digest());
                          }
                          throw new Error("The environment doesn't have sha256 function");
                      },
                      hmacSha256: async (e, ...t)=>{
                          if (ie.web) {
                              const r = await ie.web.subtle.importKey("raw", e, {
                                  name: "HMAC",
                                  hash: {
                                      name: "SHA-256"
                                  }
                              }, !1, [
                                  "sign"
                              ]), n = w(...t), i = await ie.web.subtle.sign("HMAC", r, n);
                              return new Uint8Array(i);
                          }
                          if (ie.node) {
                              const { createHmac: r  } = ie.node, n = r("sha256", e);
                              return t.forEach((e)=>n.update(e)), Uint8Array.from(n.digest());
                          }
                          throw new Error("The environment doesn't have hmac-sha256 function");
                      },
                      sha256Sync: void 0,
                      hmacSha256Sync: void 0,
                      precompute (e = 8, t = y.BASE) {
                          const r = t === y.BASE ? t : new y(t.x, t.y);
                          return r._setWindowSize(e), r.multiply(l), r;
                      }
                  };
              },
              4537: (e)=>{
                  "use strict";
                  e.exports = function(e, t) {
                      for(var r = new Array(arguments.length - 1), n = 0, i = 2, o = !0; i < arguments.length;)r[n++] = arguments[i++];
                      return new Promise(function(i, s) {
                          r[n] = function(e) {
                              if (o) {
                                  if (o = !1, e) s(e);
                                  else {
                                      for(var t = new Array(arguments.length - 1), r = 0; r < t.length;)t[r++] = arguments[r];
                                      i.apply(null, t);
                                  }
                              }
                          };
                          try {
                              e.apply(t || null, r);
                          } catch (e) {
                              o && (o = !1, s(e));
                          }
                      });
                  };
              },
              7419: (e, t)=>{
                  "use strict";
                  var r = t;
                  r.length = function(e) {
                      var t = e.length;
                      if (!t) return 0;
                      for(var r = 0; --t % 4 > 1 && "=" === e.charAt(t);)++r;
                      return Math.ceil(3 * e.length) / 4 - r;
                  };
                  for(var n = new Array(64), i = new Array(123), o = 0; o < 64;)i[n[o] = o < 26 ? o + 65 : o < 52 ? o + 71 : o < 62 ? o - 4 : o - 59 | 43] = o++;
                  r.encode = function(e, t, r) {
                      for(var i, o = null, s = [], a = 0, l = 0; t < r;){
                          var u = e[t++];
                          switch(l){
                              case 0:
                                  s[a++] = n[u >> 2], i = (3 & u) << 4, l = 1;
                                  break;
                              case 1:
                                  s[a++] = n[i | u >> 4], i = (15 & u) << 2, l = 2;
                                  break;
                              case 2:
                                  s[a++] = n[i | u >> 6], s[a++] = n[63 & u], l = 0;
                          }
                          a > 8191 && ((o || (o = [])).push(String.fromCharCode.apply(String, s)), a = 0);
                      }
                      return l && (s[a++] = n[i], s[a++] = 61, 1 === l && (s[a++] = 61)), o ? (a && o.push(String.fromCharCode.apply(String, s.slice(0, a))), o.join("")) : String.fromCharCode.apply(String, s.slice(0, a));
                  };
                  var s = "invalid encoding";
                  r.decode = function(e, t, r) {
                      for(var n, o = r, a = 0, l = 0; l < e.length;){
                          var u = e.charCodeAt(l++);
                          if (61 === u && a > 1) break;
                          if (void 0 === (u = i[u])) throw Error(s);
                          switch(a){
                              case 0:
                                  n = u, a = 1;
                                  break;
                              case 1:
                                  t[r++] = n << 2 | (48 & u) >> 4, n = u, a = 2;
                                  break;
                              case 2:
                                  t[r++] = (15 & n) << 4 | (60 & u) >> 2, n = u, a = 3;
                                  break;
                              case 3:
                                  t[r++] = (3 & n) << 6 | u, a = 0;
                          }
                      }
                      if (1 === a) throw Error(s);
                      return r - o;
                  }, r.test = function(e) {
                      return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(e);
                  };
              },
              9211: (e)=>{
                  "use strict";
                  function t() {
                      this._listeners = {};
                  }
                  e.exports = t, t.prototype.on = function(e, t, r) {
                      return (this._listeners[e] || (this._listeners[e] = [])).push({
                          fn: t,
                          ctx: r || this
                      }), this;
                  }, t.prototype.off = function(e, t) {
                      if (void 0 === e) this._listeners = {};
                      else if (void 0 === t) this._listeners[e] = [];
                      else for(var r = this._listeners[e], n = 0; n < r.length;)r[n].fn === t ? r.splice(n, 1) : ++n;
                      return this;
                  }, t.prototype.emit = function(e) {
                      var t = this._listeners[e];
                      if (t) {
                          for(var r = [], n = 1; n < arguments.length;)r.push(arguments[n++]);
                          for(n = 0; n < t.length;)t[n].fn.apply(t[n++].ctx, r);
                      }
                      return this;
                  };
              },
              945: (e)=>{
                  "use strict";
                  function t(e) {
                      return "undefined" != typeof Float32Array ? function() {
                          var t = new Float32Array([
                              -0
                          ]), r = new Uint8Array(t.buffer), n = 128 === r[3];
                          function i(e, n, i) {
                              t[0] = e, n[i] = r[0], n[i + 1] = r[1], n[i + 2] = r[2], n[i + 3] = r[3];
                          }
                          function o(e, n, i) {
                              t[0] = e, n[i] = r[3], n[i + 1] = r[2], n[i + 2] = r[1], n[i + 3] = r[0];
                          }
                          function s(e, n) {
                              return r[0] = e[n], r[1] = e[n + 1], r[2] = e[n + 2], r[3] = e[n + 3], t[0];
                          }
                          function a(e, n) {
                              return r[3] = e[n], r[2] = e[n + 1], r[1] = e[n + 2], r[0] = e[n + 3], t[0];
                          }
                          e.writeFloatLE = n ? i : o, e.writeFloatBE = n ? o : i, e.readFloatLE = n ? s : a, e.readFloatBE = n ? a : s;
                      }() : function() {
                          function t(e, t, r, n) {
                              var i = t < 0 ? 1 : 0;
                              if (i && (t = -t), 0 === t) e(1 / t > 0 ? 0 : 2147483648, r, n);
                              else if (isNaN(t)) e(2143289344, r, n);
                              else if (t > 34028234663852886e22) e((i << 31 | 2139095040) >>> 0, r, n);
                              else if (t < 11754943508222875e-54) e((i << 31 | Math.round(t / 1401298464324817e-60)) >>> 0, r, n);
                              else {
                                  var o = Math.floor(Math.log(t) / Math.LN2);
                                  e((i << 31 | o + 127 << 23 | 8388607 & Math.round(t * Math.pow(2, -o) * 8388608)) >>> 0, r, n);
                              }
                          }
                          function s(e, t, r) {
                              var n = e(t, r), i = 2 * (n >> 31) + 1, o = n >>> 23 & 255, s = 8388607 & n;
                              return 255 === o ? s ? NaN : i * (1 / 0) : 0 === o ? 1401298464324817e-60 * i * s : i * Math.pow(2, o - 150) * (s + 8388608);
                          }
                          e.writeFloatLE = t.bind(null, r), e.writeFloatBE = t.bind(null, n), e.readFloatLE = s.bind(null, i), e.readFloatBE = s.bind(null, o);
                      }(), "undefined" != typeof Float64Array ? function() {
                          var t = new Float64Array([
                              -0
                          ]), r = new Uint8Array(t.buffer), n = 128 === r[7];
                          function i(e, n, i) {
                              t[0] = e, n[i] = r[0], n[i + 1] = r[1], n[i + 2] = r[2], n[i + 3] = r[3], n[i + 4] = r[4], n[i + 5] = r[5], n[i + 6] = r[6], n[i + 7] = r[7];
                          }
                          function o(e, n, i) {
                              t[0] = e, n[i] = r[7], n[i + 1] = r[6], n[i + 2] = r[5], n[i + 3] = r[4], n[i + 4] = r[3], n[i + 5] = r[2], n[i + 6] = r[1], n[i + 7] = r[0];
                          }
                          function s(e, n) {
                              return r[0] = e[n], r[1] = e[n + 1], r[2] = e[n + 2], r[3] = e[n + 3], r[4] = e[n + 4], r[5] = e[n + 5], r[6] = e[n + 6], r[7] = e[n + 7], t[0];
                          }
                          function a(e, n) {
                              return r[7] = e[n], r[6] = e[n + 1], r[5] = e[n + 2], r[4] = e[n + 3], r[3] = e[n + 4], r[2] = e[n + 5], r[1] = e[n + 6], r[0] = e[n + 7], t[0];
                          }
                          e.writeDoubleLE = n ? i : o, e.writeDoubleBE = n ? o : i, e.readDoubleLE = n ? s : a, e.readDoubleBE = n ? a : s;
                      }() : function() {
                          function t(e, t, r, n, i, o) {
                              var s = n < 0 ? 1 : 0;
                              if (s && (n = -n), 0 === n) e(0, i, o + t), e(1 / n > 0 ? 0 : 2147483648, i, o + r);
                              else if (isNaN(n)) e(0, i, o + t), e(2146959360, i, o + r);
                              else if (n > 17976931348623157e292) e(0, i, o + t), e((s << 31 | 2146435072) >>> 0, i, o + r);
                              else {
                                  var a;
                                  if (n < 22250738585072014e-324) e((a = n / 5e-324) >>> 0, i, o + t), e((s << 31 | a / 4294967296) >>> 0, i, o + r);
                                  else {
                                      var l = Math.floor(Math.log(n) / Math.LN2);
                                      1024 === l && (l = 1023), e(4503599627370496 * (a = n * Math.pow(2, -l)) >>> 0, i, o + t), e((s << 31 | l + 1023 << 20 | 1048576 * a & 1048575) >>> 0, i, o + r);
                                  }
                              }
                          }
                          function s(e, t, r, n, i) {
                              var o = e(n, i + t), s = e(n, i + r), a = 2 * (s >> 31) + 1, l = s >>> 20 & 2047, u = 4294967296 * (1048575 & s) + o;
                              return 2047 === l ? u ? NaN : a * (1 / 0) : 0 === l ? 5e-324 * a * u : a * Math.pow(2, l - 1075) * (u + 4503599627370496);
                          }
                          e.writeDoubleLE = t.bind(null, r, 0, 4), e.writeDoubleBE = t.bind(null, n, 4, 0), e.readDoubleLE = s.bind(null, i, 0, 4), e.readDoubleBE = s.bind(null, o, 4, 0);
                      }(), e;
                  }
                  function r(e, t, r) {
                      t[r] = 255 & e, t[r + 1] = e >>> 8 & 255, t[r + 2] = e >>> 16 & 255, t[r + 3] = e >>> 24;
                  }
                  function n(e, t, r) {
                      t[r] = e >>> 24, t[r + 1] = e >>> 16 & 255, t[r + 2] = e >>> 8 & 255, t[r + 3] = 255 & e;
                  }
                  function i(e, t) {
                      return (e[t] | e[t + 1] << 8 | e[t + 2] << 16 | e[t + 3] << 24) >>> 0;
                  }
                  function o(e, t) {
                      return (e[t] << 24 | e[t + 1] << 16 | e[t + 2] << 8 | e[t + 3]) >>> 0;
                  }
                  e.exports = t(t);
              },
              7199: (module)=>{
                  "use strict";
                  function inquire(moduleName) {
                      try {
                          var mod = eval("quire".replace(/^/, "re"))(moduleName);
                          if (mod && (mod.length || Object.keys(mod).length)) return mod;
                      } catch (e) {}
                      return null;
                  }
                  module.exports = inquire;
              },
              6662: (e)=>{
                  "use strict";
                  e.exports = function(e, t, r) {
                      var n = r || 8192, i = n >>> 1, o = null, s = n;
                      return function(r) {
                          if (r < 1 || r > i) return e(r);
                          s + r > n && (o = e(n), s = 0);
                          var a = t.call(o, s, s += r);
                          return 7 & s && (s = 1 + (7 | s)), a;
                      };
                  };
              },
              4997: (e, t)=>{
                  "use strict";
                  var r = t;
                  r.length = function(e) {
                      for(var t = 0, r = 0, n = 0; n < e.length; ++n)(r = e.charCodeAt(n)) < 128 ? t += 1 : r < 2048 ? t += 2 : 55296 == (64512 & r) && 56320 == (64512 & e.charCodeAt(n + 1)) ? (++n, t += 4) : t += 3;
                      return t;
                  }, r.read = function(e, t, r) {
                      if (r - t < 1) return "";
                      for(var n, i = null, o = [], s = 0; t < r;)(n = e[t++]) < 128 ? o[s++] = n : n > 191 && n < 224 ? o[s++] = (31 & n) << 6 | 63 & e[t++] : n > 239 && n < 365 ? (n = ((7 & n) << 18 | (63 & e[t++]) << 12 | (63 & e[t++]) << 6 | 63 & e[t++]) - 65536, o[s++] = 55296 + (n >> 10), o[s++] = 56320 + (1023 & n)) : o[s++] = (15 & n) << 12 | (63 & e[t++]) << 6 | 63 & e[t++], s > 8191 && ((i || (i = [])).push(String.fromCharCode.apply(String, o)), s = 0);
                      return i ? (s && i.push(String.fromCharCode.apply(String, o.slice(0, s))), i.join("")) : String.fromCharCode.apply(String, o.slice(0, s));
                  }, r.write = function(e, t, r) {
                      for(var n, i, o = r, s = 0; s < e.length; ++s)(n = e.charCodeAt(s)) < 128 ? t[r++] = n : n < 2048 ? (t[r++] = n >> 6 | 192, t[r++] = 63 & n | 128) : 55296 == (64512 & n) && 56320 == (64512 & (i = e.charCodeAt(s + 1))) ? (n = 65536 + ((1023 & n) << 10) + (1023 & i), ++s, t[r++] = n >> 18 | 240, t[r++] = n >> 12 & 63 | 128, t[r++] = n >> 6 & 63 | 128, t[r++] = 63 & n | 128) : (t[r++] = n >> 12 | 224, t[r++] = n >> 6 & 63 | 128, t[r++] = 63 & n | 128);
                      return r - o;
                  };
              },
              3052: (__unused_webpack_module, __unused_webpack_exports, __webpack_require__)=>{
                  (function() {
                      "use strict";
                      const state_ = Symbol("state_"), storedError_ = Symbol("storedError_");
                      function isInteger(e) {
                          if (!isFinite(e)) return !1;
                          const t = Math.abs(e);
                          return Math.floor(t) === t;
                      }
                      function isFiniteNonNegativeNumber(e) {
                          return !("number" != typeof e || !isFinite(e)) && e >= 0;
                      }
                      function isAbortSignal(e) {
                          if ("object" != typeof e || null === e) return !1;
                          try {
                              return Object.getOwnPropertyDescriptor(AbortSignal.prototype, "aborted").get.call(e), !0;
                          } catch (e) {
                              return !1;
                          }
                      }
                      function invokeOrNoop(e, t, r) {
                          const n = e[t];
                          if (void 0 !== n) return Function.prototype.apply.call(n, e, r);
                      }
                      function cloneArrayBuffer(e, t, r, n) {
                          return e.slice(t, t + r);
                      }
                      function transferArrayBuffer(e) {
                          return e.slice(0);
                      }
                      function copyDataBlockBytes(e, t, r, n, i) {
                          new Uint8Array(e, t, i).set(new Uint8Array(r, n, i));
                      }
                      const objectCloneMemo = new WeakMap;
                      let sharedArrayBufferSupported_;
                      function supportsSharedArrayBuffer() {
                          if (void 0 === sharedArrayBufferSupported_) try {
                              new SharedArrayBuffer(16), sharedArrayBufferSupported_ = !0;
                          } catch (e) {
                              sharedArrayBufferSupported_ = !1;
                          }
                          return sharedArrayBufferSupported_;
                      }
                      function cloneValue(e) {
                          switch(typeof e){
                              case "number":
                              case "string":
                              case "boolean":
                              case "undefined":
                              case "bigint":
                                  return e;
                              case "object":
                                  {
                                      if (objectCloneMemo.has(e)) return objectCloneMemo.get(e);
                                      if (null === e) return e;
                                      if (e instanceof Date) return new Date(e.valueOf());
                                      if (e instanceof RegExp) return new RegExp(e);
                                      if (supportsSharedArrayBuffer() && e instanceof SharedArrayBuffer) return e;
                                      if (e instanceof ArrayBuffer) {
                                          const t = cloneArrayBuffer(e, 0, e.byteLength);
                                          return objectCloneMemo.set(e, t), t;
                                      }
                                      if (ArrayBuffer.isView(e)) {
                                          const t = cloneValue(e.buffer);
                                          let r;
                                          return r = e instanceof DataView ? e.byteLength : e.length, new e.constructor(t, e.byteOffset, r);
                                      }
                                      if (e instanceof Map) {
                                          const t = new Map;
                                          return objectCloneMemo.set(e, t), e.forEach((e, r)=>t.set(r, cloneValue(e))), t;
                                      }
                                      if (e instanceof Set) {
                                          const t = new Map;
                                          return objectCloneMemo.set(e, t), e.forEach((e, r)=>t.set(r, cloneValue(e))), t;
                                      }
                                      const t = {};
                                      objectCloneMemo.set(e, t);
                                      const r = Object.getOwnPropertyNames(e);
                                      for (const n of r)t[n] = cloneValue(e[n]);
                                      return t;
                                  }
                              default:
                                  throw new DOMException("Uncloneable value in stream", "DataCloneError");
                          }
                      }
                      function promiseCall(e, t, r) {
                          try {
                              const n = Function.prototype.apply.call(e, t, r);
                              return Promise.resolve(n);
                          } catch (e) {
                              return Promise.reject(e);
                          }
                      }
                      function createAlgorithmFromUnderlyingMethod(e, t, r) {
                          const n = e[t];
                          if (void 0 === n) return ()=>Promise.resolve(void 0);
                          if ("function" != typeof n) throw new TypeError(`Field "${t}" is not a function.`);
                          return function(...t) {
                              return promiseCall(n, e, t.concat(r));
                          };
                      }
                      function validateAndNormalizeHighWaterMark(e) {
                          const t = Number(e);
                          if (isNaN(t) || t < 0) throw new RangeError("highWaterMark must be a valid, non-negative integer.");
                          return t;
                      }
                      function makeSizeAlgorithmFromSizeFunction(e) {
                          if ("function" != typeof e && void 0 !== e) throw new TypeError("size function must be undefined or a function");
                          return function(t) {
                              return "function" == typeof e ? e(t) : 1;
                          };
                      }
                      function createControlledPromise() {
                          const e = {
                              state: 0
                          };
                          return e.promise = new Promise(function(t, r) {
                              e.resolve = function(r) {
                                  e.state = 1, t(r);
                              }, e.reject = function(t) {
                                  e.state = 2, r(t);
                              };
                          }), e;
                      }
                      const CHUNK_SIZE = 16384;
                      class QueueImpl {
                          constructor(){
                              this.chunks_ = [
                                  []
                              ], this.readChunk_ = this.writeChunk_ = this.chunks_[0], this.length_ = 0;
                          }
                          push(e) {
                              this.writeChunk_.push(e), this.length_ += 1, this.writeChunk_.length === CHUNK_SIZE && (this.writeChunk_ = [], this.chunks_.push(this.writeChunk_));
                          }
                          front() {
                              if (0 !== this.length_) return this.readChunk_[0];
                          }
                          shift() {
                              if (0 === this.length_) return;
                              const e = this.readChunk_.shift();
                              return this.length_ -= 1, 0 === this.readChunk_.length && this.readChunk_ !== this.writeChunk_ && (this.chunks_.shift(), this.readChunk_ = this.chunks_[0]), e;
                          }
                          get length() {
                              return this.length_;
                          }
                      }
                      const queue_ = Symbol("queue_"), queueTotalSize_ = Symbol("queueTotalSize_");
                      function dequeueValue(e) {
                          const t = e[queue_].shift(), r = e[queueTotalSize_] - t.size;
                          return e[queueTotalSize_] = Math.max(0, r), t.value;
                      }
                      function enqueueValueWithSize(e, t, r) {
                          if (!isFiniteNonNegativeNumber(r)) throw new RangeError("Chunk size must be a non-negative, finite numbers");
                          e[queue_].push({
                              value: t,
                              size: r
                          }), e[queueTotalSize_] += r;
                      }
                      function peekQueueValue(e) {
                          return e[queue_].front().value;
                      }
                      function resetQueue(e) {
                          e[queue_] = new QueueImpl, e[queueTotalSize_] = 0;
                      }
                      const controlledReadableStream_ = Symbol("controlledReadableStream_"), pullAlgorithm_ = Symbol("pullAlgorithm_"), cancelAlgorithm_ = Symbol("cancelAlgorithm_"), strategySizeAlgorithm_ = Symbol("strategySizeAlgorithm_"), strategyHWM_ = Symbol("strategyHWM_"), started_ = Symbol("started_"), closeRequested_ = Symbol("closeRequested_"), pullAgain_ = Symbol("pullAgain_"), pulling_ = Symbol("pulling_"), cancelSteps_ = Symbol("cancelSteps_"), pullSteps_ = Symbol("pullSteps_"), autoAllocateChunkSize_ = Symbol("autoAllocateChunkSize_"), byobRequest_ = Symbol("byobRequest_"), controlledReadableByteStream_ = Symbol("controlledReadableByteStream_"), pendingPullIntos_ = Symbol("pendingPullIntos_"), closedPromise_ = Symbol("closedPromise_"), ownerReadableStream_ = Symbol("ownerReadableStream_"), readRequests_ = Symbol("readRequests_"), readIntoRequests_ = Symbol("readIntoRequests_"), associatedReadableByteStreamController_ = Symbol("associatedReadableByteStreamController_"), view_ = Symbol("view_"), reader_ = Symbol("reader_"), readableStreamController_ = Symbol("readableStreamController_");
                      function initializeReadableStream(e) {
                          e[state_] = "readable", e[reader_] = void 0, e[storedError_] = void 0, e[readableStreamController_] = void 0;
                      }
                      function isReadableStream(e) {
                          return "object" == typeof e && null !== e && readableStreamController_ in e;
                      }
                      function isReadableStreamLocked(e) {
                          return void 0 !== e[reader_];
                      }
                      function readableStreamGetNumReadIntoRequests(e) {
                          const t = e[reader_];
                          return void 0 === t ? 0 : t[readIntoRequests_].length;
                      }
                      function readableStreamGetNumReadRequests(e) {
                          const t = e[reader_];
                          return void 0 === t ? 0 : t[readRequests_].length;
                      }
                      function readableStreamCreateReadResult(e, t, r) {
                          const n = r ? Object.prototype : null, i = Object.create(n);
                          return i.value = e, i.done = t, i;
                      }
                      function readableStreamAddReadIntoRequest(e, t) {
                          const r = e[reader_], n = createControlledPromise();
                          return n.forAuthorCode = t, r[readIntoRequests_].push(n), n.promise;
                      }
                      function readableStreamAddReadRequest(e, t) {
                          const r = e[reader_], n = createControlledPromise();
                          return n.forAuthorCode = t, r[readRequests_].push(n), n.promise;
                      }
                      function readableStreamHasBYOBReader(e) {
                          return isReadableStreamBYOBReader(e[reader_]);
                      }
                      function readableStreamHasDefaultReader(e) {
                          return isReadableStreamDefaultReader(e[reader_]);
                      }
                      function readableStreamCancel(e, t) {
                          return "closed" === e[state_] ? Promise.resolve(void 0) : "errored" === e[state_] ? Promise.reject(e[storedError_]) : (readableStreamClose(e), e[readableStreamController_][cancelSteps_](t).then((e)=>{}));
                      }
                      function readableStreamClose(e) {
                          e[state_] = "closed";
                          const t = e[reader_];
                          if (void 0 !== t && (t[closedPromise_].resolve(), t[closedPromise_].promise.catch(()=>{}), isReadableStreamDefaultReader(t))) {
                              for (const e of t[readRequests_])e.resolve(readableStreamCreateReadResult(void 0, !0, e.forAuthorCode));
                              t[readRequests_] = [];
                          }
                      }
                      function readableStreamError(e, t) {
                          if ("readable" !== e[state_]) throw new RangeError("Stream is in an invalid state");
                          e[state_] = "errored", e[storedError_] = t;
                          const r = e[reader_];
                          if (void 0 !== r) {
                              if (r[closedPromise_].reject(t), isReadableStreamDefaultReader(r)) {
                                  for (const e of r[readRequests_])e.reject(t);
                                  r[readRequests_] = [];
                              } else {
                                  const e = r[readIntoRequests_];
                                  for (const r of e)r.reject(t);
                                  r[readIntoRequests_] = [];
                              }
                          }
                      }
                      function isReadableStreamDefaultReader(e) {
                          return "object" == typeof e && null !== e && readRequests_ in e;
                      }
                      function isReadableStreamBYOBReader(e) {
                          return "object" == typeof e && null !== e && readIntoRequests_ in e;
                      }
                      function readableStreamReaderGenericInitialize(e, t) {
                          e[ownerReadableStream_] = t, t[reader_] = e;
                          const r = t[state_];
                          e[closedPromise_] = createControlledPromise(), "readable" === r || ("closed" === r ? e[closedPromise_].resolve(void 0) : (e[closedPromise_].reject(t[storedError_]), e[closedPromise_].promise.catch(()=>{})));
                      }
                      function readableStreamReaderGenericRelease(e) {
                          const t = e[ownerReadableStream_];
                          if (void 0 === t) throw new TypeError("Reader is in an inconsistent state");
                          "readable" === t[state_] || (e[closedPromise_] = createControlledPromise()), e[closedPromise_].reject(new TypeError), e[closedPromise_].promise.catch(()=>{}), t[reader_] = void 0, e[ownerReadableStream_] = void 0;
                      }
                      function readableStreamBYOBReaderRead(e, t, r = !1) {
                          const n = e[ownerReadableStream_];
                          return "errored" === n[state_] ? Promise.reject(n[storedError_]) : readableByteStreamControllerPullInto(n[readableStreamController_], t, r);
                      }
                      function readableStreamDefaultReaderRead(e, t = !1) {
                          const r = e[ownerReadableStream_];
                          return "closed" === r[state_] ? Promise.resolve(readableStreamCreateReadResult(void 0, !0, t)) : "errored" === r[state_] ? Promise.reject(r[storedError_]) : r[readableStreamController_][pullSteps_](t);
                      }
                      function readableStreamFulfillReadIntoRequest(e, t, r) {
                          const n = e[reader_][readIntoRequests_].shift();
                          n.resolve(readableStreamCreateReadResult(t, r, n.forAuthorCode));
                      }
                      function readableStreamFulfillReadRequest(e, t, r) {
                          const n = e[reader_][readRequests_].shift();
                          n.resolve(readableStreamCreateReadResult(t, r, n.forAuthorCode));
                      }
                      function setUpReadableStreamDefaultController(e, t, r, n, i, o, s) {
                          t[controlledReadableStream_] = e, resetQueue(t), t[started_] = !1, t[closeRequested_] = !1, t[pullAgain_] = !1, t[pulling_] = !1, t[strategySizeAlgorithm_] = s, t[strategyHWM_] = o, t[pullAlgorithm_] = n, t[cancelAlgorithm_] = i, e[readableStreamController_] = t;
                          const a = r();
                          Promise.resolve(a).then((e)=>{
                              t[started_] = !0, readableStreamDefaultControllerCallPullIfNeeded(t);
                          }, (e)=>{
                              readableStreamDefaultControllerError(t, e);
                          });
                      }
                      function isReadableStreamDefaultController(e) {
                          return "object" == typeof e && null !== e && controlledReadableStream_ in e;
                      }
                      function readableStreamDefaultControllerHasBackpressure(e) {
                          return !readableStreamDefaultControllerShouldCallPull(e);
                      }
                      function readableStreamDefaultControllerCanCloseOrEnqueue(e) {
                          const t = e[controlledReadableStream_][state_];
                          return !1 === e[closeRequested_] && "readable" === t;
                      }
                      function readableStreamDefaultControllerGetDesiredSize(e) {
                          const t = e[controlledReadableStream_][state_];
                          return "errored" === t ? null : "closed" === t ? 0 : e[strategyHWM_] - e[queueTotalSize_];
                      }
                      function readableStreamDefaultControllerClose(e) {
                          e[closeRequested_] = !0;
                          const t = e[controlledReadableStream_];
                          0 === e[queue_].length && (readableStreamDefaultControllerClearAlgorithms(e), readableStreamClose(t));
                      }
                      function readableStreamDefaultControllerEnqueue(e, t) {
                          const r = e[controlledReadableStream_];
                          if (isReadableStreamLocked(r) && readableStreamGetNumReadRequests(r) > 0) readableStreamFulfillReadRequest(r, t, !1);
                          else {
                              let r;
                              try {
                                  r = e[strategySizeAlgorithm_](t);
                              } catch (t) {
                                  throw readableStreamDefaultControllerError(e, t), t;
                              }
                              try {
                                  enqueueValueWithSize(e, t, r);
                              } catch (t) {
                                  throw readableStreamDefaultControllerError(e, t), t;
                              }
                          }
                          readableStreamDefaultControllerCallPullIfNeeded(e);
                      }
                      function readableStreamDefaultControllerError(e, t) {
                          const r = e[controlledReadableStream_];
                          "readable" === r[state_] && (resetQueue(e), readableStreamDefaultControllerClearAlgorithms(e), readableStreamError(r, t));
                      }
                      function readableStreamDefaultControllerCallPullIfNeeded(e) {
                          if (readableStreamDefaultControllerShouldCallPull(e)) {
                              if (e[pulling_]) e[pullAgain_] = !0;
                              else {
                                  if (e[pullAgain_]) throw new RangeError("Stream controller is in an invalid state.");
                                  e[pulling_] = !0, e[pullAlgorithm_](e).then((t)=>{
                                      e[pulling_] = !1, e[pullAgain_] && (e[pullAgain_] = !1, readableStreamDefaultControllerCallPullIfNeeded(e));
                                  }, (t)=>{
                                      readableStreamDefaultControllerError(e, t);
                                  });
                              }
                          }
                      }
                      function readableStreamDefaultControllerShouldCallPull(e) {
                          const t = e[controlledReadableStream_];
                          if (!readableStreamDefaultControllerCanCloseOrEnqueue(e)) return !1;
                          if (!1 === e[started_]) return !1;
                          if (isReadableStreamLocked(t) && readableStreamGetNumReadRequests(t) > 0) return !0;
                          const r = readableStreamDefaultControllerGetDesiredSize(e);
                          if (null === r) throw new RangeError("Stream is in an invalid state.");
                          return r > 0;
                      }
                      function readableStreamDefaultControllerClearAlgorithms(e) {
                          e[pullAlgorithm_] = void 0, e[cancelAlgorithm_] = void 0, e[strategySizeAlgorithm_] = void 0;
                      }
                      function setUpReadableByteStreamController(e, t, r, n, i, o, s) {
                          if (void 0 !== e[readableStreamController_]) throw new TypeError("Cannot reuse streams");
                          if (void 0 !== s && (!isInteger(s) || s <= 0)) throw new RangeError("autoAllocateChunkSize must be a positive, finite integer");
                          t[controlledReadableByteStream_] = e, t[pullAgain_] = !1, t[pulling_] = !1, readableByteStreamControllerClearPendingPullIntos(t), resetQueue(t), t[closeRequested_] = !1, t[started_] = !1, t[strategyHWM_] = validateAndNormalizeHighWaterMark(o), t[pullAlgorithm_] = n, t[cancelAlgorithm_] = i, t[autoAllocateChunkSize_] = s, t[pendingPullIntos_] = [], e[readableStreamController_] = t;
                          const a = r();
                          Promise.resolve(a).then((e)=>{
                              t[started_] = !0, readableByteStreamControllerCallPullIfNeeded(t);
                          }, (e)=>{
                              readableByteStreamControllerError(t, e);
                          });
                      }
                      function isReadableStreamBYOBRequest(e) {
                          return "object" == typeof e && null !== e && associatedReadableByteStreamController_ in e;
                      }
                      function isReadableByteStreamController(e) {
                          return "object" == typeof e && null !== e && controlledReadableByteStream_ in e;
                      }
                      function readableByteStreamControllerCallPullIfNeeded(e) {
                          readableByteStreamControllerShouldCallPull(e) && (e[pulling_] ? e[pullAgain_] = !0 : (e[pulling_] = !0, e[pullAlgorithm_](e).then((t)=>{
                              e[pulling_] = !1, e[pullAgain_] && (e[pullAgain_] = !1, readableByteStreamControllerCallPullIfNeeded(e));
                          }, (t)=>{
                              readableByteStreamControllerError(e, t);
                          })));
                      }
                      function readableByteStreamControllerClearAlgorithms(e) {
                          e[pullAlgorithm_] = void 0, e[cancelAlgorithm_] = void 0;
                      }
                      function readableByteStreamControllerClearPendingPullIntos(e) {
                          readableByteStreamControllerInvalidateBYOBRequest(e), e[pendingPullIntos_] = [];
                      }
                      function readableByteStreamControllerClose(e) {
                          const t = e[controlledReadableByteStream_];
                          if (e[queueTotalSize_] > 0) e[closeRequested_] = !0;
                          else {
                              if (e[pendingPullIntos_].length > 0 && e[pendingPullIntos_][0].bytesFilled > 0) {
                                  const t = new TypeError;
                                  throw readableByteStreamControllerError(e, t), t;
                              }
                              readableByteStreamControllerClearAlgorithms(e), readableStreamClose(t);
                          }
                      }
                      function readableByteStreamControllerCommitPullIntoDescriptor(e, t) {
                          let r = !1;
                          "closed" === e[state_] && (r = !0);
                          const n = readableByteStreamControllerConvertPullIntoDescriptor(t);
                          "default" === t.readerType ? readableStreamFulfillReadRequest(e, n, r) : readableStreamFulfillReadIntoRequest(e, n, r);
                      }
                      function readableByteStreamControllerConvertPullIntoDescriptor(e) {
                          const { bytesFilled: t , elementSize: r  } = e;
                          return new e.ctor(e.buffer, e.byteOffset, t / r);
                      }
                      function readableByteStreamControllerEnqueue(e, t) {
                          const r = e[controlledReadableByteStream_], { buffer: n , byteOffset: i , byteLength: o  } = t, s = transferArrayBuffer(n);
                          readableStreamHasDefaultReader(r) ? 0 === readableStreamGetNumReadRequests(r) ? readableByteStreamControllerEnqueueChunkToQueue(e, s, i, o) : readableStreamFulfillReadRequest(r, new Uint8Array(s, i, o), !1) : readableStreamHasBYOBReader(r) ? (readableByteStreamControllerEnqueueChunkToQueue(e, s, i, o), readableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(e)) : readableByteStreamControllerEnqueueChunkToQueue(e, s, i, o), readableByteStreamControllerCallPullIfNeeded(e);
                      }
                      function readableByteStreamControllerEnqueueChunkToQueue(e, t, r, n) {
                          e[queue_].push({
                              buffer: t,
                              byteOffset: r,
                              byteLength: n
                          }), e[queueTotalSize_] += n;
                      }
                      function readableByteStreamControllerError(e, t) {
                          const r = e[controlledReadableByteStream_];
                          "readable" === r[state_] && (readableByteStreamControllerClearPendingPullIntos(e), resetQueue(e), readableByteStreamControllerClearAlgorithms(e), readableStreamError(r, t));
                      }
                      function readableByteStreamControllerFillHeadPullIntoDescriptor(e, t, r) {
                          readableByteStreamControllerInvalidateBYOBRequest(e), r.bytesFilled += t;
                      }
                      function readableByteStreamControllerFillPullIntoDescriptorFromQueue(e, t) {
                          const r = t.elementSize, n = t.bytesFilled - t.bytesFilled % r, i = Math.min(e[queueTotalSize_], t.byteLength - t.bytesFilled), o = t.bytesFilled + i, s = o - o % r;
                          let a = i, l = !1;
                          s > n && (a = s - t.bytesFilled, l = !0);
                          const u = e[queue_];
                          for(; a > 0;){
                              const r = u.front(), n = Math.min(a, r.byteLength), i = t.byteOffset + t.bytesFilled;
                              copyDataBlockBytes(t.buffer, i, r.buffer, r.byteOffset, n), r.byteLength === n ? u.shift() : (r.byteOffset += n, r.byteLength -= n), e[queueTotalSize_] -= n, readableByteStreamControllerFillHeadPullIntoDescriptor(e, n, t), a -= n;
                          }
                          return l;
                      }
                      function readableByteStreamControllerGetDesiredSize(e) {
                          const t = e[controlledReadableByteStream_][state_];
                          return "errored" === t ? null : "closed" === t ? 0 : e[strategyHWM_] - e[queueTotalSize_];
                      }
                      function readableByteStreamControllerHandleQueueDrain(e) {
                          0 === e[queueTotalSize_] && e[closeRequested_] ? (readableByteStreamControllerClearAlgorithms(e), readableStreamClose(e[controlledReadableByteStream_])) : readableByteStreamControllerCallPullIfNeeded(e);
                      }
                      function readableByteStreamControllerInvalidateBYOBRequest(e) {
                          const t = e[byobRequest_];
                          void 0 !== t && (t[associatedReadableByteStreamController_] = void 0, t[view_] = void 0, e[byobRequest_] = void 0);
                      }
                      function readableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(e) {
                          const t = e[pendingPullIntos_];
                          for(; t.length > 0;){
                              if (0 === e[queueTotalSize_]) return;
                              const r = t[0];
                              readableByteStreamControllerFillPullIntoDescriptorFromQueue(e, r) && (readableByteStreamControllerShiftPendingPullInto(e), readableByteStreamControllerCommitPullIntoDescriptor(e[controlledReadableByteStream_], r));
                          }
                      }
                      function readableByteStreamControllerPullInto(e, t, r) {
                          const n = e[controlledReadableByteStream_], i = t.BYTES_PER_ELEMENT || 1, o = t.constructor, s = t.byteOffset, a = t.byteLength, l = {
                              buffer: transferArrayBuffer(t.buffer),
                              byteOffset: s,
                              byteLength: a,
                              bytesFilled: 0,
                              elementSize: i,
                              ctor: o,
                              readerType: "byob"
                          };
                          if (e[pendingPullIntos_].length > 0) return e[pendingPullIntos_].push(l), readableStreamAddReadIntoRequest(n, r);
                          if ("closed" === n[state_]) {
                              const e = new o(l.buffer, l.byteOffset, 0);
                              return Promise.resolve(readableStreamCreateReadResult(e, !0, r));
                          }
                          if (e[queueTotalSize_] > 0) {
                              if (readableByteStreamControllerFillPullIntoDescriptorFromQueue(e, l)) {
                                  const t = readableByteStreamControllerConvertPullIntoDescriptor(l);
                                  return readableByteStreamControllerHandleQueueDrain(e), Promise.resolve(readableStreamCreateReadResult(t, !1, r));
                              }
                              if (e[closeRequested_]) {
                                  const t = new TypeError;
                                  return readableByteStreamControllerError(e, t), Promise.reject(t);
                              }
                          }
                          e[pendingPullIntos_].push(l);
                          const u = readableStreamAddReadIntoRequest(n, r);
                          return readableByteStreamControllerCallPullIfNeeded(e), u;
                      }
                      function readableByteStreamControllerRespond(e, t) {
                          if (!isFiniteNonNegativeNumber(t = Number(t))) throw new RangeError("bytesWritten must be a finite, non-negative number");
                          readableByteStreamControllerRespondInternal(e, t);
                      }
                      function readableByteStreamControllerRespondInClosedState(e, t) {
                          t.buffer = transferArrayBuffer(t.buffer);
                          const r = e[controlledReadableByteStream_];
                          if (readableStreamHasBYOBReader(r)) for(; readableStreamGetNumReadIntoRequests(r) > 0;)readableByteStreamControllerCommitPullIntoDescriptor(r, readableByteStreamControllerShiftPendingPullInto(e));
                      }
                      function readableByteStreamControllerRespondInReadableState(e, t, r) {
                          if (r.bytesFilled + t > r.byteLength) throw new RangeError;
                          if (readableByteStreamControllerFillHeadPullIntoDescriptor(e, t, r), r.bytesFilled < r.elementSize) return;
                          readableByteStreamControllerShiftPendingPullInto(e);
                          const n = r.bytesFilled % r.elementSize;
                          if (n > 0) {
                              const t = r.byteOffset + r.bytesFilled, i = cloneArrayBuffer(r.buffer, t - n, n);
                              readableByteStreamControllerEnqueueChunkToQueue(e, i, 0, i.byteLength);
                          }
                          r.buffer = transferArrayBuffer(r.buffer), r.bytesFilled = r.bytesFilled - n, readableByteStreamControllerCommitPullIntoDescriptor(e[controlledReadableByteStream_], r), readableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(e);
                      }
                      function readableByteStreamControllerRespondInternal(e, t) {
                          const r = e[pendingPullIntos_][0];
                          if ("closed" === e[controlledReadableByteStream_][state_]) {
                              if (0 !== t) throw new TypeError;
                              readableByteStreamControllerRespondInClosedState(e, r);
                          } else readableByteStreamControllerRespondInReadableState(e, t, r);
                          readableByteStreamControllerCallPullIfNeeded(e);
                      }
                      function readableByteStreamControllerRespondWithNewView(e, t) {
                          const r = e[pendingPullIntos_][0];
                          if (r.byteOffset + r.bytesFilled !== t.byteOffset) throw new RangeError;
                          if (r.byteLength !== t.byteLength) throw new RangeError;
                          r.buffer = t.buffer, readableByteStreamControllerRespondInternal(e, t.byteLength);
                      }
                      function readableByteStreamControllerShiftPendingPullInto(e) {
                          const t = e[pendingPullIntos_].shift();
                          return readableByteStreamControllerInvalidateBYOBRequest(e), t;
                      }
                      function readableByteStreamControllerShouldCallPull(e) {
                          const t = e[controlledReadableByteStream_];
                          return "readable" === t[state_] && !e[closeRequested_] && !!e[started_] && (!!(readableStreamHasDefaultReader(t) && readableStreamGetNumReadRequests(t) > 0) || !!(readableStreamHasBYOBReader(t) && readableStreamGetNumReadIntoRequests(t) > 0) || readableByteStreamControllerGetDesiredSize(e) > 0);
                      }
                      function setUpReadableStreamBYOBRequest(e, t, r) {
                          if (!isReadableByteStreamController(t)) throw new TypeError;
                          if (!ArrayBuffer.isView(r)) throw new TypeError;
                          e[associatedReadableByteStreamController_] = t, e[view_] = r;
                      }
                      const backpressure_ = Symbol("backpressure_"), closeRequest_ = Symbol("closeRequest_"), inFlightWriteRequest_ = Symbol("inFlightWriteRequest_"), inFlightCloseRequest_ = Symbol("inFlightCloseRequest_"), pendingAbortRequest_ = Symbol("pendingAbortRequest_"), writableStreamController_ = Symbol("writableStreamController_"), writer_ = Symbol("writer_"), writeRequests_ = Symbol("writeRequests_"), abortAlgorithm_ = Symbol("abortAlgorithm_"), closeAlgorithm_ = Symbol("closeAlgorithm_"), controlledWritableStream_ = Symbol("controlledWritableStream_"), started_$1 = Symbol("started_"), strategyHWM_$1 = Symbol("strategyHWM_"), strategySizeAlgorithm_$1 = Symbol("strategySizeAlgorithm_"), writeAlgorithm_ = Symbol("writeAlgorithm_"), ownerWritableStream_ = Symbol("ownerWritableStream_"), closedPromise_$1 = Symbol("closedPromise_"), readyPromise_ = Symbol("readyPromise_"), errorSteps_ = Symbol("errorSteps_"), abortSteps_ = Symbol("abortSteps_");
                      function initializeWritableStream(e) {
                          e[state_] = "writable", e[storedError_] = void 0, e[writer_] = void 0, e[writableStreamController_] = void 0, e[inFlightWriteRequest_] = void 0, e[closeRequest_] = void 0, e[inFlightCloseRequest_] = void 0, e[pendingAbortRequest_] = void 0, e[writeRequests_] = [], e[backpressure_] = !1;
                      }
                      function isWritableStream(e) {
                          return "object" == typeof e && null !== e && writableStreamController_ in e;
                      }
                      function isWritableStreamLocked(e) {
                          return void 0 !== e[writer_];
                      }
                      function writableStreamAbort(e, t) {
                          const r = e[state_];
                          if ("closed" === r || "errored" === r) return Promise.resolve(void 0);
                          let n = e[pendingAbortRequest_];
                          if (void 0 !== n) return n.promise;
                          let i = !1;
                          "erroring" === r && (i = !0, t = void 0), n = {
                              reason: t,
                              wasAlreadyErroring: i
                          };
                          const o = new Promise((e, t)=>{
                              n.resolve = e, n.reject = t;
                          });
                          return n.promise = o, e[pendingAbortRequest_] = n, i || writableStreamStartErroring(e, t), o;
                      }
                      function writableStreamAddWriteRequest(e) {
                          const t = createControlledPromise();
                          return e[writeRequests_].push(t), t.promise;
                      }
                      function writableStreamDealWithRejection(e, t) {
                          "writable" !== e[state_] ? writableStreamFinishErroring(e) : writableStreamStartErroring(e, t);
                      }
                      function writableStreamStartErroring(e, t) {
                          const r = e[writableStreamController_];
                          e[state_] = "erroring", e[storedError_] = t;
                          const n = e[writer_];
                          void 0 !== n && writableStreamDefaultWriterEnsureReadyPromiseRejected(n, t), !writableStreamHasOperationMarkedInFlight(e) && r[started_$1] && writableStreamFinishErroring(e);
                      }
                      function writableStreamFinishErroring(e) {
                          e[state_] = "errored";
                          const t = e[writableStreamController_];
                          t[errorSteps_]();
                          const r = e[storedError_];
                          for (const t of e[writeRequests_])t.reject(r);
                          e[writeRequests_] = [];
                          const n = e[pendingAbortRequest_];
                          if (void 0 !== n) return e[pendingAbortRequest_] = void 0, n.wasAlreadyErroring ? (n.reject(r), void writableStreamRejectCloseAndClosedPromiseIfNeeded(e)) : void t[abortSteps_](n.reason).then((t)=>{
                              n.resolve(), writableStreamRejectCloseAndClosedPromiseIfNeeded(e);
                          }, (t)=>{
                              n.reject(t), writableStreamRejectCloseAndClosedPromiseIfNeeded(e);
                          });
                          writableStreamRejectCloseAndClosedPromiseIfNeeded(e);
                      }
                      function writableStreamFinishInFlightWrite(e) {
                          e[inFlightWriteRequest_].resolve(void 0), e[inFlightWriteRequest_] = void 0;
                      }
                      function writableStreamFinishInFlightWriteWithError(e, t) {
                          e[inFlightWriteRequest_].reject(t), e[inFlightWriteRequest_] = void 0, writableStreamDealWithRejection(e, t);
                      }
                      function writableStreamFinishInFlightClose(e) {
                          e[inFlightCloseRequest_].resolve(void 0), e[inFlightCloseRequest_] = void 0, "erroring" === e[state_] && (e[storedError_] = void 0, void 0 !== e[pendingAbortRequest_] && (e[pendingAbortRequest_].resolve(), e[pendingAbortRequest_] = void 0)), e[state_] = "closed";
                          const t = e[writer_];
                          void 0 !== t && t[closedPromise_$1].resolve(void 0);
                      }
                      function writableStreamFinishInFlightCloseWithError(e, t) {
                          e[inFlightCloseRequest_].reject(t), e[inFlightCloseRequest_] = void 0, void 0 !== e[pendingAbortRequest_] && (e[pendingAbortRequest_].reject(t), e[pendingAbortRequest_] = void 0), writableStreamDealWithRejection(e, t);
                      }
                      function writableStreamCloseQueuedOrInFlight(e) {
                          return void 0 !== e[closeRequest_] || void 0 !== e[inFlightCloseRequest_];
                      }
                      function writableStreamHasOperationMarkedInFlight(e) {
                          return void 0 !== e[inFlightWriteRequest_] || void 0 !== e[inFlightCloseRequest_];
                      }
                      function writableStreamMarkCloseRequestInFlight(e) {
                          e[inFlightCloseRequest_] = e[closeRequest_], e[closeRequest_] = void 0;
                      }
                      function writableStreamMarkFirstWriteRequestInFlight(e) {
                          const t = e[writeRequests_].shift();
                          e[inFlightWriteRequest_] = t;
                      }
                      function writableStreamRejectCloseAndClosedPromiseIfNeeded(e) {
                          const t = e[closeRequest_];
                          void 0 !== t && (t.reject(e[storedError_]), e[closeRequest_] = void 0);
                          const r = e[writer_];
                          void 0 !== r && (r[closedPromise_$1].reject(e[storedError_]), r[closedPromise_$1].promise.catch(()=>{}));
                      }
                      function writableStreamUpdateBackpressure(e, t) {
                          const r = e[writer_];
                          void 0 !== r && t !== e[backpressure_] && (t ? r[readyPromise_] = createControlledPromise() : r[readyPromise_].resolve(void 0)), e[backpressure_] = t;
                      }
                      function isWritableStreamDefaultWriter(e) {
                          return "object" == typeof e && null !== e && ownerWritableStream_ in e;
                      }
                      function writableStreamDefaultWriterAbort(e, t) {
                          return writableStreamAbort(e[ownerWritableStream_], t);
                      }
                      function writableStreamDefaultWriterClose(e) {
                          const t = e[ownerWritableStream_], r = t[state_];
                          if ("closed" === r || "errored" === r) return Promise.reject(new TypeError("Writer stream is already closed or errored"));
                          const n = createControlledPromise();
                          return t[closeRequest_] = n, t[backpressure_] && "writable" === r && e[readyPromise_].resolve(void 0), writableStreamDefaultControllerClose(t[writableStreamController_]), n.promise;
                      }
                      function writableStreamDefaultWriterCloseWithErrorPropagation(e) {
                          const t = e[ownerWritableStream_], r = t[state_];
                          return writableStreamCloseQueuedOrInFlight(t) || "closed" === r ? Promise.resolve(void 0) : "errored" === r ? Promise.reject(t[storedError_]) : writableStreamDefaultWriterClose(e);
                      }
                      function writableStreamDefaultWriterEnsureClosedPromiseRejected(e, t) {
                          const r = e[closedPromise_$1];
                          0 === r.state ? r.reject(t) : (e[closedPromise_$1] = createControlledPromise(), e[closedPromise_$1].reject(t)), e[closedPromise_$1].promise.catch(()=>{});
                      }
                      function writableStreamDefaultWriterEnsureReadyPromiseRejected(e, t) {
                          const r = e[readyPromise_];
                          0 === r.state ? r.reject(t) : (e[readyPromise_] = createControlledPromise(), e[readyPromise_].reject(t)), e[readyPromise_].promise.catch(()=>{});
                      }
                      function writableStreamDefaultWriterGetDesiredSize(e) {
                          const t = e[ownerWritableStream_], r = t[state_];
                          return "errored" === r || "erroring" === r ? null : "closed" === r ? 0 : writableStreamDefaultControllerGetDesiredSize(t[writableStreamController_]);
                      }
                      function writableStreamDefaultWriterRelease(e) {
                          const t = e[ownerWritableStream_], r = new TypeError;
                          writableStreamDefaultWriterEnsureReadyPromiseRejected(e, r), writableStreamDefaultWriterEnsureClosedPromiseRejected(e, r), t[writer_] = void 0, e[ownerWritableStream_] = void 0;
                      }
                      function writableStreamDefaultWriterWrite(e, t) {
                          const r = e[ownerWritableStream_], n = r[writableStreamController_], i = writableStreamDefaultControllerGetChunkSize(n, t);
                          if (e[ownerWritableStream_] !== r) return Promise.reject(new TypeError);
                          const o = r[state_];
                          if ("errored" === o) return Promise.reject(r[storedError_]);
                          if (writableStreamCloseQueuedOrInFlight(r) || "closed" === o) return Promise.reject(new TypeError("Cannot write to a closing or closed stream"));
                          if ("erroring" === o) return Promise.reject(r[storedError_]);
                          const s = writableStreamAddWriteRequest(r);
                          return writableStreamDefaultControllerWrite(n, t, i), s;
                      }
                      function setUpWritableStreamDefaultController(e, t, r, n, i, o, s, a) {
                          if (!isWritableStream(e)) throw new TypeError;
                          if (void 0 !== e[writableStreamController_]) throw new TypeError;
                          t[controlledWritableStream_] = e, e[writableStreamController_] = t, resetQueue(t), t[started_$1] = !1, t[strategySizeAlgorithm_$1] = a, t[strategyHWM_$1] = s, t[writeAlgorithm_] = n, t[closeAlgorithm_] = i, t[abortAlgorithm_] = o;
                          const l = writableStreamDefaultControllerGetBackpressure(t);
                          writableStreamUpdateBackpressure(e, l);
                          const u = r();
                          Promise.resolve(u).then((e)=>{
                              t[started_$1] = !0, writableStreamDefaultControllerAdvanceQueueIfNeeded(t);
                          }, (r)=>{
                              t[started_$1] = !0, writableStreamDealWithRejection(e, r);
                          });
                      }
                      function isWritableStreamDefaultController(e) {
                          return "object" == typeof e && null !== e && controlledWritableStream_ in e;
                      }
                      function writableStreamDefaultControllerClearAlgorithms(e) {
                          e[writeAlgorithm_] = void 0, e[closeAlgorithm_] = void 0, e[abortAlgorithm_] = void 0, e[strategySizeAlgorithm_$1] = void 0;
                      }
                      function writableStreamDefaultControllerClose(e) {
                          enqueueValueWithSize(e, "close", 0), writableStreamDefaultControllerAdvanceQueueIfNeeded(e);
                      }
                      function writableStreamDefaultControllerGetChunkSize(e, t) {
                          let r;
                          try {
                              r = e[strategySizeAlgorithm_$1](t);
                          } catch (t) {
                              writableStreamDefaultControllerErrorIfNeeded(e, t), r = 1;
                          }
                          return r;
                      }
                      function writableStreamDefaultControllerGetDesiredSize(e) {
                          return e[strategyHWM_$1] - e[queueTotalSize_];
                      }
                      function writableStreamDefaultControllerWrite(e, t, r) {
                          try {
                              enqueueValueWithSize(e, {
                                  chunk: t
                              }, r);
                          } catch (t) {
                              return void writableStreamDefaultControllerErrorIfNeeded(e, t);
                          }
                          const n = e[controlledWritableStream_];
                          writableStreamCloseQueuedOrInFlight(n) || "writable" !== n[state_] || writableStreamUpdateBackpressure(n, writableStreamDefaultControllerGetBackpressure(e)), writableStreamDefaultControllerAdvanceQueueIfNeeded(e);
                      }
                      function writableStreamDefaultControllerAdvanceQueueIfNeeded(e) {
                          if (!e[started_$1]) return;
                          const t = e[controlledWritableStream_];
                          if (void 0 !== t[inFlightWriteRequest_]) return;
                          const r = t[state_];
                          if ("closed" === r || "errored" === r) return;
                          if ("erroring" === r) return void writableStreamFinishErroring(t);
                          if (0 === e[queue_].length) return;
                          const n = peekQueueValue(e);
                          "close" === n ? writableStreamDefaultControllerProcessClose(e) : writableStreamDefaultControllerProcessWrite(e, n.chunk);
                      }
                      function writableStreamDefaultControllerErrorIfNeeded(e, t) {
                          "writable" === e[controlledWritableStream_][state_] && writableStreamDefaultControllerError(e, t);
                      }
                      function writableStreamDefaultControllerProcessClose(e) {
                          const t = e[controlledWritableStream_];
                          writableStreamMarkCloseRequestInFlight(t), dequeueValue(e);
                          const r = e[closeAlgorithm_]();
                          writableStreamDefaultControllerClearAlgorithms(e), r.then((e)=>{
                              writableStreamFinishInFlightClose(t);
                          }, (e)=>{
                              writableStreamFinishInFlightCloseWithError(t, e);
                          });
                      }
                      function writableStreamDefaultControllerProcessWrite(e, t) {
                          const r = e[controlledWritableStream_];
                          writableStreamMarkFirstWriteRequestInFlight(r), e[writeAlgorithm_](t).then((t)=>{
                              writableStreamFinishInFlightWrite(r);
                              const n = r[state_];
                              if (dequeueValue(e), !writableStreamCloseQueuedOrInFlight(r) && "writable" === n) {
                                  const t = writableStreamDefaultControllerGetBackpressure(e);
                                  writableStreamUpdateBackpressure(r, t);
                              }
                              writableStreamDefaultControllerAdvanceQueueIfNeeded(e);
                          }, (t)=>{
                              "writable" === r[state_] && writableStreamDefaultControllerClearAlgorithms(e), writableStreamFinishInFlightWriteWithError(r, t);
                          });
                      }
                      function writableStreamDefaultControllerGetBackpressure(e) {
                          return writableStreamDefaultControllerGetDesiredSize(e) <= 0;
                      }
                      function writableStreamDefaultControllerError(e, t) {
                          const r = e[controlledWritableStream_];
                          writableStreamDefaultControllerClearAlgorithms(e), writableStreamStartErroring(r, t);
                      }
                      class ReadableStreamDefaultReader {
                          constructor(e){
                              if (!isReadableStream(e)) throw new TypeError;
                              if (isReadableStreamLocked(e)) throw new TypeError("The stream is locked.");
                              readableStreamReaderGenericInitialize(this, e), this[readRequests_] = [];
                          }
                          get closed() {
                              return isReadableStreamDefaultReader(this) ? this[closedPromise_].promise : Promise.reject(new TypeError);
                          }
                          cancel(e) {
                              if (!isReadableStreamDefaultReader(this)) return Promise.reject(new TypeError);
                              const t = this[ownerReadableStream_];
                              return void 0 === t ? Promise.reject(new TypeError("Reader is not associated with a stream")) : readableStreamCancel(t, e);
                          }
                          read() {
                              return isReadableStreamDefaultReader(this) ? void 0 === this[ownerReadableStream_] ? Promise.reject(new TypeError("Reader is not associated with a stream")) : readableStreamDefaultReaderRead(this, !0) : Promise.reject(new TypeError);
                          }
                          releaseLock() {
                              if (!isReadableStreamDefaultReader(this)) throw new TypeError;
                              if (void 0 !== this[ownerReadableStream_]) {
                                  if (0 !== this[readRequests_].length) throw new TypeError("Cannot release a stream with pending read requests");
                                  readableStreamReaderGenericRelease(this);
                              }
                          }
                      }
                      class WritableStreamDefaultWriter {
                          constructor(e){
                              if (!isWritableStream(e)) throw new TypeError;
                              if (isWritableStreamLocked(e)) throw new TypeError("Stream is already locked");
                              this[ownerWritableStream_] = e, e[writer_] = this;
                              const t = createControlledPromise(), r = createControlledPromise();
                              this[readyPromise_] = t, this[closedPromise_$1] = r;
                              const n = e[state_];
                              if ("writable" === n) !writableStreamCloseQueuedOrInFlight(e) && e[backpressure_] || t.resolve(void 0);
                              else if ("erroring" === n) t.reject(e[storedError_]), t.promise.catch(()=>{});
                              else if ("closed" === n) t.resolve(void 0), r.resolve(void 0);
                              else {
                                  const n = e[storedError_];
                                  t.reject(n), t.promise.catch(()=>{}), r.reject(n), r.promise.catch(()=>{});
                              }
                          }
                          abort(e) {
                              return isWritableStreamDefaultWriter(this) ? void 0 === this[ownerWritableStream_] ? Promise.reject(new TypeError("Writer is not connected to a stream")) : writableStreamDefaultWriterAbort(this, e) : Promise.reject(new TypeError);
                          }
                          close() {
                              if (!isWritableStreamDefaultWriter(this)) return Promise.reject(new TypeError);
                              const e = this[ownerWritableStream_];
                              return void 0 === e ? Promise.reject(new TypeError("Writer is not connected to a stream")) : writableStreamCloseQueuedOrInFlight(e) ? Promise.reject(new TypeError) : writableStreamDefaultWriterClose(this);
                          }
                          releaseLock() {
                              void 0 !== this[ownerWritableStream_] && writableStreamDefaultWriterRelease(this);
                          }
                          write(e) {
                              return isWritableStreamDefaultWriter(this) ? void 0 === this[ownerWritableStream_] ? Promise.reject(new TypeError("Writer is not connected to a stream")) : writableStreamDefaultWriterWrite(this, e) : Promise.reject(new TypeError);
                          }
                          get closed() {
                              return isWritableStreamDefaultWriter(this) ? this[closedPromise_$1].promise : Promise.reject(new TypeError);
                          }
                          get desiredSize() {
                              if (!isWritableStreamDefaultWriter(this)) throw new TypeError;
                              if (void 0 === this[ownerWritableStream_]) throw new TypeError("Writer is not connected to stream");
                              return writableStreamDefaultWriterGetDesiredSize(this);
                          }
                          get ready() {
                              return isWritableStreamDefaultWriter(this) ? this[readyPromise_].promise : Promise.reject(new TypeError);
                          }
                      }
                      function pipeTo(e, t, r) {
                          const n = !!r.preventClose, i = !!r.preventAbort, o = !!r.preventCancel, s = r.signal;
                          let a = !1, l = Promise.resolve();
                          const u = createControlledPromise(), c = new ReadableStreamDefaultReader(e), d = new WritableStreamDefaultWriter(t);
                          let h;
                          function f(e, t, r) {
                              "errored" === e[state_] ? r(e[storedError_]) : t.catch(r);
                          }
                          if (void 0 !== s && (h = ()=>{
                              const r = new DOMException("Aborted", "AbortError"), n = [];
                              !1 === i && n.push(()=>"writable" === t[state_] ? writableStreamAbort(t, r) : Promise.resolve()), !1 === o && n.push(()=>"readable" === e[state_] ? readableStreamCancel(e, r) : Promise.resolve()), y(()=>Promise.all(n.map((e)=>e())).then((e)=>{}), {
                                  actualError: r
                              });
                          }, !0 === s.aborted ? h() : s.addEventListener("abort", h)), f(e, c[closedPromise_].promise, (e)=>{
                              y(i ? void 0 : ()=>writableStreamAbort(t, e), {
                                  actualError: e
                              });
                          }), f(t, d[closedPromise_$1].promise, (t)=>{
                              y(o ? void 0 : ()=>readableStreamCancel(e, t), {
                                  actualError: t
                              });
                          }), function(e, t, r) {
                              "closed" === e[state_] ? r() : t.then(r);
                          }(e, c[closedPromise_].promise, ()=>{
                              n ? y() : y(()=>writableStreamDefaultWriterCloseWithErrorPropagation(d));
                          }), writableStreamCloseQueuedOrInFlight(t) || "closed" === t[state_]) {
                              const t = new TypeError;
                              y(o ? void 0 : ()=>readableStreamCancel(e, t), {
                                  actualError: t
                              });
                          }
                          function p() {
                              const e = l;
                              return l.then(()=>e === l ? void 0 : p());
                          }
                          function m() {
                              return "writable" !== t[state_] || writableStreamCloseQueuedOrInFlight(t) ? void 0 : p();
                          }
                          function y(e, t) {
                              if (a) return;
                              function r() {
                                  e().then((e)=>g(t), (e)=>g({
                                          actualError: e
                                      }));
                              }
                              a = !0, void 0 === e && (e = ()=>Promise.resolve());
                              const n = m();
                              n ? n.then(r) : r();
                          }
                          function g(e) {
                              writableStreamDefaultWriterRelease(d), readableStreamReaderGenericRelease(c), s && h && s.removeEventListener("abort", h), e ? u.reject(e.actualError) : u.resolve(void 0);
                          }
                          return function e() {
                              a || d[readyPromise_].promise.then(()=>{
                                  readableStreamDefaultReaderRead(c).then(({ value: t , done: r  })=>{
                                      r || (l = writableStreamDefaultWriterWrite(d, t).catch(()=>{}), e());
                                  }, (e)=>{
                                      l = Promise.resolve();
                                  });
                              });
                          }(), u.promise;
                      }
                      class ReadableStreamDefaultController {
                          constructor(){
                              throw new TypeError;
                          }
                          get desiredSize() {
                              return readableStreamDefaultControllerGetDesiredSize(this);
                          }
                          close() {
                              if (!isReadableStreamDefaultController(this)) throw new TypeError;
                              if (!readableStreamDefaultControllerCanCloseOrEnqueue(this)) throw new TypeError("Cannot close, the stream is already closing or not readable");
                              readableStreamDefaultControllerClose(this);
                          }
                          enqueue(e) {
                              if (!isReadableStreamDefaultController(this)) throw new TypeError;
                              if (!readableStreamDefaultControllerCanCloseOrEnqueue(this)) throw new TypeError("Cannot enqueue, the stream is closing or not readable");
                              readableStreamDefaultControllerEnqueue(this, e);
                          }
                          error(e) {
                              if (!isReadableStreamDefaultController(this)) throw new TypeError;
                              readableStreamDefaultControllerError(this, e);
                          }
                          [cancelSteps_](e) {
                              resetQueue(this);
                              const t = this[cancelAlgorithm_](e);
                              return readableStreamDefaultControllerClearAlgorithms(this), t;
                          }
                          [pullSteps_](e) {
                              const t = this[controlledReadableStream_];
                              if (this[queue_].length > 0) {
                                  const r = dequeueValue(this);
                                  return this[closeRequested_] && 0 === this[queue_].length ? (readableStreamDefaultControllerClearAlgorithms(this), readableStreamClose(t)) : readableStreamDefaultControllerCallPullIfNeeded(this), Promise.resolve(readableStreamCreateReadResult(r, !1, e));
                              }
                              const r = readableStreamAddReadRequest(t, e);
                              return readableStreamDefaultControllerCallPullIfNeeded(this), r;
                          }
                      }
                      function setUpReadableStreamDefaultControllerFromUnderlyingSource(e, t, r, n) {
                          const i = Object.create(ReadableStreamDefaultController.prototype), o = createAlgorithmFromUnderlyingMethod(t, "pull", [
                              i
                          ]), s = createAlgorithmFromUnderlyingMethod(t, "cancel", []);
                          setUpReadableStreamDefaultController(e, i, ()=>invokeOrNoop(t, "start", [
                                  i
                              ]), o, s, r, n);
                      }
                      class ReadableStreamBYOBRequest {
                          constructor(){
                              throw new TypeError;
                          }
                          get view() {
                              if (!isReadableStreamBYOBRequest(this)) throw new TypeError;
                              return this[view_];
                          }
                          respond(e) {
                              if (!isReadableStreamBYOBRequest(this)) throw new TypeError;
                              if (void 0 === this[associatedReadableByteStreamController_]) throw new TypeError;
                              return readableByteStreamControllerRespond(this[associatedReadableByteStreamController_], e);
                          }
                          respondWithNewView(e) {
                              if (!isReadableStreamBYOBRequest(this)) throw new TypeError;
                              if (void 0 === this[associatedReadableByteStreamController_]) throw new TypeError;
                              if (!ArrayBuffer.isView(e)) throw new TypeError("view parameter must be a TypedArray");
                              return readableByteStreamControllerRespondWithNewView(this[associatedReadableByteStreamController_], e);
                          }
                      }
                      class ReadableByteStreamController {
                          constructor(){
                              throw new TypeError;
                          }
                          get byobRequest() {
                              if (!isReadableByteStreamController(this)) throw new TypeError;
                              if (void 0 === this[byobRequest_] && this[pendingPullIntos_].length > 0) {
                                  const e = this[pendingPullIntos_][0], t = new Uint8Array(e.buffer, e.byteOffset + e.bytesFilled, e.byteLength - e.bytesFilled), r = Object.create(ReadableStreamBYOBRequest.prototype);
                                  setUpReadableStreamBYOBRequest(r, this, t), this[byobRequest_] = r;
                              }
                              return this[byobRequest_];
                          }
                          get desiredSize() {
                              if (!isReadableByteStreamController(this)) throw new TypeError;
                              return readableByteStreamControllerGetDesiredSize(this);
                          }
                          close() {
                              if (!isReadableByteStreamController(this)) throw new TypeError;
                              if (this[closeRequested_]) throw new TypeError("Stream is already closing");
                              if ("readable" !== this[controlledReadableByteStream_][state_]) throw new TypeError("Stream is closed or errored");
                              readableByteStreamControllerClose(this);
                          }
                          enqueue(e) {
                              if (!isReadableByteStreamController(this)) throw new TypeError;
                              if (this[closeRequested_]) throw new TypeError("Stream is already closing");
                              if ("readable" !== this[controlledReadableByteStream_][state_]) throw new TypeError("Stream is closed or errored");
                              if (!ArrayBuffer.isView(e)) throw new TypeError("chunk must be a valid ArrayBufferView");
                              return readableByteStreamControllerEnqueue(this, e);
                          }
                          error(e) {
                              if (!isReadableByteStreamController(this)) throw new TypeError;
                              readableByteStreamControllerError(this, e);
                          }
                          [cancelSteps_](e) {
                              this[pendingPullIntos_].length > 0 && (this[pendingPullIntos_][0].bytesFilled = 0), resetQueue(this);
                              const t = this[cancelAlgorithm_](e);
                              return readableByteStreamControllerClearAlgorithms(this), t;
                          }
                          [pullSteps_](e) {
                              const t = this[controlledReadableByteStream_];
                              if (this[queueTotalSize_] > 0) {
                                  const t = this[queue_].shift();
                                  this[queueTotalSize_] -= t.byteLength, readableByteStreamControllerHandleQueueDrain(this);
                                  const r = new Uint8Array(t.buffer, t.byteOffset, t.byteLength);
                                  return Promise.resolve(readableStreamCreateReadResult(r, !1, e));
                              }
                              const r = this[autoAllocateChunkSize_];
                              if (void 0 !== r) {
                                  let e;
                                  try {
                                      e = new ArrayBuffer(r);
                                  } catch (e) {
                                      return Promise.reject(e);
                                  }
                                  const t = {
                                      buffer: e,
                                      byteOffset: 0,
                                      byteLength: r,
                                      bytesFilled: 0,
                                      elementSize: 1,
                                      ctor: Uint8Array,
                                      readerType: "default"
                                  };
                                  this[pendingPullIntos_].push(t);
                              }
                              const n = readableStreamAddReadRequest(t, e);
                              return readableByteStreamControllerCallPullIfNeeded(this), n;
                          }
                      }
                      function setUpReadableByteStreamControllerFromUnderlyingSource(e, t, r) {
                          const n = Object.create(ReadableByteStreamController.prototype), i = createAlgorithmFromUnderlyingMethod(t, "pull", [
                              n
                          ]), o = createAlgorithmFromUnderlyingMethod(t, "cancel", []);
                          let s = t.autoAllocateChunkSize;
                          if (void 0 !== s && (s = Number(s), !isInteger(s) || s <= 0)) throw new RangeError("autoAllocateChunkSize must be a positive, finite integer");
                          setUpReadableByteStreamController(e, n, ()=>invokeOrNoop(t, "start", [
                                  n
                              ]), i, o, r, s);
                      }
                      class SDReadableStreamBYOBReader {
                          constructor(e){
                              if (!isReadableStream(e)) throw new TypeError;
                              if (!isReadableByteStreamController(e[readableStreamController_])) throw new TypeError;
                              if (isReadableStreamLocked(e)) throw new TypeError("The stream is locked.");
                              readableStreamReaderGenericInitialize(this, e), this[readIntoRequests_] = [];
                          }
                          get closed() {
                              return isReadableStreamBYOBReader(this) ? this[closedPromise_].promise : Promise.reject(new TypeError);
                          }
                          cancel(e) {
                              if (!isReadableStreamBYOBReader(this)) return Promise.reject(new TypeError);
                              const t = this[ownerReadableStream_];
                              return void 0 === t ? Promise.reject(new TypeError("Reader is not associated with a stream")) : readableStreamCancel(t, e);
                          }
                          read(e) {
                              return isReadableStreamBYOBReader(this) ? void 0 === this[ownerReadableStream_] ? Promise.reject(new TypeError("Reader is not associated with a stream")) : ArrayBuffer.isView(e) ? 0 === e.byteLength ? Promise.reject(new TypeError("supplied buffer view must be > 0 bytes")) : readableStreamBYOBReaderRead(this, e, !0) : Promise.reject(new TypeError("view argument must be a valid ArrayBufferView")) : Promise.reject(new TypeError);
                          }
                          releaseLock() {
                              if (!isReadableStreamBYOBReader(this)) throw new TypeError;
                              if (void 0 === this[ownerReadableStream_]) throw new TypeError("Reader is not associated with a stream");
                              if (this[readIntoRequests_].length > 0) throw new TypeError;
                              readableStreamReaderGenericRelease(this);
                          }
                      }
                      class SDReadableStream {
                          constructor(e = {}, t = {}){
                              initializeReadableStream(this);
                              const r = t.size, n = t.highWaterMark, i = e.type;
                              if (void 0 === i) {
                                  const t = makeSizeAlgorithmFromSizeFunction(r);
                                  setUpReadableStreamDefaultControllerFromUnderlyingSource(this, e, validateAndNormalizeHighWaterMark(void 0 === n ? 1 : n), t);
                              } else {
                                  if ("bytes" !== String(i)) throw new RangeError("The underlying source's `type` field must be undefined or 'bytes'");
                                  if (void 0 !== r) throw new RangeError("bytes streams cannot have a strategy with a `size` field");
                                  setUpReadableByteStreamControllerFromUnderlyingSource(this, e, validateAndNormalizeHighWaterMark(void 0 === n ? 0 : n));
                              }
                          }
                          get locked() {
                              return isReadableStreamLocked(this);
                          }
                          getReader(e) {
                              if (!isReadableStream(this)) throw new TypeError;
                              void 0 === e && (e = {});
                              const { mode: t  } = e;
                              if (void 0 === t) return new ReadableStreamDefaultReader(this);
                              if ("byob" === String(t)) return new SDReadableStreamBYOBReader(this);
                              throw RangeError("mode option must be undefined or `byob`");
                          }
                          cancel(e) {
                              return isReadableStream(this) ? isReadableStreamLocked(this) ? Promise.reject(new TypeError("Cannot cancel a locked stream")) : readableStreamCancel(this, e) : Promise.reject(new TypeError);
                          }
                          tee() {
                              return readableStreamTee(this, !1);
                          }
                          pipeThrough(e, t = {}) {
                              const { readable: r , writable: n  } = e;
                              if (!isReadableStream(this)) throw new TypeError;
                              if (!isWritableStream(n)) throw new TypeError("writable must be a WritableStream");
                              if (!isReadableStream(r)) throw new TypeError("readable must be a ReadableStream");
                              if (void 0 !== t.signal && !isAbortSignal(t.signal)) throw new TypeError("options.signal must be an AbortSignal instance");
                              if (isReadableStreamLocked(this)) throw new TypeError("Cannot pipeThrough on a locked stream");
                              if (isWritableStreamLocked(n)) throw new TypeError("Cannot pipeThrough to a locked stream");
                              return pipeTo(this, n, t).catch(()=>{}), r;
                          }
                          pipeTo(e, t = {}) {
                              return isReadableStream(this) ? isWritableStream(e) ? void 0 === t.signal || isAbortSignal(t.signal) ? isReadableStreamLocked(this) ? Promise.reject(new TypeError("Cannot pipe from a locked stream")) : isWritableStreamLocked(e) ? Promise.reject(new TypeError("Cannot pipe to a locked stream")) : pipeTo(this, e, t) : Promise.reject(new TypeError("options.signal must be an AbortSignal instance")) : Promise.reject(new TypeError("destination must be a WritableStream")) : Promise.reject(new TypeError);
                          }
                      }
                      function createReadableStream(e, t, r, n, i) {
                          void 0 === n && (n = 1), void 0 === i && (i = ()=>1);
                          const o = Object.create(SDReadableStream.prototype);
                          return initializeReadableStream(o), setUpReadableStreamDefaultController(o, Object.create(ReadableStreamDefaultController.prototype), e, t, r, n, i), o;
                      }
                      function readableStreamTee(e, t) {
                          if (!isReadableStream(e)) throw new TypeError;
                          const r = new ReadableStreamDefaultReader(e);
                          let n, i, o, s, a, l = !1, u = !1, c = !1;
                          const d = new Promise((e)=>a = e), h = ()=>readableStreamDefaultReaderRead(r).then(({ value: e , done: r  })=>{
                                  if (r && !l && (u || readableStreamDefaultControllerClose(o[readableStreamController_]), c || readableStreamDefaultControllerClose(s[readableStreamController_]), l = !0), l) return;
                                  const n = e;
                                  let i = e;
                                  u || readableStreamDefaultControllerEnqueue(o[readableStreamController_], n), c || (t && (i = cloneValue(i)), readableStreamDefaultControllerEnqueue(s[readableStreamController_], i));
                              }), f = ()=>{};
                          return o = createReadableStream(f, h, (t)=>{
                              if (u = !0, n = t, c) {
                                  const t = readableStreamCancel(e, [
                                      n,
                                      i
                                  ]);
                                  a(t);
                              }
                              return d;
                          }), s = createReadableStream(f, h, (t)=>{
                              if (c = !0, i = t, u) {
                                  const t = readableStreamCancel(e, [
                                      n,
                                      i
                                  ]);
                                  a(t);
                              }
                              return d;
                          }), r[closedPromise_].promise.catch((e)=>{
                              l || (readableStreamDefaultControllerError(o[readableStreamController_], e), readableStreamDefaultControllerError(s[readableStreamController_], e), l = !0);
                          }), [
                              o,
                              s
                          ];
                      }
                      class WritableStreamDefaultController {
                          constructor(){
                              throw new TypeError;
                          }
                          error(e) {
                              if (!isWritableStreamDefaultController(this)) throw new TypeError;
                              "writable" === this[controlledWritableStream_][state_] && writableStreamDefaultControllerError(this, e);
                          }
                          [abortSteps_](e) {
                              const t = this[abortAlgorithm_](e);
                              return writableStreamDefaultControllerClearAlgorithms(this), t;
                          }
                          [errorSteps_]() {
                              resetQueue(this);
                          }
                      }
                      function setUpWritableStreamDefaultControllerFromUnderlyingSink(e, t, r, n) {
                          const i = Object.create(WritableStreamDefaultController.prototype), o = createAlgorithmFromUnderlyingMethod(t, "write", [
                              i
                          ]), s = createAlgorithmFromUnderlyingMethod(t, "close", []), a = createAlgorithmFromUnderlyingMethod(t, "abort", []);
                          setUpWritableStreamDefaultController(e, i, function() {
                              return invokeOrNoop(t, "start", [
                                  i
                              ]);
                          }, o, s, a, r, n);
                      }
                      class WritableStream {
                          constructor(e = {}, t = {}){
                              initializeWritableStream(this);
                              const r = t.size, n = t.highWaterMark;
                              if (void 0 !== e.type) throw new RangeError("The type of an underlying sink must be undefined");
                              const i = makeSizeAlgorithmFromSizeFunction(r);
                              setUpWritableStreamDefaultControllerFromUnderlyingSink(this, e, validateAndNormalizeHighWaterMark(void 0 === n ? 1 : n), i);
                          }
                          get locked() {
                              if (!isWritableStream(this)) throw new TypeError;
                              return isWritableStreamLocked(this);
                          }
                          abort(e) {
                              return isWritableStream(this) ? isWritableStreamLocked(this) ? Promise.reject(new TypeError("Cannot abort a locked stream")) : writableStreamAbort(this, e) : Promise.reject(new TypeError);
                          }
                          getWriter() {
                              if (!isWritableStream(this)) throw new TypeError;
                              return new WritableStreamDefaultWriter(this);
                          }
                      }
                      function createWritableStream(e, t, r, n, i, o) {
                          void 0 === i && (i = 1), void 0 === o && (o = ()=>1);
                          const s = Object.create(WritableStream.prototype);
                          return initializeWritableStream(s), setUpWritableStreamDefaultController(s, Object.create(WritableStreamDefaultController.prototype), e, t, r, n, i, o), s;
                      }
                      const backpressure_$1 = Symbol("backpressure_"), backpressureChangePromise_ = Symbol("backpressureChangePromise_"), readable_ = Symbol("readable_"), transformStreamController_ = Symbol("transformStreamController_"), writable_ = Symbol("writable_"), controlledTransformStream_ = Symbol("controlledTransformStream_"), flushAlgorithm_ = Symbol("flushAlgorithm_"), transformAlgorithm_ = Symbol("transformAlgorithm_");
                      function isTransformStream(e) {
                          return "object" == typeof e && null !== e && transformStreamController_ in e;
                      }
                      function initializeTransformStream(e, t, r, n, i, o) {
                          const s = function() {
                              return t;
                          };
                          e[writable_] = createWritableStream(s, function(t) {
                              return transformStreamDefaultSinkWriteAlgorithm(e, t);
                          }, function() {
                              return transformStreamDefaultSinkCloseAlgorithm(e);
                          }, function(t) {
                              return transformStreamDefaultSinkAbortAlgorithm(e, t);
                          }, r, n), e[readable_] = createReadableStream(s, function() {
                              return transformStreamDefaultSourcePullAlgorithm(e);
                          }, function(t) {
                              return transformStreamErrorWritableAndUnblockWrite(e, t), Promise.resolve(void 0);
                          }, i, o), e[backpressure_$1] = void 0, e[backpressureChangePromise_] = void 0, transformStreamSetBackpressure(e, !0), e[transformStreamController_] = void 0;
                      }
                      function transformStreamError(e, t) {
                          readableStreamDefaultControllerError(e[readable_][readableStreamController_], t), transformStreamErrorWritableAndUnblockWrite(e, t);
                      }
                      function transformStreamErrorWritableAndUnblockWrite(e, t) {
                          transformStreamDefaultControllerClearAlgorithms(e[transformStreamController_]), writableStreamDefaultControllerErrorIfNeeded(e[writable_][writableStreamController_], t), e[backpressure_$1] && transformStreamSetBackpressure(e, !1);
                      }
                      function transformStreamSetBackpressure(e, t) {
                          void 0 !== e[backpressure_$1] && e[backpressureChangePromise_].resolve(void 0), e[backpressureChangePromise_] = createControlledPromise(), e[backpressure_$1] = t;
                      }
                      function isTransformStreamDefaultController(e) {
                          return "object" == typeof e && null !== e && controlledTransformStream_ in e;
                      }
                      function setUpTransformStreamDefaultController(e, t, r, n) {
                          t[controlledTransformStream_] = e, e[transformStreamController_] = t, t[transformAlgorithm_] = r, t[flushAlgorithm_] = n;
                      }
                      function transformStreamDefaultControllerClearAlgorithms(e) {
                          e[transformAlgorithm_] = void 0, e[flushAlgorithm_] = void 0;
                      }
                      function transformStreamDefaultControllerEnqueue(e, t) {
                          const r = e[controlledTransformStream_], n = r[readable_][readableStreamController_];
                          if (!readableStreamDefaultControllerCanCloseOrEnqueue(n)) throw new TypeError;
                          try {
                              readableStreamDefaultControllerEnqueue(n, t);
                          } catch (e) {
                              throw transformStreamErrorWritableAndUnblockWrite(r, e), r[readable_][storedError_];
                          }
                          readableStreamDefaultControllerHasBackpressure(n) !== r[backpressure_$1] && transformStreamSetBackpressure(r, !0);
                      }
                      function transformStreamDefaultControllerError(e, t) {
                          transformStreamError(e[controlledTransformStream_], t);
                      }
                      function transformStreamDefaultControllerPerformTransform(e, t) {
                          return e[transformAlgorithm_](t).catch((t)=>{
                              throw transformStreamError(e[controlledTransformStream_], t), t;
                          });
                      }
                      function transformStreamDefaultControllerTerminate(e) {
                          const t = e[controlledTransformStream_], r = t[readable_][readableStreamController_];
                          readableStreamDefaultControllerCanCloseOrEnqueue(r) && readableStreamDefaultControllerClose(r), transformStreamErrorWritableAndUnblockWrite(t, new TypeError("The transform stream has been terminated"));
                      }
                      function transformStreamDefaultSinkWriteAlgorithm(e, t) {
                          const r = e[transformStreamController_];
                          return e[backpressure_$1] ? e[backpressureChangePromise_].promise.then((n)=>{
                              const i = e[writable_];
                              if ("erroring" === i[state_]) throw i[storedError_];
                              return transformStreamDefaultControllerPerformTransform(r, t);
                          }) : transformStreamDefaultControllerPerformTransform(r, t);
                      }
                      function transformStreamDefaultSinkAbortAlgorithm(e, t) {
                          return transformStreamError(e, t), Promise.resolve(void 0);
                      }
                      function transformStreamDefaultSinkCloseAlgorithm(e) {
                          const t = e[readable_], r = e[transformStreamController_], n = r[flushAlgorithm_]();
                          return transformStreamDefaultControllerClearAlgorithms(r), n.then((e)=>{
                              if ("errored" === t[state_]) throw t[storedError_];
                              const r = t[readableStreamController_];
                              readableStreamDefaultControllerCanCloseOrEnqueue(r) && readableStreamDefaultControllerClose(r);
                          }, (r)=>{
                              throw transformStreamError(e, r), t[storedError_];
                          });
                      }
                      function transformStreamDefaultSourcePullAlgorithm(e) {
                          return transformStreamSetBackpressure(e, !1), e[backpressureChangePromise_].promise;
                      }
                      class TransformStreamDefaultController {
                          constructor(){
                              throw new TypeError;
                          }
                          get desiredSize() {
                              if (!isTransformStreamDefaultController(this)) throw new TypeError;
                              return readableStreamDefaultControllerGetDesiredSize(this[controlledTransformStream_][readable_][readableStreamController_]);
                          }
                          enqueue(e) {
                              if (!isTransformStreamDefaultController(this)) throw new TypeError;
                              transformStreamDefaultControllerEnqueue(this, e);
                          }
                          error(e) {
                              if (!isTransformStreamDefaultController(this)) throw new TypeError;
                              transformStreamDefaultControllerError(this, e);
                          }
                          terminate() {
                              if (!isTransformStreamDefaultController(this)) throw new TypeError;
                              transformStreamDefaultControllerTerminate(this);
                          }
                      }
                      class TransformStream$1 {
                          constructor(e = {}, t = {}, r = {}){
                              const n = t.size, i = t.highWaterMark, o = r.size, s = r.highWaterMark;
                              if (void 0 !== e.writableType) throw new RangeError("The transformer's `writableType` field must be undefined");
                              const a = makeSizeAlgorithmFromSizeFunction(n), l = validateAndNormalizeHighWaterMark(void 0 === i ? 1 : i);
                              if (void 0 !== e.readableType) throw new RangeError("The transformer's `readableType` field must be undefined");
                              const u = makeSizeAlgorithmFromSizeFunction(o), c = validateAndNormalizeHighWaterMark(void 0 === s ? 0 : s), d = createControlledPromise();
                              initializeTransformStream(this, d.promise, l, a, c, u), setUpTransformStreamDefaultControllerFromTransformer(this, e);
                              const h = invokeOrNoop(e, "start", [
                                  this[transformStreamController_]
                              ]);
                              d.resolve(h);
                          }
                          get readable() {
                              if (!isTransformStream(this)) throw new TypeError;
                              return this[readable_];
                          }
                          get writable() {
                              if (!isTransformStream(this)) throw new TypeError;
                              return this[writable_];
                          }
                      }
                      function setUpTransformStreamDefaultControllerFromTransformer(e, t) {
                          const r = Object.create(TransformStreamDefaultController.prototype);
                          let n;
                          const i = t.transform;
                          if (void 0 !== i) {
                              if ("function" != typeof i) throw new TypeError("`transform` field of the transformer must be a function");
                              n = (e)=>promiseCall(i, t, [
                                      e,
                                      r
                                  ]);
                          } else n = function(e) {
                              try {
                                  transformStreamDefaultControllerEnqueue(r, e);
                              } catch (e) {
                                  return Promise.reject(e);
                              }
                              return Promise.resolve(void 0);
                          };
                          const o = createAlgorithmFromUnderlyingMethod(t, "flush", [
                              r
                          ]);
                          setUpTransformStreamDefaultController(e, r, n, o);
                      }
                      class ByteLengthQueuingStrategy {
                          constructor(e){
                              this.highWaterMark = e.highWaterMark;
                          }
                          size(e) {
                              return e.byteLength;
                          }
                      }
                      class CountQueuingStrategy {
                          constructor(e){
                              this.highWaterMark = e.highWaterMark;
                          }
                          size() {
                              return 1;
                          }
                      }
                      function wrapReadableStream(e, t) {
                          let r;
                          return new t({
                              start (t) {
                                  r = e.getReader(), r.closed.catch((e)=>{
                                      t.error(e);
                                  });
                              },
                              pull: (e)=>r.read().then(({ value: t , done: r  })=>{
                                      r ? e.close() : e.enqueue(t);
                                  }, (t)=>{
                                      e.error(t);
                                  }),
                              cancel (e) {
                                  r.cancel(e);
                              }
                          });
                      }
                      function getMIMETypeFromHeadersInit(e) {
                          const t = "Content-Type";
                          if (void 0 === e) return "";
                          if (e instanceof Headers) return e.get(t) || "";
                          if (Array.isArray(e)) {
                              const r = e.find((e)=>Array.isArray(e) && 2 === e.length && e[0] === t);
                              return r ? r[1] : "";
                          }
                          return e[t] || "";
                      }
                      function resolveRequestInitStream(e, t, r) {
                          if (void 0 === e) return Promise.resolve(e);
                          const n = e.body;
                          let i;
                          if (n && "object" == typeof n && (t && n instanceof t || n instanceof r) && (i = n), !i) return Promise.resolve(e);
                          const o = getMIMETypeFromHeadersInit(e.headers);
                          return readAllBytesFromStream(i.getReader(), o).then((t)=>(e.body = t, e));
                      }
                      function createAdaptedFetch(e, t, r, n, i) {
                          return function(o, s) {
                              return resolveRequestInitStream(s, r, n).then((r)=>e.call(void 0, o, r).then((e)=>{
                                      if ("body" in e) {
                                          const r = e;
                                          let o, a;
                                          e = new Proxy(r, {
                                              get (l, u, c) {
                                                  let d;
                                                  return "body" === u ? (void 0 === o && (o = wrapReadableStream(r.body, n)), d = o) : "clone" === u ? (void 0 === a && (a = function() {
                                                      const [r, n] = i(e.body, !0);
                                                      return o = r, createResponseProxyWithStreamBody(t, i, n, s);
                                                  }), d = a) : d = l[u], "function" == typeof d ? function(...e) {
                                                      return d.apply(l, e);
                                                  } : d;
                                              }
                                          });
                                      } else e.body = new n({
                                          pull: (t)=>e.arrayBuffer().then((e)=>{
                                                  t.enqueue(new Uint8Array(e)), t.close();
                                              }, (e)=>{
                                                  t.error(e);
                                              })
                                      }), e.clone = function() {
                                          const [r, n] = i(e.body, !0);
                                          return e.body = r, createResponseProxyWithStreamBody(t, i, n, s);
                                      };
                                      return e;
                                  }));
                          };
                      }
                      function readAllBytesFromStream(e, t) {
                          return new Promise((r, n)=>{
                              const i = [];
                              !function o() {
                                  e.read().then(({ value: e , done: s  })=>{
                                      s ? function() {
                                          0 === i.length && i.push(new Uint8Array(0));
                                          const e = new Blob(i, {
                                              type: t
                                          });
                                          r(e);
                                      }() : e instanceof Uint8Array ? (i.push(e), o()) : n(new TypeError("A ReadableStream body must only yield Uint8Array values"));
                                  }, (e)=>{
                                      n(e);
                                  });
                              }();
                          });
                      }
                      function createResponseProxyWithStreamBody(e, t, r, n) {
                          const i = new e("fake", n), o = getMIMETypeFromHeadersInit(i.headers);
                          let s, a = !1;
                          function l() {
                              return void 0 === s && (s = new Promise((t, i)=>{
                                  if (a = !0, r.locked) return i(new TypeError("The ReadableStream is locked"));
                                  readAllBytesFromStream(r.getReader(), o).then((r)=>{
                                      t(new e(r, n));
                                  }).catch((e)=>{
                                      i(e);
                                  });
                              })), s;
                          }
                          return new class {
                              get type() {
                                  return i.type;
                              }
                              get url() {
                                  return i.url;
                              }
                              get redirected() {
                                  return i.redirected;
                              }
                              get status() {
                                  return i.status;
                              }
                              get ok() {
                                  return i.ok;
                              }
                              get statusText() {
                                  return i.statusText;
                              }
                              get headers() {
                                  return i.headers;
                              }
                              clone() {
                                  const [i, o] = t(r, !0);
                                  return r = i, createResponseProxyWithStreamBody(e, t, o, n);
                              }
                              get body() {
                                  return r;
                              }
                              get bodyUsed() {
                                  return a;
                              }
                              arrayBuffer() {
                                  return l().then((e)=>e.arrayBuffer());
                              }
                              blob() {
                                  return l().then((e)=>e.blob());
                              }
                              formData() {
                                  return l().then((e)=>e.formData());
                              }
                              json() {
                                  return l().then((e)=>e.json());
                              }
                              text() {
                                  return l().then((e)=>e.text());
                              }
                          };
                      }
                      function createAdaptedResponse(e, t, r, n) {
                          const i = function(i, o) {
                              if (i instanceof r) {
                                  if (void 0 === t || !("body" in e)) return createResponseProxyWithStreamBody(e, n, i, o);
                                  i = wrapReadableStream(i, t);
                              }
                              return new e(i, o);
                          };
                          return i.prototype = e.prototype, i;
                      }
                      const decDecoder = Symbol("decDecoder"), decTransform = Symbol("decTransform");
                      class TextDecodeTransformer {
                          constructor(e){
                              this.decoder_ = e;
                          }
                          transform(e, t) {
                              if (!(e instanceof ArrayBuffer || ArrayBuffer.isView(e))) throw new TypeError("Input data must be a BufferSource");
                              const r = this.decoder_.decode(e, {
                                  stream: !0
                              });
                              0 !== r.length && t.enqueue(r);
                          }
                          flush(e) {
                              const t = this.decoder_.decode();
                              0 !== t.length && e.enqueue(t);
                          }
                      }
                      class TextDecoderStream {
                          constructor(e, t){
                              this[decDecoder] = new TextDecoder(e, t), this[decTransform] = new TransformStream(new TextDecodeTransformer(this[decDecoder]));
                          }
                          get encoding() {
                              return this[decDecoder].encoding;
                          }
                          get fatal() {
                              return this[decDecoder].fatal;
                          }
                          get ignoreBOM() {
                              return this[decDecoder].ignoreBOM;
                          }
                          get readable() {
                              return this[decTransform].readable;
                          }
                          get writable() {
                              return this[decTransform].writable;
                          }
                      }
                      const encEncoder = Symbol("encEncoder"), encTransform = Symbol("encTransform");
                      class TextEncodeTransformer {
                          constructor(e){
                              this.encoder_ = e, this.partial_ = void 0;
                          }
                          transform(e, t) {
                              let r = String(e);
                              void 0 !== this.partial_ && (r = this.partial_ + r, this.partial_ = void 0);
                              const n = r.length - 1, i = r.charCodeAt(n);
                              i >= 55296 && i < 56320 && (this.partial_ = String.fromCharCode(i), r = r.substring(0, n));
                              const o = this.encoder_.encode(r);
                              0 !== o.length && t.enqueue(o);
                          }
                          flush(e) {
                              this.partial_ && (e.enqueue(this.encoder_.encode(this.partial_)), this.partial_ = void 0);
                          }
                      }
                      class TextEncoderStream {
                          constructor(){
                              this[encEncoder] = new TextEncoder, this[encTransform] = new TransformStream(new TextEncodeTransformer(this[encEncoder]));
                          }
                          get encoding() {
                              return this[encEncoder].encoding;
                          }
                          get readable() {
                              return this[encTransform].readable;
                          }
                          get writable() {
                              return this[encTransform].writable;
                          }
                      }
                      const PRESET_DICT = 32, Z_DEFLATED = 8, GZIP_ID1 = 31, GZIP_ID2 = 139, inflate_mask = [
                          0,
                          1,
                          3,
                          7,
                          15,
                          31,
                          63,
                          127,
                          255,
                          511,
                          1023,
                          2047,
                          4095,
                          8191,
                          16383,
                          32767,
                          65535
                      ], swap32 = (e)=>(e >>> 24 & 255 | e >>> 8 & 65280 | (65280 & e) << 8 | (255 & e) << 24) >>> 0;
                      function u8ArrayFromBufferSource(e) {
                          return e instanceof ArrayBuffer ? new Uint8Array(e) : ArrayBuffer.isView(e) ? e instanceof Uint8Array ? e : new Uint8Array(e.buffer, e.byteOffset, e.byteLength) : void 0;
                      }
                      function adler32(e, t = 1) {
                          const r = u8ArrayFromBufferSource(e);
                          if (!r) throw new TypeError("source must be a BufferSource");
                          return computeAdler32(r, t);
                      }
                      const BASE = 65521, NMAX = 5552;
                      function computeAdler32(e, t = 1) {
                          let r = t >>> 16 & 65535;
                          t &= 65535;
                          let n = e.length, i = 0;
                          for(; n >= NMAX;){
                              n -= NMAX;
                              let o = NMAX / 16;
                              do r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++];
                              while (--o);
                              t %= BASE, r += BASE;
                          }
                          if (n) {
                              for(; n >= 16;)n -= 16, r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++], r += t += e[i++];
                              for(; n--;)r += t += e[i++];
                              t %= BASE, r %= BASE;
                          }
                          return t | r << 16;
                      }
                      function crc32(e, t = 0) {
                          const r = u8ArrayFromBufferSource(e);
                          if (!r) throw new TypeError("source must be a BufferSource");
                          return computeCRC32(r, t);
                      }
                      const endian = new Uint32Array([
                          1
                      ]), endianCheck = new Uint8Array(endian.buffer, 0, 1)[0], computeCRC32 = 1 === endianCheck ? computeCRC32Little : computeCRC32Big;
                      function computeCRC32Little(e, t = 0) {
                          let r = ~t, n = e.byteOffset, i = 0, o = e.byteLength;
                          const s = crcTables[0], a = crcTables[1], l = crcTables[2], u = crcTables[3];
                          for(; o && 3 & n;)r = s[255 & (r ^ e[i++])] ^ r >>> 8, o--, n++;
                          const c = new Uint32Array(e.buffer, n, o >>> 2);
                          let d = 0;
                          for(; o >= 32;)r ^= c[d++], r = u[255 & r] ^ l[r >>> 8 & 255] ^ a[r >>> 16 & 255] ^ s[r >>> 24], r ^= c[d++], r = u[255 & r] ^ l[r >>> 8 & 255] ^ a[r >>> 16 & 255] ^ s[r >>> 24], r ^= c[d++], r = u[255 & r] ^ l[r >>> 8 & 255] ^ a[r >>> 16 & 255] ^ s[r >>> 24], r ^= c[d++], r = u[255 & r] ^ l[r >>> 8 & 255] ^ a[r >>> 16 & 255] ^ s[r >>> 24], r ^= c[d++], r = u[255 & r] ^ l[r >>> 8 & 255] ^ a[r >>> 16 & 255] ^ s[r >>> 24], r ^= c[d++], r = u[255 & r] ^ l[r >>> 8 & 255] ^ a[r >>> 16 & 255] ^ s[r >>> 24], r ^= c[d++], r = u[255 & r] ^ l[r >>> 8 & 255] ^ a[r >>> 16 & 255] ^ s[r >>> 24], r ^= c[d++], r = u[255 & r] ^ l[r >>> 8 & 255] ^ a[r >>> 16 & 255] ^ s[r >>> 24], o -= 32;
                          for(; o >= 4;)r ^= c[d++], r = u[255 & r] ^ l[r >>> 8 & 255] ^ a[r >>> 16 & 255] ^ s[r >>> 24], o -= 4;
                          if (o) {
                              i += 4 * d;
                              do r = s[255 & (r ^ e[i++])] ^ r >>> 8;
                              while (--o);
                          }
                          return r = ~r, r;
                      }
                      function computeCRC32Big(e, t = 0) {
                          let r = ~swap32(t), n = e.byteOffset, i = 0, o = e.byteLength;
                          const s = crcTables[4], a = crcTables[5], l = crcTables[6], u = crcTables[7];
                          for(; o && 3 & n;)r = s[r >>> 24 ^ e[i++]] ^ r << 8, o--, n++;
                          const c = new Uint32Array(e.buffer, n, o >>> 2);
                          let d = 0;
                          for(; o >= 32;)r ^= c[d++], r = s[255 & r] ^ a[r >>> 8 & 255] ^ l[r >>> 16 & 255] ^ u[r >>> 24], r ^= c[d++], r = s[255 & r] ^ a[r >>> 8 & 255] ^ l[r >>> 16 & 255] ^ u[r >>> 24], r ^= c[d++], r = s[255 & r] ^ a[r >>> 8 & 255] ^ l[r >>> 16 & 255] ^ u[r >>> 24], r ^= c[d++], r = s[255 & r] ^ a[r >>> 8 & 255] ^ l[r >>> 16 & 255] ^ u[r >>> 24], r ^= c[d++], r = s[255 & r] ^ a[r >>> 8 & 255] ^ l[r >>> 16 & 255] ^ u[r >>> 24], r ^= c[d++], r = s[255 & r] ^ a[r >>> 8 & 255] ^ l[r >>> 16 & 255] ^ u[r >>> 24], r ^= c[d++], r = s[255 & r] ^ a[r >>> 8 & 255] ^ l[r >>> 16 & 255] ^ u[r >>> 24], r ^= c[d++], r = s[255 & r] ^ a[r >>> 8 & 255] ^ l[r >>> 16 & 255] ^ u[r >>> 24], o -= 32;
                          for(; o >= 4;)r ^= c[d++], r = s[255 & r] ^ a[r >>> 8 & 255] ^ l[r >>> 16 & 255] ^ u[r >>> 24], o -= 4;
                          if (o) {
                              i += 4 * d;
                              do r = s[r >>> 24 ^ e[i++]] ^ r << 8;
                              while (--o);
                          }
                          return r = ~r, swap32(r);
                      }
                      function makeCRCTables() {
                          const e = new ArrayBuffer(8192), t = [
                              new Uint32Array(e, 0, 256),
                              new Uint32Array(e, 1024, 256),
                              new Uint32Array(e, 2048, 256),
                              new Uint32Array(e, 3072, 256),
                              new Uint32Array(e, 4096, 256),
                              new Uint32Array(e, 5120, 256),
                              new Uint32Array(e, 6144, 256),
                              new Uint32Array(e, 7168, 256)
                          ];
                          for(let e = 0; e < 256; e++){
                              let r = e;
                              for(let e = 0; e < 8; e++)r = 1 & r ? 3988292384 ^ r >>> 1 : r >>> 1;
                              t[0][e] = r, t[4][e] = swap32(r);
                          }
                          for(let e = 0; e < 256; e++){
                              let r = t[0][e];
                              for(let n = 1; n < 4; n++)r = t[0][255 & r] ^ r >>> 8, t[n][e] = r, t[n + 4][e] = swap32(r);
                          }
                          return t;
                      }
                      const crcTables = makeCRCTables(), OUTPUT_BUFSIZE = 16384;
                      class ZStream {
                          constructor(){
                              this.avail_in = 0, this.next_in_index = 0, this.next_out = new Uint8Array(OUTPUT_BUFSIZE), this.avail_out = this.next_out.byteLength, this.next_out_index = 0, this.total_in = this.total_out = 0, this.msg = "";
                          }
                          append(e) {
                              this.next_in = e, this.avail_in = e.length, this.next_in_index = 0;
                          }
                          read_buf(e, t) {
                              return this.next_in.subarray(e, e + t);
                          }
                          read_into_buf(e, t, r) {
                              let n = this.avail_in;
                              return n > r && (n = r), 0 === n ? 0 : (e.set(this.next_in.subarray(this.next_in_index, this.next_in_index + n), t), this.avail_in -= n, this.next_in_index += n, this.total_in += n, n);
                          }
                          flush_pending(e) {
                              var t = e.pending;
                              t > this.avail_out && (t = this.avail_out), 0 !== t && (this.next_out.set(e.pending_buf.subarray(e.pending_out, e.pending_out + t), this.next_out_index), this.next_out_index += t, e.pending_out += t, this.total_out += t, this.avail_out -= t, e.pending -= t, 0 === e.pending && (e.pending_out = 0));
                          }
                      }
                      function InfCodes() {
                          let e, t, r, n, i = 0, o = 0, s = 0, a = 0, l = 0, u = 0, c = 0, d = 0, h = 0, f = 0;
                          function p(e, t, r, n, i, o, s, a) {
                              let l, u, c, d, h, f, p, m, y, g, v, b, w, _, S, E;
                              p = a.next_in_index, m = a.avail_in, h = s.bitb, f = s.bitk, y = s.write, g = y < s.read ? s.read - y - 1 : s.end - y, v = inflate_mask[e], b = inflate_mask[t];
                              do {
                                  for(; f < 20;)m--, h |= (255 & a.next_in[p++]) << f, f += 8;
                                  if (l = h & v, u = r, c = n, E = 3 * (c + l), d = u[E], 0 !== d) for(;;){
                                      if (h >>= u[E + 1], f -= u[E + 1], 0 != (16 & d)) {
                                          for(d &= 15, w = u[E + 2] + (h & inflate_mask[d]), h >>= d, f -= d; f < 15;)m--, h |= (255 & a.next_in[p++]) << f, f += 8;
                                          for(l = h & b, u = i, c = o, E = 3 * (c + l), d = u[E];;){
                                              if (h >>= u[E + 1], f -= u[E + 1], 0 != (16 & d)) {
                                                  for(d &= 15; f < d;)m--, h |= (255 & a.next_in[p++]) << f, f += 8;
                                                  if (_ = u[E + 2] + (h & inflate_mask[d]), h >>= d, f -= d, g -= w, y >= _) S = y - _, s.window[y++] = s.window[S++], s.window[y++] = s.window[S++], w -= 2;
                                                  else {
                                                      S = y - _;
                                                      do S += s.end;
                                                      while (S < 0);
                                                      if (d = s.end - S, w > d) {
                                                          w -= d;
                                                          do s.window[y++] = s.window[S++];
                                                          while (0 != --d);
                                                          S = 0;
                                                      }
                                                  }
                                                  do s.window[y++] = s.window[S++];
                                                  while (0 != --w);
                                                  break;
                                              }
                                              if (0 != (64 & d)) return a.msg = "invalid distance code", w = a.avail_in - m, w = f >> 3 < w ? f >> 3 : w, m += w, p -= w, f -= w << 3, s.bitb = h, s.bitk = f, a.avail_in = m, a.total_in += p - a.next_in_index, a.next_in_index = p, s.write = y, -3;
                                              l += u[E + 2], l += h & inflate_mask[d], E = 3 * (c + l), d = u[E];
                                          }
                                          break;
                                      }
                                      if (0 != (64 & d)) return 0 != (32 & d) ? (w = a.avail_in - m, w = f >> 3 < w ? f >> 3 : w, m += w, p -= w, f -= w << 3, s.bitb = h, s.bitk = f, a.avail_in = m, a.total_in += p - a.next_in_index, a.next_in_index = p, s.write = y, 1) : (a.msg = "invalid literal/length code", w = a.avail_in - m, w = f >> 3 < w ? f >> 3 : w, m += w, p -= w, f -= w << 3, s.bitb = h, s.bitk = f, a.avail_in = m, a.total_in += p - a.next_in_index, a.next_in_index = p, s.write = y, -3);
                                      if (l += u[E + 2], l += h & inflate_mask[d], E = 3 * (c + l), d = u[E], 0 === d) {
                                          h >>= u[E + 1], f -= u[E + 1], s.window[y++] = u[E + 2], g--;
                                          break;
                                      }
                                  }
                                  else h >>= u[E + 1], f -= u[E + 1], s.window[y++] = u[E + 2], g--;
                              }while (g >= 258 && m >= 10);
                              return w = a.avail_in - m, w = f >> 3 < w ? f >> 3 : w, m += w, p -= w, f -= w << 3, s.bitb = h, s.bitk = f, a.avail_in = m, a.total_in += p - a.next_in_index, a.next_in_index = p, s.write = y, 0;
                          }
                          return {
                              init: function(t, i, o, s, a, l) {
                                  e = 0, c = t, d = i, r = o, h = s, n = a, f = l;
                              },
                              proc: function(m, y, g) {
                                  let v, b, w, _, S, E, k, A = 0, P = 0, N = 0;
                                  for(N = y.next_in_index, _ = y.avail_in, A = m.bitb, P = m.bitk, S = m.write, E = S < m.read ? m.read - S - 1 : m.end - S;;)switch(e){
                                      case 0:
                                          if (E >= 258 && _ >= 10 && (m.bitb = A, m.bitk = P, y.avail_in = _, y.total_in += N - y.next_in_index, y.next_in_index = N, m.write = S, g = p(c, d, r, h, n, f, m, y), N = y.next_in_index, _ = y.avail_in, A = m.bitb, P = m.bitk, S = m.write, E = S < m.read ? m.read - S - 1 : m.end - S, 0 !== g)) {
                                              e = 1 === g ? 7 : 9;
                                              break;
                                          }
                                          s = c, t = r, o = h, e = 1;
                                      case 1:
                                          for(v = s; P < v;){
                                              if (0 === _) return m.bitb = A, m.bitk = P, y.avail_in = _, y.total_in += N - y.next_in_index, y.next_in_index = N, m.write = S, m.inflate_flush(y, g);
                                              g = 0, _--, A |= (255 & y.next_in[N++]) << P, P += 8;
                                          }
                                          if (b = 3 * (o + (A & inflate_mask[v])), A >>>= t[b + 1], P -= t[b + 1], w = t[b], 0 === w) {
                                              a = t[b + 2], e = 6;
                                              break;
                                          }
                                          if (0 != (16 & w)) {
                                              l = 15 & w, i = t[b + 2], e = 2;
                                              break;
                                          }
                                          if (0 == (64 & w)) {
                                              s = w, o = b / 3 + t[b + 2];
                                              break;
                                          }
                                          if (0 != (32 & w)) {
                                              e = 7;
                                              break;
                                          }
                                          return e = 9, y.msg = "invalid literal/length code", g = -3, m.bitb = A, m.bitk = P, y.avail_in = _, y.total_in += N - y.next_in_index, y.next_in_index = N, m.write = S, m.inflate_flush(y, g);
                                      case 2:
                                          for(v = l; P < v;){
                                              if (0 === _) return m.bitb = A, m.bitk = P, y.avail_in = _, y.total_in += N - y.next_in_index, y.next_in_index = N, m.write = S, m.inflate_flush(y, g);
                                              g = 0, _--, A |= (255 & y.next_in[N++]) << P, P += 8;
                                          }
                                          i += A & inflate_mask[v], A >>= v, P -= v, s = d, t = n, o = f, e = 3;
                                      case 3:
                                          for(v = s; P < v;){
                                              if (0 === _) return m.bitb = A, m.bitk = P, y.avail_in = _, y.total_in += N - y.next_in_index, y.next_in_index = N, m.write = S, m.inflate_flush(y, g);
                                              g = 0, _--, A |= (255 & y.next_in[N++]) << P, P += 8;
                                          }
                                          if (b = 3 * (o + (A & inflate_mask[v])), A >>= t[b + 1], P -= t[b + 1], w = t[b], 0 != (16 & w)) {
                                              l = 15 & w, u = t[b + 2], e = 4;
                                              break;
                                          }
                                          if (0 == (64 & w)) {
                                              s = w, o = b / 3 + t[b + 2];
                                              break;
                                          }
                                          return e = 9, y.msg = "invalid distance code", g = -3, m.bitb = A, m.bitk = P, y.avail_in = _, y.total_in += N - y.next_in_index, y.next_in_index = N, m.write = S, m.inflate_flush(y, g);
                                      case 4:
                                          for(v = l; P < v;){
                                              if (0 === _) return m.bitb = A, m.bitk = P, y.avail_in = _, y.total_in += N - y.next_in_index, y.next_in_index = N, m.write = S, m.inflate_flush(y, g);
                                              g = 0, _--, A |= (255 & y.next_in[N++]) << P, P += 8;
                                          }
                                          u += A & inflate_mask[v], A >>= v, P -= v, e = 5;
                                      case 5:
                                          for(k = S - u; k < 0;)k += m.end;
                                          for(; 0 !== i;){
                                              if (0 === E && (S === m.end && 0 !== m.read && (S = 0, E = S < m.read ? m.read - S - 1 : m.end - S), 0 === E && (m.write = S, g = m.inflate_flush(y, g), S = m.write, E = S < m.read ? m.read - S - 1 : m.end - S, S === m.end && 0 !== m.read && (S = 0, E = S < m.read ? m.read - S - 1 : m.end - S), 0 === E))) return m.bitb = A, m.bitk = P, y.avail_in = _, y.total_in += N - y.next_in_index, y.next_in_index = N, m.write = S, m.inflate_flush(y, g);
                                              m.window[S++] = m.window[k++], E--, k === m.end && (k = 0), i--;
                                          }
                                          e = 0;
                                          break;
                                      case 6:
                                          if (0 === E && (S === m.end && 0 !== m.read && (S = 0, E = S < m.read ? m.read - S - 1 : m.end - S), 0 === E && (m.write = S, g = m.inflate_flush(y, g), S = m.write, E = S < m.read ? m.read - S - 1 : m.end - S, S === m.end && 0 !== m.read && (S = 0, E = S < m.read ? m.read - S - 1 : m.end - S), 0 === E))) return m.bitb = A, m.bitk = P, y.avail_in = _, y.total_in += N - y.next_in_index, y.next_in_index = N, m.write = S, m.inflate_flush(y, g);
                                          g = 0, m.window[S++] = a, E--, e = 0;
                                          break;
                                      case 7:
                                          if (P > 7 && (P -= 8, _++, N--), m.write = S, g = m.inflate_flush(y, g), S = m.write, E = S < m.read ? m.read - S - 1 : m.end - S, m.read !== m.write) return m.bitb = A, m.bitk = P, y.avail_in = _, y.total_in += N - y.next_in_index, y.next_in_index = N, m.write = S, m.inflate_flush(y, g);
                                          e = 8;
                                      case 8:
                                          return g = 1, m.bitb = A, m.bitk = P, y.avail_in = _, y.total_in += N - y.next_in_index, y.next_in_index = N, m.write = S, m.inflate_flush(y, g);
                                      case 9:
                                          return g = -3, m.bitb = A, m.bitk = P, y.avail_in = _, y.total_in += N - y.next_in_index, y.next_in_index = N, m.write = S, m.inflate_flush(y, g);
                                      default:
                                          return g = -2, m.bitb = A, m.bitk = P, y.avail_in = _, y.total_in += N - y.next_in_index, y.next_in_index = N, m.write = S, m.inflate_flush(y, g);
                                  }
                              }
                          };
                      }
                      const fixed_bl = 9, fixed_bd = 5, fixed_tl = [
                          96,
                          7,
                          256,
                          0,
                          8,
                          80,
                          0,
                          8,
                          16,
                          84,
                          8,
                          115,
                          82,
                          7,
                          31,
                          0,
                          8,
                          112,
                          0,
                          8,
                          48,
                          0,
                          9,
                          192,
                          80,
                          7,
                          10,
                          0,
                          8,
                          96,
                          0,
                          8,
                          32,
                          0,
                          9,
                          160,
                          0,
                          8,
                          0,
                          0,
                          8,
                          128,
                          0,
                          8,
                          64,
                          0,
                          9,
                          224,
                          80,
                          7,
                          6,
                          0,
                          8,
                          88,
                          0,
                          8,
                          24,
                          0,
                          9,
                          144,
                          83,
                          7,
                          59,
                          0,
                          8,
                          120,
                          0,
                          8,
                          56,
                          0,
                          9,
                          208,
                          81,
                          7,
                          17,
                          0,
                          8,
                          104,
                          0,
                          8,
                          40,
                          0,
                          9,
                          176,
                          0,
                          8,
                          8,
                          0,
                          8,
                          136,
                          0,
                          8,
                          72,
                          0,
                          9,
                          240,
                          80,
                          7,
                          4,
                          0,
                          8,
                          84,
                          0,
                          8,
                          20,
                          85,
                          8,
                          227,
                          83,
                          7,
                          43,
                          0,
                          8,
                          116,
                          0,
                          8,
                          52,
                          0,
                          9,
                          200,
                          81,
                          7,
                          13,
                          0,
                          8,
                          100,
                          0,
                          8,
                          36,
                          0,
                          9,
                          168,
                          0,
                          8,
                          4,
                          0,
                          8,
                          132,
                          0,
                          8,
                          68,
                          0,
                          9,
                          232,
                          80,
                          7,
                          8,
                          0,
                          8,
                          92,
                          0,
                          8,
                          28,
                          0,
                          9,
                          152,
                          84,
                          7,
                          83,
                          0,
                          8,
                          124,
                          0,
                          8,
                          60,
                          0,
                          9,
                          216,
                          82,
                          7,
                          23,
                          0,
                          8,
                          108,
                          0,
                          8,
                          44,
                          0,
                          9,
                          184,
                          0,
                          8,
                          12,
                          0,
                          8,
                          140,
                          0,
                          8,
                          76,
                          0,
                          9,
                          248,
                          80,
                          7,
                          3,
                          0,
                          8,
                          82,
                          0,
                          8,
                          18,
                          85,
                          8,
                          163,
                          83,
                          7,
                          35,
                          0,
                          8,
                          114,
                          0,
                          8,
                          50,
                          0,
                          9,
                          196,
                          81,
                          7,
                          11,
                          0,
                          8,
                          98,
                          0,
                          8,
                          34,
                          0,
                          9,
                          164,
                          0,
                          8,
                          2,
                          0,
                          8,
                          130,
                          0,
                          8,
                          66,
                          0,
                          9,
                          228,
                          80,
                          7,
                          7,
                          0,
                          8,
                          90,
                          0,
                          8,
                          26,
                          0,
                          9,
                          148,
                          84,
                          7,
                          67,
                          0,
                          8,
                          122,
                          0,
                          8,
                          58,
                          0,
                          9,
                          212,
                          82,
                          7,
                          19,
                          0,
                          8,
                          106,
                          0,
                          8,
                          42,
                          0,
                          9,
                          180,
                          0,
                          8,
                          10,
                          0,
                          8,
                          138,
                          0,
                          8,
                          74,
                          0,
                          9,
                          244,
                          80,
                          7,
                          5,
                          0,
                          8,
                          86,
                          0,
                          8,
                          22,
                          192,
                          8,
                          0,
                          83,
                          7,
                          51,
                          0,
                          8,
                          118,
                          0,
                          8,
                          54,
                          0,
                          9,
                          204,
                          81,
                          7,
                          15,
                          0,
                          8,
                          102,
                          0,
                          8,
                          38,
                          0,
                          9,
                          172,
                          0,
                          8,
                          6,
                          0,
                          8,
                          134,
                          0,
                          8,
                          70,
                          0,
                          9,
                          236,
                          80,
                          7,
                          9,
                          0,
                          8,
                          94,
                          0,
                          8,
                          30,
                          0,
                          9,
                          156,
                          84,
                          7,
                          99,
                          0,
                          8,
                          126,
                          0,
                          8,
                          62,
                          0,
                          9,
                          220,
                          82,
                          7,
                          27,
                          0,
                          8,
                          110,
                          0,
                          8,
                          46,
                          0,
                          9,
                          188,
                          0,
                          8,
                          14,
                          0,
                          8,
                          142,
                          0,
                          8,
                          78,
                          0,
                          9,
                          252,
                          96,
                          7,
                          256,
                          0,
                          8,
                          81,
                          0,
                          8,
                          17,
                          85,
                          8,
                          131,
                          82,
                          7,
                          31,
                          0,
                          8,
                          113,
                          0,
                          8,
                          49,
                          0,
                          9,
                          194,
                          80,
                          7,
                          10,
                          0,
                          8,
                          97,
                          0,
                          8,
                          33,
                          0,
                          9,
                          162,
                          0,
                          8,
                          1,
                          0,
                          8,
                          129,
                          0,
                          8,
                          65,
                          0,
                          9,
                          226,
                          80,
                          7,
                          6,
                          0,
                          8,
                          89,
                          0,
                          8,
                          25,
                          0,
                          9,
                          146,
                          83,
                          7,
                          59,
                          0,
                          8,
                          121,
                          0,
                          8,
                          57,
                          0,
                          9,
                          210,
                          81,
                          7,
                          17,
                          0,
                          8,
                          105,
                          0,
                          8,
                          41,
                          0,
                          9,
                          178,
                          0,
                          8,
                          9,
                          0,
                          8,
                          137,
                          0,
                          8,
                          73,
                          0,
                          9,
                          242,
                          80,
                          7,
                          4,
                          0,
                          8,
                          85,
                          0,
                          8,
                          21,
                          80,
                          8,
                          258,
                          83,
                          7,
                          43,
                          0,
                          8,
                          117,
                          0,
                          8,
                          53,
                          0,
                          9,
                          202,
                          81,
                          7,
                          13,
                          0,
                          8,
                          101,
                          0,
                          8,
                          37,
                          0,
                          9,
                          170,
                          0,
                          8,
                          5,
                          0,
                          8,
                          133,
                          0,
                          8,
                          69,
                          0,
                          9,
                          234,
                          80,
                          7,
                          8,
                          0,
                          8,
                          93,
                          0,
                          8,
                          29,
                          0,
                          9,
                          154,
                          84,
                          7,
                          83,
                          0,
                          8,
                          125,
                          0,
                          8,
                          61,
                          0,
                          9,
                          218,
                          82,
                          7,
                          23,
                          0,
                          8,
                          109,
                          0,
                          8,
                          45,
                          0,
                          9,
                          186,
                          0,
                          8,
                          13,
                          0,
                          8,
                          141,
                          0,
                          8,
                          77,
                          0,
                          9,
                          250,
                          80,
                          7,
                          3,
                          0,
                          8,
                          83,
                          0,
                          8,
                          19,
                          85,
                          8,
                          195,
                          83,
                          7,
                          35,
                          0,
                          8,
                          115,
                          0,
                          8,
                          51,
                          0,
                          9,
                          198,
                          81,
                          7,
                          11,
                          0,
                          8,
                          99,
                          0,
                          8,
                          35,
                          0,
                          9,
                          166,
                          0,
                          8,
                          3,
                          0,
                          8,
                          131,
                          0,
                          8,
                          67,
                          0,
                          9,
                          230,
                          80,
                          7,
                          7,
                          0,
                          8,
                          91,
                          0,
                          8,
                          27,
                          0,
                          9,
                          150,
                          84,
                          7,
                          67,
                          0,
                          8,
                          123,
                          0,
                          8,
                          59,
                          0,
                          9,
                          214,
                          82,
                          7,
                          19,
                          0,
                          8,
                          107,
                          0,
                          8,
                          43,
                          0,
                          9,
                          182,
                          0,
                          8,
                          11,
                          0,
                          8,
                          139,
                          0,
                          8,
                          75,
                          0,
                          9,
                          246,
                          80,
                          7,
                          5,
                          0,
                          8,
                          87,
                          0,
                          8,
                          23,
                          192,
                          8,
                          0,
                          83,
                          7,
                          51,
                          0,
                          8,
                          119,
                          0,
                          8,
                          55,
                          0,
                          9,
                          206,
                          81,
                          7,
                          15,
                          0,
                          8,
                          103,
                          0,
                          8,
                          39,
                          0,
                          9,
                          174,
                          0,
                          8,
                          7,
                          0,
                          8,
                          135,
                          0,
                          8,
                          71,
                          0,
                          9,
                          238,
                          80,
                          7,
                          9,
                          0,
                          8,
                          95,
                          0,
                          8,
                          31,
                          0,
                          9,
                          158,
                          84,
                          7,
                          99,
                          0,
                          8,
                          127,
                          0,
                          8,
                          63,
                          0,
                          9,
                          222,
                          82,
                          7,
                          27,
                          0,
                          8,
                          111,
                          0,
                          8,
                          47,
                          0,
                          9,
                          190,
                          0,
                          8,
                          15,
                          0,
                          8,
                          143,
                          0,
                          8,
                          79,
                          0,
                          9,
                          254,
                          96,
                          7,
                          256,
                          0,
                          8,
                          80,
                          0,
                          8,
                          16,
                          84,
                          8,
                          115,
                          82,
                          7,
                          31,
                          0,
                          8,
                          112,
                          0,
                          8,
                          48,
                          0,
                          9,
                          193,
                          80,
                          7,
                          10,
                          0,
                          8,
                          96,
                          0,
                          8,
                          32,
                          0,
                          9,
                          161,
                          0,
                          8,
                          0,
                          0,
                          8,
                          128,
                          0,
                          8,
                          64,
                          0,
                          9,
                          225,
                          80,
                          7,
                          6,
                          0,
                          8,
                          88,
                          0,
                          8,
                          24,
                          0,
                          9,
                          145,
                          83,
                          7,
                          59,
                          0,
                          8,
                          120,
                          0,
                          8,
                          56,
                          0,
                          9,
                          209,
                          81,
                          7,
                          17,
                          0,
                          8,
                          104,
                          0,
                          8,
                          40,
                          0,
                          9,
                          177,
                          0,
                          8,
                          8,
                          0,
                          8,
                          136,
                          0,
                          8,
                          72,
                          0,
                          9,
                          241,
                          80,
                          7,
                          4,
                          0,
                          8,
                          84,
                          0,
                          8,
                          20,
                          85,
                          8,
                          227,
                          83,
                          7,
                          43,
                          0,
                          8,
                          116,
                          0,
                          8,
                          52,
                          0,
                          9,
                          201,
                          81,
                          7,
                          13,
                          0,
                          8,
                          100,
                          0,
                          8,
                          36,
                          0,
                          9,
                          169,
                          0,
                          8,
                          4,
                          0,
                          8,
                          132,
                          0,
                          8,
                          68,
                          0,
                          9,
                          233,
                          80,
                          7,
                          8,
                          0,
                          8,
                          92,
                          0,
                          8,
                          28,
                          0,
                          9,
                          153,
                          84,
                          7,
                          83,
                          0,
                          8,
                          124,
                          0,
                          8,
                          60,
                          0,
                          9,
                          217,
                          82,
                          7,
                          23,
                          0,
                          8,
                          108,
                          0,
                          8,
                          44,
                          0,
                          9,
                          185,
                          0,
                          8,
                          12,
                          0,
                          8,
                          140,
                          0,
                          8,
                          76,
                          0,
                          9,
                          249,
                          80,
                          7,
                          3,
                          0,
                          8,
                          82,
                          0,
                          8,
                          18,
                          85,
                          8,
                          163,
                          83,
                          7,
                          35,
                          0,
                          8,
                          114,
                          0,
                          8,
                          50,
                          0,
                          9,
                          197,
                          81,
                          7,
                          11,
                          0,
                          8,
                          98,
                          0,
                          8,
                          34,
                          0,
                          9,
                          165,
                          0,
                          8,
                          2,
                          0,
                          8,
                          130,
                          0,
                          8,
                          66,
                          0,
                          9,
                          229,
                          80,
                          7,
                          7,
                          0,
                          8,
                          90,
                          0,
                          8,
                          26,
                          0,
                          9,
                          149,
                          84,
                          7,
                          67,
                          0,
                          8,
                          122,
                          0,
                          8,
                          58,
                          0,
                          9,
                          213,
                          82,
                          7,
                          19,
                          0,
                          8,
                          106,
                          0,
                          8,
                          42,
                          0,
                          9,
                          181,
                          0,
                          8,
                          10,
                          0,
                          8,
                          138,
                          0,
                          8,
                          74,
                          0,
                          9,
                          245,
                          80,
                          7,
                          5,
                          0,
                          8,
                          86,
                          0,
                          8,
                          22,
                          192,
                          8,
                          0,
                          83,
                          7,
                          51,
                          0,
                          8,
                          118,
                          0,
                          8,
                          54,
                          0,
                          9,
                          205,
                          81,
                          7,
                          15,
                          0,
                          8,
                          102,
                          0,
                          8,
                          38,
                          0,
                          9,
                          173,
                          0,
                          8,
                          6,
                          0,
                          8,
                          134,
                          0,
                          8,
                          70,
                          0,
                          9,
                          237,
                          80,
                          7,
                          9,
                          0,
                          8,
                          94,
                          0,
                          8,
                          30,
                          0,
                          9,
                          157,
                          84,
                          7,
                          99,
                          0,
                          8,
                          126,
                          0,
                          8,
                          62,
                          0,
                          9,
                          221,
                          82,
                          7,
                          27,
                          0,
                          8,
                          110,
                          0,
                          8,
                          46,
                          0,
                          9,
                          189,
                          0,
                          8,
                          14,
                          0,
                          8,
                          142,
                          0,
                          8,
                          78,
                          0,
                          9,
                          253,
                          96,
                          7,
                          256,
                          0,
                          8,
                          81,
                          0,
                          8,
                          17,
                          85,
                          8,
                          131,
                          82,
                          7,
                          31,
                          0,
                          8,
                          113,
                          0,
                          8,
                          49,
                          0,
                          9,
                          195,
                          80,
                          7,
                          10,
                          0,
                          8,
                          97,
                          0,
                          8,
                          33,
                          0,
                          9,
                          163,
                          0,
                          8,
                          1,
                          0,
                          8,
                          129,
                          0,
                          8,
                          65,
                          0,
                          9,
                          227,
                          80,
                          7,
                          6,
                          0,
                          8,
                          89,
                          0,
                          8,
                          25,
                          0,
                          9,
                          147,
                          83,
                          7,
                          59,
                          0,
                          8,
                          121,
                          0,
                          8,
                          57,
                          0,
                          9,
                          211,
                          81,
                          7,
                          17,
                          0,
                          8,
                          105,
                          0,
                          8,
                          41,
                          0,
                          9,
                          179,
                          0,
                          8,
                          9,
                          0,
                          8,
                          137,
                          0,
                          8,
                          73,
                          0,
                          9,
                          243,
                          80,
                          7,
                          4,
                          0,
                          8,
                          85,
                          0,
                          8,
                          21,
                          80,
                          8,
                          258,
                          83,
                          7,
                          43,
                          0,
                          8,
                          117,
                          0,
                          8,
                          53,
                          0,
                          9,
                          203,
                          81,
                          7,
                          13,
                          0,
                          8,
                          101,
                          0,
                          8,
                          37,
                          0,
                          9,
                          171,
                          0,
                          8,
                          5,
                          0,
                          8,
                          133,
                          0,
                          8,
                          69,
                          0,
                          9,
                          235,
                          80,
                          7,
                          8,
                          0,
                          8,
                          93,
                          0,
                          8,
                          29,
                          0,
                          9,
                          155,
                          84,
                          7,
                          83,
                          0,
                          8,
                          125,
                          0,
                          8,
                          61,
                          0,
                          9,
                          219,
                          82,
                          7,
                          23,
                          0,
                          8,
                          109,
                          0,
                          8,
                          45,
                          0,
                          9,
                          187,
                          0,
                          8,
                          13,
                          0,
                          8,
                          141,
                          0,
                          8,
                          77,
                          0,
                          9,
                          251,
                          80,
                          7,
                          3,
                          0,
                          8,
                          83,
                          0,
                          8,
                          19,
                          85,
                          8,
                          195,
                          83,
                          7,
                          35,
                          0,
                          8,
                          115,
                          0,
                          8,
                          51,
                          0,
                          9,
                          199,
                          81,
                          7,
                          11,
                          0,
                          8,
                          99,
                          0,
                          8,
                          35,
                          0,
                          9,
                          167,
                          0,
                          8,
                          3,
                          0,
                          8,
                          131,
                          0,
                          8,
                          67,
                          0,
                          9,
                          231,
                          80,
                          7,
                          7,
                          0,
                          8,
                          91,
                          0,
                          8,
                          27,
                          0,
                          9,
                          151,
                          84,
                          7,
                          67,
                          0,
                          8,
                          123,
                          0,
                          8,
                          59,
                          0,
                          9,
                          215,
                          82,
                          7,
                          19,
                          0,
                          8,
                          107,
                          0,
                          8,
                          43,
                          0,
                          9,
                          183,
                          0,
                          8,
                          11,
                          0,
                          8,
                          139,
                          0,
                          8,
                          75,
                          0,
                          9,
                          247,
                          80,
                          7,
                          5,
                          0,
                          8,
                          87,
                          0,
                          8,
                          23,
                          192,
                          8,
                          0,
                          83,
                          7,
                          51,
                          0,
                          8,
                          119,
                          0,
                          8,
                          55,
                          0,
                          9,
                          207,
                          81,
                          7,
                          15,
                          0,
                          8,
                          103,
                          0,
                          8,
                          39,
                          0,
                          9,
                          175,
                          0,
                          8,
                          7,
                          0,
                          8,
                          135,
                          0,
                          8,
                          71,
                          0,
                          9,
                          239,
                          80,
                          7,
                          9,
                          0,
                          8,
                          95,
                          0,
                          8,
                          31,
                          0,
                          9,
                          159,
                          84,
                          7,
                          99,
                          0,
                          8,
                          127,
                          0,
                          8,
                          63,
                          0,
                          9,
                          223,
                          82,
                          7,
                          27,
                          0,
                          8,
                          111,
                          0,
                          8,
                          47,
                          0,
                          9,
                          191,
                          0,
                          8,
                          15,
                          0,
                          8,
                          143,
                          0,
                          8,
                          79,
                          0,
                          9,
                          255
                      ], fixed_td = [
                          80,
                          5,
                          1,
                          87,
                          5,
                          257,
                          83,
                          5,
                          17,
                          91,
                          5,
                          4097,
                          81,
                          5,
                          5,
                          89,
                          5,
                          1025,
                          85,
                          5,
                          65,
                          93,
                          5,
                          16385,
                          80,
                          5,
                          3,
                          88,
                          5,
                          513,
                          84,
                          5,
                          33,
                          92,
                          5,
                          8193,
                          82,
                          5,
                          9,
                          90,
                          5,
                          2049,
                          86,
                          5,
                          129,
                          192,
                          5,
                          24577,
                          80,
                          5,
                          2,
                          87,
                          5,
                          385,
                          83,
                          5,
                          25,
                          91,
                          5,
                          6145,
                          81,
                          5,
                          7,
                          89,
                          5,
                          1537,
                          85,
                          5,
                          97,
                          93,
                          5,
                          24577,
                          80,
                          5,
                          4,
                          88,
                          5,
                          769,
                          84,
                          5,
                          49,
                          92,
                          5,
                          12289,
                          82,
                          5,
                          13,
                          90,
                          5,
                          3073,
                          86,
                          5,
                          193,
                          192,
                          5,
                          24577
                      ], cplens = [
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          13,
                          15,
                          17,
                          19,
                          23,
                          27,
                          31,
                          35,
                          43,
                          51,
                          59,
                          67,
                          83,
                          99,
                          115,
                          131,
                          163,
                          195,
                          227,
                          258,
                          0,
                          0
                      ], cplext = [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          1,
                          1,
                          1,
                          1,
                          2,
                          2,
                          2,
                          2,
                          3,
                          3,
                          3,
                          3,
                          4,
                          4,
                          4,
                          4,
                          5,
                          5,
                          5,
                          5,
                          0,
                          112,
                          112
                      ], cpdist = [
                          1,
                          2,
                          3,
                          4,
                          5,
                          7,
                          9,
                          13,
                          17,
                          25,
                          33,
                          49,
                          65,
                          97,
                          129,
                          193,
                          257,
                          385,
                          513,
                          769,
                          1025,
                          1537,
                          2049,
                          3073,
                          4097,
                          6145,
                          8193,
                          12289,
                          16385,
                          24577
                      ], cpdext = [
                          0,
                          0,
                          0,
                          0,
                          1,
                          1,
                          2,
                          2,
                          3,
                          3,
                          4,
                          4,
                          5,
                          5,
                          6,
                          6,
                          7,
                          7,
                          8,
                          8,
                          9,
                          9,
                          10,
                          10,
                          11,
                          11,
                          12,
                          12,
                          13,
                          13
                      ], BMAX = 15;
                      let v;
                      const hn = [
                          0
                      ], c = new Int32Array(BMAX + 1), r = new Int32Array(3), u = new Int32Array(BMAX), x = new Int32Array(BMAX + 1);
                      function huft_build(e, t, n, i, o, s, a, l, d, h, f) {
                          let p, m, y, g, v, b, w, _, S, E, k, A, P, N, C;
                          E = 0, v = n;
                          do c[e[t + E]]++, E++, v--;
                          while (0 !== v);
                          if (c[0] === n) return a[0] = -1, l[0] = 0, 0;
                          for(_ = l[0], b = 1; b <= BMAX && 0 === c[b]; b++);
                          for(w = b, _ < b && (_ = b), v = BMAX; 0 !== v && 0 === c[v]; v--);
                          for(y = v, _ > v && (_ = v), l[0] = _, N = 1 << b; b < v; b++, N <<= 1)if (N -= c[b], N < 0) return -3;
                          if (N -= c[v], N < 0) return -3;
                          for(c[v] += N, x[1] = b = 0, E = 1, P = 2; 0 != --v;)x[P] = b += c[E], P++, E++;
                          v = 0, E = 0;
                          do b = e[t + E], 0 !== b && (f[x[b]++] = v), E++;
                          while (++v < n);
                          for(n = x[y], x[0] = v = 0, E = 0, g = -1, A = -_, u[0] = 0, k = 0, C = 0; w <= y; w++)for(p = c[w]; 0 != p--;){
                              for(; w > A + _;){
                                  if (g++, A += _, C = y - A, C = C > _ ? _ : C, m = 1 << (b = w - A), m > p + 1 && (m -= p + 1, P = w, b < C)) for(; ++b < C && (m <<= 1, !(m <= c[++P]));)m -= c[P];
                                  if (C = 1 << b, h[0] + C > 1400) return -3;
                                  u[g] = k = h[0], h[0] += C, 0 !== g ? (x[g] = v, r[0] = b, r[1] = _, b = v >>> A - _, r[2] = k - u[g - 1] - b, d.set(r, 3 * (u[g - 1] + b))) : a[0] = k;
                              }
                              for(r[1] = w - A, E >= n ? r[0] = 192 : f[E] < i ? (r[0] = f[E] < 256 ? 0 : 96, r[2] = f[E++]) : (r[0] = s[f[E] - i] + 16 + 64, r[2] = o[f[E++] - i]), m = 1 << w - A, b = v >>> A; b < C; b += m)d.set(r, 3 * (k + b));
                              for(b = 1 << w - 1; 0 != (v & b); b >>>= 1)v ^= b;
                              for(v ^= b, S = (1 << A) - 1; (v & S) !== x[g];)g--, A -= _, S = (1 << A) - 1;
                          }
                          return 0 !== N && 1 !== y ? -5 : 0;
                      }
                      function initWorkArea(e) {
                          v = new Int32Array(e);
                          for(let e = 0; e < BMAX + 1; e++)c[e] = 0, u[e] = 0, x[e] = 0;
                          for(let e = 0; e < 3; e++)r[e] = 0;
                      }
                      function inflate_trees_bits(e, t, r, n, i) {
                          initWorkArea(19), hn[0] = 0;
                          let o = huft_build(e, 0, 19, 19, null, null, r, t, n, hn, v);
                          return -3 === o ? i.msg = "oversubscribed dynamic bit lengths tree" : -5 !== o && 0 !== t[0] || (i.msg = "incomplete dynamic bit lengths tree", o = -3), o;
                      }
                      function inflate_trees_dynamic(e, t, r, n, i, o, s, a, l) {
                          initWorkArea(288), hn[0] = 0;
                          let u = huft_build(r, 0, e, 257, cplens, cplext, o, n, a, hn, v);
                          return 0 !== u || 0 === n[0] ? (-3 === u ? l.msg = "oversubscribed literal/length tree" : (l.msg = "incomplete literal/length tree", u = -3), u) : (initWorkArea(288), u = huft_build(r, e, t, 0, cpdist, cpdext, s, i, a, hn, v), 0 !== u || 0 === i[0] && e > 257 ? (-3 === u ? l.msg = "oversubscribed distance tree" : -5 === u ? (l.msg = "incomplete distance tree", u = -3) : (l.msg = "empty distance tree with lengths", u = -3), u) : 0);
                      }
                      function inflate_trees_fixed(e, t, r, n) {
                          return e[0] = fixed_bl, t[0] = fixed_bd, r[0] = fixed_tl, n[0] = fixed_td, 0;
                      }
                      const border = [
                          16,
                          17,
                          18,
                          0,
                          8,
                          7,
                          9,
                          6,
                          10,
                          5,
                          11,
                          4,
                          12,
                          3,
                          13,
                          2,
                          14,
                          1,
                          15
                      ];
                      class InfBlocks {
                          constructor(e){
                              this.codes = InfCodes(), this.hufts = new Int32Array(4200), this.mode = 0, this.bitk = 0, this.bitb = 0, this.read = 0, this.write = 0, this.last = 0, this.end = e, this.window = new Uint8Array(e);
                          }
                          reset() {
                              this.bitk = 0, this.bitb = 0, this.read = 0, this.write = 0, this.last = 0;
                          }
                          inflate_flush(e, t) {
                              let r, n, i;
                              return n = e.next_out_index, i = this.read, r = (i <= this.write ? this.write : this.end) - i, r > e.avail_out && (r = e.avail_out), 0 !== r && -5 === t && (t = 0), e.avail_out -= r, e.total_out += r, e.next_out.set(this.window.subarray(i, i + r), n), n += r, i += r, i === this.end && (i = 0, this.write === this.end && (this.write = 0), r = this.write - i, r > e.avail_out && (r = e.avail_out), 0 !== r && -5 === t && (t = 0), e.avail_out -= r, e.total_out += r, e.next_out.set(this.window.subarray(i, i + r), n), n += r, i += r), e.next_out_index = n, this.read = i, t;
                          }
                          proc(e, t) {
                              let r, n, i, o, s, a, l, u, c = 0, d = 0, h = 0;
                              const f = new Uint8Array(320), p = [
                                  0
                              ], m = [
                                  0
                              ], y = this.codes, g = this.hufts;
                              for(o = e.next_in_index, s = e.avail_in, n = this.bitb, i = this.bitk, a = this.write, l = a < this.read ? this.read - a - 1 : this.end - a;;)switch(this.mode){
                                  case 0:
                                      if (this.last) return 1;
                                      for(; i < 3;){
                                          if (0 === s) return this.bitb = n, this.bitk = i, e.avail_in = s, e.total_in += o - e.next_in_index, e.next_in_index = o, this.write = a, this.inflate_flush(e, t);
                                          t = 0, s--, n |= (255 & e.next_in[o++]) << i, i += 8;
                                      }
                                      switch(r = 7 & n, this.last = 1 & r, r >>> 1){
                                          case 0:
                                              n >>>= 3, i -= 3, r = 7 & i, n >>>= r, i -= r, this.mode = 1;
                                              break;
                                          case 1:
                                              const l1 = [
                                                  0
                                              ], u1 = [
                                                  0
                                              ], c1 = [
                                                  []
                                              ], d1 = [
                                                  []
                                              ];
                                              inflate_trees_fixed(l1, u1, c1, d1), y.init(l1[0], u1[0], c1[0], 0, d1[0], 0), n >>>= 3, i -= 3, this.mode = 6;
                                              break;
                                          case 2:
                                              n >>>= 3, i -= 3, this.mode = 3;
                                              break;
                                          case 3:
                                              return n >>>= 3, i -= 3, this.mode = 9, e.msg = "invalid block type", t = -3, this.bitb = n, this.bitk = i, e.avail_in = s, e.total_in += o - e.next_in_index, e.next_in_index = o, this.write = a, this.inflate_flush(e, t);
                                      }
                                      break;
                                  case 1:
                                      for(; i < 32;){
                                          if (0 === s) return this.bitb = n, this.bitk = i, e.avail_in = s, e.total_in += o - e.next_in_index, e.next_in_index = o, this.write = a, this.inflate_flush(e, t);
                                          t = 0, s--, n |= (255 & e.next_in[o++]) << i, i += 8;
                                      }
                                      if ((~n >>> 16 & 65535) != (65535 & n)) return this.mode = 9, e.msg = "invalid stored block lengths", t = -3, this.bitb = n, this.bitk = i, e.avail_in = s, e.total_in += o - e.next_in_index, e.next_in_index = o, this.write = a, this.inflate_flush(e, t);
                                      c = 65535 & n, n = i = 0, this.mode = 0 !== c ? 2 : 0 !== this.last ? 7 : 0;
                                      break;
                                  case 2:
                                      if (0 === s) return this.bitb = n, this.bitk = i, e.avail_in = s, e.total_in += o - e.next_in_index, e.next_in_index = o, this.write = a, this.inflate_flush(e, t);
                                      if (0 === l && (a === this.end && 0 !== this.read && (a = 0, l = a < this.read ? this.read - a - 1 : this.end - a), 0 === l && (this.write = a, t = this.inflate_flush(e, t), a = this.write, l = a < this.read ? this.read - a - 1 : this.end - a, a === this.end && 0 !== this.read && (a = 0, l = a < this.read ? this.read - a - 1 : this.end - a), 0 === l))) return this.bitb = n, this.bitk = i, e.avail_in = s, e.total_in += o - e.next_in_index, e.next_in_index = o, this.write = a, this.inflate_flush(e, t);
                                      if (t = 0, r = c, r > s && (r = s), r > l && (r = l), this.window.set(e.read_buf(o, r), a), o += r, s -= r, a += r, l -= r, c -= r, 0 !== c) break;
                                      this.mode = 0 !== this.last ? 7 : 0;
                                      break;
                                  case 3:
                                      for(; i < 14;){
                                          if (0 === s) return this.bitb = n, this.bitk = i, e.avail_in = s, e.total_in += o - e.next_in_index, e.next_in_index = o, this.write = a, this.inflate_flush(e, t);
                                          t = 0, s--, n |= (255 & e.next_in[o++]) << i, i += 8;
                                      }
                                      if (d = r = 16383 & n, (31 & r) > 29 || (r >> 5 & 31) > 29) return this.mode = 9, e.msg = "too many length or distance symbols", t = -3, this.bitb = n, this.bitk = i, e.avail_in = s, e.total_in += o - e.next_in_index, e.next_in_index = o, this.write = a, this.inflate_flush(e, t);
                                      for(r = 258 + (31 & r) + (r >> 5 & 31), u = 0; u < r; u++)f[u] = 0;
                                      for(n >>>= 14, i -= 14, h = 0, this.mode = 4; h < 4 + (d >>> 10);){
                                          for(; i < 3;){
                                              if (0 === s) return this.bitb = n, this.bitk = i, e.avail_in = s, e.total_in += o - e.next_in_index, e.next_in_index = o, this.write = a, this.inflate_flush(e, t);
                                              t = 0, s--, n |= (255 & e.next_in[o++]) << i, i += 8;
                                          }
                                          f[border[h++]] = 7 & n, n >>>= 3, i -= 3;
                                      }
                                      for(; h < 19;)f[border[h++]] = 0;
                                      if (p[0] = 7, r = inflate_trees_bits(f, p, m, g, e), 0 !== r) return -3 === (t = r) && (this.mode = 9), this.bitb = n, this.bitk = i, e.avail_in = s, e.total_in += o - e.next_in_index, e.next_in_index = o, this.write = a, this.inflate_flush(e, t);
                                      for(h = 0, this.mode = 5; r = d, !(h >= 258 + (31 & r) + (r >> 5 & 31));){
                                          let l, c;
                                          for(r = p[0]; i < r;){
                                              if (0 === s) return this.bitb = n, this.bitk = i, e.avail_in = s, e.total_in += o - e.next_in_index, e.next_in_index = o, this.write = a, this.inflate_flush(e, t);
                                              t = 0, s--, n |= (255 & e.next_in[o++]) << i, i += 8;
                                          }
                                          if (r = g[3 * (m[0] + (n & inflate_mask[r])) + 1], c = g[3 * (m[0] + (n & inflate_mask[r])) + 2], c < 16) n >>>= r, i -= r, f[h++] = c;
                                          else {
                                              for(u = 18 === c ? 7 : c - 14, l = 18 === c ? 11 : 3; i < r + u;){
                                                  if (0 === s) return this.bitb = n, this.bitk = i, e.avail_in = s, e.total_in += o - e.next_in_index, e.next_in_index = o, this.write = a, this.inflate_flush(e, t);
                                                  t = 0, s--, n |= (255 & e.next_in[o++]) << i, i += 8;
                                              }
                                              if (n >>>= r, i -= r, l += n & inflate_mask[u], n >>>= u, i -= u, u = h, r = d, u + l > 258 + (31 & r) + (r >> 5 & 31) || 16 === c && u < 1) return this.mode = 9, e.msg = "invalid bit length repeat", t = -3, this.bitb = n, this.bitk = i, e.avail_in = s, e.total_in += o - e.next_in_index, e.next_in_index = o, this.write = a, this.inflate_flush(e, t);
                                              c = 16 === c ? f[u - 1] : 0;
                                              do f[u++] = c;
                                              while (0 != --l);
                                              h = u;
                                          }
                                      }
                                      m[0] = -1;
                                      const v = [
                                          9
                                      ], b = [
                                          6
                                      ], w = [
                                          0
                                      ], _ = [
                                          0
                                      ];
                                      if (r = inflate_trees_dynamic(257 + (31 & r), 1 + (r >> 5 & 31), f, v, b, w, _, g, e), 0 !== r) return -3 === r && (this.mode = 9), t = r, this.bitb = n, this.bitk = i, e.avail_in = s, e.total_in += o - e.next_in_index, e.next_in_index = o, this.write = a, this.inflate_flush(e, t);
                                      y.init(v[0], b[0], g, w[0], g, _[0]), this.mode = 6;
                                  case 6:
                                      if (this.bitb = n, this.bitk = i, e.avail_in = s, e.total_in += o - e.next_in_index, e.next_in_index = o, this.write = a, 1 !== (t = y.proc(this, e, t))) return this.inflate_flush(e, t);
                                      if (t = 0, o = e.next_in_index, s = e.avail_in, n = this.bitb, i = this.bitk, a = this.write, l = a < this.read ? this.read - a - 1 : this.end - a, 0 === this.last) {
                                          this.mode = 0;
                                          break;
                                      }
                                      this.mode = 7;
                                  case 7:
                                      if (this.write = a, t = this.inflate_flush(e, t), a = this.write, l = a < this.read ? this.read - a - 1 : this.end - a, this.read !== this.write) return this.bitb = n, this.bitk = i, e.avail_in = s, e.total_in += o - e.next_in_index, e.next_in_index = o, this.write = a, this.inflate_flush(e, t);
                                      this.mode = 8;
                                  case 8:
                                      return t = 1, this.bitb = n, this.bitk = i, e.avail_in = s, e.total_in += o - e.next_in_index, e.next_in_index = o, this.write = a, this.inflate_flush(e, t);
                                  case 9:
                                      return t = -3, this.bitb = n, this.bitk = i, e.avail_in = s, e.total_in += o - e.next_in_index, e.next_in_index = o, this.write = a, this.inflate_flush(e, t);
                                  default:
                                      return t = -2, this.bitb = n, this.bitk = i, e.avail_in = s, e.total_in += o - e.next_in_index, e.next_in_index = o, this.write = a, this.inflate_flush(e, t);
                              }
                          }
                          set_dictionary(e, t, r) {
                              this.window.set(e.subarray(t, t + r), 0), this.read = this.write = r;
                          }
                      }
                      class Inflate {
                          constructor(e){
                              this.isGZip = !1, this.method = 0, this.gflags = 0, this.name = "", this.mtime = 0, this.xlen = 0, this.dictChecksum = 0, this.fullChecksum = 0, this.inflatedSize = 0, this.wbits = 0, this.wbits = 15, this.blocks = new InfBlocks(1 << this.wbits), this.mode = e ? 22 : 0;
                          }
                          get isComplete() {
                              const { blocks: e  } = this, t = (0 === e.mode || 8 === e.mode) && 0 === e.bitb && 0 === e.bitk;
                              return 31 === this.mode && t;
                          }
                          get fileName() {
                              return this.name;
                          }
                          get modDate() {
                              if (0 !== this.mtime) return new Date(1e3 * this.mtime);
                          }
                          get checksum() {
                              return this.fullChecksum;
                          }
                          get fullSize() {
                              return this.inflatedSize;
                          }
                          get containerFormat() {
                              return this.isGZip ? 2 : 0 === this.method ? 0 : 1;
                          }
                          inflate(e) {
                              let t;
                              if (!e || !e.next_in) return -2;
                              let r = -5;
                              for(;;)switch(this.mode){
                                  case 0:
                                      if (0 === e.avail_in) return r;
                                      if (t = e.next_in[e.next_in_index], t !== GZIP_ID1) {
                                          this.mode = 2;
                                          break;
                                      }
                                      this.mode = 1, r = 0, e.avail_in--, e.total_in++, e.next_in_index++;
                                  case 1:
                                      if (0 === e.avail_in) return r;
                                      if (r = 0, e.avail_in--, e.total_in++, t = e.next_in[e.next_in_index++], t !== GZIP_ID2) {
                                          this.mode = 32, e.msg = "invalid gzip id";
                                          break;
                                      }
                                      this.isGZip = !0, this.mode = 2;
                                  case 2:
                                      if (0 === e.avail_in) return r;
                                      if (r = 0, e.avail_in--, e.total_in++, this.method = e.next_in[e.next_in_index++], (15 & this.method) !== Z_DEFLATED) {
                                          this.mode = 32, e.msg = "unknown compression method";
                                          break;
                                      }
                                      if (8 + (this.method >> 4) > this.wbits) {
                                          this.mode = 32, e.msg = "invalid window size";
                                          break;
                                      }
                                      this.mode = 3;
                                  case 3:
                                      if (0 === e.avail_in) return r;
                                      if (r = 0, e.avail_in--, e.total_in++, t = 255 & e.next_in[e.next_in_index++], this.isGZip) {
                                          this.gflags = t, this.mode = 9;
                                          break;
                                      }
                                      if (((this.method << 8) + t) % 31 != 0) {
                                          this.mode = 32, e.msg = "incorrect header check";
                                          break;
                                      }
                                      if (0 == (t & PRESET_DICT)) {
                                          this.mode = 22;
                                          break;
                                      }
                                      this.mode = 4;
                                  case 4:
                                      if (0 === e.avail_in) return r;
                                      r = 0, e.avail_in--, e.total_in++, this.dictChecksum = (255 & e.next_in[e.next_in_index++]) << 24 & 4278190080, this.mode = 5;
                                  case 5:
                                      if (0 === e.avail_in) return r;
                                      r = 0, e.avail_in--, e.total_in++, this.dictChecksum |= (255 & e.next_in[e.next_in_index++]) << 16 & 16711680, this.mode = 6;
                                  case 6:
                                      if (0 === e.avail_in) return r;
                                      r = 0, e.avail_in--, e.total_in++, this.dictChecksum |= (255 & e.next_in[e.next_in_index++]) << 8 & 65280, this.mode = 7;
                                  case 7:
                                      return 0 === e.avail_in ? r : (r = 0, e.avail_in--, e.total_in++, this.dictChecksum |= 255 & e.next_in[e.next_in_index++], this.mode = 8, 2);
                                  case 8:
                                      return this.mode = 32, e.msg = "need dictionary", -2;
                                  case 9:
                                  case 10:
                                  case 11:
                                  case 12:
                                      if (0 === e.avail_in) return r;
                                      if (r = 0, e.avail_in--, e.total_in++, t = 255 & e.next_in[e.next_in_index++], this.mtime = this.mtime >>> 8 | t << 24, 12 !== this.mode) {
                                          this.mode++;
                                          break;
                                      }
                                      this.mode = 13;
                                  case 13:
                                  case 14:
                                  case 20:
                                  case 21:
                                      if (0 === e.avail_in) return r;
                                      r = 0, e.avail_in--, e.total_in++, e.next_in_index++, 14 === this.mode ? 4 & this.gflags ? this.mode = 15 : 8 & this.gflags ? this.mode = 18 : 16 & this.gflags ? this.mode = 19 : 2 & this.gflags ? this.mode = 20 : this.mode = 22 : this.mode++;
                                      break;
                                  case 15:
                                  case 16:
                                      if (0 === e.avail_in) return r;
                                      if (r = 0, e.avail_in--, e.total_in++, t = 255 & e.next_in[e.next_in_index++], this.xlen = this.xlen >>> 8 | t << 24, 15 === this.mode) break;
                                      this.xlen = this.xlen >>> 16;
                                  case 17:
                                      if (0 === e.avail_in) return r;
                                      r = 0, e.avail_in--, e.total_in++, e.next_in_index++, this.xlen--, 0 === this.xlen && (8 & this.gflags ? this.mode = 18 : 16 & this.gflags ? this.mode = 19 : 2 & this.gflags ? this.mode = 20 : this.mode = 22);
                                      break;
                                  case 18:
                                  case 19:
                                      if (0 === e.avail_in) return r;
                                      r = 0, e.avail_in--, e.total_in++, t = 255 & e.next_in[e.next_in_index++], 0 !== t ? 18 === this.mode && (this.name += String.fromCharCode(t)) : 19 !== this.mode && 16 & this.gflags ? this.mode = 19 : 2 & this.gflags ? this.mode = 20 : this.mode = 22;
                                      break;
                                  case 22:
                                      if (r = this.blocks.proc(e, r), -3 === r) {
                                          this.mode = 32;
                                          break;
                                      }
                                      if (1 !== r) return r;
                                      if (r = 0, this.blocks.reset(), 0 === this.method) {
                                          this.mode = 31;
                                          break;
                                      }
                                      this.mode = 23;
                                  case 23:
                                  case 24:
                                  case 25:
                                  case 26:
                                      if (0 === e.avail_in) return r;
                                      r = 0, e.avail_in--, e.total_in++, t = 255 & e.next_in[e.next_in_index++], this.isGZip ? this.fullChecksum = this.fullChecksum >>> 8 | t << 24 : this.fullChecksum = this.fullChecksum << 8 | t, this.mode++, 27 !== this.mode || this.isGZip || (this.mode = 31);
                                      break;
                                  case 27:
                                  case 28:
                                  case 29:
                                  case 30:
                                      if (0 === e.avail_in) return r;
                                      r = 0, e.avail_in--, e.total_in++, t = 255 & e.next_in[e.next_in_index++], this.inflatedSize = this.inflatedSize >>> 8 | t << 24, this.mode++;
                                      break;
                                  case 31:
                                      return 1;
                                  case 32:
                                      return -3;
                                  default:
                                      return -2;
                              }
                          }
                          inflateSetDictionary(e) {
                              if (8 !== this.mode) return -2;
                              const t = u8ArrayFromBufferSource(e);
                              if (!t) return -3;
                              let r = 0, n = t.byteLength;
                              return n >= 1 << this.wbits && (n = (1 << this.wbits) - 1, r = t.byteLength - n), adler32(t) !== this.dictChecksum ? -3 : (this.blocks.set_dictionary(t, r, n), this.mode = 22, 0);
                          }
                      }
                      class Inflater {
                          constructor(e){
                              const t = null == e ? void 0 : e.raw;
                              if (void 0 !== t && !0 !== t && !1 !== t) throw new TypeError("options.raw must be undefined or true or false");
                              const r = void 0 !== t && t, n = null == e ? void 0 : e.dictionary;
                              if (void 0 !== n) {
                                  if (r) throw new RangeError("options.dictionary cannot be set when options.raw is true");
                                  if (void 0 === u8ArrayFromBufferSource(n)) throw new TypeError("options.dictionary must be undefined or a buffer or a buffer view");
                                  this.customDict = n;
                              }
                              this.inflate = new Inflate(r), this.z = new ZStream;
                          }
                          append(e) {
                              const t = u8ArrayFromBufferSource(e);
                              if (!(t instanceof Uint8Array)) throw new TypeError("data must be an ArrayBuffer or buffer view");
                              if (0 === t.length) return [];
                              const { inflate: r , z: n  } = this, i = [];
                              let o = !1;
                              n.append(t);
                              do {
                                  n.next_out_index = 0, n.avail_out = OUTPUT_BUFSIZE, 0 !== n.avail_in || o || (n.next_in_index = 0, o = !0);
                                  const e = r.inflate(n);
                                  if (o && -5 === e) {
                                      if (0 !== n.avail_in) throw new Error("inflate error: bad input");
                                  } else if (2 === e) {
                                      if (!this.customDict) throw new Error("Custom dictionary required for this data");
                                      if (0 !== r.inflateSetDictionary(this.customDict)) throw new Error("Custom dictionary is not valid for this data");
                                  } else if (0 !== e && 1 !== e) throw new Error("inflate error: " + n.msg);
                                  if ((o || 1 === e) && n.avail_in === t.length) throw new Error("inflate error: bad input data");
                                  if (n.next_out_index) {
                                      const e = new Uint8Array(n.next_out.subarray(0, n.next_out_index)), t = 2 === r.containerFormat;
                                      void 0 === this.checksum && (this.checksum = t ? 0 : 1), this.checksum = t ? crc32(e, this.checksum) : adler32(e, this.checksum), i.push(e);
                                  }
                              }while (n.avail_in > 0 || 0 === n.avail_out);
                              return i;
                          }
                          finish() {
                              const e = this.inflate.checksum, t = this.inflate.fullSize, r = this.inflate.isComplete, n = 0 === e ? "unchecked" : e === this.checksum ? "match" : "mismatch", i = 0 === t ? "unchecked" : t === this.z.total_out ? "match" : "mismatch";
                              return {
                                  success: r && "mismatch" !== n && "mismatch" !== i,
                                  complete: r,
                                  checksum: n,
                                  fileSize: i,
                                  fileName: this.inflate.fileName,
                                  modDate: this.inflate.modDate
                              };
                          }
                      }
                      const D_CODES = 30, BL_CODES = 19, LENGTH_CODES = 29, LITERALS = 256, L_CODES = LITERALS + 1 + LENGTH_CODES, HEAP_SIZE = 2 * L_CODES + 1, MAX_BL_BITS = 7, _dist_code = [
                          0,
                          1,
                          2,
                          3,
                          4,
                          4,
                          5,
                          5,
                          6,
                          6,
                          6,
                          6,
                          7,
                          7,
                          7,
                          7,
                          8,
                          8,
                          8,
                          8,
                          8,
                          8,
                          8,
                          8,
                          9,
                          9,
                          9,
                          9,
                          9,
                          9,
                          9,
                          9,
                          10,
                          10,
                          10,
                          10,
                          10,
                          10,
                          10,
                          10,
                          10,
                          10,
                          10,
                          10,
                          10,
                          10,
                          10,
                          10,
                          11,
                          11,
                          11,
                          11,
                          11,
                          11,
                          11,
                          11,
                          11,
                          11,
                          11,
                          11,
                          11,
                          11,
                          11,
                          11,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          12,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          13,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          14,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          15,
                          0,
                          0,
                          16,
                          17,
                          18,
                          18,
                          19,
                          19,
                          20,
                          20,
                          20,
                          20,
                          21,
                          21,
                          21,
                          21,
                          22,
                          22,
                          22,
                          22,
                          22,
                          22,
                          22,
                          22,
                          23,
                          23,
                          23,
                          23,
                          23,
                          23,
                          23,
                          23,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          28,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29,
                          29
                      ];
                      class Tree {
                          constructor(e, t){
                              this.dyn_tree = e, this.stat_desc = t, this.max_code = 0;
                          }
                          gen_bitlen(e) {
                              var t, r, n, i, o, s, a = this.dyn_tree, l = this.stat_desc.static_tree, u = this.stat_desc.extra_bits, c = this.stat_desc.extra_base, d = this.stat_desc.max_length, h = 0;
                              for(i = 0; i <= 15; i++)e.bl_count[i] = 0;
                              for(a[2 * e.heap[e.heap_max] + 1] = 0, t = e.heap_max + 1; t < HEAP_SIZE; t++)(i = a[2 * a[2 * (r = e.heap[t]) + 1] + 1] + 1) > d && (i = d, h++), a[2 * r + 1] = i, r > this.max_code || (e.bl_count[i]++, o = 0, r >= c && (o = u[r - c]), s = a[2 * r], e.opt_len += s * (i + o), l && (e.static_len += s * (l[2 * r + 1] + o)));
                              if (0 !== h) {
                                  do {
                                      for(i = d - 1; 0 === e.bl_count[i];)i--;
                                      e.bl_count[i]--, e.bl_count[i + 1] += 2, e.bl_count[d]--, h -= 2;
                                  }while (h > 0);
                                  for(i = d; 0 !== i; i--)for(r = e.bl_count[i]; 0 !== r;)(n = e.heap[--t]) > this.max_code || (a[2 * n + 1] != i && (e.opt_len += (i - a[2 * n + 1]) * a[2 * n], a[2 * n + 1] = i), r--);
                              }
                          }
                          bi_reverse(e, t) {
                              let r = 0;
                              do r |= 1 & e, e >>>= 1, r <<= 1;
                              while (--t > 0);
                              return r >>> 1;
                          }
                          gen_codes(e, t, r) {
                              const n = new Uint16Array(16);
                              let i = 0;
                              for(let e = 1; e <= 15; e++)n[e] = i = i + r[e - 1] << 1;
                              for(let r = 0; r <= t; r++){
                                  const t = e[2 * r + 1];
                                  0 !== t && (e[2 * r] = this.bi_reverse(n[t]++, t));
                              }
                          }
                          build_tree(e) {
                              var t, r, n, i = this.dyn_tree, o = this.stat_desc.static_tree, s = this.stat_desc.elems, a = -1;
                              for(e.heap_len = 0, e.heap_max = HEAP_SIZE, t = 0; t < s; t++)0 !== i[2 * t] ? (e.heap[++e.heap_len] = a = t, e.depth[t] = 0) : i[2 * t + 1] = 0;
                              for(; e.heap_len < 2;)i[2 * (n = e.heap[++e.heap_len] = a < 2 ? ++a : 0)] = 1, e.depth[n] = 0, e.opt_len--, o && (e.static_len -= o[2 * n + 1]);
                              for(this.max_code = a, t = Math.floor(e.heap_len / 2); t >= 1; t--)e.pqdownheap(i, t);
                              n = s;
                              do t = e.heap[1], e.heap[1] = e.heap[e.heap_len--], e.pqdownheap(i, 1), r = e.heap[1], e.heap[--e.heap_max] = t, e.heap[--e.heap_max] = r, i[2 * n] = i[2 * t] + i[2 * r], e.depth[n] = Math.max(e.depth[t], e.depth[r]) + 1, i[2 * t + 1] = i[2 * r + 1] = n, e.heap[1] = n++, e.pqdownheap(i, 1);
                              while (e.heap_len >= 2);
                              e.heap[--e.heap_max] = e.heap[1], this.gen_bitlen(e), this.gen_codes(i, this.max_code, e.bl_count);
                          }
                          static d_code(e) {
                              return e < 256 ? _dist_code[e] : _dist_code[256 + (e >>> 7)];
                          }
                      }
                      Tree._length_code = [
                          0,
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          8,
                          9,
                          9,
                          10,
                          10,
                          11,
                          11,
                          12,
                          12,
                          12,
                          12,
                          13,
                          13,
                          13,
                          13,
                          14,
                          14,
                          14,
                          14,
                          15,
                          15,
                          15,
                          15,
                          16,
                          16,
                          16,
                          16,
                          16,
                          16,
                          16,
                          16,
                          17,
                          17,
                          17,
                          17,
                          17,
                          17,
                          17,
                          17,
                          18,
                          18,
                          18,
                          18,
                          18,
                          18,
                          18,
                          18,
                          19,
                          19,
                          19,
                          19,
                          19,
                          19,
                          19,
                          19,
                          20,
                          20,
                          20,
                          20,
                          20,
                          20,
                          20,
                          20,
                          20,
                          20,
                          20,
                          20,
                          20,
                          20,
                          20,
                          20,
                          21,
                          21,
                          21,
                          21,
                          21,
                          21,
                          21,
                          21,
                          21,
                          21,
                          21,
                          21,
                          21,
                          21,
                          21,
                          21,
                          22,
                          22,
                          22,
                          22,
                          22,
                          22,
                          22,
                          22,
                          22,
                          22,
                          22,
                          22,
                          22,
                          22,
                          22,
                          22,
                          23,
                          23,
                          23,
                          23,
                          23,
                          23,
                          23,
                          23,
                          23,
                          23,
                          23,
                          23,
                          23,
                          23,
                          23,
                          23,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          24,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          25,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          26,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          27,
                          28
                      ], Tree.base_length = [
                          0,
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          10,
                          12,
                          14,
                          16,
                          20,
                          24,
                          28,
                          32,
                          40,
                          48,
                          56,
                          64,
                          80,
                          96,
                          112,
                          128,
                          160,
                          192,
                          224,
                          0
                      ], Tree.base_dist = [
                          0,
                          1,
                          2,
                          3,
                          4,
                          6,
                          8,
                          12,
                          16,
                          24,
                          32,
                          48,
                          64,
                          96,
                          128,
                          192,
                          256,
                          384,
                          512,
                          768,
                          1024,
                          1536,
                          2048,
                          3072,
                          4096,
                          6144,
                          8192,
                          12288,
                          16384,
                          24576
                      ], Tree.extra_lbits = [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          1,
                          1,
                          1,
                          1,
                          2,
                          2,
                          2,
                          2,
                          3,
                          3,
                          3,
                          3,
                          4,
                          4,
                          4,
                          4,
                          5,
                          5,
                          5,
                          5,
                          0
                      ], Tree.extra_dbits = [
                          0,
                          0,
                          0,
                          0,
                          1,
                          1,
                          2,
                          2,
                          3,
                          3,
                          4,
                          4,
                          5,
                          5,
                          6,
                          6,
                          7,
                          7,
                          8,
                          8,
                          9,
                          9,
                          10,
                          10,
                          11,
                          11,
                          12,
                          12,
                          13,
                          13
                      ], Tree.extra_blbits = [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          2,
                          3,
                          7
                      ], Tree.bl_order = [
                          16,
                          17,
                          18,
                          0,
                          8,
                          7,
                          9,
                          6,
                          10,
                          5,
                          11,
                          4,
                          12,
                          3,
                          13,
                          2,
                          14,
                          1,
                          15
                      ];
                      class StaticTree {
                          constructor(e, t, r, n, i){
                              this.static_tree = e, this.extra_bits = t, this.extra_base = r, this.elems = n, this.max_length = i;
                          }
                      }
                      StaticTree.static_ltree = new Uint16Array([
                          12,
                          8,
                          140,
                          8,
                          76,
                          8,
                          204,
                          8,
                          44,
                          8,
                          172,
                          8,
                          108,
                          8,
                          236,
                          8,
                          28,
                          8,
                          156,
                          8,
                          92,
                          8,
                          220,
                          8,
                          60,
                          8,
                          188,
                          8,
                          124,
                          8,
                          252,
                          8,
                          2,
                          8,
                          130,
                          8,
                          66,
                          8,
                          194,
                          8,
                          34,
                          8,
                          162,
                          8,
                          98,
                          8,
                          226,
                          8,
                          18,
                          8,
                          146,
                          8,
                          82,
                          8,
                          210,
                          8,
                          50,
                          8,
                          178,
                          8,
                          114,
                          8,
                          242,
                          8,
                          10,
                          8,
                          138,
                          8,
                          74,
                          8,
                          202,
                          8,
                          42,
                          8,
                          170,
                          8,
                          106,
                          8,
                          234,
                          8,
                          26,
                          8,
                          154,
                          8,
                          90,
                          8,
                          218,
                          8,
                          58,
                          8,
                          186,
                          8,
                          122,
                          8,
                          250,
                          8,
                          6,
                          8,
                          134,
                          8,
                          70,
                          8,
                          198,
                          8,
                          38,
                          8,
                          166,
                          8,
                          102,
                          8,
                          230,
                          8,
                          22,
                          8,
                          150,
                          8,
                          86,
                          8,
                          214,
                          8,
                          54,
                          8,
                          182,
                          8,
                          118,
                          8,
                          246,
                          8,
                          14,
                          8,
                          142,
                          8,
                          78,
                          8,
                          206,
                          8,
                          46,
                          8,
                          174,
                          8,
                          110,
                          8,
                          238,
                          8,
                          30,
                          8,
                          158,
                          8,
                          94,
                          8,
                          222,
                          8,
                          62,
                          8,
                          190,
                          8,
                          126,
                          8,
                          254,
                          8,
                          1,
                          8,
                          129,
                          8,
                          65,
                          8,
                          193,
                          8,
                          33,
                          8,
                          161,
                          8,
                          97,
                          8,
                          225,
                          8,
                          17,
                          8,
                          145,
                          8,
                          81,
                          8,
                          209,
                          8,
                          49,
                          8,
                          177,
                          8,
                          113,
                          8,
                          241,
                          8,
                          9,
                          8,
                          137,
                          8,
                          73,
                          8,
                          201,
                          8,
                          41,
                          8,
                          169,
                          8,
                          105,
                          8,
                          233,
                          8,
                          25,
                          8,
                          153,
                          8,
                          89,
                          8,
                          217,
                          8,
                          57,
                          8,
                          185,
                          8,
                          121,
                          8,
                          249,
                          8,
                          5,
                          8,
                          133,
                          8,
                          69,
                          8,
                          197,
                          8,
                          37,
                          8,
                          165,
                          8,
                          101,
                          8,
                          229,
                          8,
                          21,
                          8,
                          149,
                          8,
                          85,
                          8,
                          213,
                          8,
                          53,
                          8,
                          181,
                          8,
                          117,
                          8,
                          245,
                          8,
                          13,
                          8,
                          141,
                          8,
                          77,
                          8,
                          205,
                          8,
                          45,
                          8,
                          173,
                          8,
                          109,
                          8,
                          237,
                          8,
                          29,
                          8,
                          157,
                          8,
                          93,
                          8,
                          221,
                          8,
                          61,
                          8,
                          189,
                          8,
                          125,
                          8,
                          253,
                          8,
                          19,
                          9,
                          275,
                          9,
                          147,
                          9,
                          403,
                          9,
                          83,
                          9,
                          339,
                          9,
                          211,
                          9,
                          467,
                          9,
                          51,
                          9,
                          307,
                          9,
                          179,
                          9,
                          435,
                          9,
                          115,
                          9,
                          371,
                          9,
                          243,
                          9,
                          499,
                          9,
                          11,
                          9,
                          267,
                          9,
                          139,
                          9,
                          395,
                          9,
                          75,
                          9,
                          331,
                          9,
                          203,
                          9,
                          459,
                          9,
                          43,
                          9,
                          299,
                          9,
                          171,
                          9,
                          427,
                          9,
                          107,
                          9,
                          363,
                          9,
                          235,
                          9,
                          491,
                          9,
                          27,
                          9,
                          283,
                          9,
                          155,
                          9,
                          411,
                          9,
                          91,
                          9,
                          347,
                          9,
                          219,
                          9,
                          475,
                          9,
                          59,
                          9,
                          315,
                          9,
                          187,
                          9,
                          443,
                          9,
                          123,
                          9,
                          379,
                          9,
                          251,
                          9,
                          507,
                          9,
                          7,
                          9,
                          263,
                          9,
                          135,
                          9,
                          391,
                          9,
                          71,
                          9,
                          327,
                          9,
                          199,
                          9,
                          455,
                          9,
                          39,
                          9,
                          295,
                          9,
                          167,
                          9,
                          423,
                          9,
                          103,
                          9,
                          359,
                          9,
                          231,
                          9,
                          487,
                          9,
                          23,
                          9,
                          279,
                          9,
                          151,
                          9,
                          407,
                          9,
                          87,
                          9,
                          343,
                          9,
                          215,
                          9,
                          471,
                          9,
                          55,
                          9,
                          311,
                          9,
                          183,
                          9,
                          439,
                          9,
                          119,
                          9,
                          375,
                          9,
                          247,
                          9,
                          503,
                          9,
                          15,
                          9,
                          271,
                          9,
                          143,
                          9,
                          399,
                          9,
                          79,
                          9,
                          335,
                          9,
                          207,
                          9,
                          463,
                          9,
                          47,
                          9,
                          303,
                          9,
                          175,
                          9,
                          431,
                          9,
                          111,
                          9,
                          367,
                          9,
                          239,
                          9,
                          495,
                          9,
                          31,
                          9,
                          287,
                          9,
                          159,
                          9,
                          415,
                          9,
                          95,
                          9,
                          351,
                          9,
                          223,
                          9,
                          479,
                          9,
                          63,
                          9,
                          319,
                          9,
                          191,
                          9,
                          447,
                          9,
                          127,
                          9,
                          383,
                          9,
                          255,
                          9,
                          511,
                          9,
                          0,
                          7,
                          64,
                          7,
                          32,
                          7,
                          96,
                          7,
                          16,
                          7,
                          80,
                          7,
                          48,
                          7,
                          112,
                          7,
                          8,
                          7,
                          72,
                          7,
                          40,
                          7,
                          104,
                          7,
                          24,
                          7,
                          88,
                          7,
                          56,
                          7,
                          120,
                          7,
                          4,
                          7,
                          68,
                          7,
                          36,
                          7,
                          100,
                          7,
                          20,
                          7,
                          84,
                          7,
                          52,
                          7,
                          116,
                          7,
                          3,
                          8,
                          131,
                          8,
                          67,
                          8,
                          195,
                          8,
                          35,
                          8,
                          163,
                          8,
                          99,
                          8,
                          227,
                          8
                      ]), StaticTree.static_dtree = new Uint16Array([
                          0,
                          5,
                          16,
                          5,
                          8,
                          5,
                          24,
                          5,
                          4,
                          5,
                          20,
                          5,
                          12,
                          5,
                          28,
                          5,
                          2,
                          5,
                          18,
                          5,
                          10,
                          5,
                          26,
                          5,
                          6,
                          5,
                          22,
                          5,
                          14,
                          5,
                          30,
                          5,
                          1,
                          5,
                          17,
                          5,
                          9,
                          5,
                          25,
                          5,
                          5,
                          5,
                          21,
                          5,
                          13,
                          5,
                          29,
                          5,
                          3,
                          5,
                          19,
                          5,
                          11,
                          5,
                          27,
                          5,
                          7,
                          5,
                          23,
                          5
                      ]), StaticTree.static_l_desc = new StaticTree(StaticTree.static_ltree, Tree.extra_lbits, LITERALS + 1, L_CODES, 15), StaticTree.static_d_desc = new StaticTree(StaticTree.static_dtree, Tree.extra_dbits, 0, D_CODES, 15), StaticTree.static_bl_desc = new StaticTree(null, Tree.extra_blbits, 0, BL_CODES, MAX_BL_BITS);
                      const makeConfig = (e, t, r, n, i)=>({
                              good_length: e,
                              max_lazy: t,
                              nice_length: r,
                              max_chain: n,
                              func: i
                          }), config_table = [
                          makeConfig(0, 0, 0, 0, 0),
                          makeConfig(4, 4, 8, 4, 1),
                          makeConfig(4, 5, 16, 8, 1),
                          makeConfig(4, 6, 32, 32, 1),
                          makeConfig(4, 4, 16, 16, 2),
                          makeConfig(8, 16, 32, 32, 2),
                          makeConfig(8, 16, 128, 128, 2),
                          makeConfig(8, 32, 128, 256, 2),
                          makeConfig(32, 128, 258, 1024, 2),
                          makeConfig(32, 258, 258, 4096, 2)
                      ];
                      function smaller(e, t, r, n) {
                          const i = e[2 * t], o = e[2 * r];
                          return i < o || i == o && n[t] <= n[r];
                      }
                      const END_BLOCK = 256, REP_3_6 = 16, REPZ_3_10 = 17, REPZ_11_138 = 18, STORED_BLOCK = 0, STATIC_TREES = 1, DYN_TREES = 2, MIN_MATCH = 3, MAX_MATCH = 258, MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1, hash_bits = 15, hash_size = 1 << hash_bits, hash_mask = hash_size - 1, hash_shift = Math.floor((hash_bits + MIN_MATCH - 1) / MIN_MATCH), lit_bufsize = 16384, pending_buf_size = 4 * lit_bufsize, d_buf = Math.floor(lit_bufsize / 2), l_buf = 3 * lit_bufsize, window_size = 65536;
                      class Deflate {
                          constructor(e, t = 6, r = 0){
                              if (this.status = 1, this.pending_buf = new Uint8Array(pending_buf_size), this.pending = 0, this.pending_out = 0, this.last_flush = 0, this.window = new Uint8Array(window_size), this.prev = new Uint16Array(32768), this.head = new Uint16Array(hash_size), this.ins_h = 0, this.block_start = 0, this.match_length = MIN_MATCH - 1, this.match_available = !1, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = MIN_MATCH - 1, this.dyn_ltree = new Uint16Array(2 * HEAP_SIZE), this.dyn_dtree = new Uint16Array(2 * (2 * D_CODES + 1)), this.bl_tree = new Uint16Array(2 * (2 * BL_CODES + 1)), this.l_desc = new Tree(this.dyn_ltree, StaticTree.static_l_desc), this.d_desc = new Tree(this.dyn_dtree, StaticTree.static_d_desc), this.bl_desc = new Tree(this.bl_tree, StaticTree.static_bl_desc), this.depth = new Uint16Array(2 * L_CODES + 1), this.last_lit = 0, this.matches = 0, this.opt_len = 0, this.static_len = 0, this.last_eob_len = 8, this.bi_buf = 0, this.bi_valid = 0, this.bl_count = new Uint16Array(16), this.heap = new Uint16Array(2 * L_CODES + 1), this.heap_len = 0, this.heap_max = HEAP_SIZE, t < 0 || t > 9 || r < 0 || r > 2) throw RangeError("level or strategy is out of range");
                              this.strm = e, this.level = t, this.strategy = r, e.msg = "", e.total_in = e.total_out = 0, this.init_block();
                              for(let e = 0; e < hash_size; ++e)this.head[e] = 0;
                              this.max_lazy_match = config_table[t].max_lazy, this.good_match = config_table[t].good_length, this.nice_match = config_table[t].nice_length, this.max_chain_length = config_table[t].max_chain;
                          }
                          init_block() {
                              for(let e = 0; e < L_CODES; e++)this.dyn_ltree[2 * e] = 0;
                              for(let e = 0; e < D_CODES; e++)this.dyn_dtree[2 * e] = 0;
                              for(let e = 0; e < BL_CODES; e++)this.bl_tree[2 * e] = 0;
                              this.dyn_ltree[2 * END_BLOCK] = 1, this.opt_len = this.static_len = 0, this.last_lit = this.matches = 0;
                          }
                          pqdownheap(e, t) {
                              const r = this.heap, n = r[t];
                              let i = t << 1;
                              for(; i <= this.heap_len && (i < this.heap_len && smaller(e, r[i + 1], r[i], this.depth) && i++, !smaller(e, n, r[i], this.depth));)r[t] = r[i], t = i, i <<= 1;
                              r[t] = n;
                          }
                          scan_tree(e, t) {
                              var r, n = -1, i = e[1], o = 0, s = 7, a = 4;
                              0 === i && (s = 138, a = 3), e[2 * (t + 1) + 1] = 65535;
                              for(let l = 0; l <= t; l++)r = i, i = e[2 * (l + 1) + 1], ++o < s && r == i || (o < a ? this.bl_tree[2 * r] += o : 0 !== r ? (r != n && this.bl_tree[2 * r]++, this.bl_tree[2 * REP_3_6]++) : o <= 10 ? this.bl_tree[2 * REPZ_3_10]++ : this.bl_tree[2 * REPZ_11_138]++, o = 0, n = r, 0 === i ? (s = 138, a = 3) : r == i ? (s = 6, a = 3) : (s = 7, a = 4));
                          }
                          build_bl_tree() {
                              let e;
                              for(this.scan_tree(this.dyn_ltree, this.l_desc.max_code), this.scan_tree(this.dyn_dtree, this.d_desc.max_code), this.bl_desc.build_tree(this), e = BL_CODES - 1; e >= 3 && 0 === this.bl_tree[2 * Tree.bl_order[e] + 1]; e--);
                              return this.opt_len += 3 * (e + 1) + 5 + 5 + 4, e;
                          }
                          put_short(e) {
                              this.pending_buf[this.pending++] = 255 & e, this.pending_buf[this.pending++] = e >>> 8 & 255;
                          }
                          send_bits(e, t) {
                              if (this.bi_valid > 16 - t) {
                                  this.bi_buf |= e << this.bi_valid & 65535;
                                  const r = this.pending;
                                  this.pending_buf[r] = this.bi_buf, this.pending_buf[r + 1] = this.bi_buf >>> 8, this.pending = r + 2, this.bi_buf = e >>> 16 - this.bi_valid, this.bi_valid += t - 16;
                              } else this.bi_buf |= e << this.bi_valid & 65535, this.bi_valid += t;
                          }
                          send_code(e, t) {
                              const r = 2 * e;
                              this.send_bits(65535 & t[r], 65535 & t[r + 1]);
                          }
                          send_tree(e, t) {
                              var r, n = -1, i = e[1], o = 0, s = 7, a = 4;
                              0 === i && (s = 138, a = 3);
                              for(let l = 0; l <= t; l++)if (r = i, i = e[2 * (l + 1) + 1], !(++o < s && r == i)) {
                                  if (o < a) do this.send_code(r, this.bl_tree);
                                  while (0 != --o);
                                  else 0 !== r ? (r != n && (this.send_code(r, this.bl_tree), o--), this.send_code(REP_3_6, this.bl_tree), this.send_bits(o - 3, 2)) : o <= 10 ? (this.send_code(REPZ_3_10, this.bl_tree), this.send_bits(o - 3, 3)) : (this.send_code(REPZ_11_138, this.bl_tree), this.send_bits(o - 11, 7));
                                  o = 0, n = r, 0 === i ? (s = 138, a = 3) : r == i ? (s = 6, a = 3) : (s = 7, a = 4);
                              }
                          }
                          send_all_trees(e, t, r) {
                              this.send_bits(e - 257, 5), this.send_bits(t - 1, 5), this.send_bits(r - 4, 4);
                              for(let e = 0; e < r; e++)this.send_bits(this.bl_tree[2 * Tree.bl_order[e] + 1], 3);
                              this.send_tree(this.dyn_ltree, e - 1), this.send_tree(this.dyn_dtree, t - 1);
                          }
                          bi_flush() {
                              16 === this.bi_valid ? (this.put_short(this.bi_buf), this.bi_buf = 0, this.bi_valid = 0) : this.bi_valid >= 8 && (this.pending_buf[this.pending++] = this.bi_buf, this.bi_buf >>>= 8, this.bi_valid -= 8);
                          }
                          _tr_align() {
                              this.send_bits(STATIC_TREES << 1, 3), this.send_code(END_BLOCK, StaticTree.static_ltree), this.bi_flush(), 1 + this.last_eob_len + 10 - this.bi_valid < 9 && (this.send_bits(STATIC_TREES << 1, 3), this.send_code(END_BLOCK, StaticTree.static_ltree), this.bi_flush()), this.last_eob_len = 7;
                          }
                          _tr_tally(e, t) {
                              if (this.pending_buf[d_buf + 2 * this.last_lit] = e >>> 8 & 255, this.pending_buf[d_buf + 2 * this.last_lit + 1] = 255 & e, this.pending_buf[l_buf + this.last_lit] = 255 & t, this.last_lit++, 0 === e ? this.dyn_ltree[2 * t]++ : (this.matches++, e--, this.dyn_ltree[2 * (Tree._length_code[t] + LITERALS + 1)]++, this.dyn_dtree[2 * Tree.d_code(e)]++), 0 == (8191 & this.last_lit) && this.level > 2) {
                                  let e = 8 * this.last_lit, t = this.strstart - this.block_start;
                                  for(let t = 0; t < D_CODES; t++)e += this.dyn_dtree[2 * t] * (5 + Tree.extra_dbits[t]);
                                  if (e >>>= 3, this.matches < Math.floor(this.last_lit / 2) && e < Math.floor(t / 2)) return !0;
                              }
                              return this.last_lit === lit_bufsize - 1;
                          }
                          compress_block(e, t) {
                              let r = 0;
                              if (0 !== this.last_lit) do {
                                  let n = this.pending_buf[d_buf + 2 * r] << 8 & 65280 | 255 & this.pending_buf[d_buf + 2 * r + 1], i = 255 & this.pending_buf[l_buf + r];
                                  if (r++, 0 === n) this.send_code(i, e);
                                  else {
                                      let r = Tree._length_code[i];
                                      this.send_code(r + LITERALS + 1, e);
                                      let o = Tree.extra_lbits[r];
                                      0 !== o && (i -= Tree.base_length[r], this.send_bits(i, o)), n--, r = Tree.d_code(n), this.send_code(r, t), o = Tree.extra_dbits[r], 0 !== o && (n -= Tree.base_dist[r], this.send_bits(n, o));
                                  }
                              }while (r < this.last_lit);
                              this.send_code(END_BLOCK, e), this.last_eob_len = e[2 * END_BLOCK + 1];
                          }
                          bi_windup() {
                              this.bi_valid > 8 ? this.put_short(this.bi_buf) : this.bi_valid > 0 && (this.pending_buf[this.pending++] = this.bi_buf), this.bi_buf = 0, this.bi_valid = 0;
                          }
                          copy_block(e, t, r) {
                              this.bi_windup(), this.last_eob_len = 8, r && (this.put_short(t), this.put_short(~t)), this.pending_buf.set(this.window.subarray(e, e + t), this.pending), this.pending += t;
                          }
                          _tr_stored_block(e, t, r) {
                              this.send_bits((STORED_BLOCK << 1) + (r ? 1 : 0), 3), this.copy_block(e, t, !0);
                          }
                          _tr_flush_block(e, t, r) {
                              let n, i, o = 0;
                              this.level > 0 ? (this.l_desc.build_tree(this), this.d_desc.build_tree(this), o = this.build_bl_tree(), n = this.opt_len + 3 + 7 >>> 3, i = this.static_len + 3 + 7 >>> 3, i <= n && (n = i)) : n = i = t + 5, t + 4 <= n && -1 !== e ? this._tr_stored_block(e, t, r) : i == n ? (this.send_bits((STATIC_TREES << 1) + (r ? 1 : 0), 3), this.compress_block(StaticTree.static_ltree, StaticTree.static_dtree)) : (this.send_bits((DYN_TREES << 1) + (r ? 1 : 0), 3), this.send_all_trees(this.l_desc.max_code + 1, this.d_desc.max_code + 1, o + 1), this.compress_block(this.dyn_ltree, this.dyn_dtree)), this.init_block(), r && this.bi_windup();
                          }
                          flush_block_only(e) {
                              this._tr_flush_block(this.block_start >= 0 ? this.block_start : -1, this.strstart - this.block_start, e), this.block_start = this.strstart, this.strm.flush_pending(this);
                          }
                          fill_window() {
                              do {
                                  let e = window_size - this.lookahead - this.strstart;
                                  if (0 === e && 0 === this.strstart && 0 === this.lookahead) e = 32768;
                                  else if (-1 === e) e--;
                                  else if (this.strstart >= 65536 - MIN_LOOKAHEAD) {
                                      this.window.set(this.window.subarray(32768, 65536), 0), this.match_start -= 32768, this.strstart -= 32768, this.block_start -= 32768;
                                      let t = hash_size, r = t;
                                      do {
                                          let e = 65535 & this.head[--r];
                                          this.head[r] = e >= 32768 ? e - 32768 : 0;
                                      }while (0 != --t);
                                      t = 32768, r = t;
                                      do {
                                          let e = 65535 & this.prev[--r];
                                          this.prev[r] = e >= 32768 ? e - 32768 : 0;
                                      }while (0 != --t);
                                      e += 32768;
                                  }
                                  if (0 === this.strm.avail_in) return;
                                  const t = this.strm.read_into_buf(this.window, this.strstart + this.lookahead, e);
                                  this.lookahead += t, this.lookahead >= MIN_MATCH && (this.ins_h = 255 & this.window[this.strstart], this.ins_h = (this.ins_h << hash_shift ^ 255 & this.window[this.strstart + 1]) & hash_mask);
                              }while (this.lookahead < MIN_LOOKAHEAD && 0 !== this.strm.avail_in);
                          }
                          deflate_stored(e) {
                              let t = 65535;
                              for(t > pending_buf_size - 5 && (t = pending_buf_size - 5);;){
                                  if (this.lookahead <= 1) {
                                      if (this.fill_window(), 0 === this.lookahead && 0 === e) return 0;
                                      if (0 === this.lookahead) break;
                                  }
                                  this.strstart += this.lookahead, this.lookahead = 0;
                                  let r = this.block_start + t;
                                  if ((0 === this.strstart || this.strstart >= r) && (this.lookahead = this.strstart - r, this.strstart = r, this.flush_block_only(!1), 0 === this.strm.avail_out)) return 0;
                                  if (this.strstart - this.block_start >= 32768 - MIN_LOOKAHEAD && (this.flush_block_only(!1), 0 === this.strm.avail_out)) return 0;
                              }
                              return this.flush_block_only(4 === e), 0 === this.strm.avail_out ? 4 === e ? 2 : 0 : 4 === e ? 3 : 1;
                          }
                          longest_match(e) {
                              let t = this.max_chain_length, r = this.strstart, n = this.prev_length, i = this.strstart > 32768 - MIN_LOOKAHEAD ? this.strstart - (32768 - MIN_LOOKAHEAD) : 0, o = this.nice_match;
                              const s = this.window, a = this.strstart + MAX_MATCH;
                              let l = s[r + n - 1], u = s[r + n];
                              const c = s[r], d = s[r + 1];
                              this.prev_length >= this.good_match && (t >>= 2), o > this.lookahead && (o = this.lookahead);
                              do {
                                  let h = e, f = !0;
                                  for(;;){
                                      if (h = e, s[h + n] !== u || s[h + n - 1] !== l) {
                                          if ((e = this.prev[32767 & e]) > i && 0 != --t) continue;
                                          f = !1;
                                      }
                                      break;
                                  }
                                  if (!f) break;
                                  if (s[h] !== c || s[h + 1] !== d) continue;
                                  r += 2, h += 2;
                                  do {
                                      const e = (s[r] << 24 | s[r + 1] << 16 | s[r + 2] << 8 | s[r + 3]) ^ (s[h] << 24 | s[h + 1] << 16 | s[h + 2] << 8 | s[h + 3]);
                                      if (e) {
                                          const t = Math.clz32(e) >> 3;
                                          r += t, h += t;
                                          break;
                                      }
                                      r += 4, h += 4;
                                  }while (r < a);
                                  r > a && (r = a);
                                  let p = MAX_MATCH - (a - r);
                                  if (r = a - MAX_MATCH, p > n) {
                                      if (this.match_start = e, n = p, p >= o) break;
                                      l = s[r + n - 1], u = s[r + n];
                                  }
                              }while ((e = this.prev[32767 & e]) > i && 0 != --t);
                              return n <= this.lookahead ? n : this.lookahead;
                          }
                          deflate_fast(e) {
                              let t, r = 0;
                              for(;;){
                                  if (this.lookahead < MIN_LOOKAHEAD) {
                                      if (this.fill_window(), this.lookahead < MIN_LOOKAHEAD && 0 === e) return 0;
                                      if (0 === this.lookahead) break;
                                  }
                                  if (this.lookahead >= MIN_MATCH && (this.ins_h = (this.ins_h << hash_shift ^ 255 & this.window[this.strstart + (MIN_MATCH - 1)]) & hash_mask, r = 65535 & this.head[this.ins_h], this.prev[32767 & this.strstart] = this.head[this.ins_h], this.head[this.ins_h] = this.strstart), 0 !== r && (this.strstart - r & 65535) <= 32768 - MIN_LOOKAHEAD && 2 !== this.strategy && (this.match_length = this.longest_match(r)), this.match_length >= MIN_MATCH) {
                                      if (t = this._tr_tally(this.strstart - this.match_start, this.match_length - MIN_MATCH), this.lookahead -= this.match_length, this.match_length <= this.max_lazy_match && this.lookahead >= MIN_MATCH) {
                                          this.match_length--;
                                          do this.strstart++, this.ins_h = (this.ins_h << hash_shift ^ 255 & this.window[this.strstart + (MIN_MATCH - 1)]) & hash_mask, r = 65535 & this.head[this.ins_h], this.prev[32767 & this.strstart] = this.head[this.ins_h], this.head[this.ins_h] = this.strstart;
                                          while (0 != --this.match_length);
                                          this.strstart++;
                                      } else this.strstart += this.match_length, this.match_length = 0, this.ins_h = 255 & this.window[this.strstart], this.ins_h = (this.ins_h << hash_shift ^ 255 & this.window[this.strstart + 1]) & hash_mask;
                                  } else t = this._tr_tally(0, 255 & this.window[this.strstart]), this.lookahead--, this.strstart++;
                                  if (t && (this.flush_block_only(!1), 0 === this.strm.avail_out)) return 0;
                              }
                              return this.flush_block_only(4 === e), 0 === this.strm.avail_out ? 4 === e ? 2 : 0 : 4 === e ? 3 : 1;
                          }
                          deflate_slow(e) {
                              let t, r, n, i = 0;
                              for(;;){
                                  if (this.lookahead < MIN_LOOKAHEAD) {
                                      if (this.fill_window(), this.lookahead < MIN_LOOKAHEAD && 0 === e) return 0;
                                      if (0 === this.lookahead) break;
                                  }
                                  if (this.lookahead >= MIN_MATCH && (this.ins_h = (this.ins_h << hash_shift ^ 255 & this.window[this.strstart + (MIN_MATCH - 1)]) & hash_mask, i = 65535 & this.head[this.ins_h], this.prev[32767 & this.strstart] = this.head[this.ins_h], this.head[this.ins_h] = this.strstart), this.prev_length = this.match_length, n = this.match_start, this.match_length = MIN_MATCH - 1, 0 !== i && this.prev_length < this.max_lazy_match && (this.strstart - i & 65535) <= 32768 - MIN_LOOKAHEAD && (2 !== this.strategy && (this.match_length = this.longest_match(i)), this.match_length <= 5 && (1 === this.strategy || this.match_length === MIN_MATCH && this.strstart - this.match_start > 4096) && (this.match_length = MIN_MATCH - 1)), this.prev_length >= MIN_MATCH && this.match_length <= this.prev_length) {
                                      r = this.strstart + this.lookahead - MIN_MATCH, t = this._tr_tally(this.strstart - 1 - n, this.prev_length - MIN_MATCH), this.lookahead -= this.prev_length - 1, this.prev_length -= 2;
                                      do ++this.strstart <= r && (this.ins_h = (this.ins_h << hash_shift ^ 255 & this.window[this.strstart + (MIN_MATCH - 1)]) & hash_mask, i = 65535 & this.head[this.ins_h], this.prev[32767 & this.strstart] = this.head[this.ins_h], this.head[this.ins_h] = this.strstart);
                                      while (0 != --this.prev_length);
                                      if (this.match_available = !1, this.match_length = MIN_MATCH - 1, this.strstart++, t && (this.flush_block_only(!1), 0 === this.strm.avail_out)) return 0;
                                  } else if (this.match_available) {
                                      if (t = this._tr_tally(0, 255 & this.window[this.strstart - 1]), t && this.flush_block_only(!1), this.strstart++, this.lookahead--, 0 === this.strm.avail_out) return 0;
                                  } else this.match_available = !0, this.strstart++, this.lookahead--;
                              }
                              return this.match_available && (t = this._tr_tally(0, 255 & this.window[this.strstart - 1]), this.match_available = !1), this.flush_block_only(4 === e), 0 === this.strm.avail_out ? 4 === e ? 2 : 0 : 4 === e ? 3 : 1;
                          }
                          deflateSetDictionary(e) {
                              const t = e.byteLength;
                              let r, n = t, i = 0;
                              if (!e || 1 !== this.status) return -2;
                              if (n < MIN_MATCH) return 0;
                              for(n > 32768 - MIN_LOOKAHEAD && (n = 32768 - MIN_LOOKAHEAD, i = t - n), this.window.set(e.subarray(i, i + n), 0), this.strstart = n, this.block_start = n, this.ins_h = 255 & this.window[0], this.ins_h = (this.ins_h << hash_shift ^ 255 & this.window[1]) & hash_mask, r = 0; r <= n - MIN_MATCH; r++)this.ins_h = (this.ins_h << hash_shift ^ 255 & this.window[r + (MIN_MATCH - 1)]) & hash_mask, this.prev[32767 & r] = this.head[this.ins_h], this.head[this.ins_h] = r;
                              return 0;
                          }
                          deflate(e) {
                              if (e > 4 || e < 0) return -2;
                              const { strm: t  } = this;
                              if (!t.next_out || !t.next_in && 0 !== t.avail_in || 3 === this.status && 4 != e) return -2;
                              if (0 === t.avail_out) return -5;
                              let r = this.last_flush;
                              if (this.last_flush = e, 1 === this.status && (this.status = 2), 0 !== this.pending) {
                                  if (t.flush_pending(this), 0 === t.avail_out) return this.last_flush = -1, 0;
                              } else if (0 === t.avail_in && e <= r && 4 !== e) return -5;
                              if (3 === this.status && 0 !== t.avail_in) return -5;
                              if (0 !== t.avail_in || 0 !== this.lookahead || 0 !== e && 3 !== this.status) {
                                  let r;
                                  switch(config_table[this.level].func){
                                      case 0:
                                          r = this.deflate_stored(e);
                                          break;
                                      case 1:
                                          r = this.deflate_fast(e);
                                          break;
                                      default:
                                          r = this.deflate_slow(e);
                                  }
                                  if (2 != r && 3 !== r || (this.status = 3), 0 === r || 2 === r) return 0 === t.avail_out && (this.last_flush = -1), 0;
                                  if (1 === r) {
                                      if (1 === e) this._tr_align();
                                      else if (this._tr_stored_block(0, 0, !1), 3 === e) for(let e = 0; e < hash_size; e++)this.head[e] = 0;
                                      if (t.flush_pending(this), 0 === t.avail_out) return this.last_flush = -1, 0;
                                  }
                              }
                              return 4 !== e ? 0 : 1;
                          }
                      }
                      class Deflater {
                          constructor(e){
                              var t, r;
                              this.checksum = 1, this.origSize = 0, this.dictChecksum = 0;
                              const n = null !== (t = null == e ? void 0 : e.level) && void 0 !== t ? t : 6, i = null !== (r = null == e ? void 0 : e.format) && void 0 !== r ? r : "deflate", o = null == e ? void 0 : e.dictionary, s = null == e ? void 0 : e.fileName;
                              if ("number" != typeof n || n < 1 || n > 9) throw new RangeError("level must be between 1 and 9, inclusive");
                              if ("gzip" !== i && "raw" !== i && "deflate" !== i) throw new RangeError("container must be one of `raw`, `deflate`, `gzip`");
                              if (void 0 !== s && "string" != typeof s) throw new TypeError("fileName must be a string");
                              if (this.fileName = s || "", this.z = new ZStream, this.deflate = new Deflate(this.z, n, 0), o) {
                                  if ("deflate" !== i) throw new TypeError("Can only provide a dictionary for `deflate` containers.");
                                  const e = u8ArrayFromBufferSource(o);
                                  if (!e) throw new TypeError("dictionary must be an ArrayBuffer or buffer view");
                                  this.dictChecksum = adler32(e), this.deflate.deflateSetDictionary(e);
                              }
                              this.format = i, "gzip" === this.format && (this.checksum = 0);
                          }
                          buildZlibHeader() {
                              let e = 2, t = 1;
                              0 !== this.dictChecksum && (e += 4, t = PRESET_DICT);
                              const r = new ArrayBuffer(e), n = new DataView(r);
                              return n.setUint16(0, 30720 | t), 0 !== this.dictChecksum && n.setUint32(2, this.dictChecksum), new Uint8Array(r);
                          }
                          buildGZipHeader() {
                              let e = 0, t = [];
                              this.fileName.length > 0 && (e |= 8, t = Array.from(this.fileName).map((e)=>{
                                  const t = e.charCodeAt(0);
                                  return t > 255 ? 95 : t;
                              }), t.push(0));
                              const r = new ArrayBuffer(10 + t.length), n = new DataView(r);
                              n.setUint16(0, GZIP_ID1 << 8 | GZIP_ID2), n.setUint16(2, Z_DEFLATED << 8 | e);
                              const i = Math.floor(Date.now() / 1e3);
                              n.setUint32(4, i, !0), n.setUint16(8, 255);
                              const o = new Uint8Array(r);
                              return t.length && o.set(t, 10), o;
                          }
                          buildTrailer() {
                              const e = "gzip" === this.format, t = new ArrayBuffer(e ? 8 : 4), r = new DataView(t);
                              return r.setUint32(0, this.checksum, e), e && r.setUint32(4, this.origSize, !0), new Uint8Array(t);
                          }
                          append(e) {
                              const t = [], r = u8ArrayFromBufferSource(e);
                              if (!(r instanceof Uint8Array)) throw new TypeError("data must be an ArrayBuffer or buffer view");
                              if (!r.length) return t;
                              "gzip" !== this.format ? this.checksum = adler32(r, this.checksum) : this.checksum = crc32(r, this.checksum), this.origSize += r.length;
                              const { deflate: n , z: i  } = this;
                              i.next_in_index = 0, i.next_in = r, i.avail_in = r.length, 1 === n.status && ("deflate" === this.format ? t.push(this.buildZlibHeader()) : "gzip" === this.format && t.push(this.buildGZipHeader()));
                              do {
                                  if (i.next_out_index = 0, i.avail_out = OUTPUT_BUFSIZE, 0 !== n.deflate(0)) throw new Error("deflating: " + i.msg);
                                  i.next_out_index && t.push(new Uint8Array(i.next_out.subarray(0, i.next_out_index)));
                              }while (i.avail_in > 0 || 0 === i.avail_out);
                              return t;
                          }
                          finish() {
                              const e = [], { deflate: t , z: r  } = this;
                              if (1 === t.status) throw new Error("Cannot call finish before at least 1 call to append");
                              do {
                                  r.next_out_index = 0, r.avail_out = OUTPUT_BUFSIZE;
                                  const n = t.deflate(4);
                                  if (1 !== n && 0 !== n) throw new Error("deflating: " + r.msg);
                                  OUTPUT_BUFSIZE - r.avail_out > 0 && e.push(new Uint8Array(r.next_out.subarray(0, r.next_out_index)));
                              }while (r.avail_in > 0 || 0 === r.avail_out);
                              return "raw" !== this.format && e.push(this.buildTrailer()), e;
                          }
                      }
                      const decContext = Symbol("decContext"), decTransform$1 = Symbol("decTransform");
                      class DecompressionTransformer {
                          constructor(e){
                              this.inflater_ = e;
                          }
                          transform(e, t) {
                              if (!(e instanceof ArrayBuffer || ArrayBuffer.isView(e))) throw new TypeError("Input data must be a BufferSource");
                              const r = this.inflater_.append(e);
                              for (const e of r)t.enqueue(e);
                          }
                          flush(e) {
                              const t = this.inflater_.finish();
                              if (!t.success) {
                                  if (!t.complete) throw new Error("Unexpected EOF during decompression");
                                  if ("mismatch" === t.checksum) throw new Error("Data integrity check failed");
                                  if ("mismatch" === t.fileSize) throw new Error("Data size check failed");
                                  throw new Error("Decompression error");
                              }
                          }
                      }
                      class DecompressionStream {
                          constructor(e){
                              if ("deflate" !== e && "gzip" !== e) throw new TypeError("format must be one of `deflate`, `gzip`");
                              this[decContext] = new Inflater, this[decTransform$1] = new TransformStream(new DecompressionTransformer(this[decContext]));
                          }
                          get readable() {
                              return this[decTransform$1].readable;
                          }
                          get writable() {
                              return this[decTransform$1].writable;
                          }
                      }
                      const comContext = Symbol("comContext"), comTransform = Symbol("comTransform");
                      class CompressionTransformer {
                          constructor(e){
                              this.deflater_ = e;
                          }
                          transform(e, t) {
                              if (!(e instanceof ArrayBuffer || ArrayBuffer.isView(e))) throw new TypeError("Input data must be a BufferSource");
                              const r = this.deflater_.append(e);
                              for (const e of r)t.enqueue(e);
                          }
                          flush(e) {
                              const t = this.deflater_.finish();
                              for (const r of t)e.enqueue(r);
                          }
                      }
                      class CompressionStream {
                          constructor(e){
                              if ("deflate" !== e && "gzip" !== e) throw new TypeError("format must be one of `deflate`, `gzip`");
                              this[comContext] = new Deflater({
                                  format: e
                              }), this[comTransform] = new TransformStream(new CompressionTransformer(this[comContext]));
                          }
                          get readable() {
                              return this[comTransform].readable;
                          }
                          get writable() {
                              return this[comTransform].writable;
                          }
                      }
                      function getGlobal() {
                          return "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : "undefined" != typeof window ? window : void 0 !== __webpack_require__.g ? __webpack_require__.g : void 0;
                      }
                      function getGlobalValue(e) {
                          const t = getGlobal();
                          let r;
                          return void 0 !== t && (r = t[e]), r;
                      }
                      function getGlobalOrContextualValue(name) {
                          const global = getGlobal();
                          let value;
                          if (void 0 !== global && (value = global[name]), void 0 === value) try {
                              value = eval(name);
                          } catch (e) {}
                          return value;
                      }
                      function hasCompleteStreamsImplementation() {
                          const e = getGlobalValue("ReadableStream"), t = getGlobalValue("WritableStream"), r = getGlobalValue("TransformStream"), n = getGlobalValue("ByteLengthQueuingStrategy"), i = getGlobalValue("CountQueuingStrategy"), o = (e)=>"function" == typeof e;
                          if (!(o(e) && o(t) && o(r) && o(n) && o(i))) return !1;
                          try {
                              const t = new e({
                                  type: "bytes"
                              }).getReader({
                                  mode: "byob"
                              });
                              if (null == t || "object" != typeof t) return !1;
                          } catch (e) {
                              return !1;
                          }
                          return !0;
                      }
                      function installStardazedStreams() {
                          const e = getGlobal();
                          if (!e) return !1;
                          if (hasCompleteStreamsImplementation()) return !1;
                          const t = getGlobalOrContextualValue("fetch"), r = getGlobalOrContextualValue("Response"), n = getGlobalValue("ReadableStream");
                          if (t && r) {
                              const i = createAdaptedFetch(t, r, n, SDReadableStream, readableStreamTee), o = createAdaptedResponse(r, n, SDReadableStream, readableStreamTee);
                              e.fetch = i, e.Response = o;
                          }
                          return e.ReadableStream = SDReadableStream, e.WritableStream = WritableStream, e.TransformStream = TransformStream$1, e.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy, e.CountQueuingStrategy = CountQueuingStrategy, !0;
                      }
                      function installEncodingStreams(e) {
                          const t = getGlobal();
                          if (!t) return;
                          const r = getGlobalValue("TextDecoderStream");
                          (e || "function" != typeof r) && (t.TextDecoderStream = TextDecoderStream);
                          const n = getGlobalValue("TextEncoderStream");
                          (e || "function" != typeof n) && (t.TextEncoderStream = TextEncoderStream);
                      }
                      function installCompressionStreams(e) {
                          const t = getGlobal();
                          if (!t) return;
                          const r = getGlobalValue("CompressionStream");
                          (e || "function" != typeof r) && (t.CompressionStream = CompressionStream);
                          const n = getGlobalValue("DecompressionStream");
                          (e || "function" != typeof n) && (t.DecompressionStream = DecompressionStream);
                      }
                      const overwritten = installStardazedStreams();
                      installEncodingStreams(overwritten), installCompressionStreams(overwritten);
                  })();
              },
              930: (e, t, r)=>{
                  "use strict";
                  e.exports = r(3681);
              },
              3681: (e, t, r)=>{
                  "use strict";
                  var n = t;
                  function i() {
                      n.util._configure(), n.Writer._configure(n.BufferWriter), n.Reader._configure(n.BufferReader);
                  }
                  n.build = "minimal", n.Writer = r(7768), n.BufferWriter = r(3676), n.Reader = r(5109), n.BufferReader = r(5477), n.util = r(1429), n.rpc = r(5988), n.roots = r(4508), n.configure = i, i();
              },
              5109: (e, t, r)=>{
                  "use strict";
                  e.exports = l;
                  var n, i = r(1429), o = i.LongBits, s = i.utf8;
                  function a(e, t) {
                      return RangeError("index out of range: " + e.pos + " + " + (t || 1) + " > " + e.len);
                  }
                  function l(e) {
                      this.buf = e, this.pos = 0, this.len = e.length;
                  }
                  var u, c = "undefined" != typeof Uint8Array ? function(e) {
                      if (e instanceof Uint8Array || Array.isArray(e)) return new l(e);
                      throw Error("illegal buffer");
                  } : function(e) {
                      if (Array.isArray(e)) return new l(e);
                      throw Error("illegal buffer");
                  }, d = function() {
                      return i.Buffer ? function(e) {
                          return (l.create = function(e) {
                              return i.Buffer.isBuffer(e) ? new n(e) : c(e);
                          })(e);
                      } : c;
                  };
                  function h() {
                      var e = new o(0, 0), t = 0;
                      if (!(this.len - this.pos > 4)) {
                          for(; t < 3; ++t){
                              if (this.pos >= this.len) throw a(this);
                              if (e.lo = (e.lo | (127 & this.buf[this.pos]) << 7 * t) >>> 0, this.buf[this.pos++] < 128) return e;
                          }
                          return e.lo = (e.lo | (127 & this.buf[this.pos++]) << 7 * t) >>> 0, e;
                      }
                      for(; t < 4; ++t)if (e.lo = (e.lo | (127 & this.buf[this.pos]) << 7 * t) >>> 0, this.buf[this.pos++] < 128) return e;
                      if (e.lo = (e.lo | (127 & this.buf[this.pos]) << 28) >>> 0, e.hi = (e.hi | (127 & this.buf[this.pos]) >> 4) >>> 0, this.buf[this.pos++] < 128) return e;
                      if (t = 0, this.len - this.pos > 4) {
                          for(; t < 5; ++t)if (e.hi = (e.hi | (127 & this.buf[this.pos]) << 7 * t + 3) >>> 0, this.buf[this.pos++] < 128) return e;
                      } else for(; t < 5; ++t){
                          if (this.pos >= this.len) throw a(this);
                          if (e.hi = (e.hi | (127 & this.buf[this.pos]) << 7 * t + 3) >>> 0, this.buf[this.pos++] < 128) return e;
                      }
                      throw Error("invalid varint encoding");
                  }
                  function f(e, t) {
                      return (e[t - 4] | e[t - 3] << 8 | e[t - 2] << 16 | e[t - 1] << 24) >>> 0;
                  }
                  function p() {
                      if (this.pos + 8 > this.len) throw a(this, 8);
                      return new o(f(this.buf, this.pos += 4), f(this.buf, this.pos += 4));
                  }
                  l.create = d(), l.prototype._slice = i.Array.prototype.subarray || i.Array.prototype.slice, l.prototype.uint32 = (u = 4294967295, function() {
                      if (u = (127 & this.buf[this.pos]) >>> 0, this.buf[this.pos++] < 128) return u;
                      if (u = (u | (127 & this.buf[this.pos]) << 7) >>> 0, this.buf[this.pos++] < 128) return u;
                      if (u = (u | (127 & this.buf[this.pos]) << 14) >>> 0, this.buf[this.pos++] < 128) return u;
                      if (u = (u | (127 & this.buf[this.pos]) << 21) >>> 0, this.buf[this.pos++] < 128) return u;
                      if (u = (u | (15 & this.buf[this.pos]) << 28) >>> 0, this.buf[this.pos++] < 128) return u;
                      if ((this.pos += 5) > this.len) throw this.pos = this.len, a(this, 10);
                      return u;
                  }), l.prototype.int32 = function() {
                      return 0 | this.uint32();
                  }, l.prototype.sint32 = function() {
                      var e = this.uint32();
                      return e >>> 1 ^ -(1 & e) | 0;
                  }, l.prototype.bool = function() {
                      return 0 !== this.uint32();
                  }, l.prototype.fixed32 = function() {
                      if (this.pos + 4 > this.len) throw a(this, 4);
                      return f(this.buf, this.pos += 4);
                  }, l.prototype.sfixed32 = function() {
                      if (this.pos + 4 > this.len) throw a(this, 4);
                      return 0 | f(this.buf, this.pos += 4);
                  }, l.prototype.float = function() {
                      if (this.pos + 4 > this.len) throw a(this, 4);
                      var e = i.float.readFloatLE(this.buf, this.pos);
                      return this.pos += 4, e;
                  }, l.prototype.double = function() {
                      if (this.pos + 8 > this.len) throw a(this, 4);
                      var e = i.float.readDoubleLE(this.buf, this.pos);
                      return this.pos += 8, e;
                  }, l.prototype.bytes = function() {
                      var e = this.uint32(), t = this.pos, r = this.pos + e;
                      if (r > this.len) throw a(this, e);
                      return this.pos += e, Array.isArray(this.buf) ? this.buf.slice(t, r) : t === r ? new this.buf.constructor(0) : this._slice.call(this.buf, t, r);
                  }, l.prototype.string = function() {
                      var e = this.bytes();
                      return s.read(e, 0, e.length);
                  }, l.prototype.skip = function(e) {
                      if ("number" == typeof e) {
                          if (this.pos + e > this.len) throw a(this, e);
                          this.pos += e;
                      } else do {
                          if (this.pos >= this.len) throw a(this);
                      }while (128 & this.buf[this.pos++]);
                      return this;
                  }, l.prototype.skipType = function(e) {
                      switch(e){
                          case 0:
                              this.skip();
                              break;
                          case 1:
                              this.skip(8);
                              break;
                          case 2:
                              this.skip(this.uint32());
                              break;
                          case 3:
                              for(; 4 != (e = 7 & this.uint32());)this.skipType(e);
                              break;
                          case 5:
                              this.skip(4);
                              break;
                          default:
                              throw Error("invalid wire type " + e + " at offset " + this.pos);
                      }
                      return this;
                  }, l._configure = function(e) {
                      n = e, l.create = d(), n._configure();
                      var t = i.Long ? "toLong" : "toNumber";
                      i.merge(l.prototype, {
                          int64: function() {
                              return h.call(this)[t](!1);
                          },
                          uint64: function() {
                              return h.call(this)[t](!0);
                          },
                          sint64: function() {
                              return h.call(this).zzDecode()[t](!1);
                          },
                          fixed64: function() {
                              return p.call(this)[t](!0);
                          },
                          sfixed64: function() {
                              return p.call(this)[t](!1);
                          }
                      });
                  };
              },
              5477: (e, t, r)=>{
                  "use strict";
                  e.exports = o;
                  var n = r(5109);
                  (o.prototype = Object.create(n.prototype)).constructor = o;
                  var i = r(1429);
                  function o(e) {
                      n.call(this, e);
                  }
                  o._configure = function() {
                      i.Buffer && (o.prototype._slice = i.Buffer.prototype.slice);
                  }, o.prototype.string = function() {
                      var e = this.uint32();
                      return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + e, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + e, this.len));
                  }, o._configure();
              },
              4508: (e)=>{
                  "use strict";
                  e.exports = {};
              },
              5988: (e, t, r)=>{
                  "use strict";
                  t.Service = r(1365);
              },
              1365: (e, t, r)=>{
                  "use strict";
                  e.exports = i;
                  var n = r(1429);
                  function i(e, t, r) {
                      if ("function" != typeof e) throw TypeError("rpcImpl must be a function");
                      n.EventEmitter.call(this), this.rpcImpl = e, this.requestDelimited = Boolean(t), this.responseDelimited = Boolean(r);
                  }
                  (i.prototype = Object.create(n.EventEmitter.prototype)).constructor = i, i.prototype.rpcCall = function e(t, r, i, o, s) {
                      if (!o) throw TypeError("request must be specified");
                      var a = this;
                      if (!s) return n.asPromise(e, a, t, r, i, o);
                      if (a.rpcImpl) try {
                          return a.rpcImpl(t, r[a.requestDelimited ? "encodeDelimited" : "encode"](o).finish(), function(e, r) {
                              if (e) return a.emit("error", e, t), s(e);
                              if (null !== r) {
                                  if (!(r instanceof i)) try {
                                      r = i[a.responseDelimited ? "decodeDelimited" : "decode"](r);
                                  } catch (e) {
                                      return a.emit("error", e, t), s(e);
                                  }
                                  return a.emit("data", r, t), s(null, r);
                              }
                              a.end(!0);
                          });
                      } catch (e) {
                          return a.emit("error", e, t), void setTimeout(function() {
                              s(e);
                          }, 0);
                      }
                      else setTimeout(function() {
                          s(Error("already ended"));
                      }, 0);
                  }, i.prototype.end = function(e) {
                      return this.rpcImpl && (e || this.rpcImpl(null, null, null), this.rpcImpl = null, this.emit("end").off()), this;
                  };
              },
              9340: (e, t, r)=>{
                  "use strict";
                  e.exports = i;
                  var n = r(1429);
                  function i(e, t) {
                      this.lo = e >>> 0, this.hi = t >>> 0;
                  }
                  var o = i.zero = new i(0, 0);
                  o.toNumber = function() {
                      return 0;
                  }, o.zzEncode = o.zzDecode = function() {
                      return this;
                  }, o.length = function() {
                      return 1;
                  };
                  var s = i.zeroHash = "\0\0\0\0\0\0\0\0";
                  i.fromNumber = function(e) {
                      if (0 === e) return o;
                      var t = e < 0;
                      t && (e = -e);
                      var r = e >>> 0, n = (e - r) / 4294967296 >>> 0;
                      return t && (n = ~n >>> 0, r = ~r >>> 0, ++r > 4294967295 && (r = 0, ++n > 4294967295 && (n = 0))), new i(r, n);
                  }, i.from = function(e) {
                      if ("number" == typeof e) return i.fromNumber(e);
                      if (n.isString(e)) {
                          if (!n.Long) return i.fromNumber(parseInt(e, 10));
                          e = n.Long.fromString(e);
                      }
                      return e.low || e.high ? new i(e.low >>> 0, e.high >>> 0) : o;
                  }, i.prototype.toNumber = function(e) {
                      if (!e && this.hi >>> 31) {
                          var t = 1 + ~this.lo >>> 0, r = ~this.hi >>> 0;
                          return t || (r = r + 1 >>> 0), -(t + 4294967296 * r);
                      }
                      return this.lo + 4294967296 * this.hi;
                  }, i.prototype.toLong = function(e) {
                      return n.Long ? new n.Long(0 | this.lo, 0 | this.hi, Boolean(e)) : {
                          low: 0 | this.lo,
                          high: 0 | this.hi,
                          unsigned: Boolean(e)
                      };
                  };
                  var a = String.prototype.charCodeAt;
                  i.fromHash = function(e) {
                      return e === s ? o : new i((a.call(e, 0) | a.call(e, 1) << 8 | a.call(e, 2) << 16 | a.call(e, 3) << 24) >>> 0, (a.call(e, 4) | a.call(e, 5) << 8 | a.call(e, 6) << 16 | a.call(e, 7) << 24) >>> 0);
                  }, i.prototype.toHash = function() {
                      return String.fromCharCode(255 & this.lo, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, 255 & this.hi, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
                  }, i.prototype.zzEncode = function() {
                      var e = this.hi >> 31;
                      return this.hi = ((this.hi << 1 | this.lo >>> 31) ^ e) >>> 0, this.lo = (this.lo << 1 ^ e) >>> 0, this;
                  }, i.prototype.zzDecode = function() {
                      var e = -(1 & this.lo);
                      return this.lo = ((this.lo >>> 1 | this.hi << 31) ^ e) >>> 0, this.hi = (this.hi >>> 1 ^ e) >>> 0, this;
                  }, i.prototype.length = function() {
                      var e = this.lo, t = (this.lo >>> 28 | this.hi << 4) >>> 0, r = this.hi >>> 24;
                      return 0 === r ? 0 === t ? e < 16384 ? e < 128 ? 1 : 2 : e < 2097152 ? 3 : 4 : t < 16384 ? t < 128 ? 5 : 6 : t < 2097152 ? 7 : 8 : r < 128 ? 9 : 10;
                  };
              },
              1429: function(e, t, r) {
                  "use strict";
                  var n = t;
                  function i(e, t, r) {
                      for(var n = Object.keys(t), i = 0; i < n.length; ++i)void 0 !== e[n[i]] && r || (e[n[i]] = t[n[i]]);
                      return e;
                  }
                  function o(e) {
                      function t(e, r) {
                          if (!(this instanceof t)) return new t(e, r);
                          Object.defineProperty(this, "message", {
                              get: function() {
                                  return e;
                              }
                          }), Error.captureStackTrace ? Error.captureStackTrace(this, t) : Object.defineProperty(this, "stack", {
                              value: (new Error).stack || ""
                          }), r && i(this, r);
                      }
                      return t.prototype = Object.create(Error.prototype, {
                          constructor: {
                              value: t,
                              writable: !0,
                              enumerable: !1,
                              configurable: !0
                          },
                          name: {
                              get: ()=>e,
                              set: void 0,
                              enumerable: !1,
                              configurable: !0
                          },
                          toString: {
                              value () {
                                  return this.name + ": " + this.message;
                              },
                              writable: !0,
                              enumerable: !1,
                              configurable: !0
                          }
                      }), t;
                  }
                  n.asPromise = r(4537), n.base64 = r(7419), n.EventEmitter = r(9211), n.float = r(945), n.inquire = r(7199), n.utf8 = r(4997), n.pool = r(6662), n.LongBits = r(9340), n.isNode = Boolean(void 0 !== r.g && r.g && r.g.process && r.g.process.versions && r.g.process.versions.node), n.global = n.isNode && r.g || "undefined" != typeof window && window || "undefined" != typeof self && self || this, n.emptyArray = Object.freeze ? Object.freeze([]) : [], n.emptyObject = Object.freeze ? Object.freeze({}) : {}, n.isInteger = Number.isInteger || function(e) {
                      return "number" == typeof e && isFinite(e) && Math.floor(e) === e;
                  }, n.isString = function(e) {
                      return "string" == typeof e || e instanceof String;
                  }, n.isObject = function(e) {
                      return e && "object" == typeof e;
                  }, n.isset = n.isSet = function(e, t) {
                      var r = e[t];
                      return !(null == r || !e.hasOwnProperty(t)) && ("object" != typeof r || (Array.isArray(r) ? r.length : Object.keys(r).length) > 0);
                  }, n.Buffer = function() {
                      try {
                          var e = n.inquire("buffer").Buffer;
                          return e.prototype.utf8Write ? e : null;
                      } catch (e) {
                          return null;
                      }
                  }(), n._Buffer_from = null, n._Buffer_allocUnsafe = null, n.newBuffer = function(e) {
                      return "number" == typeof e ? n.Buffer ? n._Buffer_allocUnsafe(e) : new n.Array(e) : n.Buffer ? n._Buffer_from(e) : "undefined" == typeof Uint8Array ? e : new Uint8Array(e);
                  }, n.Array = "undefined" != typeof Uint8Array ? Uint8Array : Array, n.Long = n.global.dcodeIO && n.global.dcodeIO.Long || n.global.Long || n.inquire("long"), n.key2Re = /^true|false|0|1$/, n.key32Re = /^-?(?:0|[1-9][0-9]*)$/, n.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/, n.longToHash = function(e) {
                      return e ? n.LongBits.from(e).toHash() : n.LongBits.zeroHash;
                  }, n.longFromHash = function(e, t) {
                      var r = n.LongBits.fromHash(e);
                      return n.Long ? n.Long.fromBits(r.lo, r.hi, t) : r.toNumber(Boolean(t));
                  }, n.merge = i, n.lcFirst = function(e) {
                      return e.charAt(0).toLowerCase() + e.substring(1);
                  }, n.newError = o, n.ProtocolError = o("ProtocolError"), n.oneOfGetter = function(e) {
                      for(var t = {}, r = 0; r < e.length; ++r)t[e[r]] = 1;
                      return function() {
                          for(var e = Object.keys(this), r = e.length - 1; r > -1; --r)if (1 === t[e[r]] && void 0 !== this[e[r]] && null !== this[e[r]]) return e[r];
                      };
                  }, n.oneOfSetter = function(e) {
                      return function(t) {
                          for(var r = 0; r < e.length; ++r)e[r] !== t && delete this[e[r]];
                      };
                  }, n.toJSONOptions = {
                      longs: String,
                      enums: String,
                      bytes: String,
                      json: !0
                  }, n._configure = function() {
                      var e = n.Buffer;
                      e ? (n._Buffer_from = e.from !== Uint8Array.from && e.from || function(t, r) {
                          return new e(t, r);
                      }, n._Buffer_allocUnsafe = e.allocUnsafe || function(t) {
                          return new e(t);
                      }) : n._Buffer_from = n._Buffer_allocUnsafe = null;
                  };
              },
              7768: (e, t, r)=>{
                  "use strict";
                  e.exports = d;
                  var n, i = r(1429), o = i.LongBits, s = i.base64, a = i.utf8;
                  function l(e, t, r) {
                      this.fn = e, this.len = t, this.next = void 0, this.val = r;
                  }
                  function u() {}
                  function c(e) {
                      this.head = e.head, this.tail = e.tail, this.len = e.len, this.next = e.states;
                  }
                  function d() {
                      this.len = 0, this.head = new l(u, 0, 0), this.tail = this.head, this.states = null;
                  }
                  var h = function() {
                      return i.Buffer ? function() {
                          return (d.create = function() {
                              return new n;
                          })();
                      } : function() {
                          return new d;
                      };
                  };
                  function f(e, t, r) {
                      t[r] = 255 & e;
                  }
                  function p(e, t) {
                      this.len = e, this.next = void 0, this.val = t;
                  }
                  function m(e, t, r) {
                      for(; e.hi;)t[r++] = 127 & e.lo | 128, e.lo = (e.lo >>> 7 | e.hi << 25) >>> 0, e.hi >>>= 7;
                      for(; e.lo > 127;)t[r++] = 127 & e.lo | 128, e.lo = e.lo >>> 7;
                      t[r++] = e.lo;
                  }
                  function y(e, t, r) {
                      t[r] = 255 & e, t[r + 1] = e >>> 8 & 255, t[r + 2] = e >>> 16 & 255, t[r + 3] = e >>> 24;
                  }
                  d.create = h(), d.alloc = function(e) {
                      return new i.Array(e);
                  }, i.Array !== Array && (d.alloc = i.pool(d.alloc, i.Array.prototype.subarray)), d.prototype._push = function(e, t, r) {
                      return this.tail = this.tail.next = new l(e, t, r), this.len += t, this;
                  }, p.prototype = Object.create(l.prototype), p.prototype.fn = function(e, t, r) {
                      for(; e > 127;)t[r++] = 127 & e | 128, e >>>= 7;
                      t[r] = e;
                  }, d.prototype.uint32 = function(e) {
                      return this.len += (this.tail = this.tail.next = new p((e >>>= 0) < 128 ? 1 : e < 16384 ? 2 : e < 2097152 ? 3 : e < 268435456 ? 4 : 5, e)).len, this;
                  }, d.prototype.int32 = function(e) {
                      return e < 0 ? this._push(m, 10, o.fromNumber(e)) : this.uint32(e);
                  }, d.prototype.sint32 = function(e) {
                      return this.uint32((e << 1 ^ e >> 31) >>> 0);
                  }, d.prototype.uint64 = function(e) {
                      var t = o.from(e);
                      return this._push(m, t.length(), t);
                  }, d.prototype.int64 = d.prototype.uint64, d.prototype.sint64 = function(e) {
                      var t = o.from(e).zzEncode();
                      return this._push(m, t.length(), t);
                  }, d.prototype.bool = function(e) {
                      return this._push(f, 1, e ? 1 : 0);
                  }, d.prototype.fixed32 = function(e) {
                      return this._push(y, 4, e >>> 0);
                  }, d.prototype.sfixed32 = d.prototype.fixed32, d.prototype.fixed64 = function(e) {
                      var t = o.from(e);
                      return this._push(y, 4, t.lo)._push(y, 4, t.hi);
                  }, d.prototype.sfixed64 = d.prototype.fixed64, d.prototype.float = function(e) {
                      return this._push(i.float.writeFloatLE, 4, e);
                  }, d.prototype.double = function(e) {
                      return this._push(i.float.writeDoubleLE, 8, e);
                  };
                  var g = i.Array.prototype.set ? function(e, t, r) {
                      t.set(e, r);
                  } : function(e, t, r) {
                      for(var n = 0; n < e.length; ++n)t[r + n] = e[n];
                  };
                  d.prototype.bytes = function(e) {
                      var t = e.length >>> 0;
                      if (!t) return this._push(f, 1, 0);
                      if (i.isString(e)) {
                          var r = d.alloc(t = s.length(e));
                          s.decode(e, r, 0), e = r;
                      }
                      return this.uint32(t)._push(g, t, e);
                  }, d.prototype.string = function(e) {
                      var t = a.length(e);
                      return t ? this.uint32(t)._push(a.write, t, e) : this._push(f, 1, 0);
                  }, d.prototype.fork = function() {
                      return this.states = new c(this), this.head = this.tail = new l(u, 0, 0), this.len = 0, this;
                  }, d.prototype.reset = function() {
                      return this.states ? (this.head = this.states.head, this.tail = this.states.tail, this.len = this.states.len, this.states = this.states.next) : (this.head = this.tail = new l(u, 0, 0), this.len = 0), this;
                  }, d.prototype.ldelim = function() {
                      var e = this.head, t = this.tail, r = this.len;
                      return this.reset().uint32(r), r && (this.tail.next = e.next, this.tail = t, this.len += r), this;
                  }, d.prototype.finish = function() {
                      for(var e = this.head.next, t = this.constructor.alloc(this.len), r = 0; e;)e.fn(e.val, t, r), r += e.len, e = e.next;
                      return t;
                  }, d._configure = function(e) {
                      n = e, d.create = h(), n._configure();
                  };
              },
              3676: (e, t, r)=>{
                  "use strict";
                  e.exports = o;
                  var n = r(7768);
                  (o.prototype = Object.create(n.prototype)).constructor = o;
                  var i = r(1429);
                  function o() {
                      n.call(this);
                  }
                  function s(e, t, r) {
                      e.length < 40 ? i.utf8.write(e, t, r) : t.utf8Write ? t.utf8Write(e, r) : t.write(e, r);
                  }
                  o._configure = function() {
                      o.alloc = i._Buffer_allocUnsafe, o.writeBytesBuffer = i.Buffer && i.Buffer.prototype instanceof Uint8Array && "set" === i.Buffer.prototype.set.name ? function(e, t, r) {
                          t.set(e, r);
                      } : function(e, t, r) {
                          if (e.copy) e.copy(t, r, 0, e.length);
                          else for(var n = 0; n < e.length;)t[r++] = e[n++];
                      };
                  }, o.prototype.bytes = function(e) {
                      i.isString(e) && (e = i._Buffer_from(e, "base64"));
                      var t = e.length >>> 0;
                      return this.uint32(t), t && this._push(o.writeBytesBuffer, t, e), this;
                  }, o.prototype.string = function(e) {
                      var t = i.Buffer.byteLength(e);
                      return this.uint32(t), t && this._push(s, t, e), this;
                  }, o._configure();
              },
              1796: (e, t, r)=>{
                  "use strict";
                  r.r(t), r.d(t, {
                      authn: ()=>a,
                      ciphertext: ()=>l,
                      composite: ()=>d,
                      contact: ()=>f,
                      content: ()=>c,
                      fetcher: ()=>n,
                      invitation: ()=>p,
                      keystore: ()=>m,
                      message: ()=>u,
                      messageApi: ()=>i,
                      privateKey: ()=>h,
                      publicKey: ()=>s,
                      signature: ()=>o
                  });
                  var n = {};
                  r.r(n), r.d(n, {
                      b64Decode: ()=>_,
                      b64Encode: ()=>b,
                      fetchReq: ()=>E,
                      fetchStreamingRequest: ()=>k,
                      renderURLSearchParams: ()=>N,
                      replacer: ()=>S
                  });
                  var i = {};
                  r.r(i), r.d(i, {
                      MessageApi: ()=>x,
                      SortDirection: ()=>C
                  });
                  var o = {};
                  r.r(o), r.d(o, {
                      Signature: ()=>oe,
                      Signature_ECDSACompact: ()=>ae,
                      Signature_WalletECDSACompact: ()=>ue,
                      protobufPackage: ()=>ie
                  });
                  var s = {};
                  r.r(s), r.d(s, {
                      PublicKey: ()=>Ee,
                      PublicKeyBundle: ()=>Pe,
                      PublicKey_Secp256k1Uncompressed: ()=>Ae,
                      SignedPublicKey: ()=>we,
                      SignedPublicKeyBundle: ()=>_e,
                      UnsignedPublicKey: ()=>ye,
                      UnsignedPublicKey_Secp256k1Uncompressed: ()=>ve,
                      protobufPackage: ()=>pe
                  });
                  var a = {};
                  r.r(a), r.d(a, {
                      AuthData: ()=>Me,
                      Token: ()=>Be,
                      protobufPackage: ()=>Re
                  });
                  var l = {};
                  r.r(l), r.d(l, {
                      Ciphertext: ()=>je,
                      Ciphertext_Aes256gcmHkdfsha256: ()=>qe,
                      protobufPackage: ()=>Fe
                  });
                  var u = {};
                  r.r(u), r.d(u, {
                      Message: ()=>rt,
                      MessageHeaderV1: ()=>$e,
                      MessageHeaderV2: ()=>Ye,
                      MessageV1: ()=>Xe,
                      MessageV2: ()=>tt,
                      protobufPackage: ()=>Je
                  });
                  var c = {};
                  r.r(c), r.d(c, {
                      Compression: ()=>lt,
                      ContentTypeId: ()=>dt,
                      EncodedContent: ()=>ft,
                      EncodedContent_ParametersEntry: ()=>pt,
                      SignedContent: ()=>yt,
                      compressionFromJSON: ()=>ut,
                      compressionToJSON: ()=>ct,
                      protobufPackage: ()=>at
                  });
                  var d = {};
                  r.r(d), r.d(d, {
                      Composite: ()=>St,
                      Composite_Part: ()=>Et,
                      protobufPackage: ()=>_t
                  });
                  var h = {};
                  r.r(h), r.d(h, {
                      EncryptedPrivateKeyBundle: ()=>Ft,
                      EncryptedPrivateKeyBundleV1: ()=>Ut,
                      PrivateKey: ()=>Ot,
                      PrivateKeyBundle: ()=>Dt,
                      PrivateKeyBundleV1: ()=>Mt,
                      PrivateKeyBundleV2: ()=>Tt,
                      PrivateKey_Secp256k1: ()=>It,
                      SignedPrivateKey: ()=>Nt,
                      SignedPrivateKey_Secp256k1: ()=>xt,
                      protobufPackage: ()=>At
                  });
                  var f = {};
                  r.r(f), r.d(f, {
                      ContactBundle: ()=>Jt,
                      ContactBundleV1: ()=>Wt,
                      ContactBundleV2: ()=>Gt,
                      protobufPackage: ()=>Vt
                  });
                  var p = {};
                  r.r(p), r.d(p, {
                      InvitationV1: ()=>Zt,
                      InvitationV1_Aes256gcmHkdfsha256: ()=>Qt,
                      InvitationV1_Context: ()=>Yt,
                      InvitationV1_Context_MetadataEntry: ()=>er,
                      SealedInvitation: ()=>or,
                      SealedInvitationHeaderV1: ()=>rr,
                      SealedInvitationV1: ()=>ir,
                      protobufPackage: ()=>$t
                  });
                  var m = {};
                  r.r(m), r.d(m, {
                      ConversationReference: ()=>yr,
                      CreateInviteRequest: ()=>Kr,
                      CreateInviteResponse: ()=>Fr,
                      DecryptResponse: ()=>wr,
                      DecryptResponse_Response: ()=>_r,
                      DecryptResponse_Response_Success: ()=>Er,
                      DecryptV1Request: ()=>gr,
                      DecryptV1Request_Request: ()=>br,
                      DecryptV2Request: ()=>kr,
                      DecryptV2Request_Request: ()=>Pr,
                      EncryptResponse: ()=>Tr,
                      EncryptResponse_Response: ()=>Rr,
                      EncryptResponse_Response_Success: ()=>Or,
                      EncryptV1Request: ()=>Nr,
                      EncryptV1Request_Request: ()=>xr,
                      EncryptV2Request: ()=>Br,
                      EncryptV2Request_Request: ()=>Mr,
                      ErrorCode: ()=>dr,
                      KeystoreError: ()=>pr,
                      SaveInvitesRequest: ()=>jr,
                      SaveInvitesRequest_Request: ()=>qr,
                      SaveInvitesResponse: ()=>zr,
                      SaveInvitesResponse_Response: ()=>Vr,
                      SaveInvitesResponse_Response_Success: ()=>Wr,
                      TopicMap: ()=>Gr,
                      TopicMap_TopicData: ()=>Hr,
                      TopicMap_TopicsEntry: ()=>$r,
                      errorCodeFromJSON: ()=>hr,
                      errorCodeToJSON: ()=>fr,
                      protobufPackage: ()=>cr
                  });
                  var y = function(e, t) {
                      var r = {};
                      for(var n in e)Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (r[n] = e[n]);
                      if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
                          var i = 0;
                          for(n = Object.getOwnPropertySymbols(e); i < n.length; i++)t.indexOf(n[i]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[i]) && (r[n[i]] = e[n[i]]);
                      }
                      return r;
                  };
                  const g = new Array(64), v = new Array(123);
                  for(let e = 0; e < 64;)v[g[e] = e < 26 ? e + 65 : e < 52 ? e + 71 : e < 62 ? e - 4 : e - 59 | 43] = e++;
                  function b(e, t, r) {
                      let n = null;
                      const i = [];
                      let o, s = 0, a = 0;
                      for(; t < r;){
                          const r = e[t++];
                          switch(a){
                              case 0:
                                  i[s++] = g[r >> 2], o = (3 & r) << 4, a = 1;
                                  break;
                              case 1:
                                  i[s++] = g[o | r >> 4], o = (15 & r) << 2, a = 2;
                                  break;
                              case 2:
                                  i[s++] = g[o | r >> 6], i[s++] = g[63 & r], a = 0;
                          }
                          s > 8191 && ((n || (n = [])).push(String.fromCharCode.apply(String, i)), s = 0);
                      }
                      return a && (i[s++] = g[o], i[s++] = 61, 1 === a && (i[s++] = 61)), n ? (s && n.push(String.fromCharCode.apply(String, i.slice(0, s))), n.join("")) : String.fromCharCode.apply(String, i.slice(0, s));
                  }
                  const w = "invalid encoding";
                  function _(e) {
                      const t = [];
                      let r, n = 0, i = 0;
                      for(let o = 0; o < e.length;){
                          let s = e.charCodeAt(o++);
                          if (61 === s && i > 1) break;
                          if (void 0 === (s = v[s])) throw Error(w);
                          switch(i){
                              case 0:
                                  r = s, i = 1;
                                  break;
                              case 1:
                                  t[n++] = r << 2 | (48 & s) >> 4, r = s, i = 2;
                                  break;
                              case 2:
                                  t[n++] = (15 & r) << 4 | (60 & s) >> 2, r = s, i = 3;
                                  break;
                              case 3:
                                  t[n++] = (3 & r) << 6 | s, i = 0;
                          }
                      }
                      if (1 === i) throw Error(w);
                      return new Uint8Array(t);
                  }
                  function S(e, t) {
                      return t && t.constructor === Uint8Array ? b(t, 0, t.length) : t;
                  }
                  function E(e, t) {
                      const r = t || {}, { pathPrefix: n  } = r, i = y(r, [
                          "pathPrefix"
                      ]);
                      return fetch(n ? `${n}${e}` : e, i).then((e)=>e.json().then((t)=>{
                              if (!e.ok) throw t;
                              return t;
                          }));
                  }
                  function k(e, t, r) {
                      var n, i, o, s;
                      return n = this, i = void 0, s = function*() {
                          const n = r || {}, { pathPrefix: i  } = n, o = y(n, [
                              "pathPrefix"
                          ]), s = i ? `${i}${e}` : e, a = yield fetch(s, o);
                          if (!a.ok) {
                              const e = yield a.json(), t = e.error && e.error.message ? e.error.message : "";
                              throw new Error(t);
                          }
                          if (!a.body) throw new Error("response doesnt have a body");
                          var l;
                          yield a.body.pipeThrough(new TextDecoderStream).pipeThrough(new TransformStream({
                              start (e) {
                                  e.buf = "", e.pos = 0;
                              },
                              transform (e, t) {
                                  for(void 0 === t.buf && (t.buf = ""), void 0 === t.pos && (t.pos = 0), t.buf += e; t.pos < t.buf.length;)if ("\n" === t.buf[t.pos]) {
                                      const e = t.buf.substring(0, t.pos), r = JSON.parse(e);
                                      t.enqueue(r.result), t.buf = t.buf.substring(t.pos + 1), t.pos = 0;
                                  } else ++t.pos;
                              }
                          })).pipeTo((l = (e)=>{
                              t && t(e);
                          }, new WritableStream({
                              write (e) {
                                  l(e);
                              }
                          })));
                      }, new (o = void 0, o = Promise)(function(e, t) {
                          function r(e) {
                              try {
                                  l(s.next(e));
                              } catch (e) {
                                  t(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(s.throw(e));
                              } catch (e) {
                                  t(e);
                              }
                          }
                          function l(t) {
                              var n;
                              t.done ? e(t.value) : (n = t.value, n instanceof o ? n : new o(function(e) {
                                  e(n);
                              })).then(r, a);
                          }
                          l((s = s.apply(n, i || [])).next());
                      });
                  }
                  function A(e) {
                      return [
                          "string",
                          "number",
                          "boolean"
                      ].some((t)=>typeof e === t);
                  }
                  function P(e, t = "") {
                      return Object.keys(e).reduce((r, n)=>{
                          const i = e[n], o = t ? [
                              t,
                              n
                          ].join(".") : n, s = Array.isArray(i) && i.every((e)=>A(e)) && i.length > 0, a = A(i) && !function(e) {
                              return !1 === e || 0 === e || "" === e;
                          }(i);
                          let l = {};
                          return function(e) {
                              const t = "Object" === Object.prototype.toString.call(e).slice(8, -1);
                              if (null === e || !t || !t) return !1;
                              const r = Object.getPrototypeOf(e);
                              return "object" == typeof r && r.constructor === Object.prototype.constructor;
                          }(i) ? l = P(i, o) : (a || s) && (l = {
                              [o]: i
                          }), Object.assign(Object.assign({}, r), l);
                      }, {});
                  }
                  function N(e, t = []) {
                      const r = P(e), n = Object.keys(r).reduce((e, n)=>{
                          const i = r[n];
                          return t.find((e)=>e === n) ? e : Array.isArray(i) ? [
                              ...e,
                              ...i.map((e)=>[
                                      n,
                                      e.toString()
                                  ])
                          ] : e = [
                              ...e,
                              [
                                  n,
                                  i.toString()
                              ]
                          ];
                      }, []);
                      return new URLSearchParams(n).toString();
                  }
                  var C;
                  !function(e) {
                      e.SORT_DIRECTION_UNSPECIFIED = "SORT_DIRECTION_UNSPECIFIED", e.SORT_DIRECTION_ASCENDING = "SORT_DIRECTION_ASCENDING", e.SORT_DIRECTION_DESCENDING = "SORT_DIRECTION_DESCENDING";
                  }(C || (C = {}));
                  class x {
                      static Publish(e, t) {
                          return E("/message/v1/publish", Object.assign(Object.assign({}, t), {
                              method: "POST",
                              body: JSON.stringify(e, S)
                          }));
                      }
                      static Subscribe(e, t, r) {
                          return k("/message/v1/subscribe", t, Object.assign(Object.assign({}, r), {
                              method: "POST",
                              body: JSON.stringify(e, S)
                          }));
                      }
                      static SubscribeAll(e, t, r) {
                          return k("/message/v1/subscribe-all", t, Object.assign(Object.assign({}, r), {
                              method: "POST",
                              body: JSON.stringify(e, S)
                          }));
                      }
                      static Query(e, t) {
                          return E("/message/v1/query", Object.assign(Object.assign({}, t), {
                              method: "POST",
                              body: JSON.stringify(e, S)
                          }));
                      }
                      static BatchQuery(e, t) {
                          return E("/message/v1/batch-query", Object.assign(Object.assign({}, t), {
                              method: "POST",
                              body: JSON.stringify(e, S)
                          }));
                      }
                  }
                  var T = null;
                  try {
                      T = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
                          0,
                          97,
                          115,
                          109,
                          1,
                          0,
                          0,
                          0,
                          1,
                          13,
                          2,
                          96,
                          0,
                          1,
                          127,
                          96,
                          4,
                          127,
                          127,
                          127,
                          127,
                          1,
                          127,
                          3,
                          7,
                          6,
                          0,
                          1,
                          1,
                          1,
                          1,
                          1,
                          6,
                          6,
                          1,
                          127,
                          1,
                          65,
                          0,
                          11,
                          7,
                          50,
                          6,
                          3,
                          109,
                          117,
                          108,
                          0,
                          1,
                          5,
                          100,
                          105,
                          118,
                          95,
                          115,
                          0,
                          2,
                          5,
                          100,
                          105,
                          118,
                          95,
                          117,
                          0,
                          3,
                          5,
                          114,
                          101,
                          109,
                          95,
                          115,
                          0,
                          4,
                          5,
                          114,
                          101,
                          109,
                          95,
                          117,
                          0,
                          5,
                          8,
                          103,
                          101,
                          116,
                          95,
                          104,
                          105,
                          103,
                          104,
                          0,
                          0,
                          10,
                          191,
                          1,
                          6,
                          4,
                          0,
                          35,
                          0,
                          11,
                          36,
                          1,
                          1,
                          126,
                          32,
                          0,
                          173,
                          32,
                          1,
                          173,
                          66,
                          32,
                          134,
                          132,
                          32,
                          2,
                          173,
                          32,
                          3,
                          173,
                          66,
                          32,
                          134,
                          132,
                          126,
                          34,
                          4,
                          66,
                          32,
                          135,
                          167,
                          36,
                          0,
                          32,
                          4,
                          167,
                          11,
                          36,
                          1,
                          1,
                          126,
                          32,
                          0,
                          173,
                          32,
                          1,
                          173,
                          66,
                          32,
                          134,
                          132,
                          32,
                          2,
                          173,
                          32,
                          3,
                          173,
                          66,
                          32,
                          134,
                          132,
                          127,
                          34,
                          4,
                          66,
                          32,
                          135,
                          167,
                          36,
                          0,
                          32,
                          4,
                          167,
                          11,
                          36,
                          1,
                          1,
                          126,
                          32,
                          0,
                          173,
                          32,
                          1,
                          173,
                          66,
                          32,
                          134,
                          132,
                          32,
                          2,
                          173,
                          32,
                          3,
                          173,
                          66,
                          32,
                          134,
                          132,
                          128,
                          34,
                          4,
                          66,
                          32,
                          135,
                          167,
                          36,
                          0,
                          32,
                          4,
                          167,
                          11,
                          36,
                          1,
                          1,
                          126,
                          32,
                          0,
                          173,
                          32,
                          1,
                          173,
                          66,
                          32,
                          134,
                          132,
                          32,
                          2,
                          173,
                          32,
                          3,
                          173,
                          66,
                          32,
                          134,
                          132,
                          129,
                          34,
                          4,
                          66,
                          32,
                          135,
                          167,
                          36,
                          0,
                          32,
                          4,
                          167,
                          11,
                          36,
                          1,
                          1,
                          126,
                          32,
                          0,
                          173,
                          32,
                          1,
                          173,
                          66,
                          32,
                          134,
                          132,
                          32,
                          2,
                          173,
                          32,
                          3,
                          173,
                          66,
                          32,
                          134,
                          132,
                          130,
                          34,
                          4,
                          66,
                          32,
                          135,
                          167,
                          36,
                          0,
                          32,
                          4,
                          167,
                          11
                      ])), {}).exports;
                  } catch (e) {}
                  function R(e, t, r) {
                      this.low = 0 | e, this.high = 0 | t, this.unsigned = !!r;
                  }
                  function O(e) {
                      return !0 === (e && e.__isLong__);
                  }
                  function B(e) {
                      var t = Math.clz32(e & -e);
                      return e ? 31 - t : t;
                  }
                  R.prototype.__isLong__, Object.defineProperty(R.prototype, "__isLong__", {
                      value: !0
                  }), R.isLong = O;
                  var I = {}, M = {};
                  function D(e, t) {
                      var r, n, i;
                      return t ? (i = 0 <= (e >>>= 0) && e < 256) && (n = M[e]) ? n : (r = U(e, 0, !0), i && (M[e] = r), r) : (i = -128 <= (e |= 0) && e < 128) && (n = I[e]) ? n : (r = U(e, e < 0 ? -1 : 0, !1), i && (I[e] = r), r);
                  }
                  function K(e, t) {
                      if (isNaN(e)) return t ? J : G;
                      if (t) {
                          if (e < 0) return J;
                          if (e >= z) return Q;
                      } else {
                          if (e <= -V) return Y;
                          if (e + 1 >= V) return X;
                      }
                      return e < 0 ? K(-e, t).neg() : U(e % q | 0, e / q | 0, t);
                  }
                  function U(e, t, r) {
                      return new R(e, t, r);
                  }
                  R.fromInt = D, R.fromNumber = K, R.fromBits = U;
                  var F = Math.pow;
                  function j(e, t, r) {
                      if (0 === e.length) throw Error("empty string");
                      if ("number" == typeof t ? (r = t, t = !1) : t = !!t, "NaN" === e || "Infinity" === e || "+Infinity" === e || "-Infinity" === e) return t ? J : G;
                      if ((r = r || 10) < 2 || 36 < r) throw RangeError("radix");
                      var n;
                      if ((n = e.indexOf("-")) > 0) throw Error("interior hyphen");
                      if (0 === n) return j(e.substring(1), t, r).neg();
                      for(var i = K(F(r, 8)), o = G, s = 0; s < e.length; s += 8){
                          var a = Math.min(8, e.length - s), l = parseInt(e.substring(s, s + a), r);
                          if (a < 8) {
                              var u = K(F(r, a));
                              o = o.mul(u).add(K(l));
                          } else o = (o = o.mul(i)).add(K(l));
                      }
                      return o.unsigned = t, o;
                  }
                  function L(e, t) {
                      return "number" == typeof e ? K(e, t) : "string" == typeof e ? j(e, t) : U(e.low, e.high, "boolean" == typeof t ? t : e.unsigned);
                  }
                  R.fromString = j, R.fromValue = L;
                  var q = 4294967296, z = q * q, V = z / 2, W = D(16777216), G = D(0);
                  R.ZERO = G;
                  var J = D(0, !0);
                  R.UZERO = J;
                  var H = D(1);
                  R.ONE = H;
                  var $ = D(1, !0);
                  R.UONE = $;
                  var Z = D(-1);
                  R.NEG_ONE = Z;
                  var X = U(-1, 2147483647, !1);
                  R.MAX_VALUE = X;
                  var Q = U(-1, -1, !0);
                  R.MAX_UNSIGNED_VALUE = Q;
                  var Y = U(0, -2147483648, !1);
                  R.MIN_VALUE = Y;
                  var ee = R.prototype;
                  ee.toInt = function() {
                      return this.unsigned ? this.low >>> 0 : this.low;
                  }, ee.toNumber = function() {
                      return this.unsigned ? (this.high >>> 0) * q + (this.low >>> 0) : this.high * q + (this.low >>> 0);
                  }, ee.toString = function(e) {
                      if ((e = e || 10) < 2 || 36 < e) throw RangeError("radix");
                      if (this.isZero()) return "0";
                      if (this.isNegative()) {
                          if (this.eq(Y)) {
                              var t = K(e), r = this.div(t), n = r.mul(t).sub(this);
                              return r.toString(e) + n.toInt().toString(e);
                          }
                          return "-" + this.neg().toString(e);
                      }
                      for(var i = K(F(e, 6), this.unsigned), o = this, s = "";;){
                          var a = o.div(i), l = (o.sub(a.mul(i)).toInt() >>> 0).toString(e);
                          if ((o = a).isZero()) return l + s;
                          for(; l.length < 6;)l = "0" + l;
                          s = "" + l + s;
                      }
                  }, ee.getHighBits = function() {
                      return this.high;
                  }, ee.getHighBitsUnsigned = function() {
                      return this.high >>> 0;
                  }, ee.getLowBits = function() {
                      return this.low;
                  }, ee.getLowBitsUnsigned = function() {
                      return this.low >>> 0;
                  }, ee.getNumBitsAbs = function() {
                      if (this.isNegative()) return this.eq(Y) ? 64 : this.neg().getNumBitsAbs();
                      for(var e = 0 != this.high ? this.high : this.low, t = 31; t > 0 && 0 == (e & 1 << t); t--);
                      return 0 != this.high ? t + 33 : t + 1;
                  }, ee.isZero = function() {
                      return 0 === this.high && 0 === this.low;
                  }, ee.eqz = ee.isZero, ee.isNegative = function() {
                      return !this.unsigned && this.high < 0;
                  }, ee.isPositive = function() {
                      return this.unsigned || this.high >= 0;
                  }, ee.isOdd = function() {
                      return 1 == (1 & this.low);
                  }, ee.isEven = function() {
                      return 0 == (1 & this.low);
                  }, ee.equals = function(e) {
                      return O(e) || (e = L(e)), (this.unsigned === e.unsigned || this.high >>> 31 != 1 || e.high >>> 31 != 1) && this.high === e.high && this.low === e.low;
                  }, ee.eq = ee.equals, ee.notEquals = function(e) {
                      return !this.eq(e);
                  }, ee.neq = ee.notEquals, ee.ne = ee.notEquals, ee.lessThan = function(e) {
                      return this.comp(e) < 0;
                  }, ee.lt = ee.lessThan, ee.lessThanOrEqual = function(e) {
                      return this.comp(e) <= 0;
                  }, ee.lte = ee.lessThanOrEqual, ee.le = ee.lessThanOrEqual, ee.greaterThan = function(e) {
                      return this.comp(e) > 0;
                  }, ee.gt = ee.greaterThan, ee.greaterThanOrEqual = function(e) {
                      return this.comp(e) >= 0;
                  }, ee.gte = ee.greaterThanOrEqual, ee.ge = ee.greaterThanOrEqual, ee.compare = function(e) {
                      if (O(e) || (e = L(e)), this.eq(e)) return 0;
                      var t = this.isNegative(), r = e.isNegative();
                      return t && !r ? -1 : !t && r ? 1 : this.unsigned ? e.high >>> 0 > this.high >>> 0 || e.high === this.high && e.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(e).isNegative() ? -1 : 1;
                  }, ee.comp = ee.compare, ee.negate = function() {
                      return !this.unsigned && this.eq(Y) ? Y : this.not().add(H);
                  }, ee.neg = ee.negate, ee.add = function(e) {
                      O(e) || (e = L(e));
                      var t = this.high >>> 16, r = 65535 & this.high, n = this.low >>> 16, i = 65535 & this.low, o = e.high >>> 16, s = 65535 & e.high, a = e.low >>> 16, l = 0, u = 0, c = 0, d = 0;
                      return c += (d += i + (65535 & e.low)) >>> 16, u += (c += n + a) >>> 16, l += (u += r + s) >>> 16, l += t + o, U((c &= 65535) << 16 | (d &= 65535), (l &= 65535) << 16 | (u &= 65535), this.unsigned);
                  }, ee.subtract = function(e) {
                      return O(e) || (e = L(e)), this.add(e.neg());
                  }, ee.sub = ee.subtract, ee.multiply = function(e) {
                      if (this.isZero()) return this;
                      if (O(e) || (e = L(e)), T) return U(T.mul(this.low, this.high, e.low, e.high), T.get_high(), this.unsigned);
                      if (e.isZero()) return this.unsigned ? J : G;
                      if (this.eq(Y)) return e.isOdd() ? Y : G;
                      if (e.eq(Y)) return this.isOdd() ? Y : G;
                      if (this.isNegative()) return e.isNegative() ? this.neg().mul(e.neg()) : this.neg().mul(e).neg();
                      if (e.isNegative()) return this.mul(e.neg()).neg();
                      if (this.lt(W) && e.lt(W)) return K(this.toNumber() * e.toNumber(), this.unsigned);
                      var t = this.high >>> 16, r = 65535 & this.high, n = this.low >>> 16, i = 65535 & this.low, o = e.high >>> 16, s = 65535 & e.high, a = e.low >>> 16, l = 65535 & e.low, u = 0, c = 0, d = 0, h = 0;
                      return d += (h += i * l) >>> 16, c += (d += n * l) >>> 16, d &= 65535, c += (d += i * a) >>> 16, u += (c += r * l) >>> 16, c &= 65535, u += (c += n * a) >>> 16, c &= 65535, u += (c += i * s) >>> 16, u += t * l + r * a + n * s + i * o, U((d &= 65535) << 16 | (h &= 65535), (u &= 65535) << 16 | (c &= 65535), this.unsigned);
                  }, ee.mul = ee.multiply, ee.divide = function(e) {
                      if (O(e) || (e = L(e)), e.isZero()) throw Error("division by zero");
                      var t, r, n;
                      if (T) return this.unsigned || -2147483648 !== this.high || -1 !== e.low || -1 !== e.high ? U((this.unsigned ? T.div_u : T.div_s)(this.low, this.high, e.low, e.high), T.get_high(), this.unsigned) : this;
                      if (this.isZero()) return this.unsigned ? J : G;
                      if (this.unsigned) {
                          if (e.unsigned || (e = e.toUnsigned()), e.gt(this)) return J;
                          if (e.gt(this.shru(1))) return $;
                          n = J;
                      } else {
                          if (this.eq(Y)) return e.eq(H) || e.eq(Z) ? Y : e.eq(Y) ? H : (t = this.shr(1).div(e).shl(1)).eq(G) ? e.isNegative() ? H : Z : (r = this.sub(e.mul(t)), n = t.add(r.div(e)));
                          if (e.eq(Y)) return this.unsigned ? J : G;
                          if (this.isNegative()) return e.isNegative() ? this.neg().div(e.neg()) : this.neg().div(e).neg();
                          if (e.isNegative()) return this.div(e.neg()).neg();
                          n = G;
                      }
                      for(r = this; r.gte(e);){
                          t = Math.max(1, Math.floor(r.toNumber() / e.toNumber()));
                          for(var i = Math.ceil(Math.log(t) / Math.LN2), o = i <= 48 ? 1 : F(2, i - 48), s = K(t), a = s.mul(e); a.isNegative() || a.gt(r);)a = (s = K(t -= o, this.unsigned)).mul(e);
                          s.isZero() && (s = H), n = n.add(s), r = r.sub(a);
                      }
                      return n;
                  }, ee.div = ee.divide, ee.modulo = function(e) {
                      return O(e) || (e = L(e)), T ? U((this.unsigned ? T.rem_u : T.rem_s)(this.low, this.high, e.low, e.high), T.get_high(), this.unsigned) : this.sub(this.div(e).mul(e));
                  }, ee.mod = ee.modulo, ee.rem = ee.modulo, ee.not = function() {
                      return U(~this.low, ~this.high, this.unsigned);
                  }, ee.countLeadingZeros = function() {
                      return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;
                  }, ee.clz = ee.countLeadingZeros, ee.countTrailingZeros = function() {
                      return this.low ? B(this.low) : B(this.high) + 32;
                  }, ee.ctz = ee.countTrailingZeros, ee.and = function(e) {
                      return O(e) || (e = L(e)), U(this.low & e.low, this.high & e.high, this.unsigned);
                  }, ee.or = function(e) {
                      return O(e) || (e = L(e)), U(this.low | e.low, this.high | e.high, this.unsigned);
                  }, ee.xor = function(e) {
                      return O(e) || (e = L(e)), U(this.low ^ e.low, this.high ^ e.high, this.unsigned);
                  }, ee.shiftLeft = function(e) {
                      return O(e) && (e = e.toInt()), 0 == (e &= 63) ? this : e < 32 ? U(this.low << e, this.high << e | this.low >>> 32 - e, this.unsigned) : U(0, this.low << e - 32, this.unsigned);
                  }, ee.shl = ee.shiftLeft, ee.shiftRight = function(e) {
                      return O(e) && (e = e.toInt()), 0 == (e &= 63) ? this : e < 32 ? U(this.low >>> e | this.high << 32 - e, this.high >> e, this.unsigned) : U(this.high >> e - 32, this.high >= 0 ? 0 : -1, this.unsigned);
                  }, ee.shr = ee.shiftRight, ee.shiftRightUnsigned = function(e) {
                      return O(e) && (e = e.toInt()), 0 == (e &= 63) ? this : e < 32 ? U(this.low >>> e | this.high << 32 - e, this.high >>> e, this.unsigned) : U(32 === e ? this.high : this.high >>> e - 32, 0, this.unsigned);
                  }, ee.shru = ee.shiftRightUnsigned, ee.shr_u = ee.shiftRightUnsigned, ee.rotateLeft = function(e) {
                      var t;
                      return O(e) && (e = e.toInt()), 0 == (e &= 63) ? this : 32 === e ? U(this.high, this.low, this.unsigned) : e < 32 ? (t = 32 - e, U(this.low << e | this.high >>> t, this.high << e | this.low >>> t, this.unsigned)) : (t = 32 - (e -= 32), U(this.high << e | this.low >>> t, this.low << e | this.high >>> t, this.unsigned));
                  }, ee.rotl = ee.rotateLeft, ee.rotateRight = function(e) {
                      var t;
                      return O(e) && (e = e.toInt()), 0 == (e &= 63) ? this : 32 === e ? U(this.high, this.low, this.unsigned) : e < 32 ? (t = 32 - e, U(this.high << t | this.low >>> e, this.low << t | this.high >>> e, this.unsigned)) : (t = 32 - (e -= 32), U(this.low << t | this.high >>> e, this.high << t | this.low >>> e, this.unsigned));
                  }, ee.rotr = ee.rotateRight, ee.toSigned = function() {
                      return this.unsigned ? U(this.low, this.high, !1) : this;
                  }, ee.toUnsigned = function() {
                      return this.unsigned ? this : U(this.low, this.high, !0);
                  }, ee.toBytes = function(e) {
                      return e ? this.toBytesLE() : this.toBytesBE();
                  }, ee.toBytesLE = function() {
                      var e = this.high, t = this.low;
                      return [
                          255 & t,
                          t >>> 8 & 255,
                          t >>> 16 & 255,
                          t >>> 24,
                          255 & e,
                          e >>> 8 & 255,
                          e >>> 16 & 255,
                          e >>> 24
                      ];
                  }, ee.toBytesBE = function() {
                      var e = this.high, t = this.low;
                      return [
                          e >>> 24,
                          e >>> 16 & 255,
                          e >>> 8 & 255,
                          255 & e,
                          t >>> 24,
                          t >>> 16 & 255,
                          t >>> 8 & 255,
                          255 & t
                      ];
                  }, R.fromBytes = function(e, t, r) {
                      return r ? R.fromBytesLE(e, t) : R.fromBytesBE(e, t);
                  }, R.fromBytesLE = function(e, t) {
                      return new R(e[0] | e[1] << 8 | e[2] << 16 | e[3] << 24, e[4] | e[5] << 8 | e[6] << 16 | e[7] << 24, t);
                  }, R.fromBytesBE = function(e, t) {
                      return new R(e[4] << 24 | e[5] << 16 | e[6] << 8 | e[7], e[0] << 24 | e[1] << 16 | e[2] << 8 | e[3], t);
                  };
                  const te = R;
                  var re = r(930), ne = r.n(re);
                  const ie = "xmtp.message_contents", oe = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.ecdsaCompact && ae.encode(e.ecdsaCompact, t.uint32(10).fork()).ldelim(), void 0 !== e.walletEcdsaCompact && ue.encode(e.walletEcdsaCompact, t.uint32(18).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              ecdsaCompact: void 0,
                              walletEcdsaCompact: void 0
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.ecdsaCompact = ae.decode(r, r.uint32());
                                      break;
                                  case 2:
                                      i.walletEcdsaCompact = ue.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              ecdsaCompact: fe(e.ecdsaCompact) ? ae.fromJSON(e.ecdsaCompact) : void 0,
                              walletEcdsaCompact: fe(e.walletEcdsaCompact) ? ue.fromJSON(e.walletEcdsaCompact) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.ecdsaCompact && (t.ecdsaCompact = e.ecdsaCompact ? ae.toJSON(e.ecdsaCompact) : void 0), void 0 !== e.walletEcdsaCompact && (t.walletEcdsaCompact = e.walletEcdsaCompact ? ue.toJSON(e.walletEcdsaCompact) : void 0), t;
                      },
                      fromPartial (e) {
                          const t = {
                              ecdsaCompact: void 0,
                              walletEcdsaCompact: void 0
                          };
                          return t.ecdsaCompact = void 0 !== e.ecdsaCompact && null !== e.ecdsaCompact ? ae.fromPartial(e.ecdsaCompact) : void 0, t.walletEcdsaCompact = void 0 !== e.walletEcdsaCompact && null !== e.walletEcdsaCompact ? ue.fromPartial(e.walletEcdsaCompact) : void 0, t;
                      }
                  };
                  function se() {
                      return {
                          bytes: new Uint8Array,
                          recovery: 0
                      };
                  }
                  const ae = {
                      encode: (e, t = ne().Writer.create())=>(0 !== e.bytes.length && t.uint32(10).bytes(e.bytes), 0 !== e.recovery && t.uint32(16).uint32(e.recovery), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = se();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.bytes = r.bytes();
                                      break;
                                  case 2:
                                      i.recovery = r.uint32();
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              bytes: fe(e.bytes) ? de(e.bytes) : new Uint8Array,
                              recovery: fe(e.recovery) ? Number(e.recovery) : 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.bytes && (t.bytes = he(void 0 !== e.bytes ? e.bytes : new Uint8Array)), void 0 !== e.recovery && (t.recovery = Math.round(e.recovery)), t;
                      },
                      fromPartial (e) {
                          var t, r;
                          const n = se();
                          return n.bytes = null !== (t = e.bytes) && void 0 !== t ? t : new Uint8Array, n.recovery = null !== (r = e.recovery) && void 0 !== r ? r : 0, n;
                      }
                  };
                  function le() {
                      return {
                          bytes: new Uint8Array,
                          recovery: 0
                      };
                  }
                  const ue = {
                      encode: (e, t = ne().Writer.create())=>(0 !== e.bytes.length && t.uint32(10).bytes(e.bytes), 0 !== e.recovery && t.uint32(16).uint32(e.recovery), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = le();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.bytes = r.bytes();
                                      break;
                                  case 2:
                                      i.recovery = r.uint32();
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              bytes: fe(e.bytes) ? de(e.bytes) : new Uint8Array,
                              recovery: fe(e.recovery) ? Number(e.recovery) : 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.bytes && (t.bytes = he(void 0 !== e.bytes ? e.bytes : new Uint8Array)), void 0 !== e.recovery && (t.recovery = Math.round(e.recovery)), t;
                      },
                      fromPartial (e) {
                          var t, r;
                          const n = le();
                          return n.bytes = null !== (t = e.bytes) && void 0 !== t ? t : new Uint8Array, n.recovery = null !== (r = e.recovery) && void 0 !== r ? r : 0, n;
                      }
                  };
                  var ce = (()=>{
                      if (void 0 !== ce) return ce;
                      if ("undefined" != typeof self) return self;
                      if ("undefined" != typeof window) return window;
                      if (void 0 !== r.g) return r.g;
                      throw "Unable to locate global object";
                  })();
                  function de(e) {
                      if (ce.Buffer) return Uint8Array.from(ce.Buffer.from(e, "base64"));
                      {
                          const t = ce.atob(e), r = new Uint8Array(t.length);
                          for(let e = 0; e < t.length; ++e)r[e] = t.charCodeAt(e);
                          return r;
                      }
                  }
                  function he(e) {
                      if (ce.Buffer) return ce.Buffer.from(e).toString("base64");
                      {
                          const t = [];
                          return e.forEach((e)=>{
                              t.push(String.fromCharCode(e));
                          }), ce.btoa(t.join(""));
                      }
                  }
                  function fe(e) {
                      return null != e;
                  }
                  ne().util.Long !== te && (ne().util.Long = te, ne().configure());
                  const pe = "xmtp.message_contents";
                  function me() {
                      return {
                          createdNs: te.UZERO,
                          secp256k1Uncompressed: void 0
                      };
                  }
                  const ye = {
                      encode: (e, t = ne().Writer.create())=>(e.createdNs.isZero() || t.uint32(8).uint64(e.createdNs), void 0 !== e.secp256k1Uncompressed && ve.encode(e.secp256k1Uncompressed, t.uint32(26).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = me();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.createdNs = r.uint64();
                                      break;
                                  case 3:
                                      i.secp256k1Uncompressed = ve.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              createdNs: Te(e.createdNs) ? te.fromValue(e.createdNs) : te.UZERO,
                              secp256k1Uncompressed: Te(e.secp256k1Uncompressed) ? ve.fromJSON(e.secp256k1Uncompressed) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.createdNs && (t.createdNs = (e.createdNs || te.UZERO).toString()), void 0 !== e.secp256k1Uncompressed && (t.secp256k1Uncompressed = e.secp256k1Uncompressed ? ve.toJSON(e.secp256k1Uncompressed) : void 0), t;
                      },
                      fromPartial (e) {
                          const t = me();
                          return t.createdNs = void 0 !== e.createdNs && null !== e.createdNs ? te.fromValue(e.createdNs) : te.UZERO, t.secp256k1Uncompressed = void 0 !== e.secp256k1Uncompressed && null !== e.secp256k1Uncompressed ? ve.fromPartial(e.secp256k1Uncompressed) : void 0, t;
                      }
                  };
                  function ge() {
                      return {
                          bytes: new Uint8Array
                      };
                  }
                  const ve = {
                      encode: (e, t = ne().Writer.create())=>(0 !== e.bytes.length && t.uint32(10).bytes(e.bytes), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = ge();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              e >>> 3 == 1 ? i.bytes = r.bytes() : r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              bytes: Te(e.bytes) ? Ce(e.bytes) : new Uint8Array
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.bytes && (t.bytes = xe(void 0 !== e.bytes ? e.bytes : new Uint8Array)), t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = ge();
                          return r.bytes = null !== (t = e.bytes) && void 0 !== t ? t : new Uint8Array, r;
                      }
                  };
                  function be() {
                      return {
                          keyBytes: new Uint8Array,
                          signature: void 0
                      };
                  }
                  const we = {
                      encode: (e, t = ne().Writer.create())=>(0 !== e.keyBytes.length && t.uint32(10).bytes(e.keyBytes), void 0 !== e.signature && oe.encode(e.signature, t.uint32(18).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = be();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.keyBytes = r.bytes();
                                      break;
                                  case 2:
                                      i.signature = oe.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              keyBytes: Te(e.keyBytes) ? Ce(e.keyBytes) : new Uint8Array,
                              signature: Te(e.signature) ? oe.fromJSON(e.signature) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.keyBytes && (t.keyBytes = xe(void 0 !== e.keyBytes ? e.keyBytes : new Uint8Array)), void 0 !== e.signature && (t.signature = e.signature ? oe.toJSON(e.signature) : void 0), t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = be();
                          return r.keyBytes = null !== (t = e.keyBytes) && void 0 !== t ? t : new Uint8Array, r.signature = void 0 !== e.signature && null !== e.signature ? oe.fromPartial(e.signature) : void 0, r;
                      }
                  }, _e = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.identityKey && we.encode(e.identityKey, t.uint32(10).fork()).ldelim(), void 0 !== e.preKey && we.encode(e.preKey, t.uint32(18).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              identityKey: void 0,
                              preKey: void 0
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.identityKey = we.decode(r, r.uint32());
                                      break;
                                  case 2:
                                      i.preKey = we.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              identityKey: Te(e.identityKey) ? we.fromJSON(e.identityKey) : void 0,
                              preKey: Te(e.preKey) ? we.fromJSON(e.preKey) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.identityKey && (t.identityKey = e.identityKey ? we.toJSON(e.identityKey) : void 0), void 0 !== e.preKey && (t.preKey = e.preKey ? we.toJSON(e.preKey) : void 0), t;
                      },
                      fromPartial (e) {
                          const t = {
                              identityKey: void 0,
                              preKey: void 0
                          };
                          return t.identityKey = void 0 !== e.identityKey && null !== e.identityKey ? we.fromPartial(e.identityKey) : void 0, t.preKey = void 0 !== e.preKey && null !== e.preKey ? we.fromPartial(e.preKey) : void 0, t;
                      }
                  };
                  function Se() {
                      return {
                          timestamp: te.UZERO,
                          signature: void 0,
                          secp256k1Uncompressed: void 0
                      };
                  }
                  const Ee = {
                      encode: (e, t = ne().Writer.create())=>(e.timestamp.isZero() || t.uint32(8).uint64(e.timestamp), void 0 !== e.signature && oe.encode(e.signature, t.uint32(18).fork()).ldelim(), void 0 !== e.secp256k1Uncompressed && Ae.encode(e.secp256k1Uncompressed, t.uint32(26).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = Se();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.timestamp = r.uint64();
                                      break;
                                  case 2:
                                      i.signature = oe.decode(r, r.uint32());
                                      break;
                                  case 3:
                                      i.secp256k1Uncompressed = Ae.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              timestamp: Te(e.timestamp) ? te.fromValue(e.timestamp) : te.UZERO,
                              signature: Te(e.signature) ? oe.fromJSON(e.signature) : void 0,
                              secp256k1Uncompressed: Te(e.secp256k1Uncompressed) ? Ae.fromJSON(e.secp256k1Uncompressed) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.timestamp && (t.timestamp = (e.timestamp || te.UZERO).toString()), void 0 !== e.signature && (t.signature = e.signature ? oe.toJSON(e.signature) : void 0), void 0 !== e.secp256k1Uncompressed && (t.secp256k1Uncompressed = e.secp256k1Uncompressed ? Ae.toJSON(e.secp256k1Uncompressed) : void 0), t;
                      },
                      fromPartial (e) {
                          const t = Se();
                          return t.timestamp = void 0 !== e.timestamp && null !== e.timestamp ? te.fromValue(e.timestamp) : te.UZERO, t.signature = void 0 !== e.signature && null !== e.signature ? oe.fromPartial(e.signature) : void 0, t.secp256k1Uncompressed = void 0 !== e.secp256k1Uncompressed && null !== e.secp256k1Uncompressed ? Ae.fromPartial(e.secp256k1Uncompressed) : void 0, t;
                      }
                  };
                  function ke() {
                      return {
                          bytes: new Uint8Array
                      };
                  }
                  const Ae = {
                      encode: (e, t = ne().Writer.create())=>(0 !== e.bytes.length && t.uint32(10).bytes(e.bytes), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = ke();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              e >>> 3 == 1 ? i.bytes = r.bytes() : r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              bytes: Te(e.bytes) ? Ce(e.bytes) : new Uint8Array
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.bytes && (t.bytes = xe(void 0 !== e.bytes ? e.bytes : new Uint8Array)), t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = ke();
                          return r.bytes = null !== (t = e.bytes) && void 0 !== t ? t : new Uint8Array, r;
                      }
                  }, Pe = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.identityKey && Ee.encode(e.identityKey, t.uint32(10).fork()).ldelim(), void 0 !== e.preKey && Ee.encode(e.preKey, t.uint32(18).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              identityKey: void 0,
                              preKey: void 0
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.identityKey = Ee.decode(r, r.uint32());
                                      break;
                                  case 2:
                                      i.preKey = Ee.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              identityKey: Te(e.identityKey) ? Ee.fromJSON(e.identityKey) : void 0,
                              preKey: Te(e.preKey) ? Ee.fromJSON(e.preKey) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.identityKey && (t.identityKey = e.identityKey ? Ee.toJSON(e.identityKey) : void 0), void 0 !== e.preKey && (t.preKey = e.preKey ? Ee.toJSON(e.preKey) : void 0), t;
                      },
                      fromPartial (e) {
                          const t = {
                              identityKey: void 0,
                              preKey: void 0
                          };
                          return t.identityKey = void 0 !== e.identityKey && null !== e.identityKey ? Ee.fromPartial(e.identityKey) : void 0, t.preKey = void 0 !== e.preKey && null !== e.preKey ? Ee.fromPartial(e.preKey) : void 0, t;
                      }
                  };
                  var Ne = (()=>{
                      if (void 0 !== Ne) return Ne;
                      if ("undefined" != typeof self) return self;
                      if ("undefined" != typeof window) return window;
                      if (void 0 !== r.g) return r.g;
                      throw "Unable to locate global object";
                  })();
                  function Ce(e) {
                      if (Ne.Buffer) return Uint8Array.from(Ne.Buffer.from(e, "base64"));
                      {
                          const t = Ne.atob(e), r = new Uint8Array(t.length);
                          for(let e = 0; e < t.length; ++e)r[e] = t.charCodeAt(e);
                          return r;
                      }
                  }
                  function xe(e) {
                      if (Ne.Buffer) return Ne.Buffer.from(e).toString("base64");
                      {
                          const t = [];
                          return e.forEach((e)=>{
                              t.push(String.fromCharCode(e));
                          }), Ne.btoa(t.join(""));
                      }
                  }
                  function Te(e) {
                      return null != e;
                  }
                  ne().util.Long !== te && (ne().util.Long = te, ne().configure());
                  const Re = "xmtp.message_api.v1";
                  function Oe() {
                      return {
                          identityKey: void 0,
                          authDataBytes: new Uint8Array,
                          authDataSignature: void 0
                      };
                  }
                  const Be = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.identityKey && Ee.encode(e.identityKey, t.uint32(10).fork()).ldelim(), 0 !== e.authDataBytes.length && t.uint32(18).bytes(e.authDataBytes), void 0 !== e.authDataSignature && oe.encode(e.authDataSignature, t.uint32(26).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = Oe();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.identityKey = Ee.decode(r, r.uint32());
                                      break;
                                  case 2:
                                      i.authDataBytes = r.bytes();
                                      break;
                                  case 3:
                                      i.authDataSignature = oe.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              identityKey: Ue(e.identityKey) ? Ee.fromJSON(e.identityKey) : void 0,
                              authDataBytes: Ue(e.authDataBytes) ? Ke(e.authDataBytes) : new Uint8Array,
                              authDataSignature: Ue(e.authDataSignature) ? oe.fromJSON(e.authDataSignature) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.identityKey && (t.identityKey = e.identityKey ? Ee.toJSON(e.identityKey) : void 0), void 0 !== e.authDataBytes && (t.authDataBytes = function(e) {
                              if (De.Buffer) return De.Buffer.from(e).toString("base64");
                              {
                                  const t = [];
                                  return e.forEach((e)=>{
                                      t.push(String.fromCharCode(e));
                                  }), De.btoa(t.join(""));
                              }
                          }(void 0 !== e.authDataBytes ? e.authDataBytes : new Uint8Array)), void 0 !== e.authDataSignature && (t.authDataSignature = e.authDataSignature ? oe.toJSON(e.authDataSignature) : void 0), t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = Oe();
                          return r.identityKey = void 0 !== e.identityKey && null !== e.identityKey ? Ee.fromPartial(e.identityKey) : void 0, r.authDataBytes = null !== (t = e.authDataBytes) && void 0 !== t ? t : new Uint8Array, r.authDataSignature = void 0 !== e.authDataSignature && null !== e.authDataSignature ? oe.fromPartial(e.authDataSignature) : void 0, r;
                      }
                  };
                  function Ie() {
                      return {
                          walletAddr: "",
                          createdNs: te.UZERO
                      };
                  }
                  const Me = {
                      encode: (e, t = ne().Writer.create())=>("" !== e.walletAddr && t.uint32(10).string(e.walletAddr), e.createdNs.isZero() || t.uint32(16).uint64(e.createdNs), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = Ie();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.walletAddr = r.string();
                                      break;
                                  case 2:
                                      i.createdNs = r.uint64();
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              walletAddr: Ue(e.walletAddr) ? String(e.walletAddr) : "",
                              createdNs: Ue(e.createdNs) ? te.fromValue(e.createdNs) : te.UZERO
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.walletAddr && (t.walletAddr = e.walletAddr), void 0 !== e.createdNs && (t.createdNs = (e.createdNs || te.UZERO).toString()), t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = Ie();
                          return r.walletAddr = null !== (t = e.walletAddr) && void 0 !== t ? t : "", r.createdNs = void 0 !== e.createdNs && null !== e.createdNs ? te.fromValue(e.createdNs) : te.UZERO, r;
                      }
                  };
                  var De = (()=>{
                      if (void 0 !== De) return De;
                      if ("undefined" != typeof self) return self;
                      if ("undefined" != typeof window) return window;
                      if (void 0 !== r.g) return r.g;
                      throw "Unable to locate global object";
                  })();
                  function Ke(e) {
                      if (De.Buffer) return Uint8Array.from(De.Buffer.from(e, "base64"));
                      {
                          const t = De.atob(e), r = new Uint8Array(t.length);
                          for(let e = 0; e < t.length; ++e)r[e] = t.charCodeAt(e);
                          return r;
                      }
                  }
                  function Ue(e) {
                      return null != e;
                  }
                  ne().util.Long !== te && (ne().util.Long = te, ne().configure());
                  const Fe = "xmtp.message_contents", je = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.aes256GcmHkdfSha256 && qe.encode(e.aes256GcmHkdfSha256, t.uint32(10).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              aes256GcmHkdfSha256: void 0
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              e >>> 3 == 1 ? i.aes256GcmHkdfSha256 = qe.decode(r, r.uint32()) : r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              aes256GcmHkdfSha256: Ge(e.aes256GcmHkdfSha256) ? qe.fromJSON(e.aes256GcmHkdfSha256) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.aes256GcmHkdfSha256 && (t.aes256GcmHkdfSha256 = e.aes256GcmHkdfSha256 ? qe.toJSON(e.aes256GcmHkdfSha256) : void 0), t;
                      },
                      fromPartial (e) {
                          const t = {
                              aes256GcmHkdfSha256: void 0
                          };
                          return t.aes256GcmHkdfSha256 = void 0 !== e.aes256GcmHkdfSha256 && null !== e.aes256GcmHkdfSha256 ? qe.fromPartial(e.aes256GcmHkdfSha256) : void 0, t;
                      }
                  };
                  function Le() {
                      return {
                          hkdfSalt: new Uint8Array,
                          gcmNonce: new Uint8Array,
                          payload: new Uint8Array
                      };
                  }
                  const qe = {
                      encode: (e, t = ne().Writer.create())=>(0 !== e.hkdfSalt.length && t.uint32(10).bytes(e.hkdfSalt), 0 !== e.gcmNonce.length && t.uint32(18).bytes(e.gcmNonce), 0 !== e.payload.length && t.uint32(26).bytes(e.payload), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = Le();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.hkdfSalt = r.bytes();
                                      break;
                                  case 2:
                                      i.gcmNonce = r.bytes();
                                      break;
                                  case 3:
                                      i.payload = r.bytes();
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              hkdfSalt: Ge(e.hkdfSalt) ? Ve(e.hkdfSalt) : new Uint8Array,
                              gcmNonce: Ge(e.gcmNonce) ? Ve(e.gcmNonce) : new Uint8Array,
                              payload: Ge(e.payload) ? Ve(e.payload) : new Uint8Array
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.hkdfSalt && (t.hkdfSalt = We(void 0 !== e.hkdfSalt ? e.hkdfSalt : new Uint8Array)), void 0 !== e.gcmNonce && (t.gcmNonce = We(void 0 !== e.gcmNonce ? e.gcmNonce : new Uint8Array)), void 0 !== e.payload && (t.payload = We(void 0 !== e.payload ? e.payload : new Uint8Array)), t;
                      },
                      fromPartial (e) {
                          var t, r, n;
                          const i = Le();
                          return i.hkdfSalt = null !== (t = e.hkdfSalt) && void 0 !== t ? t : new Uint8Array, i.gcmNonce = null !== (r = e.gcmNonce) && void 0 !== r ? r : new Uint8Array, i.payload = null !== (n = e.payload) && void 0 !== n ? n : new Uint8Array, i;
                      }
                  };
                  var ze = (()=>{
                      if (void 0 !== ze) return ze;
                      if ("undefined" != typeof self) return self;
                      if ("undefined" != typeof window) return window;
                      if (void 0 !== r.g) return r.g;
                      throw "Unable to locate global object";
                  })();
                  function Ve(e) {
                      if (ze.Buffer) return Uint8Array.from(ze.Buffer.from(e, "base64"));
                      {
                          const t = ze.atob(e), r = new Uint8Array(t.length);
                          for(let e = 0; e < t.length; ++e)r[e] = t.charCodeAt(e);
                          return r;
                      }
                  }
                  function We(e) {
                      if (ze.Buffer) return ze.Buffer.from(e).toString("base64");
                      {
                          const t = [];
                          return e.forEach((e)=>{
                              t.push(String.fromCharCode(e));
                          }), ze.btoa(t.join(""));
                      }
                  }
                  function Ge(e) {
                      return null != e;
                  }
                  ne().util.Long !== te && (ne().util.Long = te, ne().configure());
                  const Je = "xmtp.message_contents";
                  function He() {
                      return {
                          sender: void 0,
                          recipient: void 0,
                          timestamp: te.UZERO
                      };
                  }
                  const $e = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.sender && Pe.encode(e.sender, t.uint32(10).fork()).ldelim(), void 0 !== e.recipient && Pe.encode(e.recipient, t.uint32(18).fork()).ldelim(), e.timestamp.isZero() || t.uint32(24).uint64(e.timestamp), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = He();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.sender = Pe.decode(r, r.uint32());
                                      break;
                                  case 2:
                                      i.recipient = Pe.decode(r, r.uint32());
                                      break;
                                  case 3:
                                      i.timestamp = r.uint64();
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              sender: st(e.sender) ? Pe.fromJSON(e.sender) : void 0,
                              recipient: st(e.recipient) ? Pe.fromJSON(e.recipient) : void 0,
                              timestamp: st(e.timestamp) ? te.fromValue(e.timestamp) : te.UZERO
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.sender && (t.sender = e.sender ? Pe.toJSON(e.sender) : void 0), void 0 !== e.recipient && (t.recipient = e.recipient ? Pe.toJSON(e.recipient) : void 0), void 0 !== e.timestamp && (t.timestamp = (e.timestamp || te.UZERO).toString()), t;
                      },
                      fromPartial (e) {
                          const t = He();
                          return t.sender = void 0 !== e.sender && null !== e.sender ? Pe.fromPartial(e.sender) : void 0, t.recipient = void 0 !== e.recipient && null !== e.recipient ? Pe.fromPartial(e.recipient) : void 0, t.timestamp = void 0 !== e.timestamp && null !== e.timestamp ? te.fromValue(e.timestamp) : te.UZERO, t;
                      }
                  };
                  function Ze() {
                      return {
                          headerBytes: new Uint8Array,
                          ciphertext: void 0
                      };
                  }
                  const Xe = {
                      encode: (e, t = ne().Writer.create())=>(0 !== e.headerBytes.length && t.uint32(10).bytes(e.headerBytes), void 0 !== e.ciphertext && je.encode(e.ciphertext, t.uint32(18).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = Ze();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.headerBytes = r.bytes();
                                      break;
                                  case 2:
                                      i.ciphertext = je.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              headerBytes: st(e.headerBytes) ? it(e.headerBytes) : new Uint8Array,
                              ciphertext: st(e.ciphertext) ? je.fromJSON(e.ciphertext) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.headerBytes && (t.headerBytes = ot(void 0 !== e.headerBytes ? e.headerBytes : new Uint8Array)), void 0 !== e.ciphertext && (t.ciphertext = e.ciphertext ? je.toJSON(e.ciphertext) : void 0), t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = Ze();
                          return r.headerBytes = null !== (t = e.headerBytes) && void 0 !== t ? t : new Uint8Array, r.ciphertext = void 0 !== e.ciphertext && null !== e.ciphertext ? je.fromPartial(e.ciphertext) : void 0, r;
                      }
                  };
                  function Qe() {
                      return {
                          createdNs: te.UZERO,
                          topic: ""
                      };
                  }
                  const Ye = {
                      encode: (e, t = ne().Writer.create())=>(e.createdNs.isZero() || t.uint32(8).uint64(e.createdNs), "" !== e.topic && t.uint32(18).string(e.topic), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = Qe();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.createdNs = r.uint64();
                                      break;
                                  case 2:
                                      i.topic = r.string();
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              createdNs: st(e.createdNs) ? te.fromValue(e.createdNs) : te.UZERO,
                              topic: st(e.topic) ? String(e.topic) : ""
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.createdNs && (t.createdNs = (e.createdNs || te.UZERO).toString()), void 0 !== e.topic && (t.topic = e.topic), t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = Qe();
                          return r.createdNs = void 0 !== e.createdNs && null !== e.createdNs ? te.fromValue(e.createdNs) : te.UZERO, r.topic = null !== (t = e.topic) && void 0 !== t ? t : "", r;
                      }
                  };
                  function et() {
                      return {
                          headerBytes: new Uint8Array,
                          ciphertext: void 0
                      };
                  }
                  const tt = {
                      encode: (e, t = ne().Writer.create())=>(0 !== e.headerBytes.length && t.uint32(10).bytes(e.headerBytes), void 0 !== e.ciphertext && je.encode(e.ciphertext, t.uint32(18).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = et();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.headerBytes = r.bytes();
                                      break;
                                  case 2:
                                      i.ciphertext = je.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              headerBytes: st(e.headerBytes) ? it(e.headerBytes) : new Uint8Array,
                              ciphertext: st(e.ciphertext) ? je.fromJSON(e.ciphertext) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.headerBytes && (t.headerBytes = ot(void 0 !== e.headerBytes ? e.headerBytes : new Uint8Array)), void 0 !== e.ciphertext && (t.ciphertext = e.ciphertext ? je.toJSON(e.ciphertext) : void 0), t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = et();
                          return r.headerBytes = null !== (t = e.headerBytes) && void 0 !== t ? t : new Uint8Array, r.ciphertext = void 0 !== e.ciphertext && null !== e.ciphertext ? je.fromPartial(e.ciphertext) : void 0, r;
                      }
                  }, rt = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.v1 && Xe.encode(e.v1, t.uint32(10).fork()).ldelim(), void 0 !== e.v2 && tt.encode(e.v2, t.uint32(18).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              v1: void 0,
                              v2: void 0
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.v1 = Xe.decode(r, r.uint32());
                                      break;
                                  case 2:
                                      i.v2 = tt.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              v1: st(e.v1) ? Xe.fromJSON(e.v1) : void 0,
                              v2: st(e.v2) ? tt.fromJSON(e.v2) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.v1 && (t.v1 = e.v1 ? Xe.toJSON(e.v1) : void 0), void 0 !== e.v2 && (t.v2 = e.v2 ? tt.toJSON(e.v2) : void 0), t;
                      },
                      fromPartial (e) {
                          const t = {
                              v1: void 0,
                              v2: void 0
                          };
                          return t.v1 = void 0 !== e.v1 && null !== e.v1 ? Xe.fromPartial(e.v1) : void 0, t.v2 = void 0 !== e.v2 && null !== e.v2 ? tt.fromPartial(e.v2) : void 0, t;
                      }
                  };
                  var nt = (()=>{
                      if (void 0 !== nt) return nt;
                      if ("undefined" != typeof self) return self;
                      if ("undefined" != typeof window) return window;
                      if (void 0 !== r.g) return r.g;
                      throw "Unable to locate global object";
                  })();
                  function it(e) {
                      if (nt.Buffer) return Uint8Array.from(nt.Buffer.from(e, "base64"));
                      {
                          const t = nt.atob(e), r = new Uint8Array(t.length);
                          for(let e = 0; e < t.length; ++e)r[e] = t.charCodeAt(e);
                          return r;
                      }
                  }
                  function ot(e) {
                      if (nt.Buffer) return nt.Buffer.from(e).toString("base64");
                      {
                          const t = [];
                          return e.forEach((e)=>{
                              t.push(String.fromCharCode(e));
                          }), nt.btoa(t.join(""));
                      }
                  }
                  function st(e) {
                      return null != e;
                  }
                  ne().util.Long !== te && (ne().util.Long = te, ne().configure());
                  const at = "xmtp.message_contents";
                  var lt;
                  function ut(e) {
                      switch(e){
                          case 0:
                          case "COMPRESSION_DEFLATE":
                              return lt.COMPRESSION_DEFLATE;
                          case 1:
                          case "COMPRESSION_GZIP":
                              return lt.COMPRESSION_GZIP;
                          default:
                              return lt.UNRECOGNIZED;
                      }
                  }
                  function ct(e) {
                      switch(e){
                          case lt.COMPRESSION_DEFLATE:
                              return "COMPRESSION_DEFLATE";
                          case lt.COMPRESSION_GZIP:
                              return "COMPRESSION_GZIP";
                          case lt.UNRECOGNIZED:
                          default:
                              return "UNRECOGNIZED";
                      }
                  }
                  !function(e) {
                      e[e.COMPRESSION_DEFLATE = 0] = "COMPRESSION_DEFLATE", e[e.COMPRESSION_GZIP = 1] = "COMPRESSION_GZIP", e[e.UNRECOGNIZED = -1] = "UNRECOGNIZED";
                  }(lt || (lt = {}));
                  const dt = {
                      encode: (e, t = ne().Writer.create())=>("" !== e.authorityId && t.uint32(10).string(e.authorityId), "" !== e.typeId && t.uint32(18).string(e.typeId), 0 !== e.versionMajor && t.uint32(24).uint32(e.versionMajor), 0 !== e.versionMinor && t.uint32(32).uint32(e.versionMinor), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              authorityId: "",
                              typeId: "",
                              versionMajor: 0,
                              versionMinor: 0
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.authorityId = r.string();
                                      break;
                                  case 2:
                                      i.typeId = r.string();
                                      break;
                                  case 3:
                                      i.versionMajor = r.uint32();
                                      break;
                                  case 4:
                                      i.versionMinor = r.uint32();
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              authorityId: wt(e.authorityId) ? String(e.authorityId) : "",
                              typeId: wt(e.typeId) ? String(e.typeId) : "",
                              versionMajor: wt(e.versionMajor) ? Number(e.versionMajor) : 0,
                              versionMinor: wt(e.versionMinor) ? Number(e.versionMinor) : 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.authorityId && (t.authorityId = e.authorityId), void 0 !== e.typeId && (t.typeId = e.typeId), void 0 !== e.versionMajor && (t.versionMajor = Math.round(e.versionMajor)), void 0 !== e.versionMinor && (t.versionMinor = Math.round(e.versionMinor)), t;
                      },
                      fromPartial (e) {
                          var t, r, n, i;
                          const o = {
                              authorityId: "",
                              typeId: "",
                              versionMajor: 0,
                              versionMinor: 0
                          };
                          return o.authorityId = null !== (t = e.authorityId) && void 0 !== t ? t : "", o.typeId = null !== (r = e.typeId) && void 0 !== r ? r : "", o.versionMajor = null !== (n = e.versionMajor) && void 0 !== n ? n : 0, o.versionMinor = null !== (i = e.versionMinor) && void 0 !== i ? i : 0, o;
                      }
                  };
                  function ht() {
                      return {
                          type: void 0,
                          parameters: {},
                          fallback: void 0,
                          compression: void 0,
                          content: new Uint8Array
                      };
                  }
                  const ft = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.type && dt.encode(e.type, t.uint32(10).fork()).ldelim(), Object.entries(e.parameters).forEach(([e, r])=>{
                              pt.encode({
                                  key: e,
                                  value: r
                              }, t.uint32(18).fork()).ldelim();
                          }), void 0 !== e.fallback && t.uint32(26).string(e.fallback), void 0 !== e.compression && t.uint32(40).int32(e.compression), 0 !== e.content.length && t.uint32(34).bytes(e.content), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = ht();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.type = dt.decode(r, r.uint32());
                                      break;
                                  case 2:
                                      const t = pt.decode(r, r.uint32());
                                      void 0 !== t.value && (i.parameters[t.key] = t.value);
                                      break;
                                  case 3:
                                      i.fallback = r.string();
                                      break;
                                  case 5:
                                      i.compression = r.int32();
                                      break;
                                  case 4:
                                      i.content = r.bytes();
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON (e) {
                          var t;
                          return {
                              type: wt(e.type) ? dt.fromJSON(e.type) : void 0,
                              parameters: (t = e.parameters, "object" == typeof t && null !== t ? Object.entries(e.parameters).reduce((e, [t, r])=>(e[t] = String(r), e), {}) : {}),
                              fallback: wt(e.fallback) ? String(e.fallback) : void 0,
                              compression: wt(e.compression) ? ut(e.compression) : void 0,
                              content: wt(e.content) ? vt(e.content) : new Uint8Array
                          };
                      },
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.type && (t.type = e.type ? dt.toJSON(e.type) : void 0), t.parameters = {}, e.parameters && Object.entries(e.parameters).forEach(([e, r])=>{
                              t.parameters[e] = r;
                          }), void 0 !== e.fallback && (t.fallback = e.fallback), void 0 !== e.compression && (t.compression = void 0 !== e.compression ? ct(e.compression) : void 0), void 0 !== e.content && (t.content = bt(void 0 !== e.content ? e.content : new Uint8Array)), t;
                      },
                      fromPartial (e) {
                          var t, r, n, i;
                          const o = ht();
                          return o.type = void 0 !== e.type && null !== e.type ? dt.fromPartial(e.type) : void 0, o.parameters = Object.entries(null !== (t = e.parameters) && void 0 !== t ? t : {}).reduce((e, [t, r])=>(void 0 !== r && (e[t] = String(r)), e), {}), o.fallback = null !== (r = e.fallback) && void 0 !== r ? r : void 0, o.compression = null !== (n = e.compression) && void 0 !== n ? n : void 0, o.content = null !== (i = e.content) && void 0 !== i ? i : new Uint8Array, o;
                      }
                  }, pt = {
                      encode: (e, t = ne().Writer.create())=>("" !== e.key && t.uint32(10).string(e.key), "" !== e.value && t.uint32(18).string(e.value), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              key: "",
                              value: ""
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.key = r.string();
                                      break;
                                  case 2:
                                      i.value = r.string();
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              key: wt(e.key) ? String(e.key) : "",
                              value: wt(e.value) ? String(e.value) : ""
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.key && (t.key = e.key), void 0 !== e.value && (t.value = e.value), t;
                      },
                      fromPartial (e) {
                          var t, r;
                          const n = {
                              key: "",
                              value: ""
                          };
                          return n.key = null !== (t = e.key) && void 0 !== t ? t : "", n.value = null !== (r = e.value) && void 0 !== r ? r : "", n;
                      }
                  };
                  function mt() {
                      return {
                          payload: new Uint8Array,
                          sender: void 0,
                          signature: void 0
                      };
                  }
                  const yt = {
                      encode: (e, t = ne().Writer.create())=>(0 !== e.payload.length && t.uint32(10).bytes(e.payload), void 0 !== e.sender && _e.encode(e.sender, t.uint32(18).fork()).ldelim(), void 0 !== e.signature && oe.encode(e.signature, t.uint32(26).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = mt();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.payload = r.bytes();
                                      break;
                                  case 2:
                                      i.sender = _e.decode(r, r.uint32());
                                      break;
                                  case 3:
                                      i.signature = oe.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              payload: wt(e.payload) ? vt(e.payload) : new Uint8Array,
                              sender: wt(e.sender) ? _e.fromJSON(e.sender) : void 0,
                              signature: wt(e.signature) ? oe.fromJSON(e.signature) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.payload && (t.payload = bt(void 0 !== e.payload ? e.payload : new Uint8Array)), void 0 !== e.sender && (t.sender = e.sender ? _e.toJSON(e.sender) : void 0), void 0 !== e.signature && (t.signature = e.signature ? oe.toJSON(e.signature) : void 0), t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = mt();
                          return r.payload = null !== (t = e.payload) && void 0 !== t ? t : new Uint8Array, r.sender = void 0 !== e.sender && null !== e.sender ? _e.fromPartial(e.sender) : void 0, r.signature = void 0 !== e.signature && null !== e.signature ? oe.fromPartial(e.signature) : void 0, r;
                      }
                  };
                  var gt = (()=>{
                      if (void 0 !== gt) return gt;
                      if ("undefined" != typeof self) return self;
                      if ("undefined" != typeof window) return window;
                      if (void 0 !== r.g) return r.g;
                      throw "Unable to locate global object";
                  })();
                  function vt(e) {
                      if (gt.Buffer) return Uint8Array.from(gt.Buffer.from(e, "base64"));
                      {
                          const t = gt.atob(e), r = new Uint8Array(t.length);
                          for(let e = 0; e < t.length; ++e)r[e] = t.charCodeAt(e);
                          return r;
                      }
                  }
                  function bt(e) {
                      if (gt.Buffer) return gt.Buffer.from(e).toString("base64");
                      {
                          const t = [];
                          return e.forEach((e)=>{
                              t.push(String.fromCharCode(e));
                          }), gt.btoa(t.join(""));
                      }
                  }
                  function wt(e) {
                      return null != e;
                  }
                  ne().util.Long !== te && (ne().util.Long = te, ne().configure());
                  const _t = "xmtp.message_contents", St = {
                      encode (e, t = ne().Writer.create()) {
                          for (const r of e.parts)Et.encode(r, t.uint32(10).fork()).ldelim();
                          return t;
                      },
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              parts: []
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              e >>> 3 == 1 ? i.parts.push(Et.decode(r, r.uint32())) : r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              parts: Array.isArray(null == e ? void 0 : e.parts) ? e.parts.map((e)=>Et.fromJSON(e)) : []
                          }),
                      toJSON (e) {
                          const t = {};
                          return e.parts ? t.parts = e.parts.map((e)=>e ? Et.toJSON(e) : void 0) : t.parts = [], t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = {
                              parts: []
                          };
                          return r.parts = (null === (t = e.parts) || void 0 === t ? void 0 : t.map((e)=>Et.fromPartial(e))) || [], r;
                      }
                  }, Et = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.part && ft.encode(e.part, t.uint32(10).fork()).ldelim(), void 0 !== e.composite && St.encode(e.composite, t.uint32(18).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              part: void 0,
                              composite: void 0
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.part = ft.decode(r, r.uint32());
                                      break;
                                  case 2:
                                      i.composite = St.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              part: kt(e.part) ? ft.fromJSON(e.part) : void 0,
                              composite: kt(e.composite) ? St.fromJSON(e.composite) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.part && (t.part = e.part ? ft.toJSON(e.part) : void 0), void 0 !== e.composite && (t.composite = e.composite ? St.toJSON(e.composite) : void 0), t;
                      },
                      fromPartial (e) {
                          const t = {
                              part: void 0,
                              composite: void 0
                          };
                          return t.part = void 0 !== e.part && null !== e.part ? ft.fromPartial(e.part) : void 0, t.composite = void 0 !== e.composite && null !== e.composite ? St.fromPartial(e.composite) : void 0, t;
                      }
                  };
                  function kt(e) {
                      return null != e;
                  }
                  ne().util.Long !== te && (ne().util.Long = te, ne().configure());
                  const At = "xmtp.message_contents";
                  function Pt() {
                      return {
                          createdNs: te.UZERO,
                          secp256k1: void 0,
                          publicKey: void 0
                      };
                  }
                  const Nt = {
                      encode: (e, t = ne().Writer.create())=>(e.createdNs.isZero() || t.uint32(8).uint64(e.createdNs), void 0 !== e.secp256k1 && xt.encode(e.secp256k1, t.uint32(18).fork()).ldelim(), void 0 !== e.publicKey && we.encode(e.publicKey, t.uint32(26).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = Pt();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.createdNs = r.uint64();
                                      break;
                                  case 2:
                                      i.secp256k1 = xt.decode(r, r.uint32());
                                      break;
                                  case 3:
                                      i.publicKey = we.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              createdNs: zt(e.createdNs) ? te.fromValue(e.createdNs) : te.UZERO,
                              secp256k1: zt(e.secp256k1) ? xt.fromJSON(e.secp256k1) : void 0,
                              publicKey: zt(e.publicKey) ? we.fromJSON(e.publicKey) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.createdNs && (t.createdNs = (e.createdNs || te.UZERO).toString()), void 0 !== e.secp256k1 && (t.secp256k1 = e.secp256k1 ? xt.toJSON(e.secp256k1) : void 0), void 0 !== e.publicKey && (t.publicKey = e.publicKey ? we.toJSON(e.publicKey) : void 0), t;
                      },
                      fromPartial (e) {
                          const t = Pt();
                          return t.createdNs = void 0 !== e.createdNs && null !== e.createdNs ? te.fromValue(e.createdNs) : te.UZERO, t.secp256k1 = void 0 !== e.secp256k1 && null !== e.secp256k1 ? xt.fromPartial(e.secp256k1) : void 0, t.publicKey = void 0 !== e.publicKey && null !== e.publicKey ? we.fromPartial(e.publicKey) : void 0, t;
                      }
                  };
                  function Ct() {
                      return {
                          bytes: new Uint8Array
                      };
                  }
                  const xt = {
                      encode: (e, t = ne().Writer.create())=>(0 !== e.bytes.length && t.uint32(10).bytes(e.bytes), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = Ct();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              e >>> 3 == 1 ? i.bytes = r.bytes() : r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              bytes: zt(e.bytes) ? Lt(e.bytes) : new Uint8Array
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.bytes && (t.bytes = qt(void 0 !== e.bytes ? e.bytes : new Uint8Array)), t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = Ct();
                          return r.bytes = null !== (t = e.bytes) && void 0 !== t ? t : new Uint8Array, r;
                      }
                  }, Tt = {
                      encode (e, t = ne().Writer.create()) {
                          void 0 !== e.identityKey && Nt.encode(e.identityKey, t.uint32(10).fork()).ldelim();
                          for (const r of e.preKeys)Nt.encode(r, t.uint32(18).fork()).ldelim();
                          return t;
                      },
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              identityKey: void 0,
                              preKeys: []
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.identityKey = Nt.decode(r, r.uint32());
                                      break;
                                  case 2:
                                      i.preKeys.push(Nt.decode(r, r.uint32()));
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              identityKey: zt(e.identityKey) ? Nt.fromJSON(e.identityKey) : void 0,
                              preKeys: Array.isArray(null == e ? void 0 : e.preKeys) ? e.preKeys.map((e)=>Nt.fromJSON(e)) : []
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.identityKey && (t.identityKey = e.identityKey ? Nt.toJSON(e.identityKey) : void 0), e.preKeys ? t.preKeys = e.preKeys.map((e)=>e ? Nt.toJSON(e) : void 0) : t.preKeys = [], t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = {
                              identityKey: void 0,
                              preKeys: []
                          };
                          return r.identityKey = void 0 !== e.identityKey && null !== e.identityKey ? Nt.fromPartial(e.identityKey) : void 0, r.preKeys = (null === (t = e.preKeys) || void 0 === t ? void 0 : t.map((e)=>Nt.fromPartial(e))) || [], r;
                      }
                  };
                  function Rt() {
                      return {
                          timestamp: te.UZERO,
                          secp256k1: void 0,
                          publicKey: void 0
                      };
                  }
                  const Ot = {
                      encode: (e, t = ne().Writer.create())=>(e.timestamp.isZero() || t.uint32(8).uint64(e.timestamp), void 0 !== e.secp256k1 && It.encode(e.secp256k1, t.uint32(18).fork()).ldelim(), void 0 !== e.publicKey && Ee.encode(e.publicKey, t.uint32(26).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = Rt();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.timestamp = r.uint64();
                                      break;
                                  case 2:
                                      i.secp256k1 = It.decode(r, r.uint32());
                                      break;
                                  case 3:
                                      i.publicKey = Ee.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              timestamp: zt(e.timestamp) ? te.fromValue(e.timestamp) : te.UZERO,
                              secp256k1: zt(e.secp256k1) ? It.fromJSON(e.secp256k1) : void 0,
                              publicKey: zt(e.publicKey) ? Ee.fromJSON(e.publicKey) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.timestamp && (t.timestamp = (e.timestamp || te.UZERO).toString()), void 0 !== e.secp256k1 && (t.secp256k1 = e.secp256k1 ? It.toJSON(e.secp256k1) : void 0), void 0 !== e.publicKey && (t.publicKey = e.publicKey ? Ee.toJSON(e.publicKey) : void 0), t;
                      },
                      fromPartial (e) {
                          const t = Rt();
                          return t.timestamp = void 0 !== e.timestamp && null !== e.timestamp ? te.fromValue(e.timestamp) : te.UZERO, t.secp256k1 = void 0 !== e.secp256k1 && null !== e.secp256k1 ? It.fromPartial(e.secp256k1) : void 0, t.publicKey = void 0 !== e.publicKey && null !== e.publicKey ? Ee.fromPartial(e.publicKey) : void 0, t;
                      }
                  };
                  function Bt() {
                      return {
                          bytes: new Uint8Array
                      };
                  }
                  const It = {
                      encode: (e, t = ne().Writer.create())=>(0 !== e.bytes.length && t.uint32(10).bytes(e.bytes), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = Bt();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              e >>> 3 == 1 ? i.bytes = r.bytes() : r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              bytes: zt(e.bytes) ? Lt(e.bytes) : new Uint8Array
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.bytes && (t.bytes = qt(void 0 !== e.bytes ? e.bytes : new Uint8Array)), t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = Bt();
                          return r.bytes = null !== (t = e.bytes) && void 0 !== t ? t : new Uint8Array, r;
                      }
                  }, Mt = {
                      encode (e, t = ne().Writer.create()) {
                          void 0 !== e.identityKey && Ot.encode(e.identityKey, t.uint32(10).fork()).ldelim();
                          for (const r of e.preKeys)Ot.encode(r, t.uint32(18).fork()).ldelim();
                          return t;
                      },
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              identityKey: void 0,
                              preKeys: []
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.identityKey = Ot.decode(r, r.uint32());
                                      break;
                                  case 2:
                                      i.preKeys.push(Ot.decode(r, r.uint32()));
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              identityKey: zt(e.identityKey) ? Ot.fromJSON(e.identityKey) : void 0,
                              preKeys: Array.isArray(null == e ? void 0 : e.preKeys) ? e.preKeys.map((e)=>Ot.fromJSON(e)) : []
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.identityKey && (t.identityKey = e.identityKey ? Ot.toJSON(e.identityKey) : void 0), e.preKeys ? t.preKeys = e.preKeys.map((e)=>e ? Ot.toJSON(e) : void 0) : t.preKeys = [], t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = {
                              identityKey: void 0,
                              preKeys: []
                          };
                          return r.identityKey = void 0 !== e.identityKey && null !== e.identityKey ? Ot.fromPartial(e.identityKey) : void 0, r.preKeys = (null === (t = e.preKeys) || void 0 === t ? void 0 : t.map((e)=>Ot.fromPartial(e))) || [], r;
                      }
                  }, Dt = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.v1 && Mt.encode(e.v1, t.uint32(10).fork()).ldelim(), void 0 !== e.v2 && Tt.encode(e.v2, t.uint32(18).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              v1: void 0,
                              v2: void 0
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.v1 = Mt.decode(r, r.uint32());
                                      break;
                                  case 2:
                                      i.v2 = Tt.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              v1: zt(e.v1) ? Mt.fromJSON(e.v1) : void 0,
                              v2: zt(e.v2) ? Tt.fromJSON(e.v2) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.v1 && (t.v1 = e.v1 ? Mt.toJSON(e.v1) : void 0), void 0 !== e.v2 && (t.v2 = e.v2 ? Tt.toJSON(e.v2) : void 0), t;
                      },
                      fromPartial (e) {
                          const t = {
                              v1: void 0,
                              v2: void 0
                          };
                          return t.v1 = void 0 !== e.v1 && null !== e.v1 ? Mt.fromPartial(e.v1) : void 0, t.v2 = void 0 !== e.v2 && null !== e.v2 ? Tt.fromPartial(e.v2) : void 0, t;
                      }
                  };
                  function Kt() {
                      return {
                          walletPreKey: new Uint8Array,
                          ciphertext: void 0
                      };
                  }
                  const Ut = {
                      encode: (e, t = ne().Writer.create())=>(0 !== e.walletPreKey.length && t.uint32(10).bytes(e.walletPreKey), void 0 !== e.ciphertext && je.encode(e.ciphertext, t.uint32(18).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = Kt();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.walletPreKey = r.bytes();
                                      break;
                                  case 2:
                                      i.ciphertext = je.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              walletPreKey: zt(e.walletPreKey) ? Lt(e.walletPreKey) : new Uint8Array,
                              ciphertext: zt(e.ciphertext) ? je.fromJSON(e.ciphertext) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.walletPreKey && (t.walletPreKey = qt(void 0 !== e.walletPreKey ? e.walletPreKey : new Uint8Array)), void 0 !== e.ciphertext && (t.ciphertext = e.ciphertext ? je.toJSON(e.ciphertext) : void 0), t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = Kt();
                          return r.walletPreKey = null !== (t = e.walletPreKey) && void 0 !== t ? t : new Uint8Array, r.ciphertext = void 0 !== e.ciphertext && null !== e.ciphertext ? je.fromPartial(e.ciphertext) : void 0, r;
                      }
                  }, Ft = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.v1 && Ut.encode(e.v1, t.uint32(10).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              v1: void 0
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              e >>> 3 == 1 ? i.v1 = Ut.decode(r, r.uint32()) : r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              v1: zt(e.v1) ? Ut.fromJSON(e.v1) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.v1 && (t.v1 = e.v1 ? Ut.toJSON(e.v1) : void 0), t;
                      },
                      fromPartial (e) {
                          const t = {
                              v1: void 0
                          };
                          return t.v1 = void 0 !== e.v1 && null !== e.v1 ? Ut.fromPartial(e.v1) : void 0, t;
                      }
                  };
                  var jt = (()=>{
                      if (void 0 !== jt) return jt;
                      if ("undefined" != typeof self) return self;
                      if ("undefined" != typeof window) return window;
                      if (void 0 !== r.g) return r.g;
                      throw "Unable to locate global object";
                  })();
                  function Lt(e) {
                      if (jt.Buffer) return Uint8Array.from(jt.Buffer.from(e, "base64"));
                      {
                          const t = jt.atob(e), r = new Uint8Array(t.length);
                          for(let e = 0; e < t.length; ++e)r[e] = t.charCodeAt(e);
                          return r;
                      }
                  }
                  function qt(e) {
                      if (jt.Buffer) return jt.Buffer.from(e).toString("base64");
                      {
                          const t = [];
                          return e.forEach((e)=>{
                              t.push(String.fromCharCode(e));
                          }), jt.btoa(t.join(""));
                      }
                  }
                  function zt(e) {
                      return null != e;
                  }
                  ne().util.Long !== te && (ne().util.Long = te, ne().configure());
                  const Vt = "xmtp.message_contents", Wt = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.keyBundle && Pe.encode(e.keyBundle, t.uint32(10).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              keyBundle: void 0
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              e >>> 3 == 1 ? i.keyBundle = Pe.decode(r, r.uint32()) : r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              keyBundle: Ht(e.keyBundle) ? Pe.fromJSON(e.keyBundle) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.keyBundle && (t.keyBundle = e.keyBundle ? Pe.toJSON(e.keyBundle) : void 0), t;
                      },
                      fromPartial (e) {
                          const t = {
                              keyBundle: void 0
                          };
                          return t.keyBundle = void 0 !== e.keyBundle && null !== e.keyBundle ? Pe.fromPartial(e.keyBundle) : void 0, t;
                      }
                  }, Gt = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.keyBundle && _e.encode(e.keyBundle, t.uint32(10).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              keyBundle: void 0
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              e >>> 3 == 1 ? i.keyBundle = _e.decode(r, r.uint32()) : r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              keyBundle: Ht(e.keyBundle) ? _e.fromJSON(e.keyBundle) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.keyBundle && (t.keyBundle = e.keyBundle ? _e.toJSON(e.keyBundle) : void 0), t;
                      },
                      fromPartial (e) {
                          const t = {
                              keyBundle: void 0
                          };
                          return t.keyBundle = void 0 !== e.keyBundle && null !== e.keyBundle ? _e.fromPartial(e.keyBundle) : void 0, t;
                      }
                  }, Jt = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.v1 && Wt.encode(e.v1, t.uint32(10).fork()).ldelim(), void 0 !== e.v2 && Gt.encode(e.v2, t.uint32(18).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              v1: void 0,
                              v2: void 0
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.v1 = Wt.decode(r, r.uint32());
                                      break;
                                  case 2:
                                      i.v2 = Gt.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              v1: Ht(e.v1) ? Wt.fromJSON(e.v1) : void 0,
                              v2: Ht(e.v2) ? Gt.fromJSON(e.v2) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.v1 && (t.v1 = e.v1 ? Wt.toJSON(e.v1) : void 0), void 0 !== e.v2 && (t.v2 = e.v2 ? Gt.toJSON(e.v2) : void 0), t;
                      },
                      fromPartial (e) {
                          const t = {
                              v1: void 0,
                              v2: void 0
                          };
                          return t.v1 = void 0 !== e.v1 && null !== e.v1 ? Wt.fromPartial(e.v1) : void 0, t.v2 = void 0 !== e.v2 && null !== e.v2 ? Gt.fromPartial(e.v2) : void 0, t;
                      }
                  };
                  function Ht(e) {
                      return null != e;
                  }
                  ne().util.Long !== te && (ne().util.Long = te, ne().configure());
                  const $t = "xmtp.message_contents", Zt = {
                      encode: (e, t = ne().Writer.create())=>("" !== e.topic && t.uint32(10).string(e.topic), void 0 !== e.context && Yt.encode(e.context, t.uint32(18).fork()).ldelim(), void 0 !== e.aes256GcmHkdfSha256 && Qt.encode(e.aes256GcmHkdfSha256, t.uint32(26).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              topic: "",
                              context: void 0,
                              aes256GcmHkdfSha256: void 0
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.topic = r.string();
                                      break;
                                  case 2:
                                      i.context = Yt.decode(r, r.uint32());
                                      break;
                                  case 3:
                                      i.aes256GcmHkdfSha256 = Qt.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              topic: ur(e.topic) ? String(e.topic) : "",
                              context: ur(e.context) ? Yt.fromJSON(e.context) : void 0,
                              aes256GcmHkdfSha256: ur(e.aes256GcmHkdfSha256) ? Qt.fromJSON(e.aes256GcmHkdfSha256) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.topic && (t.topic = e.topic), void 0 !== e.context && (t.context = e.context ? Yt.toJSON(e.context) : void 0), void 0 !== e.aes256GcmHkdfSha256 && (t.aes256GcmHkdfSha256 = e.aes256GcmHkdfSha256 ? Qt.toJSON(e.aes256GcmHkdfSha256) : void 0), t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = {
                              topic: "",
                              context: void 0,
                              aes256GcmHkdfSha256: void 0
                          };
                          return r.topic = null !== (t = e.topic) && void 0 !== t ? t : "", r.context = void 0 !== e.context && null !== e.context ? Yt.fromPartial(e.context) : void 0, r.aes256GcmHkdfSha256 = void 0 !== e.aes256GcmHkdfSha256 && null !== e.aes256GcmHkdfSha256 ? Qt.fromPartial(e.aes256GcmHkdfSha256) : void 0, r;
                      }
                  };
                  function Xt() {
                      return {
                          keyMaterial: new Uint8Array
                      };
                  }
                  const Qt = {
                      encode: (e, t = ne().Writer.create())=>(0 !== e.keyMaterial.length && t.uint32(10).bytes(e.keyMaterial), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = Xt();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              e >>> 3 == 1 ? i.keyMaterial = r.bytes() : r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              keyMaterial: ur(e.keyMaterial) ? ar(e.keyMaterial) : new Uint8Array
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.keyMaterial && (t.keyMaterial = lr(void 0 !== e.keyMaterial ? e.keyMaterial : new Uint8Array)), t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = Xt();
                          return r.keyMaterial = null !== (t = e.keyMaterial) && void 0 !== t ? t : new Uint8Array, r;
                      }
                  }, Yt = {
                      encode: (e, t = ne().Writer.create())=>("" !== e.conversationId && t.uint32(10).string(e.conversationId), Object.entries(e.metadata).forEach(([e, r])=>{
                              er.encode({
                                  key: e,
                                  value: r
                              }, t.uint32(18).fork()).ldelim();
                          }), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              conversationId: "",
                              metadata: {}
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.conversationId = r.string();
                                      break;
                                  case 2:
                                      const t = er.decode(r, r.uint32());
                                      void 0 !== t.value && (i.metadata[t.key] = t.value);
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON (e) {
                          var t;
                          return {
                              conversationId: ur(e.conversationId) ? String(e.conversationId) : "",
                              metadata: (t = e.metadata, "object" == typeof t && null !== t ? Object.entries(e.metadata).reduce((e, [t, r])=>(e[t] = String(r), e), {}) : {})
                          };
                      },
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.conversationId && (t.conversationId = e.conversationId), t.metadata = {}, e.metadata && Object.entries(e.metadata).forEach(([e, r])=>{
                              t.metadata[e] = r;
                          }), t;
                      },
                      fromPartial (e) {
                          var t, r;
                          const n = {
                              conversationId: "",
                              metadata: {}
                          };
                          return n.conversationId = null !== (t = e.conversationId) && void 0 !== t ? t : "", n.metadata = Object.entries(null !== (r = e.metadata) && void 0 !== r ? r : {}).reduce((e, [t, r])=>(void 0 !== r && (e[t] = String(r)), e), {}), n;
                      }
                  }, er = {
                      encode: (e, t = ne().Writer.create())=>("" !== e.key && t.uint32(10).string(e.key), "" !== e.value && t.uint32(18).string(e.value), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              key: "",
                              value: ""
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.key = r.string();
                                      break;
                                  case 2:
                                      i.value = r.string();
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              key: ur(e.key) ? String(e.key) : "",
                              value: ur(e.value) ? String(e.value) : ""
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.key && (t.key = e.key), void 0 !== e.value && (t.value = e.value), t;
                      },
                      fromPartial (e) {
                          var t, r;
                          const n = {
                              key: "",
                              value: ""
                          };
                          return n.key = null !== (t = e.key) && void 0 !== t ? t : "", n.value = null !== (r = e.value) && void 0 !== r ? r : "", n;
                      }
                  };
                  function tr() {
                      return {
                          sender: void 0,
                          recipient: void 0,
                          createdNs: te.UZERO
                      };
                  }
                  const rr = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.sender && _e.encode(e.sender, t.uint32(10).fork()).ldelim(), void 0 !== e.recipient && _e.encode(e.recipient, t.uint32(18).fork()).ldelim(), e.createdNs.isZero() || t.uint32(24).uint64(e.createdNs), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = tr();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.sender = _e.decode(r, r.uint32());
                                      break;
                                  case 2:
                                      i.recipient = _e.decode(r, r.uint32());
                                      break;
                                  case 3:
                                      i.createdNs = r.uint64();
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              sender: ur(e.sender) ? _e.fromJSON(e.sender) : void 0,
                              recipient: ur(e.recipient) ? _e.fromJSON(e.recipient) : void 0,
                              createdNs: ur(e.createdNs) ? te.fromValue(e.createdNs) : te.UZERO
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.sender && (t.sender = e.sender ? _e.toJSON(e.sender) : void 0), void 0 !== e.recipient && (t.recipient = e.recipient ? _e.toJSON(e.recipient) : void 0), void 0 !== e.createdNs && (t.createdNs = (e.createdNs || te.UZERO).toString()), t;
                      },
                      fromPartial (e) {
                          const t = tr();
                          return t.sender = void 0 !== e.sender && null !== e.sender ? _e.fromPartial(e.sender) : void 0, t.recipient = void 0 !== e.recipient && null !== e.recipient ? _e.fromPartial(e.recipient) : void 0, t.createdNs = void 0 !== e.createdNs && null !== e.createdNs ? te.fromValue(e.createdNs) : te.UZERO, t;
                      }
                  };
                  function nr() {
                      return {
                          headerBytes: new Uint8Array,
                          ciphertext: void 0
                      };
                  }
                  const ir = {
                      encode: (e, t = ne().Writer.create())=>(0 !== e.headerBytes.length && t.uint32(10).bytes(e.headerBytes), void 0 !== e.ciphertext && je.encode(e.ciphertext, t.uint32(18).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = nr();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.headerBytes = r.bytes();
                                      break;
                                  case 2:
                                      i.ciphertext = je.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              headerBytes: ur(e.headerBytes) ? ar(e.headerBytes) : new Uint8Array,
                              ciphertext: ur(e.ciphertext) ? je.fromJSON(e.ciphertext) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.headerBytes && (t.headerBytes = lr(void 0 !== e.headerBytes ? e.headerBytes : new Uint8Array)), void 0 !== e.ciphertext && (t.ciphertext = e.ciphertext ? je.toJSON(e.ciphertext) : void 0), t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = nr();
                          return r.headerBytes = null !== (t = e.headerBytes) && void 0 !== t ? t : new Uint8Array, r.ciphertext = void 0 !== e.ciphertext && null !== e.ciphertext ? je.fromPartial(e.ciphertext) : void 0, r;
                      }
                  }, or = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.v1 && ir.encode(e.v1, t.uint32(10).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              v1: void 0
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              e >>> 3 == 1 ? i.v1 = ir.decode(r, r.uint32()) : r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              v1: ur(e.v1) ? ir.fromJSON(e.v1) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.v1 && (t.v1 = e.v1 ? ir.toJSON(e.v1) : void 0), t;
                      },
                      fromPartial (e) {
                          const t = {
                              v1: void 0
                          };
                          return t.v1 = void 0 !== e.v1 && null !== e.v1 ? ir.fromPartial(e.v1) : void 0, t;
                      }
                  };
                  var sr = (()=>{
                      if (void 0 !== sr) return sr;
                      if ("undefined" != typeof self) return self;
                      if ("undefined" != typeof window) return window;
                      if (void 0 !== r.g) return r.g;
                      throw "Unable to locate global object";
                  })();
                  function ar(e) {
                      if (sr.Buffer) return Uint8Array.from(sr.Buffer.from(e, "base64"));
                      {
                          const t = sr.atob(e), r = new Uint8Array(t.length);
                          for(let e = 0; e < t.length; ++e)r[e] = t.charCodeAt(e);
                          return r;
                      }
                  }
                  function lr(e) {
                      if (sr.Buffer) return sr.Buffer.from(e).toString("base64");
                      {
                          const t = [];
                          return e.forEach((e)=>{
                              t.push(String.fromCharCode(e));
                          }), sr.btoa(t.join(""));
                      }
                  }
                  function ur(e) {
                      return null != e;
                  }
                  ne().util.Long !== te && (ne().util.Long = te, ne().configure());
                  const cr = "xmtp.keystore_api.v1";
                  var dr;
                  function hr(e) {
                      switch(e){
                          case 0:
                          case "ERROR_CODE_UNSPECIFIED":
                              return dr.ERROR_CODE_UNSPECIFIED;
                          case 1:
                          case "ERROR_CODE_INVALID_INPUT":
                              return dr.ERROR_CODE_INVALID_INPUT;
                          case 2:
                          case "ERROR_CODE_NO_MATCHING_PREKEY":
                              return dr.ERROR_CODE_NO_MATCHING_PREKEY;
                          default:
                              return dr.UNRECOGNIZED;
                      }
                  }
                  function fr(e) {
                      switch(e){
                          case dr.ERROR_CODE_UNSPECIFIED:
                              return "ERROR_CODE_UNSPECIFIED";
                          case dr.ERROR_CODE_INVALID_INPUT:
                              return "ERROR_CODE_INVALID_INPUT";
                          case dr.ERROR_CODE_NO_MATCHING_PREKEY:
                              return "ERROR_CODE_NO_MATCHING_PREKEY";
                          case dr.UNRECOGNIZED:
                          default:
                              return "UNRECOGNIZED";
                      }
                  }
                  !function(e) {
                      e[e.ERROR_CODE_UNSPECIFIED = 0] = "ERROR_CODE_UNSPECIFIED", e[e.ERROR_CODE_INVALID_INPUT = 1] = "ERROR_CODE_INVALID_INPUT", e[e.ERROR_CODE_NO_MATCHING_PREKEY = 2] = "ERROR_CODE_NO_MATCHING_PREKEY", e[e.UNRECOGNIZED = -1] = "UNRECOGNIZED";
                  }(dr || (dr = {}));
                  const pr = {
                      encode: (e, t = ne().Writer.create())=>("" !== e.message && t.uint32(10).string(e.message), 0 !== e.code && t.uint32(16).int32(e.code), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              message: "",
                              code: 0
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.message = r.string();
                                      break;
                                  case 2:
                                      i.code = r.int32();
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              message: Yr(e.message) ? String(e.message) : "",
                              code: Yr(e.code) ? hr(e.code) : 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.message && (t.message = e.message), void 0 !== e.code && (t.code = fr(e.code)), t;
                      },
                      fromPartial (e) {
                          var t, r;
                          const n = {
                              message: "",
                              code: 0
                          };
                          return n.message = null !== (t = e.message) && void 0 !== t ? t : "", n.code = null !== (r = e.code) && void 0 !== r ? r : 0, n;
                      }
                  };
                  function mr() {
                      return {
                          topic: "",
                          createdNs: te.UZERO,
                          context: void 0
                      };
                  }
                  const yr = {
                      encode: (e, t = ne().Writer.create())=>("" !== e.topic && t.uint32(10).string(e.topic), e.createdNs.isZero() || t.uint32(16).uint64(e.createdNs), void 0 !== e.context && Yt.encode(e.context, t.uint32(26).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = mr();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.topic = r.string();
                                      break;
                                  case 2:
                                      i.createdNs = r.uint64();
                                      break;
                                  case 3:
                                      i.context = Yt.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              topic: Yr(e.topic) ? String(e.topic) : "",
                              createdNs: Yr(e.createdNs) ? te.fromValue(e.createdNs) : te.UZERO,
                              context: Yr(e.context) ? Yt.fromJSON(e.context) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.topic && (t.topic = e.topic), void 0 !== e.createdNs && (t.createdNs = (e.createdNs || te.UZERO).toString()), void 0 !== e.context && (t.context = e.context ? Yt.toJSON(e.context) : void 0), t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = mr();
                          return r.topic = null !== (t = e.topic) && void 0 !== t ? t : "", r.createdNs = void 0 !== e.createdNs && null !== e.createdNs ? te.fromValue(e.createdNs) : te.UZERO, r.context = void 0 !== e.context && null !== e.context ? Yt.fromPartial(e.context) : void 0, r;
                      }
                  }, gr = {
                      encode (e, t = ne().Writer.create()) {
                          for (const r of e.requests)br.encode(r, t.uint32(10).fork()).ldelim();
                          return t;
                      },
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              requests: []
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              e >>> 3 == 1 ? i.requests.push(br.decode(r, r.uint32())) : r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              requests: Array.isArray(null == e ? void 0 : e.requests) ? e.requests.map((e)=>br.fromJSON(e)) : []
                          }),
                      toJSON (e) {
                          const t = {};
                          return e.requests ? t.requests = e.requests.map((e)=>e ? br.toJSON(e) : void 0) : t.requests = [], t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = {
                              requests: []
                          };
                          return r.requests = (null === (t = e.requests) || void 0 === t ? void 0 : t.map((e)=>br.fromPartial(e))) || [], r;
                      }
                  };
                  function vr() {
                      return {
                          payload: void 0,
                          peerKeys: void 0,
                          headerBytes: new Uint8Array,
                          isSender: !1
                      };
                  }
                  const br = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.payload && je.encode(e.payload, t.uint32(10).fork()).ldelim(), void 0 !== e.peerKeys && Pe.encode(e.peerKeys, t.uint32(18).fork()).ldelim(), 0 !== e.headerBytes.length && t.uint32(26).bytes(e.headerBytes), !0 === e.isSender && t.uint32(32).bool(e.isSender), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = vr();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.payload = je.decode(r, r.uint32());
                                      break;
                                  case 2:
                                      i.peerKeys = Pe.decode(r, r.uint32());
                                      break;
                                  case 3:
                                      i.headerBytes = r.bytes();
                                      break;
                                  case 4:
                                      i.isSender = r.bool();
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              payload: Yr(e.payload) ? je.fromJSON(e.payload) : void 0,
                              peerKeys: Yr(e.peerKeys) ? Pe.fromJSON(e.peerKeys) : void 0,
                              headerBytes: Yr(e.headerBytes) ? Xr(e.headerBytes) : new Uint8Array,
                              isSender: !!Yr(e.isSender) && Boolean(e.isSender)
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.payload && (t.payload = e.payload ? je.toJSON(e.payload) : void 0), void 0 !== e.peerKeys && (t.peerKeys = e.peerKeys ? Pe.toJSON(e.peerKeys) : void 0), void 0 !== e.headerBytes && (t.headerBytes = Qr(void 0 !== e.headerBytes ? e.headerBytes : new Uint8Array)), void 0 !== e.isSender && (t.isSender = e.isSender), t;
                      },
                      fromPartial (e) {
                          var t, r;
                          const n = vr();
                          return n.payload = void 0 !== e.payload && null !== e.payload ? je.fromPartial(e.payload) : void 0, n.peerKeys = void 0 !== e.peerKeys && null !== e.peerKeys ? Pe.fromPartial(e.peerKeys) : void 0, n.headerBytes = null !== (t = e.headerBytes) && void 0 !== t ? t : new Uint8Array, n.isSender = null !== (r = e.isSender) && void 0 !== r && r, n;
                      }
                  }, wr = {
                      encode (e, t = ne().Writer.create()) {
                          for (const r of e.responses)_r.encode(r, t.uint32(10).fork()).ldelim();
                          return t;
                      },
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              responses: []
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              e >>> 3 == 1 ? i.responses.push(_r.decode(r, r.uint32())) : r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              responses: Array.isArray(null == e ? void 0 : e.responses) ? e.responses.map((e)=>_r.fromJSON(e)) : []
                          }),
                      toJSON (e) {
                          const t = {};
                          return e.responses ? t.responses = e.responses.map((e)=>e ? _r.toJSON(e) : void 0) : t.responses = [], t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = {
                              responses: []
                          };
                          return r.responses = (null === (t = e.responses) || void 0 === t ? void 0 : t.map((e)=>_r.fromPartial(e))) || [], r;
                      }
                  }, _r = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.result && Er.encode(e.result, t.uint32(10).fork()).ldelim(), void 0 !== e.error && pr.encode(e.error, t.uint32(18).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              result: void 0,
                              error: void 0
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.result = Er.decode(r, r.uint32());
                                      break;
                                  case 2:
                                      i.error = pr.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              result: Yr(e.result) ? Er.fromJSON(e.result) : void 0,
                              error: Yr(e.error) ? pr.fromJSON(e.error) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.result && (t.result = e.result ? Er.toJSON(e.result) : void 0), void 0 !== e.error && (t.error = e.error ? pr.toJSON(e.error) : void 0), t;
                      },
                      fromPartial (e) {
                          const t = {
                              result: void 0,
                              error: void 0
                          };
                          return t.result = void 0 !== e.result && null !== e.result ? Er.fromPartial(e.result) : void 0, t.error = void 0 !== e.error && null !== e.error ? pr.fromPartial(e.error) : void 0, t;
                      }
                  };
                  function Sr() {
                      return {
                          decrypted: new Uint8Array
                      };
                  }
                  const Er = {
                      encode: (e, t = ne().Writer.create())=>(0 !== e.decrypted.length && t.uint32(10).bytes(e.decrypted), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = Sr();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              e >>> 3 == 1 ? i.decrypted = r.bytes() : r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              decrypted: Yr(e.decrypted) ? Xr(e.decrypted) : new Uint8Array
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.decrypted && (t.decrypted = Qr(void 0 !== e.decrypted ? e.decrypted : new Uint8Array)), t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = Sr();
                          return r.decrypted = null !== (t = e.decrypted) && void 0 !== t ? t : new Uint8Array, r;
                      }
                  }, kr = {
                      encode (e, t = ne().Writer.create()) {
                          for (const r of e.requests)Pr.encode(r, t.uint32(10).fork()).ldelim();
                          return t;
                      },
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              requests: []
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              e >>> 3 == 1 ? i.requests.push(Pr.decode(r, r.uint32())) : r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              requests: Array.isArray(null == e ? void 0 : e.requests) ? e.requests.map((e)=>Pr.fromJSON(e)) : []
                          }),
                      toJSON (e) {
                          const t = {};
                          return e.requests ? t.requests = e.requests.map((e)=>e ? Pr.toJSON(e) : void 0) : t.requests = [], t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = {
                              requests: []
                          };
                          return r.requests = (null === (t = e.requests) || void 0 === t ? void 0 : t.map((e)=>Pr.fromPartial(e))) || [], r;
                      }
                  };
                  function Ar() {
                      return {
                          payload: void 0,
                          headerBytes: new Uint8Array,
                          contentTopic: ""
                      };
                  }
                  const Pr = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.payload && je.encode(e.payload, t.uint32(10).fork()).ldelim(), 0 !== e.headerBytes.length && t.uint32(18).bytes(e.headerBytes), "" !== e.contentTopic && t.uint32(26).string(e.contentTopic), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = Ar();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.payload = je.decode(r, r.uint32());
                                      break;
                                  case 2:
                                      i.headerBytes = r.bytes();
                                      break;
                                  case 3:
                                      i.contentTopic = r.string();
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              payload: Yr(e.payload) ? je.fromJSON(e.payload) : void 0,
                              headerBytes: Yr(e.headerBytes) ? Xr(e.headerBytes) : new Uint8Array,
                              contentTopic: Yr(e.contentTopic) ? String(e.contentTopic) : ""
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.payload && (t.payload = e.payload ? je.toJSON(e.payload) : void 0), void 0 !== e.headerBytes && (t.headerBytes = Qr(void 0 !== e.headerBytes ? e.headerBytes : new Uint8Array)), void 0 !== e.contentTopic && (t.contentTopic = e.contentTopic), t;
                      },
                      fromPartial (e) {
                          var t, r;
                          const n = Ar();
                          return n.payload = void 0 !== e.payload && null !== e.payload ? je.fromPartial(e.payload) : void 0, n.headerBytes = null !== (t = e.headerBytes) && void 0 !== t ? t : new Uint8Array, n.contentTopic = null !== (r = e.contentTopic) && void 0 !== r ? r : "", n;
                      }
                  }, Nr = {
                      encode (e, t = ne().Writer.create()) {
                          for (const r of e.requests)xr.encode(r, t.uint32(10).fork()).ldelim();
                          return t;
                      },
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              requests: []
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              e >>> 3 == 1 ? i.requests.push(xr.decode(r, r.uint32())) : r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              requests: Array.isArray(null == e ? void 0 : e.requests) ? e.requests.map((e)=>xr.fromJSON(e)) : []
                          }),
                      toJSON (e) {
                          const t = {};
                          return e.requests ? t.requests = e.requests.map((e)=>e ? xr.toJSON(e) : void 0) : t.requests = [], t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = {
                              requests: []
                          };
                          return r.requests = (null === (t = e.requests) || void 0 === t ? void 0 : t.map((e)=>xr.fromPartial(e))) || [], r;
                      }
                  };
                  function Cr() {
                      return {
                          recipient: void 0,
                          payload: new Uint8Array,
                          headerBytes: new Uint8Array
                      };
                  }
                  const xr = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.recipient && Pe.encode(e.recipient, t.uint32(10).fork()).ldelim(), 0 !== e.payload.length && t.uint32(18).bytes(e.payload), 0 !== e.headerBytes.length && t.uint32(26).bytes(e.headerBytes), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = Cr();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.recipient = Pe.decode(r, r.uint32());
                                      break;
                                  case 2:
                                      i.payload = r.bytes();
                                      break;
                                  case 3:
                                      i.headerBytes = r.bytes();
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              recipient: Yr(e.recipient) ? Pe.fromJSON(e.recipient) : void 0,
                              payload: Yr(e.payload) ? Xr(e.payload) : new Uint8Array,
                              headerBytes: Yr(e.headerBytes) ? Xr(e.headerBytes) : new Uint8Array
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.recipient && (t.recipient = e.recipient ? Pe.toJSON(e.recipient) : void 0), void 0 !== e.payload && (t.payload = Qr(void 0 !== e.payload ? e.payload : new Uint8Array)), void 0 !== e.headerBytes && (t.headerBytes = Qr(void 0 !== e.headerBytes ? e.headerBytes : new Uint8Array)), t;
                      },
                      fromPartial (e) {
                          var t, r;
                          const n = Cr();
                          return n.recipient = void 0 !== e.recipient && null !== e.recipient ? Pe.fromPartial(e.recipient) : void 0, n.payload = null !== (t = e.payload) && void 0 !== t ? t : new Uint8Array, n.headerBytes = null !== (r = e.headerBytes) && void 0 !== r ? r : new Uint8Array, n;
                      }
                  }, Tr = {
                      encode (e, t = ne().Writer.create()) {
                          for (const r of e.responses)Rr.encode(r, t.uint32(10).fork()).ldelim();
                          return t;
                      },
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              responses: []
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              e >>> 3 == 1 ? i.responses.push(Rr.decode(r, r.uint32())) : r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              responses: Array.isArray(null == e ? void 0 : e.responses) ? e.responses.map((e)=>Rr.fromJSON(e)) : []
                          }),
                      toJSON (e) {
                          const t = {};
                          return e.responses ? t.responses = e.responses.map((e)=>e ? Rr.toJSON(e) : void 0) : t.responses = [], t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = {
                              responses: []
                          };
                          return r.responses = (null === (t = e.responses) || void 0 === t ? void 0 : t.map((e)=>Rr.fromPartial(e))) || [], r;
                      }
                  }, Rr = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.result && Or.encode(e.result, t.uint32(10).fork()).ldelim(), void 0 !== e.error && pr.encode(e.error, t.uint32(18).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              result: void 0,
                              error: void 0
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.result = Or.decode(r, r.uint32());
                                      break;
                                  case 2:
                                      i.error = pr.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              result: Yr(e.result) ? Or.fromJSON(e.result) : void 0,
                              error: Yr(e.error) ? pr.fromJSON(e.error) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.result && (t.result = e.result ? Or.toJSON(e.result) : void 0), void 0 !== e.error && (t.error = e.error ? pr.toJSON(e.error) : void 0), t;
                      },
                      fromPartial (e) {
                          const t = {
                              result: void 0,
                              error: void 0
                          };
                          return t.result = void 0 !== e.result && null !== e.result ? Or.fromPartial(e.result) : void 0, t.error = void 0 !== e.error && null !== e.error ? pr.fromPartial(e.error) : void 0, t;
                      }
                  }, Or = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.encrypted && je.encode(e.encrypted, t.uint32(10).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              encrypted: void 0
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              e >>> 3 == 1 ? i.encrypted = je.decode(r, r.uint32()) : r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              encrypted: Yr(e.encrypted) ? je.fromJSON(e.encrypted) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.encrypted && (t.encrypted = e.encrypted ? je.toJSON(e.encrypted) : void 0), t;
                      },
                      fromPartial (e) {
                          const t = {
                              encrypted: void 0
                          };
                          return t.encrypted = void 0 !== e.encrypted && null !== e.encrypted ? je.fromPartial(e.encrypted) : void 0, t;
                      }
                  }, Br = {
                      encode (e, t = ne().Writer.create()) {
                          for (const r of e.requests)Mr.encode(r, t.uint32(10).fork()).ldelim();
                          return t;
                      },
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              requests: []
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              e >>> 3 == 1 ? i.requests.push(Mr.decode(r, r.uint32())) : r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              requests: Array.isArray(null == e ? void 0 : e.requests) ? e.requests.map((e)=>Mr.fromJSON(e)) : []
                          }),
                      toJSON (e) {
                          const t = {};
                          return e.requests ? t.requests = e.requests.map((e)=>e ? Mr.toJSON(e) : void 0) : t.requests = [], t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = {
                              requests: []
                          };
                          return r.requests = (null === (t = e.requests) || void 0 === t ? void 0 : t.map((e)=>Mr.fromPartial(e))) || [], r;
                      }
                  };
                  function Ir() {
                      return {
                          payload: new Uint8Array,
                          headerBytes: new Uint8Array,
                          contentTopic: ""
                      };
                  }
                  const Mr = {
                      encode: (e, t = ne().Writer.create())=>(0 !== e.payload.length && t.uint32(10).bytes(e.payload), 0 !== e.headerBytes.length && t.uint32(18).bytes(e.headerBytes), "" !== e.contentTopic && t.uint32(26).string(e.contentTopic), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = Ir();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.payload = r.bytes();
                                      break;
                                  case 2:
                                      i.headerBytes = r.bytes();
                                      break;
                                  case 3:
                                      i.contentTopic = r.string();
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              payload: Yr(e.payload) ? Xr(e.payload) : new Uint8Array,
                              headerBytes: Yr(e.headerBytes) ? Xr(e.headerBytes) : new Uint8Array,
                              contentTopic: Yr(e.contentTopic) ? String(e.contentTopic) : ""
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.payload && (t.payload = Qr(void 0 !== e.payload ? e.payload : new Uint8Array)), void 0 !== e.headerBytes && (t.headerBytes = Qr(void 0 !== e.headerBytes ? e.headerBytes : new Uint8Array)), void 0 !== e.contentTopic && (t.contentTopic = e.contentTopic), t;
                      },
                      fromPartial (e) {
                          var t, r, n;
                          const i = Ir();
                          return i.payload = null !== (t = e.payload) && void 0 !== t ? t : new Uint8Array, i.headerBytes = null !== (r = e.headerBytes) && void 0 !== r ? r : new Uint8Array, i.contentTopic = null !== (n = e.contentTopic) && void 0 !== n ? n : "", i;
                      }
                  };
                  function Dr() {
                      return {
                          context: void 0,
                          recipient: void 0,
                          createdNs: te.UZERO
                      };
                  }
                  const Kr = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.context && Yt.encode(e.context, t.uint32(10).fork()).ldelim(), void 0 !== e.recipient && _e.encode(e.recipient, t.uint32(18).fork()).ldelim(), e.createdNs.isZero() || t.uint32(24).uint64(e.createdNs), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = Dr();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.context = Yt.decode(r, r.uint32());
                                      break;
                                  case 2:
                                      i.recipient = _e.decode(r, r.uint32());
                                      break;
                                  case 3:
                                      i.createdNs = r.uint64();
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              context: Yr(e.context) ? Yt.fromJSON(e.context) : void 0,
                              recipient: Yr(e.recipient) ? _e.fromJSON(e.recipient) : void 0,
                              createdNs: Yr(e.createdNs) ? te.fromValue(e.createdNs) : te.UZERO
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.context && (t.context = e.context ? Yt.toJSON(e.context) : void 0), void 0 !== e.recipient && (t.recipient = e.recipient ? _e.toJSON(e.recipient) : void 0), void 0 !== e.createdNs && (t.createdNs = (e.createdNs || te.UZERO).toString()), t;
                      },
                      fromPartial (e) {
                          const t = Dr();
                          return t.context = void 0 !== e.context && null !== e.context ? Yt.fromPartial(e.context) : void 0, t.recipient = void 0 !== e.recipient && null !== e.recipient ? _e.fromPartial(e.recipient) : void 0, t.createdNs = void 0 !== e.createdNs && null !== e.createdNs ? te.fromValue(e.createdNs) : te.UZERO, t;
                      }
                  };
                  function Ur() {
                      return {
                          conversation: void 0,
                          payload: new Uint8Array
                      };
                  }
                  const Fr = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.conversation && yr.encode(e.conversation, t.uint32(10).fork()).ldelim(), 0 !== e.payload.length && t.uint32(18).bytes(e.payload), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = Ur();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.conversation = yr.decode(r, r.uint32());
                                      break;
                                  case 2:
                                      i.payload = r.bytes();
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              conversation: Yr(e.conversation) ? yr.fromJSON(e.conversation) : void 0,
                              payload: Yr(e.payload) ? Xr(e.payload) : new Uint8Array
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.conversation && (t.conversation = e.conversation ? yr.toJSON(e.conversation) : void 0), void 0 !== e.payload && (t.payload = Qr(void 0 !== e.payload ? e.payload : new Uint8Array)), t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = Ur();
                          return r.conversation = void 0 !== e.conversation && null !== e.conversation ? yr.fromPartial(e.conversation) : void 0, r.payload = null !== (t = e.payload) && void 0 !== t ? t : new Uint8Array, r;
                      }
                  }, jr = {
                      encode (e, t = ne().Writer.create()) {
                          for (const r of e.requests)qr.encode(r, t.uint32(10).fork()).ldelim();
                          return t;
                      },
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              requests: []
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              e >>> 3 == 1 ? i.requests.push(qr.decode(r, r.uint32())) : r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              requests: Array.isArray(null == e ? void 0 : e.requests) ? e.requests.map((e)=>qr.fromJSON(e)) : []
                          }),
                      toJSON (e) {
                          const t = {};
                          return e.requests ? t.requests = e.requests.map((e)=>e ? qr.toJSON(e) : void 0) : t.requests = [], t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = {
                              requests: []
                          };
                          return r.requests = (null === (t = e.requests) || void 0 === t ? void 0 : t.map((e)=>qr.fromPartial(e))) || [], r;
                      }
                  };
                  function Lr() {
                      return {
                          contentTopic: "",
                          timestampNs: te.UZERO,
                          payload: new Uint8Array
                      };
                  }
                  const qr = {
                      encode: (e, t = ne().Writer.create())=>("" !== e.contentTopic && t.uint32(10).string(e.contentTopic), e.timestampNs.isZero() || t.uint32(16).uint64(e.timestampNs), 0 !== e.payload.length && t.uint32(26).bytes(e.payload), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = Lr();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.contentTopic = r.string();
                                      break;
                                  case 2:
                                      i.timestampNs = r.uint64();
                                      break;
                                  case 3:
                                      i.payload = r.bytes();
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              contentTopic: Yr(e.contentTopic) ? String(e.contentTopic) : "",
                              timestampNs: Yr(e.timestampNs) ? te.fromValue(e.timestampNs) : te.UZERO,
                              payload: Yr(e.payload) ? Xr(e.payload) : new Uint8Array
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.contentTopic && (t.contentTopic = e.contentTopic), void 0 !== e.timestampNs && (t.timestampNs = (e.timestampNs || te.UZERO).toString()), void 0 !== e.payload && (t.payload = Qr(void 0 !== e.payload ? e.payload : new Uint8Array)), t;
                      },
                      fromPartial (e) {
                          var t, r;
                          const n = Lr();
                          return n.contentTopic = null !== (t = e.contentTopic) && void 0 !== t ? t : "", n.timestampNs = void 0 !== e.timestampNs && null !== e.timestampNs ? te.fromValue(e.timestampNs) : te.UZERO, n.payload = null !== (r = e.payload) && void 0 !== r ? r : new Uint8Array, n;
                      }
                  }, zr = {
                      encode (e, t = ne().Writer.create()) {
                          for (const r of e.responses)Vr.encode(r, t.uint32(10).fork()).ldelim();
                          return t;
                      },
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              responses: []
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              e >>> 3 == 1 ? i.responses.push(Vr.decode(r, r.uint32())) : r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              responses: Array.isArray(null == e ? void 0 : e.responses) ? e.responses.map((e)=>Vr.fromJSON(e)) : []
                          }),
                      toJSON (e) {
                          const t = {};
                          return e.responses ? t.responses = e.responses.map((e)=>e ? Vr.toJSON(e) : void 0) : t.responses = [], t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = {
                              responses: []
                          };
                          return r.responses = (null === (t = e.responses) || void 0 === t ? void 0 : t.map((e)=>Vr.fromPartial(e))) || [], r;
                      }
                  }, Vr = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.result && Wr.encode(e.result, t.uint32(10).fork()).ldelim(), void 0 !== e.error && pr.encode(e.error, t.uint32(18).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              result: void 0,
                              error: void 0
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.result = Wr.decode(r, r.uint32());
                                      break;
                                  case 2:
                                      i.error = pr.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              result: Yr(e.result) ? Wr.fromJSON(e.result) : void 0,
                              error: Yr(e.error) ? pr.fromJSON(e.error) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.result && (t.result = e.result ? Wr.toJSON(e.result) : void 0), void 0 !== e.error && (t.error = e.error ? pr.toJSON(e.error) : void 0), t;
                      },
                      fromPartial (e) {
                          const t = {
                              result: void 0,
                              error: void 0
                          };
                          return t.result = void 0 !== e.result && null !== e.result ? Wr.fromPartial(e.result) : void 0, t.error = void 0 !== e.error && null !== e.error ? pr.fromPartial(e.error) : void 0, t;
                      }
                  }, Wr = {
                      encode: (e, t = ne().Writer.create())=>(void 0 !== e.conversation && yr.encode(e.conversation, t.uint32(10).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              conversation: void 0
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              e >>> 3 == 1 ? i.conversation = yr.decode(r, r.uint32()) : r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              conversation: Yr(e.conversation) ? yr.fromJSON(e.conversation) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.conversation && (t.conversation = e.conversation ? yr.toJSON(e.conversation) : void 0), t;
                      },
                      fromPartial (e) {
                          const t = {
                              conversation: void 0
                          };
                          return t.conversation = void 0 !== e.conversation && null !== e.conversation ? yr.fromPartial(e.conversation) : void 0, t;
                      }
                  }, Gr = {
                      encode: (e, t = ne().Writer.create())=>(Object.entries(e.topics).forEach(([e, r])=>{
                              $r.encode({
                                  key: e,
                                  value: r
                              }, t.uint32(10).fork()).ldelim();
                          }), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              topics: {}
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              if (e >>> 3 == 1) {
                                  const e = $r.decode(r, r.uint32());
                                  void 0 !== e.value && (i.topics[e.key] = e.value);
                              } else r.skipType(7 & e);
                          }
                          return i;
                      },
                      fromJSON (e) {
                          var t;
                          return {
                              topics: (t = e.topics, "object" == typeof t && null !== t ? Object.entries(e.topics).reduce((e, [t, r])=>(e[t] = Hr.fromJSON(r), e), {}) : {})
                          };
                      },
                      toJSON (e) {
                          const t = {
                              topics: {}
                          };
                          return e.topics && Object.entries(e.topics).forEach(([e, r])=>{
                              t.topics[e] = Hr.toJSON(r);
                          }), t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = {
                              topics: {}
                          };
                          return r.topics = Object.entries(null !== (t = e.topics) && void 0 !== t ? t : {}).reduce((e, [t, r])=>(void 0 !== r && (e[t] = Hr.fromPartial(r)), e), {}), r;
                      }
                  };
                  function Jr() {
                      return {
                          createdNs: te.UZERO,
                          invitation: void 0
                      };
                  }
                  const Hr = {
                      encode: (e, t = ne().Writer.create())=>(e.createdNs.isZero() || t.uint32(8).uint64(e.createdNs), void 0 !== e.invitation && Zt.encode(e.invitation, t.uint32(18).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = Jr();
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.createdNs = r.uint64();
                                      break;
                                  case 2:
                                      i.invitation = Zt.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              createdNs: Yr(e.createdNs) ? te.fromValue(e.createdNs) : te.UZERO,
                              invitation: Yr(e.invitation) ? Zt.fromJSON(e.invitation) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.createdNs && (t.createdNs = (e.createdNs || te.UZERO).toString()), void 0 !== e.invitation && (t.invitation = e.invitation ? Zt.toJSON(e.invitation) : void 0), t;
                      },
                      fromPartial (e) {
                          const t = Jr();
                          return t.createdNs = void 0 !== e.createdNs && null !== e.createdNs ? te.fromValue(e.createdNs) : te.UZERO, t.invitation = void 0 !== e.invitation && null !== e.invitation ? Zt.fromPartial(e.invitation) : void 0, t;
                      }
                  }, $r = {
                      encode: (e, t = ne().Writer.create())=>("" !== e.key && t.uint32(10).string(e.key), void 0 !== e.value && Hr.encode(e.value, t.uint32(18).fork()).ldelim(), t),
                      decode (e, t) {
                          const r = e instanceof ne().Reader ? e : new (ne()).Reader(e);
                          let n = void 0 === t ? r.len : r.pos + t;
                          const i = {
                              key: "",
                              value: void 0
                          };
                          for(; r.pos < n;){
                              const e = r.uint32();
                              switch(e >>> 3){
                                  case 1:
                                      i.key = r.string();
                                      break;
                                  case 2:
                                      i.value = Hr.decode(r, r.uint32());
                                      break;
                                  default:
                                      r.skipType(7 & e);
                              }
                          }
                          return i;
                      },
                      fromJSON: (e)=>({
                              key: Yr(e.key) ? String(e.key) : "",
                              value: Yr(e.value) ? Hr.fromJSON(e.value) : void 0
                          }),
                      toJSON (e) {
                          const t = {};
                          return void 0 !== e.key && (t.key = e.key), void 0 !== e.value && (t.value = e.value ? Hr.toJSON(e.value) : void 0), t;
                      },
                      fromPartial (e) {
                          var t;
                          const r = {
                              key: "",
                              value: void 0
                          };
                          return r.key = null !== (t = e.key) && void 0 !== t ? t : "", r.value = void 0 !== e.value && null !== e.value ? Hr.fromPartial(e.value) : void 0, r;
                      }
                  };
                  var Zr = (()=>{
                      if (void 0 !== Zr) return Zr;
                      if ("undefined" != typeof self) return self;
                      if ("undefined" != typeof window) return window;
                      if (void 0 !== r.g) return r.g;
                      throw "Unable to locate global object";
                  })();
                  function Xr(e) {
                      if (Zr.Buffer) return Uint8Array.from(Zr.Buffer.from(e, "base64"));
                      {
                          const t = Zr.atob(e), r = new Uint8Array(t.length);
                          for(let e = 0; e < t.length; ++e)r[e] = t.charCodeAt(e);
                          return r;
                      }
                  }
                  function Qr(e) {
                      if (Zr.Buffer) return Zr.Buffer.from(e).toString("base64");
                      {
                          const t = [];
                          return e.forEach((e)=>{
                              t.push(String.fromCharCode(e));
                          }), Zr.btoa(t.join(""));
                      }
                  }
                  function Yr(e) {
                      return null != e;
                  }
                  ne().util.Long !== te && (ne().util.Long = te, ne().configure());
              },
              8826: function(e) {
                  "use strict";
                  !function(t) {
                      function r(e) {
                          return parseInt(e) === e;
                      }
                      function n(e) {
                          if (!r(e.length)) return !1;
                          for(var t = 0; t < e.length; t++)if (!r(e[t]) || e[t] < 0 || e[t] > 255) return !1;
                          return !0;
                      }
                      function i(e, t) {
                          if (e.buffer && ArrayBuffer.isView(e) && "Uint8Array" === e.name) return t && (e = e.slice ? e.slice() : Array.prototype.slice.call(e)), e;
                          if (Array.isArray(e)) {
                              if (!n(e)) throw new Error("Array contains invalid value: " + e);
                              return new Uint8Array(e);
                          }
                          if (r(e.length) && n(e)) return new Uint8Array(e);
                          throw new Error("unsupported array-like object");
                      }
                      function o(e) {
                          return new Uint8Array(e);
                      }
                      function s(e, t, r, n, i) {
                          null == n && null == i || (e = e.slice ? e.slice(n, i) : Array.prototype.slice.call(e, n, i)), t.set(e, r);
                      }
                      var a, l = {
                          toBytes: function(e) {
                              var t = [], r = 0;
                              for(e = encodeURI(e); r < e.length;){
                                  var n = e.charCodeAt(r++);
                                  37 === n ? (t.push(parseInt(e.substr(r, 2), 16)), r += 2) : t.push(n);
                              }
                              return i(t);
                          },
                          fromBytes: function(e) {
                              for(var t = [], r = 0; r < e.length;){
                                  var n = e[r];
                                  n < 128 ? (t.push(String.fromCharCode(n)), r++) : n > 191 && n < 224 ? (t.push(String.fromCharCode((31 & n) << 6 | 63 & e[r + 1])), r += 2) : (t.push(String.fromCharCode((15 & n) << 12 | (63 & e[r + 1]) << 6 | 63 & e[r + 2])), r += 3);
                              }
                              return t.join("");
                          }
                      }, u = (a = "0123456789abcdef", {
                          toBytes: function(e) {
                              for(var t = [], r = 0; r < e.length; r += 2)t.push(parseInt(e.substr(r, 2), 16));
                              return t;
                          },
                          fromBytes: function(e) {
                              for(var t = [], r = 0; r < e.length; r++){
                                  var n = e[r];
                                  t.push(a[(240 & n) >> 4] + a[15 & n]);
                              }
                              return t.join("");
                          }
                      }), c = {
                          16: 10,
                          24: 12,
                          32: 14
                      }, d = [
                          1,
                          2,
                          4,
                          8,
                          16,
                          32,
                          64,
                          128,
                          27,
                          54,
                          108,
                          216,
                          171,
                          77,
                          154,
                          47,
                          94,
                          188,
                          99,
                          198,
                          151,
                          53,
                          106,
                          212,
                          179,
                          125,
                          250,
                          239,
                          197,
                          145
                      ], h = [
                          99,
                          124,
                          119,
                          123,
                          242,
                          107,
                          111,
                          197,
                          48,
                          1,
                          103,
                          43,
                          254,
                          215,
                          171,
                          118,
                          202,
                          130,
                          201,
                          125,
                          250,
                          89,
                          71,
                          240,
                          173,
                          212,
                          162,
                          175,
                          156,
                          164,
                          114,
                          192,
                          183,
                          253,
                          147,
                          38,
                          54,
                          63,
                          247,
                          204,
                          52,
                          165,
                          229,
                          241,
                          113,
                          216,
                          49,
                          21,
                          4,
                          199,
                          35,
                          195,
                          24,
                          150,
                          5,
                          154,
                          7,
                          18,
                          128,
                          226,
                          235,
                          39,
                          178,
                          117,
                          9,
                          131,
                          44,
                          26,
                          27,
                          110,
                          90,
                          160,
                          82,
                          59,
                          214,
                          179,
                          41,
                          227,
                          47,
                          132,
                          83,
                          209,
                          0,
                          237,
                          32,
                          252,
                          177,
                          91,
                          106,
                          203,
                          190,
                          57,
                          74,
                          76,
                          88,
                          207,
                          208,
                          239,
                          170,
                          251,
                          67,
                          77,
                          51,
                          133,
                          69,
                          249,
                          2,
                          127,
                          80,
                          60,
                          159,
                          168,
                          81,
                          163,
                          64,
                          143,
                          146,
                          157,
                          56,
                          245,
                          188,
                          182,
                          218,
                          33,
                          16,
                          255,
                          243,
                          210,
                          205,
                          12,
                          19,
                          236,
                          95,
                          151,
                          68,
                          23,
                          196,
                          167,
                          126,
                          61,
                          100,
                          93,
                          25,
                          115,
                          96,
                          129,
                          79,
                          220,
                          34,
                          42,
                          144,
                          136,
                          70,
                          238,
                          184,
                          20,
                          222,
                          94,
                          11,
                          219,
                          224,
                          50,
                          58,
                          10,
                          73,
                          6,
                          36,
                          92,
                          194,
                          211,
                          172,
                          98,
                          145,
                          149,
                          228,
                          121,
                          231,
                          200,
                          55,
                          109,
                          141,
                          213,
                          78,
                          169,
                          108,
                          86,
                          244,
                          234,
                          101,
                          122,
                          174,
                          8,
                          186,
                          120,
                          37,
                          46,
                          28,
                          166,
                          180,
                          198,
                          232,
                          221,
                          116,
                          31,
                          75,
                          189,
                          139,
                          138,
                          112,
                          62,
                          181,
                          102,
                          72,
                          3,
                          246,
                          14,
                          97,
                          53,
                          87,
                          185,
                          134,
                          193,
                          29,
                          158,
                          225,
                          248,
                          152,
                          17,
                          105,
                          217,
                          142,
                          148,
                          155,
                          30,
                          135,
                          233,
                          206,
                          85,
                          40,
                          223,
                          140,
                          161,
                          137,
                          13,
                          191,
                          230,
                          66,
                          104,
                          65,
                          153,
                          45,
                          15,
                          176,
                          84,
                          187,
                          22
                      ], f = [
                          82,
                          9,
                          106,
                          213,
                          48,
                          54,
                          165,
                          56,
                          191,
                          64,
                          163,
                          158,
                          129,
                          243,
                          215,
                          251,
                          124,
                          227,
                          57,
                          130,
                          155,
                          47,
                          255,
                          135,
                          52,
                          142,
                          67,
                          68,
                          196,
                          222,
                          233,
                          203,
                          84,
                          123,
                          148,
                          50,
                          166,
                          194,
                          35,
                          61,
                          238,
                          76,
                          149,
                          11,
                          66,
                          250,
                          195,
                          78,
                          8,
                          46,
                          161,
                          102,
                          40,
                          217,
                          36,
                          178,
                          118,
                          91,
                          162,
                          73,
                          109,
                          139,
                          209,
                          37,
                          114,
                          248,
                          246,
                          100,
                          134,
                          104,
                          152,
                          22,
                          212,
                          164,
                          92,
                          204,
                          93,
                          101,
                          182,
                          146,
                          108,
                          112,
                          72,
                          80,
                          253,
                          237,
                          185,
                          218,
                          94,
                          21,
                          70,
                          87,
                          167,
                          141,
                          157,
                          132,
                          144,
                          216,
                          171,
                          0,
                          140,
                          188,
                          211,
                          10,
                          247,
                          228,
                          88,
                          5,
                          184,
                          179,
                          69,
                          6,
                          208,
                          44,
                          30,
                          143,
                          202,
                          63,
                          15,
                          2,
                          193,
                          175,
                          189,
                          3,
                          1,
                          19,
                          138,
                          107,
                          58,
                          145,
                          17,
                          65,
                          79,
                          103,
                          220,
                          234,
                          151,
                          242,
                          207,
                          206,
                          240,
                          180,
                          230,
                          115,
                          150,
                          172,
                          116,
                          34,
                          231,
                          173,
                          53,
                          133,
                          226,
                          249,
                          55,
                          232,
                          28,
                          117,
                          223,
                          110,
                          71,
                          241,
                          26,
                          113,
                          29,
                          41,
                          197,
                          137,
                          111,
                          183,
                          98,
                          14,
                          170,
                          24,
                          190,
                          27,
                          252,
                          86,
                          62,
                          75,
                          198,
                          210,
                          121,
                          32,
                          154,
                          219,
                          192,
                          254,
                          120,
                          205,
                          90,
                          244,
                          31,
                          221,
                          168,
                          51,
                          136,
                          7,
                          199,
                          49,
                          177,
                          18,
                          16,
                          89,
                          39,
                          128,
                          236,
                          95,
                          96,
                          81,
                          127,
                          169,
                          25,
                          181,
                          74,
                          13,
                          45,
                          229,
                          122,
                          159,
                          147,
                          201,
                          156,
                          239,
                          160,
                          224,
                          59,
                          77,
                          174,
                          42,
                          245,
                          176,
                          200,
                          235,
                          187,
                          60,
                          131,
                          83,
                          153,
                          97,
                          23,
                          43,
                          4,
                          126,
                          186,
                          119,
                          214,
                          38,
                          225,
                          105,
                          20,
                          99,
                          85,
                          33,
                          12,
                          125
                      ], p = [
                          3328402341,
                          4168907908,
                          4000806809,
                          4135287693,
                          4294111757,
                          3597364157,
                          3731845041,
                          2445657428,
                          1613770832,
                          33620227,
                          3462883241,
                          1445669757,
                          3892248089,
                          3050821474,
                          1303096294,
                          3967186586,
                          2412431941,
                          528646813,
                          2311702848,
                          4202528135,
                          4026202645,
                          2992200171,
                          2387036105,
                          4226871307,
                          1101901292,
                          3017069671,
                          1604494077,
                          1169141738,
                          597466303,
                          1403299063,
                          3832705686,
                          2613100635,
                          1974974402,
                          3791519004,
                          1033081774,
                          1277568618,
                          1815492186,
                          2118074177,
                          4126668546,
                          2211236943,
                          1748251740,
                          1369810420,
                          3521504564,
                          4193382664,
                          3799085459,
                          2883115123,
                          1647391059,
                          706024767,
                          134480908,
                          2512897874,
                          1176707941,
                          2646852446,
                          806885416,
                          932615841,
                          168101135,
                          798661301,
                          235341577,
                          605164086,
                          461406363,
                          3756188221,
                          3454790438,
                          1311188841,
                          2142417613,
                          3933566367,
                          302582043,
                          495158174,
                          1479289972,
                          874125870,
                          907746093,
                          3698224818,
                          3025820398,
                          1537253627,
                          2756858614,
                          1983593293,
                          3084310113,
                          2108928974,
                          1378429307,
                          3722699582,
                          1580150641,
                          327451799,
                          2790478837,
                          3117535592,
                          0,
                          3253595436,
                          1075847264,
                          3825007647,
                          2041688520,
                          3059440621,
                          3563743934,
                          2378943302,
                          1740553945,
                          1916352843,
                          2487896798,
                          2555137236,
                          2958579944,
                          2244988746,
                          3151024235,
                          3320835882,
                          1336584933,
                          3992714006,
                          2252555205,
                          2588757463,
                          1714631509,
                          293963156,
                          2319795663,
                          3925473552,
                          67240454,
                          4269768577,
                          2689618160,
                          2017213508,
                          631218106,
                          1269344483,
                          2723238387,
                          1571005438,
                          2151694528,
                          93294474,
                          1066570413,
                          563977660,
                          1882732616,
                          4059428100,
                          1673313503,
                          2008463041,
                          2950355573,
                          1109467491,
                          537923632,
                          3858759450,
                          4260623118,
                          3218264685,
                          2177748300,
                          403442708,
                          638784309,
                          3287084079,
                          3193921505,
                          899127202,
                          2286175436,
                          773265209,
                          2479146071,
                          1437050866,
                          4236148354,
                          2050833735,
                          3362022572,
                          3126681063,
                          840505643,
                          3866325909,
                          3227541664,
                          427917720,
                          2655997905,
                          2749160575,
                          1143087718,
                          1412049534,
                          999329963,
                          193497219,
                          2353415882,
                          3354324521,
                          1807268051,
                          672404540,
                          2816401017,
                          3160301282,
                          369822493,
                          2916866934,
                          3688947771,
                          1681011286,
                          1949973070,
                          336202270,
                          2454276571,
                          201721354,
                          1210328172,
                          3093060836,
                          2680341085,
                          3184776046,
                          1135389935,
                          3294782118,
                          965841320,
                          831886756,
                          3554993207,
                          4068047243,
                          3588745010,
                          2345191491,
                          1849112409,
                          3664604599,
                          26054028,
                          2983581028,
                          2622377682,
                          1235855840,
                          3630984372,
                          2891339514,
                          4092916743,
                          3488279077,
                          3395642799,
                          4101667470,
                          1202630377,
                          268961816,
                          1874508501,
                          4034427016,
                          1243948399,
                          1546530418,
                          941366308,
                          1470539505,
                          1941222599,
                          2546386513,
                          3421038627,
                          2715671932,
                          3899946140,
                          1042226977,
                          2521517021,
                          1639824860,
                          227249030,
                          260737669,
                          3765465232,
                          2084453954,
                          1907733956,
                          3429263018,
                          2420656344,
                          100860677,
                          4160157185,
                          470683154,
                          3261161891,
                          1781871967,
                          2924959737,
                          1773779408,
                          394692241,
                          2579611992,
                          974986535,
                          664706745,
                          3655459128,
                          3958962195,
                          731420851,
                          571543859,
                          3530123707,
                          2849626480,
                          126783113,
                          865375399,
                          765172662,
                          1008606754,
                          361203602,
                          3387549984,
                          2278477385,
                          2857719295,
                          1344809080,
                          2782912378,
                          59542671,
                          1503764984,
                          160008576,
                          437062935,
                          1707065306,
                          3622233649,
                          2218934982,
                          3496503480,
                          2185314755,
                          697932208,
                          1512910199,
                          504303377,
                          2075177163,
                          2824099068,
                          1841019862,
                          739644986
                      ], m = [
                          2781242211,
                          2230877308,
                          2582542199,
                          2381740923,
                          234877682,
                          3184946027,
                          2984144751,
                          1418839493,
                          1348481072,
                          50462977,
                          2848876391,
                          2102799147,
                          434634494,
                          1656084439,
                          3863849899,
                          2599188086,
                          1167051466,
                          2636087938,
                          1082771913,
                          2281340285,
                          368048890,
                          3954334041,
                          3381544775,
                          201060592,
                          3963727277,
                          1739838676,
                          4250903202,
                          3930435503,
                          3206782108,
                          4149453988,
                          2531553906,
                          1536934080,
                          3262494647,
                          484572669,
                          2923271059,
                          1783375398,
                          1517041206,
                          1098792767,
                          49674231,
                          1334037708,
                          1550332980,
                          4098991525,
                          886171109,
                          150598129,
                          2481090929,
                          1940642008,
                          1398944049,
                          1059722517,
                          201851908,
                          1385547719,
                          1699095331,
                          1587397571,
                          674240536,
                          2704774806,
                          252314885,
                          3039795866,
                          151914247,
                          908333586,
                          2602270848,
                          1038082786,
                          651029483,
                          1766729511,
                          3447698098,
                          2682942837,
                          454166793,
                          2652734339,
                          1951935532,
                          775166490,
                          758520603,
                          3000790638,
                          4004797018,
                          4217086112,
                          4137964114,
                          1299594043,
                          1639438038,
                          3464344499,
                          2068982057,
                          1054729187,
                          1901997871,
                          2534638724,
                          4121318227,
                          1757008337,
                          0,
                          750906861,
                          1614815264,
                          535035132,
                          3363418545,
                          3988151131,
                          3201591914,
                          1183697867,
                          3647454910,
                          1265776953,
                          3734260298,
                          3566750796,
                          3903871064,
                          1250283471,
                          1807470800,
                          717615087,
                          3847203498,
                          384695291,
                          3313910595,
                          3617213773,
                          1432761139,
                          2484176261,
                          3481945413,
                          283769337,
                          100925954,
                          2180939647,
                          4037038160,
                          1148730428,
                          3123027871,
                          3813386408,
                          4087501137,
                          4267549603,
                          3229630528,
                          2315620239,
                          2906624658,
                          3156319645,
                          1215313976,
                          82966005,
                          3747855548,
                          3245848246,
                          1974459098,
                          1665278241,
                          807407632,
                          451280895,
                          251524083,
                          1841287890,
                          1283575245,
                          337120268,
                          891687699,
                          801369324,
                          3787349855,
                          2721421207,
                          3431482436,
                          959321879,
                          1469301956,
                          4065699751,
                          2197585534,
                          1199193405,
                          2898814052,
                          3887750493,
                          724703513,
                          2514908019,
                          2696962144,
                          2551808385,
                          3516813135,
                          2141445340,
                          1715741218,
                          2119445034,
                          2872807568,
                          2198571144,
                          3398190662,
                          700968686,
                          3547052216,
                          1009259540,
                          2041044702,
                          3803995742,
                          487983883,
                          1991105499,
                          1004265696,
                          1449407026,
                          1316239930,
                          504629770,
                          3683797321,
                          168560134,
                          1816667172,
                          3837287516,
                          1570751170,
                          1857934291,
                          4014189740,
                          2797888098,
                          2822345105,
                          2754712981,
                          936633572,
                          2347923833,
                          852879335,
                          1133234376,
                          1500395319,
                          3084545389,
                          2348912013,
                          1689376213,
                          3533459022,
                          3762923945,
                          3034082412,
                          4205598294,
                          133428468,
                          634383082,
                          2949277029,
                          2398386810,
                          3913789102,
                          403703816,
                          3580869306,
                          2297460856,
                          1867130149,
                          1918643758,
                          607656988,
                          4049053350,
                          3346248884,
                          1368901318,
                          600565992,
                          2090982877,
                          2632479860,
                          557719327,
                          3717614411,
                          3697393085,
                          2249034635,
                          2232388234,
                          2430627952,
                          1115438654,
                          3295786421,
                          2865522278,
                          3633334344,
                          84280067,
                          33027830,
                          303828494,
                          2747425121,
                          1600795957,
                          4188952407,
                          3496589753,
                          2434238086,
                          1486471617,
                          658119965,
                          3106381470,
                          953803233,
                          334231800,
                          3005978776,
                          857870609,
                          3151128937,
                          1890179545,
                          2298973838,
                          2805175444,
                          3056442267,
                          574365214,
                          2450884487,
                          550103529,
                          1233637070,
                          4289353045,
                          2018519080,
                          2057691103,
                          2399374476,
                          4166623649,
                          2148108681,
                          387583245,
                          3664101311,
                          836232934,
                          3330556482,
                          3100665960,
                          3280093505,
                          2955516313,
                          2002398509,
                          287182607,
                          3413881008,
                          4238890068,
                          3597515707,
                          975967766
                      ], y = [
                          1671808611,
                          2089089148,
                          2006576759,
                          2072901243,
                          4061003762,
                          1807603307,
                          1873927791,
                          3310653893,
                          810573872,
                          16974337,
                          1739181671,
                          729634347,
                          4263110654,
                          3613570519,
                          2883997099,
                          1989864566,
                          3393556426,
                          2191335298,
                          3376449993,
                          2106063485,
                          4195741690,
                          1508618841,
                          1204391495,
                          4027317232,
                          2917941677,
                          3563566036,
                          2734514082,
                          2951366063,
                          2629772188,
                          2767672228,
                          1922491506,
                          3227229120,
                          3082974647,
                          4246528509,
                          2477669779,
                          644500518,
                          911895606,
                          1061256767,
                          4144166391,
                          3427763148,
                          878471220,
                          2784252325,
                          3845444069,
                          4043897329,
                          1905517169,
                          3631459288,
                          827548209,
                          356461077,
                          67897348,
                          3344078279,
                          593839651,
                          3277757891,
                          405286936,
                          2527147926,
                          84871685,
                          2595565466,
                          118033927,
                          305538066,
                          2157648768,
                          3795705826,
                          3945188843,
                          661212711,
                          2999812018,
                          1973414517,
                          152769033,
                          2208177539,
                          745822252,
                          439235610,
                          455947803,
                          1857215598,
                          1525593178,
                          2700827552,
                          1391895634,
                          994932283,
                          3596728278,
                          3016654259,
                          695947817,
                          3812548067,
                          795958831,
                          2224493444,
                          1408607827,
                          3513301457,
                          0,
                          3979133421,
                          543178784,
                          4229948412,
                          2982705585,
                          1542305371,
                          1790891114,
                          3410398667,
                          3201918910,
                          961245753,
                          1256100938,
                          1289001036,
                          1491644504,
                          3477767631,
                          3496721360,
                          4012557807,
                          2867154858,
                          4212583931,
                          1137018435,
                          1305975373,
                          861234739,
                          2241073541,
                          1171229253,
                          4178635257,
                          33948674,
                          2139225727,
                          1357946960,
                          1011120188,
                          2679776671,
                          2833468328,
                          1374921297,
                          2751356323,
                          1086357568,
                          2408187279,
                          2460827538,
                          2646352285,
                          944271416,
                          4110742005,
                          3168756668,
                          3066132406,
                          3665145818,
                          560153121,
                          271589392,
                          4279952895,
                          4077846003,
                          3530407890,
                          3444343245,
                          202643468,
                          322250259,
                          3962553324,
                          1608629855,
                          2543990167,
                          1154254916,
                          389623319,
                          3294073796,
                          2817676711,
                          2122513534,
                          1028094525,
                          1689045092,
                          1575467613,
                          422261273,
                          1939203699,
                          1621147744,
                          2174228865,
                          1339137615,
                          3699352540,
                          577127458,
                          712922154,
                          2427141008,
                          2290289544,
                          1187679302,
                          3995715566,
                          3100863416,
                          339486740,
                          3732514782,
                          1591917662,
                          186455563,
                          3681988059,
                          3762019296,
                          844522546,
                          978220090,
                          169743370,
                          1239126601,
                          101321734,
                          611076132,
                          1558493276,
                          3260915650,
                          3547250131,
                          2901361580,
                          1655096418,
                          2443721105,
                          2510565781,
                          3828863972,
                          2039214713,
                          3878868455,
                          3359869896,
                          928607799,
                          1840765549,
                          2374762893,
                          3580146133,
                          1322425422,
                          2850048425,
                          1823791212,
                          1459268694,
                          4094161908,
                          3928346602,
                          1706019429,
                          2056189050,
                          2934523822,
                          135794696,
                          3134549946,
                          2022240376,
                          628050469,
                          779246638,
                          472135708,
                          2800834470,
                          3032970164,
                          3327236038,
                          3894660072,
                          3715932637,
                          1956440180,
                          522272287,
                          1272813131,
                          3185336765,
                          2340818315,
                          2323976074,
                          1888542832,
                          1044544574,
                          3049550261,
                          1722469478,
                          1222152264,
                          50660867,
                          4127324150,
                          236067854,
                          1638122081,
                          895445557,
                          1475980887,
                          3117443513,
                          2257655686,
                          3243809217,
                          489110045,
                          2662934430,
                          3778599393,
                          4162055160,
                          2561878936,
                          288563729,
                          1773916777,
                          3648039385,
                          2391345038,
                          2493985684,
                          2612407707,
                          505560094,
                          2274497927,
                          3911240169,
                          3460925390,
                          1442818645,
                          678973480,
                          3749357023,
                          2358182796,
                          2717407649,
                          2306869641,
                          219617805,
                          3218761151,
                          3862026214,
                          1120306242,
                          1756942440,
                          1103331905,
                          2578459033,
                          762796589,
                          252780047,
                          2966125488,
                          1425844308,
                          3151392187,
                          372911126
                      ], g = [
                          1667474886,
                          2088535288,
                          2004326894,
                          2071694838,
                          4075949567,
                          1802223062,
                          1869591006,
                          3318043793,
                          808472672,
                          16843522,
                          1734846926,
                          724270422,
                          4278065639,
                          3621216949,
                          2880169549,
                          1987484396,
                          3402253711,
                          2189597983,
                          3385409673,
                          2105378810,
                          4210693615,
                          1499065266,
                          1195886990,
                          4042263547,
                          2913856577,
                          3570689971,
                          2728590687,
                          2947541573,
                          2627518243,
                          2762274643,
                          1920112356,
                          3233831835,
                          3082273397,
                          4261223649,
                          2475929149,
                          640051788,
                          909531756,
                          1061110142,
                          4160160501,
                          3435941763,
                          875846760,
                          2779116625,
                          3857003729,
                          4059105529,
                          1903268834,
                          3638064043,
                          825316194,
                          353713962,
                          67374088,
                          3351728789,
                          589522246,
                          3284360861,
                          404236336,
                          2526454071,
                          84217610,
                          2593830191,
                          117901582,
                          303183396,
                          2155911963,
                          3806477791,
                          3958056653,
                          656894286,
                          2998062463,
                          1970642922,
                          151591698,
                          2206440989,
                          741110872,
                          437923380,
                          454765878,
                          1852748508,
                          1515908788,
                          2694904667,
                          1381168804,
                          993742198,
                          3604373943,
                          3014905469,
                          690584402,
                          3823320797,
                          791638366,
                          2223281939,
                          1398011302,
                          3520161977,
                          0,
                          3991743681,
                          538992704,
                          4244381667,
                          2981218425,
                          1532751286,
                          1785380564,
                          3419096717,
                          3200178535,
                          960056178,
                          1246420628,
                          1280103576,
                          1482221744,
                          3486468741,
                          3503319995,
                          4025428677,
                          2863326543,
                          4227536621,
                          1128514950,
                          1296947098,
                          859002214,
                          2240123921,
                          1162203018,
                          4193849577,
                          33687044,
                          2139062782,
                          1347481760,
                          1010582648,
                          2678045221,
                          2829640523,
                          1364325282,
                          2745433693,
                          1077985408,
                          2408548869,
                          2459086143,
                          2644360225,
                          943212656,
                          4126475505,
                          3166494563,
                          3065430391,
                          3671750063,
                          555836226,
                          269496352,
                          4294908645,
                          4092792573,
                          3537006015,
                          3452783745,
                          202118168,
                          320025894,
                          3974901699,
                          1600119230,
                          2543297077,
                          1145359496,
                          387397934,
                          3301201811,
                          2812801621,
                          2122220284,
                          1027426170,
                          1684319432,
                          1566435258,
                          421079858,
                          1936954854,
                          1616945344,
                          2172753945,
                          1330631070,
                          3705438115,
                          572679748,
                          707427924,
                          2425400123,
                          2290647819,
                          1179044492,
                          4008585671,
                          3099120491,
                          336870440,
                          3739122087,
                          1583276732,
                          185277718,
                          3688593069,
                          3772791771,
                          842159716,
                          976899700,
                          168435220,
                          1229577106,
                          101059084,
                          606366792,
                          1549591736,
                          3267517855,
                          3553849021,
                          2897014595,
                          1650632388,
                          2442242105,
                          2509612081,
                          3840161747,
                          2038008818,
                          3890688725,
                          3368567691,
                          926374254,
                          1835907034,
                          2374863873,
                          3587531953,
                          1313788572,
                          2846482505,
                          1819063512,
                          1448540844,
                          4109633523,
                          3941213647,
                          1701162954,
                          2054852340,
                          2930698567,
                          134748176,
                          3132806511,
                          2021165296,
                          623210314,
                          774795868,
                          471606328,
                          2795958615,
                          3031746419,
                          3334885783,
                          3907527627,
                          3722280097,
                          1953799400,
                          522133822,
                          1263263126,
                          3183336545,
                          2341176845,
                          2324333839,
                          1886425312,
                          1044267644,
                          3048588401,
                          1718004428,
                          1212733584,
                          50529542,
                          4143317495,
                          235803164,
                          1633788866,
                          892690282,
                          1465383342,
                          3115962473,
                          2256965911,
                          3250673817,
                          488449850,
                          2661202215,
                          3789633753,
                          4177007595,
                          2560144171,
                          286339874,
                          1768537042,
                          3654906025,
                          2391705863,
                          2492770099,
                          2610673197,
                          505291324,
                          2273808917,
                          3924369609,
                          3469625735,
                          1431699370,
                          673740880,
                          3755965093,
                          2358021891,
                          2711746649,
                          2307489801,
                          218961690,
                          3217021541,
                          3873845719,
                          1111672452,
                          1751693520,
                          1094828930,
                          2576986153,
                          757954394,
                          252645662,
                          2964376443,
                          1414855848,
                          3149649517,
                          370555436
                      ], v = [
                          1374988112,
                          2118214995,
                          437757123,
                          975658646,
                          1001089995,
                          530400753,
                          2902087851,
                          1273168787,
                          540080725,
                          2910219766,
                          2295101073,
                          4110568485,
                          1340463100,
                          3307916247,
                          641025152,
                          3043140495,
                          3736164937,
                          632953703,
                          1172967064,
                          1576976609,
                          3274667266,
                          2169303058,
                          2370213795,
                          1809054150,
                          59727847,
                          361929877,
                          3211623147,
                          2505202138,
                          3569255213,
                          1484005843,
                          1239443753,
                          2395588676,
                          1975683434,
                          4102977912,
                          2572697195,
                          666464733,
                          3202437046,
                          4035489047,
                          3374361702,
                          2110667444,
                          1675577880,
                          3843699074,
                          2538681184,
                          1649639237,
                          2976151520,
                          3144396420,
                          4269907996,
                          4178062228,
                          1883793496,
                          2403728665,
                          2497604743,
                          1383856311,
                          2876494627,
                          1917518562,
                          3810496343,
                          1716890410,
                          3001755655,
                          800440835,
                          2261089178,
                          3543599269,
                          807962610,
                          599762354,
                          33778362,
                          3977675356,
                          2328828971,
                          2809771154,
                          4077384432,
                          1315562145,
                          1708848333,
                          101039829,
                          3509871135,
                          3299278474,
                          875451293,
                          2733856160,
                          92987698,
                          2767645557,
                          193195065,
                          1080094634,
                          1584504582,
                          3178106961,
                          1042385657,
                          2531067453,
                          3711829422,
                          1306967366,
                          2438237621,
                          1908694277,
                          67556463,
                          1615861247,
                          429456164,
                          3602770327,
                          2302690252,
                          1742315127,
                          2968011453,
                          126454664,
                          3877198648,
                          2043211483,
                          2709260871,
                          2084704233,
                          4169408201,
                          0,
                          159417987,
                          841739592,
                          504459436,
                          1817866830,
                          4245618683,
                          260388950,
                          1034867998,
                          908933415,
                          168810852,
                          1750902305,
                          2606453969,
                          607530554,
                          202008497,
                          2472011535,
                          3035535058,
                          463180190,
                          2160117071,
                          1641816226,
                          1517767529,
                          470948374,
                          3801332234,
                          3231722213,
                          1008918595,
                          303765277,
                          235474187,
                          4069246893,
                          766945465,
                          337553864,
                          1475418501,
                          2943682380,
                          4003061179,
                          2743034109,
                          4144047775,
                          1551037884,
                          1147550661,
                          1543208500,
                          2336434550,
                          3408119516,
                          3069049960,
                          3102011747,
                          3610369226,
                          1113818384,
                          328671808,
                          2227573024,
                          2236228733,
                          3535486456,
                          2935566865,
                          3341394285,
                          496906059,
                          3702665459,
                          226906860,
                          2009195472,
                          733156972,
                          2842737049,
                          294930682,
                          1206477858,
                          2835123396,
                          2700099354,
                          1451044056,
                          573804783,
                          2269728455,
                          3644379585,
                          2362090238,
                          2564033334,
                          2801107407,
                          2776292904,
                          3669462566,
                          1068351396,
                          742039012,
                          1350078989,
                          1784663195,
                          1417561698,
                          4136440770,
                          2430122216,
                          775550814,
                          2193862645,
                          2673705150,
                          1775276924,
                          1876241833,
                          3475313331,
                          3366754619,
                          270040487,
                          3902563182,
                          3678124923,
                          3441850377,
                          1851332852,
                          3969562369,
                          2203032232,
                          3868552805,
                          2868897406,
                          566021896,
                          4011190502,
                          3135740889,
                          1248802510,
                          3936291284,
                          699432150,
                          832877231,
                          708780849,
                          3332740144,
                          899835584,
                          1951317047,
                          4236429990,
                          3767586992,
                          866637845,
                          4043610186,
                          1106041591,
                          2144161806,
                          395441711,
                          1984812685,
                          1139781709,
                          3433712980,
                          3835036895,
                          2664543715,
                          1282050075,
                          3240894392,
                          1181045119,
                          2640243204,
                          25965917,
                          4203181171,
                          4211818798,
                          3009879386,
                          2463879762,
                          3910161971,
                          1842759443,
                          2597806476,
                          933301370,
                          1509430414,
                          3943906441,
                          3467192302,
                          3076639029,
                          3776767469,
                          2051518780,
                          2631065433,
                          1441952575,
                          404016761,
                          1942435775,
                          1408749034,
                          1610459739,
                          3745345300,
                          2017778566,
                          3400528769,
                          3110650942,
                          941896748,
                          3265478751,
                          371049330,
                          3168937228,
                          675039627,
                          4279080257,
                          967311729,
                          135050206,
                          3635733660,
                          1683407248,
                          2076935265,
                          3576870512,
                          1215061108,
                          3501741890
                      ], b = [
                          1347548327,
                          1400783205,
                          3273267108,
                          2520393566,
                          3409685355,
                          4045380933,
                          2880240216,
                          2471224067,
                          1428173050,
                          4138563181,
                          2441661558,
                          636813900,
                          4233094615,
                          3620022987,
                          2149987652,
                          2411029155,
                          1239331162,
                          1730525723,
                          2554718734,
                          3781033664,
                          46346101,
                          310463728,
                          2743944855,
                          3328955385,
                          3875770207,
                          2501218972,
                          3955191162,
                          3667219033,
                          768917123,
                          3545789473,
                          692707433,
                          1150208456,
                          1786102409,
                          2029293177,
                          1805211710,
                          3710368113,
                          3065962831,
                          401639597,
                          1724457132,
                          3028143674,
                          409198410,
                          2196052529,
                          1620529459,
                          1164071807,
                          3769721975,
                          2226875310,
                          486441376,
                          2499348523,
                          1483753576,
                          428819965,
                          2274680428,
                          3075636216,
                          598438867,
                          3799141122,
                          1474502543,
                          711349675,
                          129166120,
                          53458370,
                          2592523643,
                          2782082824,
                          4063242375,
                          2988687269,
                          3120694122,
                          1559041666,
                          730517276,
                          2460449204,
                          4042459122,
                          2706270690,
                          3446004468,
                          3573941694,
                          533804130,
                          2328143614,
                          2637442643,
                          2695033685,
                          839224033,
                          1973745387,
                          957055980,
                          2856345839,
                          106852767,
                          1371368976,
                          4181598602,
                          1033297158,
                          2933734917,
                          1179510461,
                          3046200461,
                          91341917,
                          1862534868,
                          4284502037,
                          605657339,
                          2547432937,
                          3431546947,
                          2003294622,
                          3182487618,
                          2282195339,
                          954669403,
                          3682191598,
                          1201765386,
                          3917234703,
                          3388507166,
                          0,
                          2198438022,
                          1211247597,
                          2887651696,
                          1315723890,
                          4227665663,
                          1443857720,
                          507358933,
                          657861945,
                          1678381017,
                          560487590,
                          3516619604,
                          975451694,
                          2970356327,
                          261314535,
                          3535072918,
                          2652609425,
                          1333838021,
                          2724322336,
                          1767536459,
                          370938394,
                          182621114,
                          3854606378,
                          1128014560,
                          487725847,
                          185469197,
                          2918353863,
                          3106780840,
                          3356761769,
                          2237133081,
                          1286567175,
                          3152976349,
                          4255350624,
                          2683765030,
                          3160175349,
                          3309594171,
                          878443390,
                          1988838185,
                          3704300486,
                          1756818940,
                          1673061617,
                          3403100636,
                          272786309,
                          1075025698,
                          545572369,
                          2105887268,
                          4174560061,
                          296679730,
                          1841768865,
                          1260232239,
                          4091327024,
                          3960309330,
                          3497509347,
                          1814803222,
                          2578018489,
                          4195456072,
                          575138148,
                          3299409036,
                          446754879,
                          3629546796,
                          4011996048,
                          3347532110,
                          3252238545,
                          4270639778,
                          915985419,
                          3483825537,
                          681933534,
                          651868046,
                          2755636671,
                          3828103837,
                          223377554,
                          2607439820,
                          1649704518,
                          3270937875,
                          3901806776,
                          1580087799,
                          4118987695,
                          3198115200,
                          2087309459,
                          2842678573,
                          3016697106,
                          1003007129,
                          2802849917,
                          1860738147,
                          2077965243,
                          164439672,
                          4100872472,
                          32283319,
                          2827177882,
                          1709610350,
                          2125135846,
                          136428751,
                          3874428392,
                          3652904859,
                          3460984630,
                          3572145929,
                          3593056380,
                          2939266226,
                          824852259,
                          818324884,
                          3224740454,
                          930369212,
                          2801566410,
                          2967507152,
                          355706840,
                          1257309336,
                          4148292826,
                          243256656,
                          790073846,
                          2373340630,
                          1296297904,
                          1422699085,
                          3756299780,
                          3818836405,
                          457992840,
                          3099667487,
                          2135319889,
                          77422314,
                          1560382517,
                          1945798516,
                          788204353,
                          1521706781,
                          1385356242,
                          870912086,
                          325965383,
                          2358957921,
                          2050466060,
                          2388260884,
                          2313884476,
                          4006521127,
                          901210569,
                          3990953189,
                          1014646705,
                          1503449823,
                          1062597235,
                          2031621326,
                          3212035895,
                          3931371469,
                          1533017514,
                          350174575,
                          2256028891,
                          2177544179,
                          1052338372,
                          741876788,
                          1606591296,
                          1914052035,
                          213705253,
                          2334669897,
                          1107234197,
                          1899603969,
                          3725069491,
                          2631447780,
                          2422494913,
                          1635502980,
                          1893020342,
                          1950903388,
                          1120974935
                      ], w = [
                          2807058932,
                          1699970625,
                          2764249623,
                          1586903591,
                          1808481195,
                          1173430173,
                          1487645946,
                          59984867,
                          4199882800,
                          1844882806,
                          1989249228,
                          1277555970,
                          3623636965,
                          3419915562,
                          1149249077,
                          2744104290,
                          1514790577,
                          459744698,
                          244860394,
                          3235995134,
                          1963115311,
                          4027744588,
                          2544078150,
                          4190530515,
                          1608975247,
                          2627016082,
                          2062270317,
                          1507497298,
                          2200818878,
                          567498868,
                          1764313568,
                          3359936201,
                          2305455554,
                          2037970062,
                          1047239e3,
                          1910319033,
                          1337376481,
                          2904027272,
                          2892417312,
                          984907214,
                          1243112415,
                          830661914,
                          861968209,
                          2135253587,
                          2011214180,
                          2927934315,
                          2686254721,
                          731183368,
                          1750626376,
                          4246310725,
                          1820824798,
                          4172763771,
                          3542330227,
                          48394827,
                          2404901663,
                          2871682645,
                          671593195,
                          3254988725,
                          2073724613,
                          145085239,
                          2280796200,
                          2779915199,
                          1790575107,
                          2187128086,
                          472615631,
                          3029510009,
                          4075877127,
                          3802222185,
                          4107101658,
                          3201631749,
                          1646252340,
                          4270507174,
                          1402811438,
                          1436590835,
                          3778151818,
                          3950355702,
                          3963161475,
                          4020912224,
                          2667994737,
                          273792366,
                          2331590177,
                          104699613,
                          95345982,
                          3175501286,
                          2377486676,
                          1560637892,
                          3564045318,
                          369057872,
                          4213447064,
                          3919042237,
                          1137477952,
                          2658625497,
                          1119727848,
                          2340947849,
                          1530455833,
                          4007360968,
                          172466556,
                          266959938,
                          516552836,
                          0,
                          2256734592,
                          3980931627,
                          1890328081,
                          1917742170,
                          4294704398,
                          945164165,
                          3575528878,
                          958871085,
                          3647212047,
                          2787207260,
                          1423022939,
                          775562294,
                          1739656202,
                          3876557655,
                          2530391278,
                          2443058075,
                          3310321856,
                          547512796,
                          1265195639,
                          437656594,
                          3121275539,
                          719700128,
                          3762502690,
                          387781147,
                          218828297,
                          3350065803,
                          2830708150,
                          2848461854,
                          428169201,
                          122466165,
                          3720081049,
                          1627235199,
                          648017665,
                          4122762354,
                          1002783846,
                          2117360635,
                          695634755,
                          3336358691,
                          4234721005,
                          4049844452,
                          3704280881,
                          2232435299,
                          574624663,
                          287343814,
                          612205898,
                          1039717051,
                          840019705,
                          2708326185,
                          793451934,
                          821288114,
                          1391201670,
                          3822090177,
                          376187827,
                          3113855344,
                          1224348052,
                          1679968233,
                          2361698556,
                          1058709744,
                          752375421,
                          2431590963,
                          1321699145,
                          3519142200,
                          2734591178,
                          188127444,
                          2177869557,
                          3727205754,
                          2384911031,
                          3215212461,
                          2648976442,
                          2450346104,
                          3432737375,
                          1180849278,
                          331544205,
                          3102249176,
                          4150144569,
                          2952102595,
                          2159976285,
                          2474404304,
                          766078933,
                          313773861,
                          2570832044,
                          2108100632,
                          1668212892,
                          3145456443,
                          2013908262,
                          418672217,
                          3070356634,
                          2594734927,
                          1852171925,
                          3867060991,
                          3473416636,
                          3907448597,
                          2614737639,
                          919489135,
                          164948639,
                          2094410160,
                          2997825956,
                          590424639,
                          2486224549,
                          1723872674,
                          3157750862,
                          3399941250,
                          3501252752,
                          3625268135,
                          2555048196,
                          3673637356,
                          1343127501,
                          4130281361,
                          3599595085,
                          2957853679,
                          1297403050,
                          81781910,
                          3051593425,
                          2283490410,
                          532201772,
                          1367295589,
                          3926170974,
                          895287692,
                          1953757831,
                          1093597963,
                          492483431,
                          3528626907,
                          1446242576,
                          1192455638,
                          1636604631,
                          209336225,
                          344873464,
                          1015671571,
                          669961897,
                          3375740769,
                          3857572124,
                          2973530695,
                          3747192018,
                          1933530610,
                          3464042516,
                          935293895,
                          3454686199,
                          2858115069,
                          1863638845,
                          3683022916,
                          4085369519,
                          3292445032,
                          875313188,
                          1080017571,
                          3279033885,
                          621591778,
                          1233856572,
                          2504130317,
                          24197544,
                          3017672716,
                          3835484340,
                          3247465558,
                          2220981195,
                          3060847922,
                          1551124588,
                          1463996600
                      ], _ = [
                          4104605777,
                          1097159550,
                          396673818,
                          660510266,
                          2875968315,
                          2638606623,
                          4200115116,
                          3808662347,
                          821712160,
                          1986918061,
                          3430322568,
                          38544885,
                          3856137295,
                          718002117,
                          893681702,
                          1654886325,
                          2975484382,
                          3122358053,
                          3926825029,
                          4274053469,
                          796197571,
                          1290801793,
                          1184342925,
                          3556361835,
                          2405426947,
                          2459735317,
                          1836772287,
                          1381620373,
                          3196267988,
                          1948373848,
                          3764988233,
                          3385345166,
                          3263785589,
                          2390325492,
                          1480485785,
                          3111247143,
                          3780097726,
                          2293045232,
                          548169417,
                          3459953789,
                          3746175075,
                          439452389,
                          1362321559,
                          1400849762,
                          1685577905,
                          1806599355,
                          2174754046,
                          137073913,
                          1214797936,
                          1174215055,
                          3731654548,
                          2079897426,
                          1943217067,
                          1258480242,
                          529487843,
                          1437280870,
                          3945269170,
                          3049390895,
                          3313212038,
                          923313619,
                          679998e3,
                          3215307299,
                          57326082,
                          377642221,
                          3474729866,
                          2041877159,
                          133361907,
                          1776460110,
                          3673476453,
                          96392454,
                          878845905,
                          2801699524,
                          777231668,
                          4082475170,
                          2330014213,
                          4142626212,
                          2213296395,
                          1626319424,
                          1906247262,
                          1846563261,
                          562755902,
                          3708173718,
                          1040559837,
                          3871163981,
                          1418573201,
                          3294430577,
                          114585348,
                          1343618912,
                          2566595609,
                          3186202582,
                          1078185097,
                          3651041127,
                          3896688048,
                          2307622919,
                          425408743,
                          3371096953,
                          2081048481,
                          1108339068,
                          2216610296,
                          0,
                          2156299017,
                          736970802,
                          292596766,
                          1517440620,
                          251657213,
                          2235061775,
                          2933202493,
                          758720310,
                          265905162,
                          1554391400,
                          1532285339,
                          908999204,
                          174567692,
                          1474760595,
                          4002861748,
                          2610011675,
                          3234156416,
                          3693126241,
                          2001430874,
                          303699484,
                          2478443234,
                          2687165888,
                          585122620,
                          454499602,
                          151849742,
                          2345119218,
                          3064510765,
                          514443284,
                          4044981591,
                          1963412655,
                          2581445614,
                          2137062819,
                          19308535,
                          1928707164,
                          1715193156,
                          4219352155,
                          1126790795,
                          600235211,
                          3992742070,
                          3841024952,
                          836553431,
                          1669664834,
                          2535604243,
                          3323011204,
                          1243905413,
                          3141400786,
                          4180808110,
                          698445255,
                          2653899549,
                          2989552604,
                          2253581325,
                          3252932727,
                          3004591147,
                          1891211689,
                          2487810577,
                          3915653703,
                          4237083816,
                          4030667424,
                          2100090966,
                          865136418,
                          1229899655,
                          953270745,
                          3399679628,
                          3557504664,
                          4118925222,
                          2061379749,
                          3079546586,
                          2915017791,
                          983426092,
                          2022837584,
                          1607244650,
                          2118541908,
                          2366882550,
                          3635996816,
                          972512814,
                          3283088770,
                          1568718495,
                          3499326569,
                          3576539503,
                          621982671,
                          2895723464,
                          410887952,
                          2623762152,
                          1002142683,
                          645401037,
                          1494807662,
                          2595684844,
                          1335535747,
                          2507040230,
                          4293295786,
                          3167684641,
                          367585007,
                          3885750714,
                          1865862730,
                          2668221674,
                          2960971305,
                          2763173681,
                          1059270954,
                          2777952454,
                          2724642869,
                          1320957812,
                          2194319100,
                          2429595872,
                          2815956275,
                          77089521,
                          3973773121,
                          3444575871,
                          2448830231,
                          1305906550,
                          4021308739,
                          2857194700,
                          2516901860,
                          3518358430,
                          1787304780,
                          740276417,
                          1699839814,
                          1592394909,
                          2352307457,
                          2272556026,
                          188821243,
                          1729977011,
                          3687994002,
                          274084841,
                          3594982253,
                          3613494426,
                          2701949495,
                          4162096729,
                          322734571,
                          2837966542,
                          1640576439,
                          484830689,
                          1202797690,
                          3537852828,
                          4067639125,
                          349075736,
                          3342319475,
                          4157467219,
                          4255800159,
                          1030690015,
                          1155237496,
                          2951971274,
                          1757691577,
                          607398968,
                          2738905026,
                          499347990,
                          3794078908,
                          1011452712,
                          227885567,
                          2818666809,
                          213114376,
                          3034881240,
                          1455525988,
                          3414450555,
                          850817237,
                          1817998408,
                          3092726480
                      ], S = [
                          0,
                          235474187,
                          470948374,
                          303765277,
                          941896748,
                          908933415,
                          607530554,
                          708780849,
                          1883793496,
                          2118214995,
                          1817866830,
                          1649639237,
                          1215061108,
                          1181045119,
                          1417561698,
                          1517767529,
                          3767586992,
                          4003061179,
                          4236429990,
                          4069246893,
                          3635733660,
                          3602770327,
                          3299278474,
                          3400528769,
                          2430122216,
                          2664543715,
                          2362090238,
                          2193862645,
                          2835123396,
                          2801107407,
                          3035535058,
                          3135740889,
                          3678124923,
                          3576870512,
                          3341394285,
                          3374361702,
                          3810496343,
                          3977675356,
                          4279080257,
                          4043610186,
                          2876494627,
                          2776292904,
                          3076639029,
                          3110650942,
                          2472011535,
                          2640243204,
                          2403728665,
                          2169303058,
                          1001089995,
                          899835584,
                          666464733,
                          699432150,
                          59727847,
                          226906860,
                          530400753,
                          294930682,
                          1273168787,
                          1172967064,
                          1475418501,
                          1509430414,
                          1942435775,
                          2110667444,
                          1876241833,
                          1641816226,
                          2910219766,
                          2743034109,
                          2976151520,
                          3211623147,
                          2505202138,
                          2606453969,
                          2302690252,
                          2269728455,
                          3711829422,
                          3543599269,
                          3240894392,
                          3475313331,
                          3843699074,
                          3943906441,
                          4178062228,
                          4144047775,
                          1306967366,
                          1139781709,
                          1374988112,
                          1610459739,
                          1975683434,
                          2076935265,
                          1775276924,
                          1742315127,
                          1034867998,
                          866637845,
                          566021896,
                          800440835,
                          92987698,
                          193195065,
                          429456164,
                          395441711,
                          1984812685,
                          2017778566,
                          1784663195,
                          1683407248,
                          1315562145,
                          1080094634,
                          1383856311,
                          1551037884,
                          101039829,
                          135050206,
                          437757123,
                          337553864,
                          1042385657,
                          807962610,
                          573804783,
                          742039012,
                          2531067453,
                          2564033334,
                          2328828971,
                          2227573024,
                          2935566865,
                          2700099354,
                          3001755655,
                          3168937228,
                          3868552805,
                          3902563182,
                          4203181171,
                          4102977912,
                          3736164937,
                          3501741890,
                          3265478751,
                          3433712980,
                          1106041591,
                          1340463100,
                          1576976609,
                          1408749034,
                          2043211483,
                          2009195472,
                          1708848333,
                          1809054150,
                          832877231,
                          1068351396,
                          766945465,
                          599762354,
                          159417987,
                          126454664,
                          361929877,
                          463180190,
                          2709260871,
                          2943682380,
                          3178106961,
                          3009879386,
                          2572697195,
                          2538681184,
                          2236228733,
                          2336434550,
                          3509871135,
                          3745345300,
                          3441850377,
                          3274667266,
                          3910161971,
                          3877198648,
                          4110568485,
                          4211818798,
                          2597806476,
                          2497604743,
                          2261089178,
                          2295101073,
                          2733856160,
                          2902087851,
                          3202437046,
                          2968011453,
                          3936291284,
                          3835036895,
                          4136440770,
                          4169408201,
                          3535486456,
                          3702665459,
                          3467192302,
                          3231722213,
                          2051518780,
                          1951317047,
                          1716890410,
                          1750902305,
                          1113818384,
                          1282050075,
                          1584504582,
                          1350078989,
                          168810852,
                          67556463,
                          371049330,
                          404016761,
                          841739592,
                          1008918595,
                          775550814,
                          540080725,
                          3969562369,
                          3801332234,
                          4035489047,
                          4269907996,
                          3569255213,
                          3669462566,
                          3366754619,
                          3332740144,
                          2631065433,
                          2463879762,
                          2160117071,
                          2395588676,
                          2767645557,
                          2868897406,
                          3102011747,
                          3069049960,
                          202008497,
                          33778362,
                          270040487,
                          504459436,
                          875451293,
                          975658646,
                          675039627,
                          641025152,
                          2084704233,
                          1917518562,
                          1615861247,
                          1851332852,
                          1147550661,
                          1248802510,
                          1484005843,
                          1451044056,
                          933301370,
                          967311729,
                          733156972,
                          632953703,
                          260388950,
                          25965917,
                          328671808,
                          496906059,
                          1206477858,
                          1239443753,
                          1543208500,
                          1441952575,
                          2144161806,
                          1908694277,
                          1675577880,
                          1842759443,
                          3610369226,
                          3644379585,
                          3408119516,
                          3307916247,
                          4011190502,
                          3776767469,
                          4077384432,
                          4245618683,
                          2809771154,
                          2842737049,
                          3144396420,
                          3043140495,
                          2673705150,
                          2438237621,
                          2203032232,
                          2370213795
                      ], E = [
                          0,
                          185469197,
                          370938394,
                          487725847,
                          741876788,
                          657861945,
                          975451694,
                          824852259,
                          1483753576,
                          1400783205,
                          1315723890,
                          1164071807,
                          1950903388,
                          2135319889,
                          1649704518,
                          1767536459,
                          2967507152,
                          3152976349,
                          2801566410,
                          2918353863,
                          2631447780,
                          2547432937,
                          2328143614,
                          2177544179,
                          3901806776,
                          3818836405,
                          4270639778,
                          4118987695,
                          3299409036,
                          3483825537,
                          3535072918,
                          3652904859,
                          2077965243,
                          1893020342,
                          1841768865,
                          1724457132,
                          1474502543,
                          1559041666,
                          1107234197,
                          1257309336,
                          598438867,
                          681933534,
                          901210569,
                          1052338372,
                          261314535,
                          77422314,
                          428819965,
                          310463728,
                          3409685355,
                          3224740454,
                          3710368113,
                          3593056380,
                          3875770207,
                          3960309330,
                          4045380933,
                          4195456072,
                          2471224067,
                          2554718734,
                          2237133081,
                          2388260884,
                          3212035895,
                          3028143674,
                          2842678573,
                          2724322336,
                          4138563181,
                          4255350624,
                          3769721975,
                          3955191162,
                          3667219033,
                          3516619604,
                          3431546947,
                          3347532110,
                          2933734917,
                          2782082824,
                          3099667487,
                          3016697106,
                          2196052529,
                          2313884476,
                          2499348523,
                          2683765030,
                          1179510461,
                          1296297904,
                          1347548327,
                          1533017514,
                          1786102409,
                          1635502980,
                          2087309459,
                          2003294622,
                          507358933,
                          355706840,
                          136428751,
                          53458370,
                          839224033,
                          957055980,
                          605657339,
                          790073846,
                          2373340630,
                          2256028891,
                          2607439820,
                          2422494913,
                          2706270690,
                          2856345839,
                          3075636216,
                          3160175349,
                          3573941694,
                          3725069491,
                          3273267108,
                          3356761769,
                          4181598602,
                          4063242375,
                          4011996048,
                          3828103837,
                          1033297158,
                          915985419,
                          730517276,
                          545572369,
                          296679730,
                          446754879,
                          129166120,
                          213705253,
                          1709610350,
                          1860738147,
                          1945798516,
                          2029293177,
                          1239331162,
                          1120974935,
                          1606591296,
                          1422699085,
                          4148292826,
                          4233094615,
                          3781033664,
                          3931371469,
                          3682191598,
                          3497509347,
                          3446004468,
                          3328955385,
                          2939266226,
                          2755636671,
                          3106780840,
                          2988687269,
                          2198438022,
                          2282195339,
                          2501218972,
                          2652609425,
                          1201765386,
                          1286567175,
                          1371368976,
                          1521706781,
                          1805211710,
                          1620529459,
                          2105887268,
                          1988838185,
                          533804130,
                          350174575,
                          164439672,
                          46346101,
                          870912086,
                          954669403,
                          636813900,
                          788204353,
                          2358957921,
                          2274680428,
                          2592523643,
                          2441661558,
                          2695033685,
                          2880240216,
                          3065962831,
                          3182487618,
                          3572145929,
                          3756299780,
                          3270937875,
                          3388507166,
                          4174560061,
                          4091327024,
                          4006521127,
                          3854606378,
                          1014646705,
                          930369212,
                          711349675,
                          560487590,
                          272786309,
                          457992840,
                          106852767,
                          223377554,
                          1678381017,
                          1862534868,
                          1914052035,
                          2031621326,
                          1211247597,
                          1128014560,
                          1580087799,
                          1428173050,
                          32283319,
                          182621114,
                          401639597,
                          486441376,
                          768917123,
                          651868046,
                          1003007129,
                          818324884,
                          1503449823,
                          1385356242,
                          1333838021,
                          1150208456,
                          1973745387,
                          2125135846,
                          1673061617,
                          1756818940,
                          2970356327,
                          3120694122,
                          2802849917,
                          2887651696,
                          2637442643,
                          2520393566,
                          2334669897,
                          2149987652,
                          3917234703,
                          3799141122,
                          4284502037,
                          4100872472,
                          3309594171,
                          3460984630,
                          3545789473,
                          3629546796,
                          2050466060,
                          1899603969,
                          1814803222,
                          1730525723,
                          1443857720,
                          1560382517,
                          1075025698,
                          1260232239,
                          575138148,
                          692707433,
                          878443390,
                          1062597235,
                          243256656,
                          91341917,
                          409198410,
                          325965383,
                          3403100636,
                          3252238545,
                          3704300486,
                          3620022987,
                          3874428392,
                          3990953189,
                          4042459122,
                          4227665663,
                          2460449204,
                          2578018489,
                          2226875310,
                          2411029155,
                          3198115200,
                          3046200461,
                          2827177882,
                          2743944855
                      ], k = [
                          0,
                          218828297,
                          437656594,
                          387781147,
                          875313188,
                          958871085,
                          775562294,
                          590424639,
                          1750626376,
                          1699970625,
                          1917742170,
                          2135253587,
                          1551124588,
                          1367295589,
                          1180849278,
                          1265195639,
                          3501252752,
                          3720081049,
                          3399941250,
                          3350065803,
                          3835484340,
                          3919042237,
                          4270507174,
                          4085369519,
                          3102249176,
                          3051593425,
                          2734591178,
                          2952102595,
                          2361698556,
                          2177869557,
                          2530391278,
                          2614737639,
                          3145456443,
                          3060847922,
                          2708326185,
                          2892417312,
                          2404901663,
                          2187128086,
                          2504130317,
                          2555048196,
                          3542330227,
                          3727205754,
                          3375740769,
                          3292445032,
                          3876557655,
                          3926170974,
                          4246310725,
                          4027744588,
                          1808481195,
                          1723872674,
                          1910319033,
                          2094410160,
                          1608975247,
                          1391201670,
                          1173430173,
                          1224348052,
                          59984867,
                          244860394,
                          428169201,
                          344873464,
                          935293895,
                          984907214,
                          766078933,
                          547512796,
                          1844882806,
                          1627235199,
                          2011214180,
                          2062270317,
                          1507497298,
                          1423022939,
                          1137477952,
                          1321699145,
                          95345982,
                          145085239,
                          532201772,
                          313773861,
                          830661914,
                          1015671571,
                          731183368,
                          648017665,
                          3175501286,
                          2957853679,
                          2807058932,
                          2858115069,
                          2305455554,
                          2220981195,
                          2474404304,
                          2658625497,
                          3575528878,
                          3625268135,
                          3473416636,
                          3254988725,
                          3778151818,
                          3963161475,
                          4213447064,
                          4130281361,
                          3599595085,
                          3683022916,
                          3432737375,
                          3247465558,
                          3802222185,
                          4020912224,
                          4172763771,
                          4122762354,
                          3201631749,
                          3017672716,
                          2764249623,
                          2848461854,
                          2331590177,
                          2280796200,
                          2431590963,
                          2648976442,
                          104699613,
                          188127444,
                          472615631,
                          287343814,
                          840019705,
                          1058709744,
                          671593195,
                          621591778,
                          1852171925,
                          1668212892,
                          1953757831,
                          2037970062,
                          1514790577,
                          1463996600,
                          1080017571,
                          1297403050,
                          3673637356,
                          3623636965,
                          3235995134,
                          3454686199,
                          4007360968,
                          3822090177,
                          4107101658,
                          4190530515,
                          2997825956,
                          3215212461,
                          2830708150,
                          2779915199,
                          2256734592,
                          2340947849,
                          2627016082,
                          2443058075,
                          172466556,
                          122466165,
                          273792366,
                          492483431,
                          1047239e3,
                          861968209,
                          612205898,
                          695634755,
                          1646252340,
                          1863638845,
                          2013908262,
                          1963115311,
                          1446242576,
                          1530455833,
                          1277555970,
                          1093597963,
                          1636604631,
                          1820824798,
                          2073724613,
                          1989249228,
                          1436590835,
                          1487645946,
                          1337376481,
                          1119727848,
                          164948639,
                          81781910,
                          331544205,
                          516552836,
                          1039717051,
                          821288114,
                          669961897,
                          719700128,
                          2973530695,
                          3157750862,
                          2871682645,
                          2787207260,
                          2232435299,
                          2283490410,
                          2667994737,
                          2450346104,
                          3647212047,
                          3564045318,
                          3279033885,
                          3464042516,
                          3980931627,
                          3762502690,
                          4150144569,
                          4199882800,
                          3070356634,
                          3121275539,
                          2904027272,
                          2686254721,
                          2200818878,
                          2384911031,
                          2570832044,
                          2486224549,
                          3747192018,
                          3528626907,
                          3310321856,
                          3359936201,
                          3950355702,
                          3867060991,
                          4049844452,
                          4234721005,
                          1739656202,
                          1790575107,
                          2108100632,
                          1890328081,
                          1402811438,
                          1586903591,
                          1233856572,
                          1149249077,
                          266959938,
                          48394827,
                          369057872,
                          418672217,
                          1002783846,
                          919489135,
                          567498868,
                          752375421,
                          209336225,
                          24197544,
                          376187827,
                          459744698,
                          945164165,
                          895287692,
                          574624663,
                          793451934,
                          1679968233,
                          1764313568,
                          2117360635,
                          1933530610,
                          1343127501,
                          1560637892,
                          1243112415,
                          1192455638,
                          3704280881,
                          3519142200,
                          3336358691,
                          3419915562,
                          3907448597,
                          3857572124,
                          4075877127,
                          4294704398,
                          3029510009,
                          3113855344,
                          2927934315,
                          2744104290,
                          2159976285,
                          2377486676,
                          2594734927,
                          2544078150
                      ], A = [
                          0,
                          151849742,
                          303699484,
                          454499602,
                          607398968,
                          758720310,
                          908999204,
                          1059270954,
                          1214797936,
                          1097159550,
                          1517440620,
                          1400849762,
                          1817998408,
                          1699839814,
                          2118541908,
                          2001430874,
                          2429595872,
                          2581445614,
                          2194319100,
                          2345119218,
                          3034881240,
                          3186202582,
                          2801699524,
                          2951971274,
                          3635996816,
                          3518358430,
                          3399679628,
                          3283088770,
                          4237083816,
                          4118925222,
                          4002861748,
                          3885750714,
                          1002142683,
                          850817237,
                          698445255,
                          548169417,
                          529487843,
                          377642221,
                          227885567,
                          77089521,
                          1943217067,
                          2061379749,
                          1640576439,
                          1757691577,
                          1474760595,
                          1592394909,
                          1174215055,
                          1290801793,
                          2875968315,
                          2724642869,
                          3111247143,
                          2960971305,
                          2405426947,
                          2253581325,
                          2638606623,
                          2487810577,
                          3808662347,
                          3926825029,
                          4044981591,
                          4162096729,
                          3342319475,
                          3459953789,
                          3576539503,
                          3693126241,
                          1986918061,
                          2137062819,
                          1685577905,
                          1836772287,
                          1381620373,
                          1532285339,
                          1078185097,
                          1229899655,
                          1040559837,
                          923313619,
                          740276417,
                          621982671,
                          439452389,
                          322734571,
                          137073913,
                          19308535,
                          3871163981,
                          4021308739,
                          4104605777,
                          4255800159,
                          3263785589,
                          3414450555,
                          3499326569,
                          3651041127,
                          2933202493,
                          2815956275,
                          3167684641,
                          3049390895,
                          2330014213,
                          2213296395,
                          2566595609,
                          2448830231,
                          1305906550,
                          1155237496,
                          1607244650,
                          1455525988,
                          1776460110,
                          1626319424,
                          2079897426,
                          1928707164,
                          96392454,
                          213114376,
                          396673818,
                          514443284,
                          562755902,
                          679998e3,
                          865136418,
                          983426092,
                          3708173718,
                          3557504664,
                          3474729866,
                          3323011204,
                          4180808110,
                          4030667424,
                          3945269170,
                          3794078908,
                          2507040230,
                          2623762152,
                          2272556026,
                          2390325492,
                          2975484382,
                          3092726480,
                          2738905026,
                          2857194700,
                          3973773121,
                          3856137295,
                          4274053469,
                          4157467219,
                          3371096953,
                          3252932727,
                          3673476453,
                          3556361835,
                          2763173681,
                          2915017791,
                          3064510765,
                          3215307299,
                          2156299017,
                          2307622919,
                          2459735317,
                          2610011675,
                          2081048481,
                          1963412655,
                          1846563261,
                          1729977011,
                          1480485785,
                          1362321559,
                          1243905413,
                          1126790795,
                          878845905,
                          1030690015,
                          645401037,
                          796197571,
                          274084841,
                          425408743,
                          38544885,
                          188821243,
                          3613494426,
                          3731654548,
                          3313212038,
                          3430322568,
                          4082475170,
                          4200115116,
                          3780097726,
                          3896688048,
                          2668221674,
                          2516901860,
                          2366882550,
                          2216610296,
                          3141400786,
                          2989552604,
                          2837966542,
                          2687165888,
                          1202797690,
                          1320957812,
                          1437280870,
                          1554391400,
                          1669664834,
                          1787304780,
                          1906247262,
                          2022837584,
                          265905162,
                          114585348,
                          499347990,
                          349075736,
                          736970802,
                          585122620,
                          972512814,
                          821712160,
                          2595684844,
                          2478443234,
                          2293045232,
                          2174754046,
                          3196267988,
                          3079546586,
                          2895723464,
                          2777952454,
                          3537852828,
                          3687994002,
                          3234156416,
                          3385345166,
                          4142626212,
                          4293295786,
                          3841024952,
                          3992742070,
                          174567692,
                          57326082,
                          410887952,
                          292596766,
                          777231668,
                          660510266,
                          1011452712,
                          893681702,
                          1108339068,
                          1258480242,
                          1343618912,
                          1494807662,
                          1715193156,
                          1865862730,
                          1948373848,
                          2100090966,
                          2701949495,
                          2818666809,
                          3004591147,
                          3122358053,
                          2235061775,
                          2352307457,
                          2535604243,
                          2653899549,
                          3915653703,
                          3764988233,
                          4219352155,
                          4067639125,
                          3444575871,
                          3294430577,
                          3746175075,
                          3594982253,
                          836553431,
                          953270745,
                          600235211,
                          718002117,
                          367585007,
                          484830689,
                          133361907,
                          251657213,
                          2041877159,
                          1891211689,
                          1806599355,
                          1654886325,
                          1568718495,
                          1418573201,
                          1335535747,
                          1184342925
                      ];
                      function P(e) {
                          for(var t = [], r = 0; r < e.length; r += 4)t.push(e[r] << 24 | e[r + 1] << 16 | e[r + 2] << 8 | e[r + 3]);
                          return t;
                      }
                      var N = function(e) {
                          if (!(this instanceof N)) throw Error("AES must be instanitated with `new`");
                          Object.defineProperty(this, "key", {
                              value: i(e, !0)
                          }), this._prepare();
                      };
                      N.prototype._prepare = function() {
                          var e = c[this.key.length];
                          if (null == e) throw new Error("invalid key size (must be 16, 24 or 32 bytes)");
                          this._Ke = [], this._Kd = [];
                          for(var t = 0; t <= e; t++)this._Ke.push([
                              0,
                              0,
                              0,
                              0
                          ]), this._Kd.push([
                              0,
                              0,
                              0,
                              0
                          ]);
                          var r, n = 4 * (e + 1), i = this.key.length / 4, o = P(this.key);
                          for(t = 0; t < i; t++)r = t >> 2, this._Ke[r][t % 4] = o[t], this._Kd[e - r][t % 4] = o[t];
                          for(var s, a = 0, l = i; l < n;){
                              if (s = o[i - 1], o[0] ^= h[s >> 16 & 255] << 24 ^ h[s >> 8 & 255] << 16 ^ h[255 & s] << 8 ^ h[s >> 24 & 255] ^ d[a] << 24, a += 1, 8 != i) for(t = 1; t < i; t++)o[t] ^= o[t - 1];
                              else {
                                  for(t = 1; t < i / 2; t++)o[t] ^= o[t - 1];
                                  for(s = o[i / 2 - 1], o[i / 2] ^= h[255 & s] ^ h[s >> 8 & 255] << 8 ^ h[s >> 16 & 255] << 16 ^ h[s >> 24 & 255] << 24, t = i / 2 + 1; t < i; t++)o[t] ^= o[t - 1];
                              }
                              for(t = 0; t < i && l < n;)u = l >> 2, f = l % 4, this._Ke[u][f] = o[t], this._Kd[e - u][f] = o[t++], l++;
                          }
                          for(var u = 1; u < e; u++)for(var f = 0; f < 4; f++)s = this._Kd[u][f], this._Kd[u][f] = S[s >> 24 & 255] ^ E[s >> 16 & 255] ^ k[s >> 8 & 255] ^ A[255 & s];
                      }, N.prototype.encrypt = function(e) {
                          if (16 != e.length) throw new Error("invalid plaintext size (must be 16 bytes)");
                          for(var t = this._Ke.length - 1, r = [
                              0,
                              0,
                              0,
                              0
                          ], n = P(e), i = 0; i < 4; i++)n[i] ^= this._Ke[0][i];
                          for(var s = 1; s < t; s++){
                              for(i = 0; i < 4; i++)r[i] = p[n[i] >> 24 & 255] ^ m[n[(i + 1) % 4] >> 16 & 255] ^ y[n[(i + 2) % 4] >> 8 & 255] ^ g[255 & n[(i + 3) % 4]] ^ this._Ke[s][i];
                              n = r.slice();
                          }
                          var a, l = o(16);
                          for(i = 0; i < 4; i++)a = this._Ke[t][i], l[4 * i] = 255 & (h[n[i] >> 24 & 255] ^ a >> 24), l[4 * i + 1] = 255 & (h[n[(i + 1) % 4] >> 16 & 255] ^ a >> 16), l[4 * i + 2] = 255 & (h[n[(i + 2) % 4] >> 8 & 255] ^ a >> 8), l[4 * i + 3] = 255 & (h[255 & n[(i + 3) % 4]] ^ a);
                          return l;
                      }, N.prototype.decrypt = function(e) {
                          if (16 != e.length) throw new Error("invalid ciphertext size (must be 16 bytes)");
                          for(var t = this._Kd.length - 1, r = [
                              0,
                              0,
                              0,
                              0
                          ], n = P(e), i = 0; i < 4; i++)n[i] ^= this._Kd[0][i];
                          for(var s = 1; s < t; s++){
                              for(i = 0; i < 4; i++)r[i] = v[n[i] >> 24 & 255] ^ b[n[(i + 3) % 4] >> 16 & 255] ^ w[n[(i + 2) % 4] >> 8 & 255] ^ _[255 & n[(i + 1) % 4]] ^ this._Kd[s][i];
                              n = r.slice();
                          }
                          var a, l = o(16);
                          for(i = 0; i < 4; i++)a = this._Kd[t][i], l[4 * i] = 255 & (f[n[i] >> 24 & 255] ^ a >> 24), l[4 * i + 1] = 255 & (f[n[(i + 3) % 4] >> 16 & 255] ^ a >> 16), l[4 * i + 2] = 255 & (f[n[(i + 2) % 4] >> 8 & 255] ^ a >> 8), l[4 * i + 3] = 255 & (f[255 & n[(i + 1) % 4]] ^ a);
                          return l;
                      };
                      var C = function(e) {
                          if (!(this instanceof C)) throw Error("AES must be instanitated with `new`");
                          this.description = "Electronic Code Block", this.name = "ecb", this._aes = new N(e);
                      };
                      C.prototype.encrypt = function(e) {
                          if ((e = i(e)).length % 16 != 0) throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
                          for(var t = o(e.length), r = o(16), n = 0; n < e.length; n += 16)s(e, r, 0, n, n + 16), s(r = this._aes.encrypt(r), t, n);
                          return t;
                      }, C.prototype.decrypt = function(e) {
                          if ((e = i(e)).length % 16 != 0) throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
                          for(var t = o(e.length), r = o(16), n = 0; n < e.length; n += 16)s(e, r, 0, n, n + 16), s(r = this._aes.decrypt(r), t, n);
                          return t;
                      };
                      var x = function(e, t) {
                          if (!(this instanceof x)) throw Error("AES must be instanitated with `new`");
                          if (this.description = "Cipher Block Chaining", this.name = "cbc", t) {
                              if (16 != t.length) throw new Error("invalid initialation vector size (must be 16 bytes)");
                          } else t = o(16);
                          this._lastCipherblock = i(t, !0), this._aes = new N(e);
                      };
                      x.prototype.encrypt = function(e) {
                          if ((e = i(e)).length % 16 != 0) throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
                          for(var t = o(e.length), r = o(16), n = 0; n < e.length; n += 16){
                              s(e, r, 0, n, n + 16);
                              for(var a = 0; a < 16; a++)r[a] ^= this._lastCipherblock[a];
                              this._lastCipherblock = this._aes.encrypt(r), s(this._lastCipherblock, t, n);
                          }
                          return t;
                      }, x.prototype.decrypt = function(e) {
                          if ((e = i(e)).length % 16 != 0) throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
                          for(var t = o(e.length), r = o(16), n = 0; n < e.length; n += 16){
                              s(e, r, 0, n, n + 16), r = this._aes.decrypt(r);
                              for(var a = 0; a < 16; a++)t[n + a] = r[a] ^ this._lastCipherblock[a];
                              s(e, this._lastCipherblock, 0, n, n + 16);
                          }
                          return t;
                      };
                      var T = function(e, t, r) {
                          if (!(this instanceof T)) throw Error("AES must be instanitated with `new`");
                          if (this.description = "Cipher Feedback", this.name = "cfb", t) {
                              if (16 != t.length) throw new Error("invalid initialation vector size (must be 16 size)");
                          } else t = o(16);
                          r || (r = 1), this.segmentSize = r, this._shiftRegister = i(t, !0), this._aes = new N(e);
                      };
                      T.prototype.encrypt = function(e) {
                          if (e.length % this.segmentSize != 0) throw new Error("invalid plaintext size (must be segmentSize bytes)");
                          for(var t, r = i(e, !0), n = 0; n < r.length; n += this.segmentSize){
                              t = this._aes.encrypt(this._shiftRegister);
                              for(var o = 0; o < this.segmentSize; o++)r[n + o] ^= t[o];
                              s(this._shiftRegister, this._shiftRegister, 0, this.segmentSize), s(r, this._shiftRegister, 16 - this.segmentSize, n, n + this.segmentSize);
                          }
                          return r;
                      }, T.prototype.decrypt = function(e) {
                          if (e.length % this.segmentSize != 0) throw new Error("invalid ciphertext size (must be segmentSize bytes)");
                          for(var t, r = i(e, !0), n = 0; n < r.length; n += this.segmentSize){
                              t = this._aes.encrypt(this._shiftRegister);
                              for(var o = 0; o < this.segmentSize; o++)r[n + o] ^= t[o];
                              s(this._shiftRegister, this._shiftRegister, 0, this.segmentSize), s(e, this._shiftRegister, 16 - this.segmentSize, n, n + this.segmentSize);
                          }
                          return r;
                      };
                      var R = function(e, t) {
                          if (!(this instanceof R)) throw Error("AES must be instanitated with `new`");
                          if (this.description = "Output Feedback", this.name = "ofb", t) {
                              if (16 != t.length) throw new Error("invalid initialation vector size (must be 16 bytes)");
                          } else t = o(16);
                          this._lastPrecipher = i(t, !0), this._lastPrecipherIndex = 16, this._aes = new N(e);
                      };
                      R.prototype.encrypt = function(e) {
                          for(var t = i(e, !0), r = 0; r < t.length; r++)16 === this._lastPrecipherIndex && (this._lastPrecipher = this._aes.encrypt(this._lastPrecipher), this._lastPrecipherIndex = 0), t[r] ^= this._lastPrecipher[this._lastPrecipherIndex++];
                          return t;
                      }, R.prototype.decrypt = R.prototype.encrypt;
                      var O = function(e) {
                          if (!(this instanceof O)) throw Error("Counter must be instanitated with `new`");
                          0 === e || e || (e = 1), "number" == typeof e ? (this._counter = o(16), this.setValue(e)) : this.setBytes(e);
                      };
                      O.prototype.setValue = function(e) {
                          if ("number" != typeof e || parseInt(e) != e) throw new Error("invalid counter value (must be an integer)");
                          for(var t = 15; t >= 0; --t)this._counter[t] = e % 256, e >>= 8;
                      }, O.prototype.setBytes = function(e) {
                          if (16 != (e = i(e, !0)).length) throw new Error("invalid counter bytes size (must be 16 bytes)");
                          this._counter = e;
                      }, O.prototype.increment = function() {
                          for(var e = 15; e >= 0; e--){
                              if (255 !== this._counter[e]) {
                                  this._counter[e]++;
                                  break;
                              }
                              this._counter[e] = 0;
                          }
                      };
                      var B = function(e, t) {
                          if (!(this instanceof B)) throw Error("AES must be instanitated with `new`");
                          this.description = "Counter", this.name = "ctr", t instanceof O || (t = new O(t)), this._counter = t, this._remainingCounter = null, this._remainingCounterIndex = 16, this._aes = new N(e);
                      };
                      B.prototype.encrypt = function(e) {
                          for(var t = i(e, !0), r = 0; r < t.length; r++)16 === this._remainingCounterIndex && (this._remainingCounter = this._aes.encrypt(this._counter._counter), this._remainingCounterIndex = 0, this._counter.increment()), t[r] ^= this._remainingCounter[this._remainingCounterIndex++];
                          return t;
                      }, B.prototype.decrypt = B.prototype.encrypt;
                      var I = {
                          AES: N,
                          Counter: O,
                          ModeOfOperation: {
                              ecb: C,
                              cbc: x,
                              cfb: T,
                              ofb: R,
                              ctr: B
                          },
                          utils: {
                              hex: u,
                              utf8: l
                          },
                          padding: {
                              pkcs7: {
                                  pad: function(e) {
                                      var t = 16 - (e = i(e, !0)).length % 16, r = o(e.length + t);
                                      s(e, r);
                                      for(var n = e.length; n < r.length; n++)r[n] = t;
                                      return r;
                                  },
                                  strip: function(e) {
                                      if ((e = i(e, !0)).length < 16) throw new Error("PKCS#7 invalid length");
                                      var t = e[e.length - 1];
                                      if (t > 16) throw new Error("PKCS#7 padding byte out of range");
                                      for(var r = e.length - t, n = 0; n < t; n++)if (e[r + n] !== t) throw new Error("PKCS#7 invalid padding byte");
                                      var a = o(r);
                                      return s(e, a, 0, 0, r), a;
                                  }
                              }
                          },
                          _arrayTest: {
                              coerceArray: i,
                              createArray: o,
                              copyArray: s
                          }
                      };
                      e.exports = I;
                  }();
              },
              5078: (e, t, r)=>{
                  "use strict";
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  });
                  var n = r(4778), i = r(2403), o = function() {
                      function e(e) {
                          this._semaphore = new i.default(1, e);
                      }
                      return e.prototype.acquire = function() {
                          return n.__awaiter(this, void 0, void 0, function() {
                              return n.__generator(this, function(e) {
                                  switch(e.label){
                                      case 0:
                                          return [
                                              4,
                                              this._semaphore.acquire()
                                          ];
                                      case 1:
                                          return [
                                              2,
                                              e.sent()[1]
                                          ];
                                  }
                              });
                          });
                      }, e.prototype.runExclusive = function(e) {
                          return this._semaphore.runExclusive(function() {
                              return e();
                          });
                      }, e.prototype.isLocked = function() {
                          return this._semaphore.isLocked();
                      }, e.prototype.waitForUnlock = function() {
                          return this._semaphore.waitForUnlock();
                      }, e.prototype.release = function() {
                          this._semaphore.isLocked() && this._semaphore.release();
                      }, e.prototype.cancel = function() {
                          return this._semaphore.cancel();
                      }, e;
                  }();
                  t.default = o;
              },
              2403: (e, t, r)=>{
                  "use strict";
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  });
                  var n = r(4778), i = r(1764), o = function() {
                      function e(e, t) {
                          void 0 === t && (t = i.E_CANCELED), this._value = e, this._cancelError = t, this._weightedQueues = [], this._weightedWaiters = [];
                      }
                      return e.prototype.acquire = function(e) {
                          var t = this;
                          if (void 0 === e && (e = 1), e <= 0) throw new Error("invalid weight ".concat(e, ": must be positive"));
                          return new Promise(function(r, n) {
                              t._weightedQueues[e - 1] || (t._weightedQueues[e - 1] = []), t._weightedQueues[e - 1].push({
                                  resolve: r,
                                  reject: n
                              }), t._dispatch();
                          });
                      }, e.prototype.runExclusive = function(e, t) {
                          return void 0 === t && (t = 1), n.__awaiter(this, void 0, void 0, function() {
                              var r, i, o;
                              return n.__generator(this, function(n) {
                                  switch(n.label){
                                      case 0:
                                          return [
                                              4,
                                              this.acquire(t)
                                          ];
                                      case 1:
                                          r = n.sent(), i = r[0], o = r[1], n.label = 2;
                                      case 2:
                                          return n.trys.push([
                                              2,
                                              ,
                                              4,
                                              5
                                          ]), [
                                              4,
                                              e(i)
                                          ];
                                      case 3:
                                          return [
                                              2,
                                              n.sent()
                                          ];
                                      case 4:
                                          return o(), [
                                              7
                                          ];
                                      case 5:
                                          return [
                                              2
                                          ];
                                  }
                              });
                          });
                      }, e.prototype.waitForUnlock = function(e) {
                          var t = this;
                          if (void 0 === e && (e = 1), e <= 0) throw new Error("invalid weight ".concat(e, ": must be positive"));
                          return new Promise(function(r) {
                              t._weightedWaiters[e - 1] || (t._weightedWaiters[e - 1] = []), t._weightedWaiters[e - 1].push(r), t._dispatch();
                          });
                      }, e.prototype.isLocked = function() {
                          return this._value <= 0;
                      }, e.prototype.getValue = function() {
                          return this._value;
                      }, e.prototype.setValue = function(e) {
                          this._value = e, this._dispatch();
                      }, e.prototype.release = function(e) {
                          if (void 0 === e && (e = 1), e <= 0) throw new Error("invalid weight ".concat(e, ": must be positive"));
                          this._value += e, this._dispatch();
                      }, e.prototype.cancel = function() {
                          var e = this;
                          this._weightedQueues.forEach(function(t) {
                              return t.forEach(function(t) {
                                  return t.reject(e._cancelError);
                              });
                          }), this._weightedQueues = [];
                      }, e.prototype._dispatch = function() {
                          for(var e, t = this._value; t > 0; t--){
                              var r = null === (e = this._weightedQueues[t - 1]) || void 0 === e ? void 0 : e.shift();
                              if (r) {
                                  var n = this._value, i = t;
                                  this._value -= t, t = this._value + 1, r.resolve([
                                      n,
                                      this._newReleaser(i)
                                  ]);
                              }
                          }
                          this._drainUnlockWaiters();
                      }, e.prototype._newReleaser = function(e) {
                          var t = this, r = !1;
                          return function() {
                              r || (r = !0, t.release(e));
                          };
                      }, e.prototype._drainUnlockWaiters = function() {
                          for(var e = this._value; e > 0; e--)this._weightedWaiters[e - 1] && (this._weightedWaiters[e - 1].forEach(function(e) {
                              return e();
                          }), this._weightedWaiters[e - 1] = []);
                      }, e;
                  }();
                  t.default = o;
              },
              1764: (e, t)=>{
                  "use strict";
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.E_CANCELED = t.E_ALREADY_LOCKED = t.E_TIMEOUT = void 0, t.E_TIMEOUT = new Error("timeout while waiting for mutex to become available"), t.E_ALREADY_LOCKED = new Error("mutex already locked"), t.E_CANCELED = new Error("request for lock canceled");
              },
              8125: (e, t, r)=>{
                  "use strict";
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.tryAcquire = t.withTimeout = t.Semaphore = t.Mutex = void 0;
                  var n = r(4778), i = r(5078);
                  Object.defineProperty(t, "Mutex", {
                      enumerable: !0,
                      get: function() {
                          return i.default;
                      }
                  });
                  var o = r(2403);
                  Object.defineProperty(t, "Semaphore", {
                      enumerable: !0,
                      get: function() {
                          return o.default;
                      }
                  });
                  var s = r(1960);
                  Object.defineProperty(t, "withTimeout", {
                      enumerable: !0,
                      get: function() {
                          return s.withTimeout;
                      }
                  });
                  var a = r(3143);
                  Object.defineProperty(t, "tryAcquire", {
                      enumerable: !0,
                      get: function() {
                          return a.tryAcquire;
                      }
                  }), n.__exportStar(r(1764), t);
              },
              3143: (e, t, r)=>{
                  "use strict";
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.tryAcquire = void 0;
                  var n = r(1764), i = r(1960);
                  t.tryAcquire = function(e, t) {
                      return void 0 === t && (t = n.E_ALREADY_LOCKED), (0, i.withTimeout)(e, 0, t);
                  };
              },
              1960: (e, t, r)=>{
                  "use strict";
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.withTimeout = void 0;
                  var n = r(4778), i = r(1764);
                  t.withTimeout = function(e, t, r) {
                      var o = this;
                      return void 0 === r && (r = i.E_TIMEOUT), {
                          acquire: function(i) {
                              if (void 0 !== i && i <= 0) throw new Error("invalid weight ".concat(i, ": must be positive"));
                              return new Promise(function(s, a) {
                                  return n.__awaiter(o, void 0, void 0, function() {
                                      var o, l, u, c;
                                      return n.__generator(this, function(n) {
                                          switch(n.label){
                                              case 0:
                                                  o = !1, l = setTimeout(function() {
                                                      o = !0, a(r);
                                                  }, t), n.label = 1;
                                              case 1:
                                                  return n.trys.push([
                                                      1,
                                                      3,
                                                      ,
                                                      4
                                                  ]), [
                                                      4,
                                                      e.acquire(i)
                                                  ];
                                              case 2:
                                                  return u = n.sent(), o ? (Array.isArray(u) ? u[1] : u)() : (clearTimeout(l), s(u)), [
                                                      3,
                                                      4
                                                  ];
                                              case 3:
                                                  return c = n.sent(), o || (clearTimeout(l), a(c)), [
                                                      3,
                                                      4
                                                  ];
                                              case 4:
                                                  return [
                                                      2
                                                  ];
                                          }
                                      });
                                  });
                              });
                          },
                          runExclusive: function(e, t) {
                              return n.__awaiter(this, void 0, void 0, function() {
                                  var r, i;
                                  return n.__generator(this, function(n) {
                                      switch(n.label){
                                          case 0:
                                              r = function() {}, n.label = 1;
                                          case 1:
                                              return n.trys.push([
                                                  1,
                                                  ,
                                                  7,
                                                  8
                                              ]), [
                                                  4,
                                                  this.acquire(t)
                                              ];
                                          case 2:
                                              return i = n.sent(), Array.isArray(i) ? (r = i[1], [
                                                  4,
                                                  e(i[0])
                                              ]) : [
                                                  3,
                                                  4
                                              ];
                                          case 3:
                                              return [
                                                  2,
                                                  n.sent()
                                              ];
                                          case 4:
                                              return r = i, [
                                                  4,
                                                  e()
                                              ];
                                          case 5:
                                              return [
                                                  2,
                                                  n.sent()
                                              ];
                                          case 6:
                                              return [
                                                  3,
                                                  8
                                              ];
                                          case 7:
                                              return r(), [
                                                  7
                                              ];
                                          case 8:
                                              return [
                                                  2
                                              ];
                                      }
                                  });
                              });
                          },
                          release: function(t) {
                              e.release(t);
                          },
                          cancel: function() {
                              return e.cancel();
                          },
                          waitForUnlock: function(n) {
                              if (void 0 !== n && n <= 0) throw new Error("invalid weight ".concat(n, ": must be positive"));
                              return new Promise(function(i, o) {
                                  e.waitForUnlock(n).then(i), setTimeout(function() {
                                      return o(r);
                                  }, t);
                              });
                          },
                          isLocked: function() {
                              return e.isLocked();
                          },
                          getValue: function() {
                              return e.getValue();
                          },
                          setValue: function(t) {
                              return e.setValue(t);
                          }
                      };
                  };
              },
              4778: (e, t, r)=>{
                  "use strict";
                  r.r(t), r.d(t, {
                      __extends: ()=>i,
                      __assign: ()=>o,
                      __rest: ()=>s,
                      __decorate: ()=>a,
                      __param: ()=>l,
                      __metadata: ()=>u,
                      __awaiter: ()=>c,
                      __generator: ()=>d,
                      __createBinding: ()=>h,
                      __exportStar: ()=>f,
                      __values: ()=>p,
                      __read: ()=>m,
                      __spread: ()=>y,
                      __spreadArrays: ()=>g,
                      __spreadArray: ()=>v,
                      __await: ()=>b,
                      __asyncGenerator: ()=>w,
                      __asyncDelegator: ()=>_,
                      __asyncValues: ()=>S,
                      __makeTemplateObject: ()=>E,
                      __importStar: ()=>A,
                      __importDefault: ()=>P,
                      __classPrivateFieldGet: ()=>N,
                      __classPrivateFieldSet: ()=>C,
                      __classPrivateFieldIn: ()=>x
                  });
                  var n = function(e, t) {
                      return n = Object.setPrototypeOf || ({
                          __proto__: []
                      }) instanceof Array && function(e, t) {
                          e.__proto__ = t;
                      } || function(e, t) {
                          for(var r in t)Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);
                      }, n(e, t);
                  };
                  function i(e, t) {
                      if ("function" != typeof t && null !== t) throw new TypeError("Class extends value " + String(t) + " is not a constructor or null");
                      function r() {
                          this.constructor = e;
                      }
                      n(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r);
                  }
                  var o = function() {
                      return o = Object.assign || function(e) {
                          for(var t, r = 1, n = arguments.length; r < n; r++)for(var i in t = arguments[r])Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                          return e;
                      }, o.apply(this, arguments);
                  };
                  function s(e, t) {
                      var r = {};
                      for(var n in e)Object.prototype.hasOwnProperty.call(e, n) && t.indexOf(n) < 0 && (r[n] = e[n]);
                      if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
                          var i = 0;
                          for(n = Object.getOwnPropertySymbols(e); i < n.length; i++)t.indexOf(n[i]) < 0 && Object.prototype.propertyIsEnumerable.call(e, n[i]) && (r[n[i]] = e[n[i]]);
                      }
                      return r;
                  }
                  function a(e, t, r, n) {
                      var i, o = arguments.length, s = o < 3 ? t : null === n ? n = Object.getOwnPropertyDescriptor(t, r) : n;
                      if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) s = Reflect.decorate(e, t, r, n);
                      else for(var a = e.length - 1; a >= 0; a--)(i = e[a]) && (s = (o < 3 ? i(s) : o > 3 ? i(t, r, s) : i(t, r)) || s);
                      return o > 3 && s && Object.defineProperty(t, r, s), s;
                  }
                  function l(e, t) {
                      return function(r, n) {
                          t(r, n, e);
                      };
                  }
                  function u(e, t) {
                      if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(e, t);
                  }
                  function c(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  }
                  function d(e, t) {
                      var r, n, i, o, s = {
                          label: 0,
                          sent: function() {
                              if (1 & i[0]) throw i[1];
                              return i[1];
                          },
                          trys: [],
                          ops: []
                      };
                      return o = {
                          next: a(0),
                          throw: a(1),
                          return: a(2)
                      }, "function" == typeof Symbol && (o[Symbol.iterator] = function() {
                          return this;
                      }), o;
                      function a(a) {
                          return function(l) {
                              return function(a) {
                                  if (r) throw new TypeError("Generator is already executing.");
                                  for(; o && (o = 0, a[0] && (s = 0)), s;)try {
                                      if (r = 1, n && (i = 2 & a[0] ? n.return : a[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, a[1])).done) return i;
                                      switch(n = 0, i && (a = [
                                          2 & a[0],
                                          i.value
                                      ]), a[0]){
                                          case 0:
                                          case 1:
                                              i = a;
                                              break;
                                          case 4:
                                              return s.label++, {
                                                  value: a[1],
                                                  done: !1
                                              };
                                          case 5:
                                              s.label++, n = a[1], a = [
                                                  0
                                              ];
                                              continue;
                                          case 7:
                                              a = s.ops.pop(), s.trys.pop();
                                              continue;
                                          default:
                                              if (!((i = (i = s.trys).length > 0 && i[i.length - 1]) || 6 !== a[0] && 2 !== a[0])) {
                                                  s = 0;
                                                  continue;
                                              }
                                              if (3 === a[0] && (!i || a[1] > i[0] && a[1] < i[3])) {
                                                  s.label = a[1];
                                                  break;
                                              }
                                              if (6 === a[0] && s.label < i[1]) {
                                                  s.label = i[1], i = a;
                                                  break;
                                              }
                                              if (i && s.label < i[2]) {
                                                  s.label = i[2], s.ops.push(a);
                                                  break;
                                              }
                                              i[2] && s.ops.pop(), s.trys.pop();
                                              continue;
                                      }
                                      a = t.call(e, s);
                                  } catch (e) {
                                      a = [
                                          6,
                                          e
                                      ], n = 0;
                                  } finally{
                                      r = i = 0;
                                  }
                                  if (5 & a[0]) throw a[1];
                                  return {
                                      value: a[0] ? a[1] : void 0,
                                      done: !0
                                  };
                              }([
                                  a,
                                  l
                              ]);
                          };
                      }
                  }
                  var h = Object.create ? function(e, t, r, n) {
                      void 0 === n && (n = r);
                      var i = Object.getOwnPropertyDescriptor(t, r);
                      i && !("get" in i ? !t.__esModule : i.writable || i.configurable) || (i = {
                          enumerable: !0,
                          get: function() {
                              return t[r];
                          }
                      }), Object.defineProperty(e, n, i);
                  } : function(e, t, r, n) {
                      void 0 === n && (n = r), e[n] = t[r];
                  };
                  function f(e, t) {
                      for(var r in e)"default" === r || Object.prototype.hasOwnProperty.call(t, r) || h(t, e, r);
                  }
                  function p(e) {
                      var t = "function" == typeof Symbol && Symbol.iterator, r = t && e[t], n = 0;
                      if (r) return r.call(e);
                      if (e && "number" == typeof e.length) return {
                          next: function() {
                              return e && n >= e.length && (e = void 0), {
                                  value: e && e[n++],
                                  done: !e
                              };
                          }
                      };
                      throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");
                  }
                  function m(e, t) {
                      var r = "function" == typeof Symbol && e[Symbol.iterator];
                      if (!r) return e;
                      var n, i, o = r.call(e), s = [];
                      try {
                          for(; (void 0 === t || t-- > 0) && !(n = o.next()).done;)s.push(n.value);
                      } catch (e) {
                          i = {
                              error: e
                          };
                      } finally{
                          try {
                              n && !n.done && (r = o.return) && r.call(o);
                          } finally{
                              if (i) throw i.error;
                          }
                      }
                      return s;
                  }
                  function y() {
                      for(var e = [], t = 0; t < arguments.length; t++)e = e.concat(m(arguments[t]));
                      return e;
                  }
                  function g() {
                      for(var e = 0, t = 0, r = arguments.length; t < r; t++)e += arguments[t].length;
                      var n = Array(e), i = 0;
                      for(t = 0; t < r; t++)for(var o = arguments[t], s = 0, a = o.length; s < a; s++, i++)n[i] = o[s];
                      return n;
                  }
                  function v(e, t, r) {
                      if (r || 2 === arguments.length) for(var n, i = 0, o = t.length; i < o; i++)!n && i in t || (n || (n = Array.prototype.slice.call(t, 0, i)), n[i] = t[i]);
                      return e.concat(n || Array.prototype.slice.call(t));
                  }
                  function b(e) {
                      return this instanceof b ? (this.v = e, this) : new b(e);
                  }
                  function w(e, t, r) {
                      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                      var n, i = r.apply(e, t || []), o = [];
                      return n = {}, s("next"), s("throw"), s("return"), n[Symbol.asyncIterator] = function() {
                          return this;
                      }, n;
                      function s(e) {
                          i[e] && (n[e] = function(t) {
                              return new Promise(function(r, n) {
                                  o.push([
                                      e,
                                      t,
                                      r,
                                      n
                                  ]) > 1 || a(e, t);
                              });
                          });
                      }
                      function a(e, t) {
                          try {
                              (r = i[e](t)).value instanceof b ? Promise.resolve(r.value.v).then(l, u) : c(o[0][2], r);
                          } catch (e) {
                              c(o[0][3], e);
                          }
                          var r;
                      }
                      function l(e) {
                          a("next", e);
                      }
                      function u(e) {
                          a("throw", e);
                      }
                      function c(e, t) {
                          e(t), o.shift(), o.length && a(o[0][0], o[0][1]);
                      }
                  }
                  function _(e) {
                      var t, r;
                      return t = {}, n("next"), n("throw", function(e) {
                          throw e;
                      }), n("return"), t[Symbol.iterator] = function() {
                          return this;
                      }, t;
                      function n(n, i) {
                          t[n] = e[n] ? function(t) {
                              return (r = !r) ? {
                                  value: b(e[n](t)),
                                  done: "return" === n
                              } : i ? i(t) : t;
                          } : i;
                      }
                  }
                  function S(e) {
                      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                      var t, r = e[Symbol.asyncIterator];
                      return r ? r.call(e) : (e = p(e), t = {}, n("next"), n("throw"), n("return"), t[Symbol.asyncIterator] = function() {
                          return this;
                      }, t);
                      function n(r) {
                          t[r] = e[r] && function(t) {
                              return new Promise(function(n, i) {
                                  !function(e, t, r, n) {
                                      Promise.resolve(n).then(function(t) {
                                          e({
                                              value: t,
                                              done: r
                                          });
                                      }, t);
                                  }(n, i, (t = e[r](t)).done, t.value);
                              });
                          };
                      }
                  }
                  function E(e, t) {
                      return Object.defineProperty ? Object.defineProperty(e, "raw", {
                          value: t
                      }) : e.raw = t, e;
                  }
                  var k = Object.create ? function(e, t) {
                      Object.defineProperty(e, "default", {
                          enumerable: !0,
                          value: t
                      });
                  } : function(e, t) {
                      e.default = t;
                  };
                  function A(e) {
                      if (e && e.__esModule) return e;
                      var t = {};
                      if (null != e) for(var r in e)"default" !== r && Object.prototype.hasOwnProperty.call(e, r) && h(t, e, r);
                      return k(t, e), t;
                  }
                  function P(e) {
                      return e && e.__esModule ? e : {
                          default: e
                      };
                  }
                  function N(e, t, r, n) {
                      if ("a" === r && !n) throw new TypeError("Private accessor was defined without a getter");
                      if ("function" == typeof t ? e !== t || !n : !t.has(e)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
                      return "m" === r ? n : "a" === r ? n.call(e) : n ? n.value : t.get(e);
                  }
                  function C(e, t, r, n, i) {
                      if ("m" === n) throw new TypeError("Private method is not writable");
                      if ("a" === n && !i) throw new TypeError("Private accessor was defined without a setter");
                      if ("function" == typeof t ? e !== t || !i : !t.has(e)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
                      return "a" === n ? i.call(e, r) : i ? i.value = r : t.set(e, r), r;
                  }
                  function x(e, t) {
                      if (null === t || "object" != typeof t && "function" != typeof t) throw new TypeError("Cannot use 'in' operator on non-object");
                      return "function" == typeof e ? t === e : e.has(t);
                  }
              },
              2882: (e)=>{
                  "use strict";
                  for(var t = "qpzry9x8gf2tvdw0s3jn54khce6mua7l", r = {}, n = 0; n < t.length; n++){
                      var i = t.charAt(n);
                      if (void 0 !== r[i]) throw new TypeError(i + " is ambiguous");
                      r[i] = n;
                  }
                  function o(e) {
                      var t = e >> 25;
                      return (33554431 & e) << 5 ^ 996825010 & -(t >> 0 & 1) ^ 642813549 & -(t >> 1 & 1) ^ 513874426 & -(t >> 2 & 1) ^ 1027748829 & -(t >> 3 & 1) ^ 705979059 & -(t >> 4 & 1);
                  }
                  function s(e) {
                      for(var t = 1, r = 0; r < e.length; ++r){
                          var n = e.charCodeAt(r);
                          if (n < 33 || n > 126) return "Invalid prefix (" + e + ")";
                          t = o(t) ^ n >> 5;
                      }
                      for(t = o(t), r = 0; r < e.length; ++r){
                          var i = e.charCodeAt(r);
                          t = o(t) ^ 31 & i;
                      }
                      return t;
                  }
                  function a(e, t) {
                      if (t = t || 90, e.length < 8) return e + " too short";
                      if (e.length > t) return "Exceeds length limit";
                      var n = e.toLowerCase(), i = e.toUpperCase();
                      if (e !== n && e !== i) return "Mixed-case string " + e;
                      var a = (e = n).lastIndexOf("1");
                      if (-1 === a) return "No separator character for " + e;
                      if (0 === a) return "Missing prefix for " + e;
                      var l = e.slice(0, a), u = e.slice(a + 1);
                      if (u.length < 6) return "Data too short";
                      var c = s(l);
                      if ("string" == typeof c) return c;
                      for(var d = [], h = 0; h < u.length; ++h){
                          var f = u.charAt(h), p = r[f];
                          if (void 0 === p) return "Unknown character " + f;
                          c = o(c) ^ p, h + 6 >= u.length || d.push(p);
                      }
                      return 1 !== c ? "Invalid checksum for " + e : {
                          prefix: l,
                          words: d
                      };
                  }
                  function l(e, t, r, n) {
                      for(var i = 0, o = 0, s = (1 << r) - 1, a = [], l = 0; l < e.length; ++l)for(i = i << t | e[l], o += t; o >= r;)o -= r, a.push(i >> o & s);
                      if (n) o > 0 && a.push(i << r - o & s);
                      else {
                          if (o >= t) return "Excess padding";
                          if (i << r - o & s) return "Non-zero padding";
                      }
                      return a;
                  }
                  e.exports = {
                      decodeUnsafe: function() {
                          var e = a.apply(null, arguments);
                          if ("object" == typeof e) return e;
                      },
                      decode: function(e) {
                          var t = a.apply(null, arguments);
                          if ("object" == typeof t) return t;
                          throw new Error(t);
                      },
                      encode: function(e, r, n) {
                          if (n = n || 90, e.length + 7 + r.length > n) throw new TypeError("Exceeds length limit");
                          var i = s(e = e.toLowerCase());
                          if ("string" == typeof i) throw new Error(i);
                          for(var a = e + "1", l = 0; l < r.length; ++l){
                              var u = r[l];
                              if (u >> 5 != 0) throw new Error("Non 5-bit word");
                              i = o(i) ^ u, a += t.charAt(u);
                          }
                          for(l = 0; l < 6; ++l)i = o(i);
                          for(i ^= 1, l = 0; l < 6; ++l)a += t.charAt(i >> 5 * (5 - l) & 31);
                          return a;
                      },
                      toWordsUnsafe: function(e) {
                          var t = l(e, 8, 5, !0);
                          if (Array.isArray(t)) return t;
                      },
                      toWords: function(e) {
                          var t = l(e, 8, 5, !0);
                          if (Array.isArray(t)) return t;
                          throw new Error(t);
                      },
                      fromWordsUnsafe: function(e) {
                          var t = l(e, 5, 8, !1);
                          if (Array.isArray(t)) return t;
                      },
                      fromWords: function(e) {
                          var t = l(e, 5, 8, !1);
                          if (Array.isArray(t)) return t;
                          throw new Error(t);
                      }
                  };
              },
              3550: function(e, t, r) {
                  !function(e, t) {
                      "use strict";
                      function n(e, t) {
                          if (!e) throw new Error(t || "Assertion failed");
                      }
                      function i(e, t) {
                          e.super_ = t;
                          var r = function() {};
                          r.prototype = t.prototype, e.prototype = new r, e.prototype.constructor = e;
                      }
                      function o(e, t, r) {
                          if (o.isBN(e)) return e;
                          this.negative = 0, this.words = null, this.length = 0, this.red = null, null !== e && ("le" !== t && "be" !== t || (r = t, t = 10), this._init(e || 0, t || 10, r || "be"));
                      }
                      var s;
                      "object" == typeof e ? e.exports = o : t.BN = o, o.BN = o, o.wordSize = 26;
                      try {
                          s = "undefined" != typeof window && void 0 !== window.Buffer ? window.Buffer : r(6601).Buffer;
                      } catch (e) {}
                      function a(e, t) {
                          var r = e.charCodeAt(t);
                          return r >= 65 && r <= 70 ? r - 55 : r >= 97 && r <= 102 ? r - 87 : r - 48 & 15;
                      }
                      function l(e, t, r) {
                          var n = a(e, r);
                          return r - 1 >= t && (n |= a(e, r - 1) << 4), n;
                      }
                      function u(e, t, r, n) {
                          for(var i = 0, o = Math.min(e.length, r), s = t; s < o; s++){
                              var a = e.charCodeAt(s) - 48;
                              i *= n, i += a >= 49 ? a - 49 + 10 : a >= 17 ? a - 17 + 10 : a;
                          }
                          return i;
                      }
                      o.isBN = function(e) {
                          return e instanceof o || null !== e && "object" == typeof e && e.constructor.wordSize === o.wordSize && Array.isArray(e.words);
                      }, o.max = function(e, t) {
                          return e.cmp(t) > 0 ? e : t;
                      }, o.min = function(e, t) {
                          return e.cmp(t) < 0 ? e : t;
                      }, o.prototype._init = function(e, t, r) {
                          if ("number" == typeof e) return this._initNumber(e, t, r);
                          if ("object" == typeof e) return this._initArray(e, t, r);
                          "hex" === t && (t = 16), n(t === (0 | t) && t >= 2 && t <= 36);
                          var i = 0;
                          "-" === (e = e.toString().replace(/\s+/g, ""))[0] && (i++, this.negative = 1), i < e.length && (16 === t ? this._parseHex(e, i, r) : (this._parseBase(e, t, i), "le" === r && this._initArray(this.toArray(), t, r)));
                      }, o.prototype._initNumber = function(e, t, r) {
                          e < 0 && (this.negative = 1, e = -e), e < 67108864 ? (this.words = [
                              67108863 & e
                          ], this.length = 1) : e < 4503599627370496 ? (this.words = [
                              67108863 & e,
                              e / 67108864 & 67108863
                          ], this.length = 2) : (n(e < 9007199254740992), this.words = [
                              67108863 & e,
                              e / 67108864 & 67108863,
                              1
                          ], this.length = 3), "le" === r && this._initArray(this.toArray(), t, r);
                      }, o.prototype._initArray = function(e, t, r) {
                          if (n("number" == typeof e.length), e.length <= 0) return this.words = [
                              0
                          ], this.length = 1, this;
                          this.length = Math.ceil(e.length / 3), this.words = new Array(this.length);
                          for(var i = 0; i < this.length; i++)this.words[i] = 0;
                          var o, s, a = 0;
                          if ("be" === r) for(i = e.length - 1, o = 0; i >= 0; i -= 3)s = e[i] | e[i - 1] << 8 | e[i - 2] << 16, this.words[o] |= s << a & 67108863, this.words[o + 1] = s >>> 26 - a & 67108863, (a += 24) >= 26 && (a -= 26, o++);
                          else if ("le" === r) for(i = 0, o = 0; i < e.length; i += 3)s = e[i] | e[i + 1] << 8 | e[i + 2] << 16, this.words[o] |= s << a & 67108863, this.words[o + 1] = s >>> 26 - a & 67108863, (a += 24) >= 26 && (a -= 26, o++);
                          return this.strip();
                      }, o.prototype._parseHex = function(e, t, r) {
                          this.length = Math.ceil((e.length - t) / 6), this.words = new Array(this.length);
                          for(var n = 0; n < this.length; n++)this.words[n] = 0;
                          var i, o = 0, s = 0;
                          if ("be" === r) for(n = e.length - 1; n >= t; n -= 2)i = l(e, t, n) << o, this.words[s] |= 67108863 & i, o >= 18 ? (o -= 18, s += 1, this.words[s] |= i >>> 26) : o += 8;
                          else for(n = (e.length - t) % 2 == 0 ? t + 1 : t; n < e.length; n += 2)i = l(e, t, n) << o, this.words[s] |= 67108863 & i, o >= 18 ? (o -= 18, s += 1, this.words[s] |= i >>> 26) : o += 8;
                          this.strip();
                      }, o.prototype._parseBase = function(e, t, r) {
                          this.words = [
                              0
                          ], this.length = 1;
                          for(var n = 0, i = 1; i <= 67108863; i *= t)n++;
                          n--, i = i / t | 0;
                          for(var o = e.length - r, s = o % n, a = Math.min(o, o - s) + r, l = 0, c = r; c < a; c += n)l = u(e, c, c + n, t), this.imuln(i), this.words[0] + l < 67108864 ? this.words[0] += l : this._iaddn(l);
                          if (0 !== s) {
                              var d = 1;
                              for(l = u(e, c, e.length, t), c = 0; c < s; c++)d *= t;
                              this.imuln(d), this.words[0] + l < 67108864 ? this.words[0] += l : this._iaddn(l);
                          }
                          this.strip();
                      }, o.prototype.copy = function(e) {
                          e.words = new Array(this.length);
                          for(var t = 0; t < this.length; t++)e.words[t] = this.words[t];
                          e.length = this.length, e.negative = this.negative, e.red = this.red;
                      }, o.prototype.clone = function() {
                          var e = new o(null);
                          return this.copy(e), e;
                      }, o.prototype._expand = function(e) {
                          for(; this.length < e;)this.words[this.length++] = 0;
                          return this;
                      }, o.prototype.strip = function() {
                          for(; this.length > 1 && 0 === this.words[this.length - 1];)this.length--;
                          return this._normSign();
                      }, o.prototype._normSign = function() {
                          return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;
                      }, o.prototype.inspect = function() {
                          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
                      };
                      var c = [
                          "",
                          "0",
                          "00",
                          "000",
                          "0000",
                          "00000",
                          "000000",
                          "0000000",
                          "00000000",
                          "000000000",
                          "0000000000",
                          "00000000000",
                          "000000000000",
                          "0000000000000",
                          "00000000000000",
                          "000000000000000",
                          "0000000000000000",
                          "00000000000000000",
                          "000000000000000000",
                          "0000000000000000000",
                          "00000000000000000000",
                          "000000000000000000000",
                          "0000000000000000000000",
                          "00000000000000000000000",
                          "000000000000000000000000",
                          "0000000000000000000000000"
                      ], d = [
                          0,
                          0,
                          25,
                          16,
                          12,
                          11,
                          10,
                          9,
                          8,
                          8,
                          7,
                          7,
                          7,
                          7,
                          6,
                          6,
                          6,
                          6,
                          6,
                          6,
                          6,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5
                      ], h = [
                          0,
                          0,
                          33554432,
                          43046721,
                          16777216,
                          48828125,
                          60466176,
                          40353607,
                          16777216,
                          43046721,
                          1e7,
                          19487171,
                          35831808,
                          62748517,
                          7529536,
                          11390625,
                          16777216,
                          24137569,
                          34012224,
                          47045881,
                          64e6,
                          4084101,
                          5153632,
                          6436343,
                          7962624,
                          9765625,
                          11881376,
                          14348907,
                          17210368,
                          20511149,
                          243e5,
                          28629151,
                          33554432,
                          39135393,
                          45435424,
                          52521875,
                          60466176
                      ];
                      function f(e, t, r) {
                          r.negative = t.negative ^ e.negative;
                          var n = e.length + t.length | 0;
                          r.length = n, n = n - 1 | 0;
                          var i = 0 | e.words[0], o = 0 | t.words[0], s = i * o, a = 67108863 & s, l = s / 67108864 | 0;
                          r.words[0] = a;
                          for(var u = 1; u < n; u++){
                              for(var c = l >>> 26, d = 67108863 & l, h = Math.min(u, t.length - 1), f = Math.max(0, u - e.length + 1); f <= h; f++){
                                  var p = u - f | 0;
                                  c += (s = (i = 0 | e.words[p]) * (o = 0 | t.words[f]) + d) / 67108864 | 0, d = 67108863 & s;
                              }
                              r.words[u] = 0 | d, l = 0 | c;
                          }
                          return 0 !== l ? r.words[u] = 0 | l : r.length--, r.strip();
                      }
                      o.prototype.toString = function(e, t) {
                          var r;
                          if (t = 0 | t || 1, 16 === (e = e || 10) || "hex" === e) {
                              r = "";
                              for(var i = 0, o = 0, s = 0; s < this.length; s++){
                                  var a = this.words[s], l = (16777215 & (a << i | o)).toString(16);
                                  r = 0 != (o = a >>> 24 - i & 16777215) || s !== this.length - 1 ? c[6 - l.length] + l + r : l + r, (i += 2) >= 26 && (i -= 26, s--);
                              }
                              for(0 !== o && (r = o.toString(16) + r); r.length % t != 0;)r = "0" + r;
                              return 0 !== this.negative && (r = "-" + r), r;
                          }
                          if (e === (0 | e) && e >= 2 && e <= 36) {
                              var u = d[e], f = h[e];
                              r = "";
                              var p = this.clone();
                              for(p.negative = 0; !p.isZero();){
                                  var m = p.modn(f).toString(e);
                                  r = (p = p.idivn(f)).isZero() ? m + r : c[u - m.length] + m + r;
                              }
                              for(this.isZero() && (r = "0" + r); r.length % t != 0;)r = "0" + r;
                              return 0 !== this.negative && (r = "-" + r), r;
                          }
                          n(!1, "Base should be between 2 and 36");
                      }, o.prototype.toNumber = function() {
                          var e = this.words[0];
                          return 2 === this.length ? e += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? e += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && n(!1, "Number can only safely store up to 53 bits"), 0 !== this.negative ? -e : e;
                      }, o.prototype.toJSON = function() {
                          return this.toString(16);
                      }, o.prototype.toBuffer = function(e, t) {
                          return n(void 0 !== s), this.toArrayLike(s, e, t);
                      }, o.prototype.toArray = function(e, t) {
                          return this.toArrayLike(Array, e, t);
                      }, o.prototype.toArrayLike = function(e, t, r) {
                          var i = this.byteLength(), o = r || Math.max(1, i);
                          n(i <= o, "byte array longer than desired length"), n(o > 0, "Requested array length <= 0"), this.strip();
                          var s, a, l = "le" === t, u = new e(o), c = this.clone();
                          if (l) {
                              for(a = 0; !c.isZero(); a++)s = c.andln(255), c.iushrn(8), u[a] = s;
                              for(; a < o; a++)u[a] = 0;
                          } else {
                              for(a = 0; a < o - i; a++)u[a] = 0;
                              for(a = 0; !c.isZero(); a++)s = c.andln(255), c.iushrn(8), u[o - a - 1] = s;
                          }
                          return u;
                      }, Math.clz32 ? o.prototype._countBits = function(e) {
                          return 32 - Math.clz32(e);
                      } : o.prototype._countBits = function(e) {
                          var t = e, r = 0;
                          return t >= 4096 && (r += 13, t >>>= 13), t >= 64 && (r += 7, t >>>= 7), t >= 8 && (r += 4, t >>>= 4), t >= 2 && (r += 2, t >>>= 2), r + t;
                      }, o.prototype._zeroBits = function(e) {
                          if (0 === e) return 26;
                          var t = e, r = 0;
                          return 0 == (8191 & t) && (r += 13, t >>>= 13), 0 == (127 & t) && (r += 7, t >>>= 7), 0 == (15 & t) && (r += 4, t >>>= 4), 0 == (3 & t) && (r += 2, t >>>= 2), 0 == (1 & t) && r++, r;
                      }, o.prototype.bitLength = function() {
                          var e = this.words[this.length - 1], t = this._countBits(e);
                          return 26 * (this.length - 1) + t;
                      }, o.prototype.zeroBits = function() {
                          if (this.isZero()) return 0;
                          for(var e = 0, t = 0; t < this.length; t++){
                              var r = this._zeroBits(this.words[t]);
                              if (e += r, 26 !== r) break;
                          }
                          return e;
                      }, o.prototype.byteLength = function() {
                          return Math.ceil(this.bitLength() / 8);
                      }, o.prototype.toTwos = function(e) {
                          return 0 !== this.negative ? this.abs().inotn(e).iaddn(1) : this.clone();
                      }, o.prototype.fromTwos = function(e) {
                          return this.testn(e - 1) ? this.notn(e).iaddn(1).ineg() : this.clone();
                      }, o.prototype.isNeg = function() {
                          return 0 !== this.negative;
                      }, o.prototype.neg = function() {
                          return this.clone().ineg();
                      }, o.prototype.ineg = function() {
                          return this.isZero() || (this.negative ^= 1), this;
                      }, o.prototype.iuor = function(e) {
                          for(; this.length < e.length;)this.words[this.length++] = 0;
                          for(var t = 0; t < e.length; t++)this.words[t] = this.words[t] | e.words[t];
                          return this.strip();
                      }, o.prototype.ior = function(e) {
                          return n(0 == (this.negative | e.negative)), this.iuor(e);
                      }, o.prototype.or = function(e) {
                          return this.length > e.length ? this.clone().ior(e) : e.clone().ior(this);
                      }, o.prototype.uor = function(e) {
                          return this.length > e.length ? this.clone().iuor(e) : e.clone().iuor(this);
                      }, o.prototype.iuand = function(e) {
                          var t;
                          t = this.length > e.length ? e : this;
                          for(var r = 0; r < t.length; r++)this.words[r] = this.words[r] & e.words[r];
                          return this.length = t.length, this.strip();
                      }, o.prototype.iand = function(e) {
                          return n(0 == (this.negative | e.negative)), this.iuand(e);
                      }, o.prototype.and = function(e) {
                          return this.length > e.length ? this.clone().iand(e) : e.clone().iand(this);
                      }, o.prototype.uand = function(e) {
                          return this.length > e.length ? this.clone().iuand(e) : e.clone().iuand(this);
                      }, o.prototype.iuxor = function(e) {
                          var t, r;
                          this.length > e.length ? (t = this, r = e) : (t = e, r = this);
                          for(var n = 0; n < r.length; n++)this.words[n] = t.words[n] ^ r.words[n];
                          if (this !== t) for(; n < t.length; n++)this.words[n] = t.words[n];
                          return this.length = t.length, this.strip();
                      }, o.prototype.ixor = function(e) {
                          return n(0 == (this.negative | e.negative)), this.iuxor(e);
                      }, o.prototype.xor = function(e) {
                          return this.length > e.length ? this.clone().ixor(e) : e.clone().ixor(this);
                      }, o.prototype.uxor = function(e) {
                          return this.length > e.length ? this.clone().iuxor(e) : e.clone().iuxor(this);
                      }, o.prototype.inotn = function(e) {
                          n("number" == typeof e && e >= 0);
                          var t = 0 | Math.ceil(e / 26), r = e % 26;
                          this._expand(t), r > 0 && t--;
                          for(var i = 0; i < t; i++)this.words[i] = 67108863 & ~this.words[i];
                          return r > 0 && (this.words[i] = ~this.words[i] & 67108863 >> 26 - r), this.strip();
                      }, o.prototype.notn = function(e) {
                          return this.clone().inotn(e);
                      }, o.prototype.setn = function(e, t) {
                          n("number" == typeof e && e >= 0);
                          var r = e / 26 | 0, i = e % 26;
                          return this._expand(r + 1), this.words[r] = t ? this.words[r] | 1 << i : this.words[r] & ~(1 << i), this.strip();
                      }, o.prototype.iadd = function(e) {
                          var t, r, n;
                          if (0 !== this.negative && 0 === e.negative) return this.negative = 0, t = this.isub(e), this.negative ^= 1, this._normSign();
                          if (0 === this.negative && 0 !== e.negative) return e.negative = 0, t = this.isub(e), e.negative = 1, t._normSign();
                          this.length > e.length ? (r = this, n = e) : (r = e, n = this);
                          for(var i = 0, o = 0; o < n.length; o++)t = (0 | r.words[o]) + (0 | n.words[o]) + i, this.words[o] = 67108863 & t, i = t >>> 26;
                          for(; 0 !== i && o < r.length; o++)t = (0 | r.words[o]) + i, this.words[o] = 67108863 & t, i = t >>> 26;
                          if (this.length = r.length, 0 !== i) this.words[this.length] = i, this.length++;
                          else if (r !== this) for(; o < r.length; o++)this.words[o] = r.words[o];
                          return this;
                      }, o.prototype.add = function(e) {
                          var t;
                          return 0 !== e.negative && 0 === this.negative ? (e.negative = 0, t = this.sub(e), e.negative ^= 1, t) : 0 === e.negative && 0 !== this.negative ? (this.negative = 0, t = e.sub(this), this.negative = 1, t) : this.length > e.length ? this.clone().iadd(e) : e.clone().iadd(this);
                      }, o.prototype.isub = function(e) {
                          if (0 !== e.negative) {
                              e.negative = 0;
                              var t = this.iadd(e);
                              return e.negative = 1, t._normSign();
                          }
                          if (0 !== this.negative) return this.negative = 0, this.iadd(e), this.negative = 1, this._normSign();
                          var r, n, i = this.cmp(e);
                          if (0 === i) return this.negative = 0, this.length = 1, this.words[0] = 0, this;
                          i > 0 ? (r = this, n = e) : (r = e, n = this);
                          for(var o = 0, s = 0; s < n.length; s++)o = (t = (0 | r.words[s]) - (0 | n.words[s]) + o) >> 26, this.words[s] = 67108863 & t;
                          for(; 0 !== o && s < r.length; s++)o = (t = (0 | r.words[s]) + o) >> 26, this.words[s] = 67108863 & t;
                          if (0 === o && s < r.length && r !== this) for(; s < r.length; s++)this.words[s] = r.words[s];
                          return this.length = Math.max(this.length, s), r !== this && (this.negative = 1), this.strip();
                      }, o.prototype.sub = function(e) {
                          return this.clone().isub(e);
                      };
                      var p = function(e, t, r) {
                          var n, i, o, s = e.words, a = t.words, l = r.words, u = 0, c = 0 | s[0], d = 8191 & c, h = c >>> 13, f = 0 | s[1], p = 8191 & f, m = f >>> 13, y = 0 | s[2], g = 8191 & y, v = y >>> 13, b = 0 | s[3], w = 8191 & b, _ = b >>> 13, S = 0 | s[4], E = 8191 & S, k = S >>> 13, A = 0 | s[5], P = 8191 & A, N = A >>> 13, C = 0 | s[6], x = 8191 & C, T = C >>> 13, R = 0 | s[7], O = 8191 & R, B = R >>> 13, I = 0 | s[8], M = 8191 & I, D = I >>> 13, K = 0 | s[9], U = 8191 & K, F = K >>> 13, j = 0 | a[0], L = 8191 & j, q = j >>> 13, z = 0 | a[1], V = 8191 & z, W = z >>> 13, G = 0 | a[2], J = 8191 & G, H = G >>> 13, $ = 0 | a[3], Z = 8191 & $, X = $ >>> 13, Q = 0 | a[4], Y = 8191 & Q, ee = Q >>> 13, te = 0 | a[5], re = 8191 & te, ne = te >>> 13, ie = 0 | a[6], oe = 8191 & ie, se = ie >>> 13, ae = 0 | a[7], le = 8191 & ae, ue = ae >>> 13, ce = 0 | a[8], de = 8191 & ce, he = ce >>> 13, fe = 0 | a[9], pe = 8191 & fe, me = fe >>> 13;
                          r.negative = e.negative ^ t.negative, r.length = 19;
                          var ye = (u + (n = Math.imul(d, L)) | 0) + ((8191 & (i = (i = Math.imul(d, q)) + Math.imul(h, L) | 0)) << 13) | 0;
                          u = ((o = Math.imul(h, q)) + (i >>> 13) | 0) + (ye >>> 26) | 0, ye &= 67108863, n = Math.imul(p, L), i = (i = Math.imul(p, q)) + Math.imul(m, L) | 0, o = Math.imul(m, q);
                          var ge = (u + (n = n + Math.imul(d, V) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(d, W) | 0) + Math.imul(h, V) | 0)) << 13) | 0;
                          u = ((o = o + Math.imul(h, W) | 0) + (i >>> 13) | 0) + (ge >>> 26) | 0, ge &= 67108863, n = Math.imul(g, L), i = (i = Math.imul(g, q)) + Math.imul(v, L) | 0, o = Math.imul(v, q), n = n + Math.imul(p, V) | 0, i = (i = i + Math.imul(p, W) | 0) + Math.imul(m, V) | 0, o = o + Math.imul(m, W) | 0;
                          var ve = (u + (n = n + Math.imul(d, J) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(d, H) | 0) + Math.imul(h, J) | 0)) << 13) | 0;
                          u = ((o = o + Math.imul(h, H) | 0) + (i >>> 13) | 0) + (ve >>> 26) | 0, ve &= 67108863, n = Math.imul(w, L), i = (i = Math.imul(w, q)) + Math.imul(_, L) | 0, o = Math.imul(_, q), n = n + Math.imul(g, V) | 0, i = (i = i + Math.imul(g, W) | 0) + Math.imul(v, V) | 0, o = o + Math.imul(v, W) | 0, n = n + Math.imul(p, J) | 0, i = (i = i + Math.imul(p, H) | 0) + Math.imul(m, J) | 0, o = o + Math.imul(m, H) | 0;
                          var be = (u + (n = n + Math.imul(d, Z) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(d, X) | 0) + Math.imul(h, Z) | 0)) << 13) | 0;
                          u = ((o = o + Math.imul(h, X) | 0) + (i >>> 13) | 0) + (be >>> 26) | 0, be &= 67108863, n = Math.imul(E, L), i = (i = Math.imul(E, q)) + Math.imul(k, L) | 0, o = Math.imul(k, q), n = n + Math.imul(w, V) | 0, i = (i = i + Math.imul(w, W) | 0) + Math.imul(_, V) | 0, o = o + Math.imul(_, W) | 0, n = n + Math.imul(g, J) | 0, i = (i = i + Math.imul(g, H) | 0) + Math.imul(v, J) | 0, o = o + Math.imul(v, H) | 0, n = n + Math.imul(p, Z) | 0, i = (i = i + Math.imul(p, X) | 0) + Math.imul(m, Z) | 0, o = o + Math.imul(m, X) | 0;
                          var we = (u + (n = n + Math.imul(d, Y) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(d, ee) | 0) + Math.imul(h, Y) | 0)) << 13) | 0;
                          u = ((o = o + Math.imul(h, ee) | 0) + (i >>> 13) | 0) + (we >>> 26) | 0, we &= 67108863, n = Math.imul(P, L), i = (i = Math.imul(P, q)) + Math.imul(N, L) | 0, o = Math.imul(N, q), n = n + Math.imul(E, V) | 0, i = (i = i + Math.imul(E, W) | 0) + Math.imul(k, V) | 0, o = o + Math.imul(k, W) | 0, n = n + Math.imul(w, J) | 0, i = (i = i + Math.imul(w, H) | 0) + Math.imul(_, J) | 0, o = o + Math.imul(_, H) | 0, n = n + Math.imul(g, Z) | 0, i = (i = i + Math.imul(g, X) | 0) + Math.imul(v, Z) | 0, o = o + Math.imul(v, X) | 0, n = n + Math.imul(p, Y) | 0, i = (i = i + Math.imul(p, ee) | 0) + Math.imul(m, Y) | 0, o = o + Math.imul(m, ee) | 0;
                          var _e = (u + (n = n + Math.imul(d, re) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(d, ne) | 0) + Math.imul(h, re) | 0)) << 13) | 0;
                          u = ((o = o + Math.imul(h, ne) | 0) + (i >>> 13) | 0) + (_e >>> 26) | 0, _e &= 67108863, n = Math.imul(x, L), i = (i = Math.imul(x, q)) + Math.imul(T, L) | 0, o = Math.imul(T, q), n = n + Math.imul(P, V) | 0, i = (i = i + Math.imul(P, W) | 0) + Math.imul(N, V) | 0, o = o + Math.imul(N, W) | 0, n = n + Math.imul(E, J) | 0, i = (i = i + Math.imul(E, H) | 0) + Math.imul(k, J) | 0, o = o + Math.imul(k, H) | 0, n = n + Math.imul(w, Z) | 0, i = (i = i + Math.imul(w, X) | 0) + Math.imul(_, Z) | 0, o = o + Math.imul(_, X) | 0, n = n + Math.imul(g, Y) | 0, i = (i = i + Math.imul(g, ee) | 0) + Math.imul(v, Y) | 0, o = o + Math.imul(v, ee) | 0, n = n + Math.imul(p, re) | 0, i = (i = i + Math.imul(p, ne) | 0) + Math.imul(m, re) | 0, o = o + Math.imul(m, ne) | 0;
                          var Se = (u + (n = n + Math.imul(d, oe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(d, se) | 0) + Math.imul(h, oe) | 0)) << 13) | 0;
                          u = ((o = o + Math.imul(h, se) | 0) + (i >>> 13) | 0) + (Se >>> 26) | 0, Se &= 67108863, n = Math.imul(O, L), i = (i = Math.imul(O, q)) + Math.imul(B, L) | 0, o = Math.imul(B, q), n = n + Math.imul(x, V) | 0, i = (i = i + Math.imul(x, W) | 0) + Math.imul(T, V) | 0, o = o + Math.imul(T, W) | 0, n = n + Math.imul(P, J) | 0, i = (i = i + Math.imul(P, H) | 0) + Math.imul(N, J) | 0, o = o + Math.imul(N, H) | 0, n = n + Math.imul(E, Z) | 0, i = (i = i + Math.imul(E, X) | 0) + Math.imul(k, Z) | 0, o = o + Math.imul(k, X) | 0, n = n + Math.imul(w, Y) | 0, i = (i = i + Math.imul(w, ee) | 0) + Math.imul(_, Y) | 0, o = o + Math.imul(_, ee) | 0, n = n + Math.imul(g, re) | 0, i = (i = i + Math.imul(g, ne) | 0) + Math.imul(v, re) | 0, o = o + Math.imul(v, ne) | 0, n = n + Math.imul(p, oe) | 0, i = (i = i + Math.imul(p, se) | 0) + Math.imul(m, oe) | 0, o = o + Math.imul(m, se) | 0;
                          var Ee = (u + (n = n + Math.imul(d, le) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(d, ue) | 0) + Math.imul(h, le) | 0)) << 13) | 0;
                          u = ((o = o + Math.imul(h, ue) | 0) + (i >>> 13) | 0) + (Ee >>> 26) | 0, Ee &= 67108863, n = Math.imul(M, L), i = (i = Math.imul(M, q)) + Math.imul(D, L) | 0, o = Math.imul(D, q), n = n + Math.imul(O, V) | 0, i = (i = i + Math.imul(O, W) | 0) + Math.imul(B, V) | 0, o = o + Math.imul(B, W) | 0, n = n + Math.imul(x, J) | 0, i = (i = i + Math.imul(x, H) | 0) + Math.imul(T, J) | 0, o = o + Math.imul(T, H) | 0, n = n + Math.imul(P, Z) | 0, i = (i = i + Math.imul(P, X) | 0) + Math.imul(N, Z) | 0, o = o + Math.imul(N, X) | 0, n = n + Math.imul(E, Y) | 0, i = (i = i + Math.imul(E, ee) | 0) + Math.imul(k, Y) | 0, o = o + Math.imul(k, ee) | 0, n = n + Math.imul(w, re) | 0, i = (i = i + Math.imul(w, ne) | 0) + Math.imul(_, re) | 0, o = o + Math.imul(_, ne) | 0, n = n + Math.imul(g, oe) | 0, i = (i = i + Math.imul(g, se) | 0) + Math.imul(v, oe) | 0, o = o + Math.imul(v, se) | 0, n = n + Math.imul(p, le) | 0, i = (i = i + Math.imul(p, ue) | 0) + Math.imul(m, le) | 0, o = o + Math.imul(m, ue) | 0;
                          var ke = (u + (n = n + Math.imul(d, de) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(d, he) | 0) + Math.imul(h, de) | 0)) << 13) | 0;
                          u = ((o = o + Math.imul(h, he) | 0) + (i >>> 13) | 0) + (ke >>> 26) | 0, ke &= 67108863, n = Math.imul(U, L), i = (i = Math.imul(U, q)) + Math.imul(F, L) | 0, o = Math.imul(F, q), n = n + Math.imul(M, V) | 0, i = (i = i + Math.imul(M, W) | 0) + Math.imul(D, V) | 0, o = o + Math.imul(D, W) | 0, n = n + Math.imul(O, J) | 0, i = (i = i + Math.imul(O, H) | 0) + Math.imul(B, J) | 0, o = o + Math.imul(B, H) | 0, n = n + Math.imul(x, Z) | 0, i = (i = i + Math.imul(x, X) | 0) + Math.imul(T, Z) | 0, o = o + Math.imul(T, X) | 0, n = n + Math.imul(P, Y) | 0, i = (i = i + Math.imul(P, ee) | 0) + Math.imul(N, Y) | 0, o = o + Math.imul(N, ee) | 0, n = n + Math.imul(E, re) | 0, i = (i = i + Math.imul(E, ne) | 0) + Math.imul(k, re) | 0, o = o + Math.imul(k, ne) | 0, n = n + Math.imul(w, oe) | 0, i = (i = i + Math.imul(w, se) | 0) + Math.imul(_, oe) | 0, o = o + Math.imul(_, se) | 0, n = n + Math.imul(g, le) | 0, i = (i = i + Math.imul(g, ue) | 0) + Math.imul(v, le) | 0, o = o + Math.imul(v, ue) | 0, n = n + Math.imul(p, de) | 0, i = (i = i + Math.imul(p, he) | 0) + Math.imul(m, de) | 0, o = o + Math.imul(m, he) | 0;
                          var Ae = (u + (n = n + Math.imul(d, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(d, me) | 0) + Math.imul(h, pe) | 0)) << 13) | 0;
                          u = ((o = o + Math.imul(h, me) | 0) + (i >>> 13) | 0) + (Ae >>> 26) | 0, Ae &= 67108863, n = Math.imul(U, V), i = (i = Math.imul(U, W)) + Math.imul(F, V) | 0, o = Math.imul(F, W), n = n + Math.imul(M, J) | 0, i = (i = i + Math.imul(M, H) | 0) + Math.imul(D, J) | 0, o = o + Math.imul(D, H) | 0, n = n + Math.imul(O, Z) | 0, i = (i = i + Math.imul(O, X) | 0) + Math.imul(B, Z) | 0, o = o + Math.imul(B, X) | 0, n = n + Math.imul(x, Y) | 0, i = (i = i + Math.imul(x, ee) | 0) + Math.imul(T, Y) | 0, o = o + Math.imul(T, ee) | 0, n = n + Math.imul(P, re) | 0, i = (i = i + Math.imul(P, ne) | 0) + Math.imul(N, re) | 0, o = o + Math.imul(N, ne) | 0, n = n + Math.imul(E, oe) | 0, i = (i = i + Math.imul(E, se) | 0) + Math.imul(k, oe) | 0, o = o + Math.imul(k, se) | 0, n = n + Math.imul(w, le) | 0, i = (i = i + Math.imul(w, ue) | 0) + Math.imul(_, le) | 0, o = o + Math.imul(_, ue) | 0, n = n + Math.imul(g, de) | 0, i = (i = i + Math.imul(g, he) | 0) + Math.imul(v, de) | 0, o = o + Math.imul(v, he) | 0;
                          var Pe = (u + (n = n + Math.imul(p, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(p, me) | 0) + Math.imul(m, pe) | 0)) << 13) | 0;
                          u = ((o = o + Math.imul(m, me) | 0) + (i >>> 13) | 0) + (Pe >>> 26) | 0, Pe &= 67108863, n = Math.imul(U, J), i = (i = Math.imul(U, H)) + Math.imul(F, J) | 0, o = Math.imul(F, H), n = n + Math.imul(M, Z) | 0, i = (i = i + Math.imul(M, X) | 0) + Math.imul(D, Z) | 0, o = o + Math.imul(D, X) | 0, n = n + Math.imul(O, Y) | 0, i = (i = i + Math.imul(O, ee) | 0) + Math.imul(B, Y) | 0, o = o + Math.imul(B, ee) | 0, n = n + Math.imul(x, re) | 0, i = (i = i + Math.imul(x, ne) | 0) + Math.imul(T, re) | 0, o = o + Math.imul(T, ne) | 0, n = n + Math.imul(P, oe) | 0, i = (i = i + Math.imul(P, se) | 0) + Math.imul(N, oe) | 0, o = o + Math.imul(N, se) | 0, n = n + Math.imul(E, le) | 0, i = (i = i + Math.imul(E, ue) | 0) + Math.imul(k, le) | 0, o = o + Math.imul(k, ue) | 0, n = n + Math.imul(w, de) | 0, i = (i = i + Math.imul(w, he) | 0) + Math.imul(_, de) | 0, o = o + Math.imul(_, he) | 0;
                          var Ne = (u + (n = n + Math.imul(g, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(g, me) | 0) + Math.imul(v, pe) | 0)) << 13) | 0;
                          u = ((o = o + Math.imul(v, me) | 0) + (i >>> 13) | 0) + (Ne >>> 26) | 0, Ne &= 67108863, n = Math.imul(U, Z), i = (i = Math.imul(U, X)) + Math.imul(F, Z) | 0, o = Math.imul(F, X), n = n + Math.imul(M, Y) | 0, i = (i = i + Math.imul(M, ee) | 0) + Math.imul(D, Y) | 0, o = o + Math.imul(D, ee) | 0, n = n + Math.imul(O, re) | 0, i = (i = i + Math.imul(O, ne) | 0) + Math.imul(B, re) | 0, o = o + Math.imul(B, ne) | 0, n = n + Math.imul(x, oe) | 0, i = (i = i + Math.imul(x, se) | 0) + Math.imul(T, oe) | 0, o = o + Math.imul(T, se) | 0, n = n + Math.imul(P, le) | 0, i = (i = i + Math.imul(P, ue) | 0) + Math.imul(N, le) | 0, o = o + Math.imul(N, ue) | 0, n = n + Math.imul(E, de) | 0, i = (i = i + Math.imul(E, he) | 0) + Math.imul(k, de) | 0, o = o + Math.imul(k, he) | 0;
                          var Ce = (u + (n = n + Math.imul(w, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(w, me) | 0) + Math.imul(_, pe) | 0)) << 13) | 0;
                          u = ((o = o + Math.imul(_, me) | 0) + (i >>> 13) | 0) + (Ce >>> 26) | 0, Ce &= 67108863, n = Math.imul(U, Y), i = (i = Math.imul(U, ee)) + Math.imul(F, Y) | 0, o = Math.imul(F, ee), n = n + Math.imul(M, re) | 0, i = (i = i + Math.imul(M, ne) | 0) + Math.imul(D, re) | 0, o = o + Math.imul(D, ne) | 0, n = n + Math.imul(O, oe) | 0, i = (i = i + Math.imul(O, se) | 0) + Math.imul(B, oe) | 0, o = o + Math.imul(B, se) | 0, n = n + Math.imul(x, le) | 0, i = (i = i + Math.imul(x, ue) | 0) + Math.imul(T, le) | 0, o = o + Math.imul(T, ue) | 0, n = n + Math.imul(P, de) | 0, i = (i = i + Math.imul(P, he) | 0) + Math.imul(N, de) | 0, o = o + Math.imul(N, he) | 0;
                          var xe = (u + (n = n + Math.imul(E, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(E, me) | 0) + Math.imul(k, pe) | 0)) << 13) | 0;
                          u = ((o = o + Math.imul(k, me) | 0) + (i >>> 13) | 0) + (xe >>> 26) | 0, xe &= 67108863, n = Math.imul(U, re), i = (i = Math.imul(U, ne)) + Math.imul(F, re) | 0, o = Math.imul(F, ne), n = n + Math.imul(M, oe) | 0, i = (i = i + Math.imul(M, se) | 0) + Math.imul(D, oe) | 0, o = o + Math.imul(D, se) | 0, n = n + Math.imul(O, le) | 0, i = (i = i + Math.imul(O, ue) | 0) + Math.imul(B, le) | 0, o = o + Math.imul(B, ue) | 0, n = n + Math.imul(x, de) | 0, i = (i = i + Math.imul(x, he) | 0) + Math.imul(T, de) | 0, o = o + Math.imul(T, he) | 0;
                          var Te = (u + (n = n + Math.imul(P, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(P, me) | 0) + Math.imul(N, pe) | 0)) << 13) | 0;
                          u = ((o = o + Math.imul(N, me) | 0) + (i >>> 13) | 0) + (Te >>> 26) | 0, Te &= 67108863, n = Math.imul(U, oe), i = (i = Math.imul(U, se)) + Math.imul(F, oe) | 0, o = Math.imul(F, se), n = n + Math.imul(M, le) | 0, i = (i = i + Math.imul(M, ue) | 0) + Math.imul(D, le) | 0, o = o + Math.imul(D, ue) | 0, n = n + Math.imul(O, de) | 0, i = (i = i + Math.imul(O, he) | 0) + Math.imul(B, de) | 0, o = o + Math.imul(B, he) | 0;
                          var Re = (u + (n = n + Math.imul(x, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(x, me) | 0) + Math.imul(T, pe) | 0)) << 13) | 0;
                          u = ((o = o + Math.imul(T, me) | 0) + (i >>> 13) | 0) + (Re >>> 26) | 0, Re &= 67108863, n = Math.imul(U, le), i = (i = Math.imul(U, ue)) + Math.imul(F, le) | 0, o = Math.imul(F, ue), n = n + Math.imul(M, de) | 0, i = (i = i + Math.imul(M, he) | 0) + Math.imul(D, de) | 0, o = o + Math.imul(D, he) | 0;
                          var Oe = (u + (n = n + Math.imul(O, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(O, me) | 0) + Math.imul(B, pe) | 0)) << 13) | 0;
                          u = ((o = o + Math.imul(B, me) | 0) + (i >>> 13) | 0) + (Oe >>> 26) | 0, Oe &= 67108863, n = Math.imul(U, de), i = (i = Math.imul(U, he)) + Math.imul(F, de) | 0, o = Math.imul(F, he);
                          var Be = (u + (n = n + Math.imul(M, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(M, me) | 0) + Math.imul(D, pe) | 0)) << 13) | 0;
                          u = ((o = o + Math.imul(D, me) | 0) + (i >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863;
                          var Ie = (u + (n = Math.imul(U, pe)) | 0) + ((8191 & (i = (i = Math.imul(U, me)) + Math.imul(F, pe) | 0)) << 13) | 0;
                          return u = ((o = Math.imul(F, me)) + (i >>> 13) | 0) + (Ie >>> 26) | 0, Ie &= 67108863, l[0] = ye, l[1] = ge, l[2] = ve, l[3] = be, l[4] = we, l[5] = _e, l[6] = Se, l[7] = Ee, l[8] = ke, l[9] = Ae, l[10] = Pe, l[11] = Ne, l[12] = Ce, l[13] = xe, l[14] = Te, l[15] = Re, l[16] = Oe, l[17] = Be, l[18] = Ie, 0 !== u && (l[19] = u, r.length++), r;
                      };
                      function m(e, t, r) {
                          return (new y).mulp(e, t, r);
                      }
                      function y(e, t) {
                          this.x = e, this.y = t;
                      }
                      Math.imul || (p = f), o.prototype.mulTo = function(e, t) {
                          var r, n = this.length + e.length;
                          return r = 10 === this.length && 10 === e.length ? p(this, e, t) : n < 63 ? f(this, e, t) : n < 1024 ? function(e, t, r) {
                              r.negative = t.negative ^ e.negative, r.length = e.length + t.length;
                              for(var n = 0, i = 0, o = 0; o < r.length - 1; o++){
                                  var s = i;
                                  i = 0;
                                  for(var a = 67108863 & n, l = Math.min(o, t.length - 1), u = Math.max(0, o - e.length + 1); u <= l; u++){
                                      var c = o - u, d = (0 | e.words[c]) * (0 | t.words[u]), h = 67108863 & d;
                                      a = 67108863 & (h = h + a | 0), i += (s = (s = s + (d / 67108864 | 0) | 0) + (h >>> 26) | 0) >>> 26, s &= 67108863;
                                  }
                                  r.words[o] = a, n = s, s = i;
                              }
                              return 0 !== n ? r.words[o] = n : r.length--, r.strip();
                          }(this, e, t) : m(this, e, t), r;
                      }, y.prototype.makeRBT = function(e) {
                          for(var t = new Array(e), r = o.prototype._countBits(e) - 1, n = 0; n < e; n++)t[n] = this.revBin(n, r, e);
                          return t;
                      }, y.prototype.revBin = function(e, t, r) {
                          if (0 === e || e === r - 1) return e;
                          for(var n = 0, i = 0; i < t; i++)n |= (1 & e) << t - i - 1, e >>= 1;
                          return n;
                      }, y.prototype.permute = function(e, t, r, n, i, o) {
                          for(var s = 0; s < o; s++)n[s] = t[e[s]], i[s] = r[e[s]];
                      }, y.prototype.transform = function(e, t, r, n, i, o) {
                          this.permute(o, e, t, r, n, i);
                          for(var s = 1; s < i; s <<= 1)for(var a = s << 1, l = Math.cos(2 * Math.PI / a), u = Math.sin(2 * Math.PI / a), c = 0; c < i; c += a)for(var d = l, h = u, f = 0; f < s; f++){
                              var p = r[c + f], m = n[c + f], y = r[c + f + s], g = n[c + f + s], v = d * y - h * g;
                              g = d * g + h * y, y = v, r[c + f] = p + y, n[c + f] = m + g, r[c + f + s] = p - y, n[c + f + s] = m - g, f !== a && (v = l * d - u * h, h = l * h + u * d, d = v);
                          }
                      }, y.prototype.guessLen13b = function(e, t) {
                          var r = 1 | Math.max(t, e), n = 1 & r, i = 0;
                          for(r = r / 2 | 0; r; r >>>= 1)i++;
                          return 1 << i + 1 + n;
                      }, y.prototype.conjugate = function(e, t, r) {
                          if (!(r <= 1)) for(var n = 0; n < r / 2; n++){
                              var i = e[n];
                              e[n] = e[r - n - 1], e[r - n - 1] = i, i = t[n], t[n] = -t[r - n - 1], t[r - n - 1] = -i;
                          }
                      }, y.prototype.normalize13b = function(e, t) {
                          for(var r = 0, n = 0; n < t / 2; n++){
                              var i = 8192 * Math.round(e[2 * n + 1] / t) + Math.round(e[2 * n] / t) + r;
                              e[n] = 67108863 & i, r = i < 67108864 ? 0 : i / 67108864 | 0;
                          }
                          return e;
                      }, y.prototype.convert13b = function(e, t, r, i) {
                          for(var o = 0, s = 0; s < t; s++)o += 0 | e[s], r[2 * s] = 8191 & o, o >>>= 13, r[2 * s + 1] = 8191 & o, o >>>= 13;
                          for(s = 2 * t; s < i; ++s)r[s] = 0;
                          n(0 === o), n(0 == (-8192 & o));
                      }, y.prototype.stub = function(e) {
                          for(var t = new Array(e), r = 0; r < e; r++)t[r] = 0;
                          return t;
                      }, y.prototype.mulp = function(e, t, r) {
                          var n = 2 * this.guessLen13b(e.length, t.length), i = this.makeRBT(n), o = this.stub(n), s = new Array(n), a = new Array(n), l = new Array(n), u = new Array(n), c = new Array(n), d = new Array(n), h = r.words;
                          h.length = n, this.convert13b(e.words, e.length, s, n), this.convert13b(t.words, t.length, u, n), this.transform(s, o, a, l, n, i), this.transform(u, o, c, d, n, i);
                          for(var f = 0; f < n; f++){
                              var p = a[f] * c[f] - l[f] * d[f];
                              l[f] = a[f] * d[f] + l[f] * c[f], a[f] = p;
                          }
                          return this.conjugate(a, l, n), this.transform(a, l, h, o, n, i), this.conjugate(h, o, n), this.normalize13b(h, n), r.negative = e.negative ^ t.negative, r.length = e.length + t.length, r.strip();
                      }, o.prototype.mul = function(e) {
                          var t = new o(null);
                          return t.words = new Array(this.length + e.length), this.mulTo(e, t);
                      }, o.prototype.mulf = function(e) {
                          var t = new o(null);
                          return t.words = new Array(this.length + e.length), m(this, e, t);
                      }, o.prototype.imul = function(e) {
                          return this.clone().mulTo(e, this);
                      }, o.prototype.imuln = function(e) {
                          n("number" == typeof e), n(e < 67108864);
                          for(var t = 0, r = 0; r < this.length; r++){
                              var i = (0 | this.words[r]) * e, o = (67108863 & i) + (67108863 & t);
                              t >>= 26, t += i / 67108864 | 0, t += o >>> 26, this.words[r] = 67108863 & o;
                          }
                          return 0 !== t && (this.words[r] = t, this.length++), this;
                      }, o.prototype.muln = function(e) {
                          return this.clone().imuln(e);
                      }, o.prototype.sqr = function() {
                          return this.mul(this);
                      }, o.prototype.isqr = function() {
                          return this.imul(this.clone());
                      }, o.prototype.pow = function(e) {
                          var t = function(e) {
                              for(var t = new Array(e.bitLength()), r = 0; r < t.length; r++){
                                  var n = r / 26 | 0, i = r % 26;
                                  t[r] = (e.words[n] & 1 << i) >>> i;
                              }
                              return t;
                          }(e);
                          if (0 === t.length) return new o(1);
                          for(var r = this, n = 0; n < t.length && 0 === t[n]; n++, r = r.sqr());
                          if (++n < t.length) for(var i = r.sqr(); n < t.length; n++, i = i.sqr())0 !== t[n] && (r = r.mul(i));
                          return r;
                      }, o.prototype.iushln = function(e) {
                          n("number" == typeof e && e >= 0);
                          var t, r = e % 26, i = (e - r) / 26, o = 67108863 >>> 26 - r << 26 - r;
                          if (0 !== r) {
                              var s = 0;
                              for(t = 0; t < this.length; t++){
                                  var a = this.words[t] & o, l = (0 | this.words[t]) - a << r;
                                  this.words[t] = l | s, s = a >>> 26 - r;
                              }
                              s && (this.words[t] = s, this.length++);
                          }
                          if (0 !== i) {
                              for(t = this.length - 1; t >= 0; t--)this.words[t + i] = this.words[t];
                              for(t = 0; t < i; t++)this.words[t] = 0;
                              this.length += i;
                          }
                          return this.strip();
                      }, o.prototype.ishln = function(e) {
                          return n(0 === this.negative), this.iushln(e);
                      }, o.prototype.iushrn = function(e, t, r) {
                          var i;
                          n("number" == typeof e && e >= 0), i = t ? (t - t % 26) / 26 : 0;
                          var o = e % 26, s = Math.min((e - o) / 26, this.length), a = 67108863 ^ 67108863 >>> o << o, l = r;
                          if (i -= s, i = Math.max(0, i), l) {
                              for(var u = 0; u < s; u++)l.words[u] = this.words[u];
                              l.length = s;
                          }
                          if (0 === s) ;
                          else if (this.length > s) for(this.length -= s, u = 0; u < this.length; u++)this.words[u] = this.words[u + s];
                          else this.words[0] = 0, this.length = 1;
                          var c = 0;
                          for(u = this.length - 1; u >= 0 && (0 !== c || u >= i); u--){
                              var d = 0 | this.words[u];
                              this.words[u] = c << 26 - o | d >>> o, c = d & a;
                          }
                          return l && 0 !== c && (l.words[l.length++] = c), 0 === this.length && (this.words[0] = 0, this.length = 1), this.strip();
                      }, o.prototype.ishrn = function(e, t, r) {
                          return n(0 === this.negative), this.iushrn(e, t, r);
                      }, o.prototype.shln = function(e) {
                          return this.clone().ishln(e);
                      }, o.prototype.ushln = function(e) {
                          return this.clone().iushln(e);
                      }, o.prototype.shrn = function(e) {
                          return this.clone().ishrn(e);
                      }, o.prototype.ushrn = function(e) {
                          return this.clone().iushrn(e);
                      }, o.prototype.testn = function(e) {
                          n("number" == typeof e && e >= 0);
                          var t = e % 26, r = (e - t) / 26, i = 1 << t;
                          return !(this.length <= r || !(this.words[r] & i));
                      }, o.prototype.imaskn = function(e) {
                          n("number" == typeof e && e >= 0);
                          var t = e % 26, r = (e - t) / 26;
                          if (n(0 === this.negative, "imaskn works only with positive numbers"), this.length <= r) return this;
                          if (0 !== t && r++, this.length = Math.min(r, this.length), 0 !== t) {
                              var i = 67108863 ^ 67108863 >>> t << t;
                              this.words[this.length - 1] &= i;
                          }
                          return this.strip();
                      }, o.prototype.maskn = function(e) {
                          return this.clone().imaskn(e);
                      }, o.prototype.iaddn = function(e) {
                          return n("number" == typeof e), n(e < 67108864), e < 0 ? this.isubn(-e) : 0 !== this.negative ? 1 === this.length && (0 | this.words[0]) < e ? (this.words[0] = e - (0 | this.words[0]), this.negative = 0, this) : (this.negative = 0, this.isubn(e), this.negative = 1, this) : this._iaddn(e);
                      }, o.prototype._iaddn = function(e) {
                          this.words[0] += e;
                          for(var t = 0; t < this.length && this.words[t] >= 67108864; t++)this.words[t] -= 67108864, t === this.length - 1 ? this.words[t + 1] = 1 : this.words[t + 1]++;
                          return this.length = Math.max(this.length, t + 1), this;
                      }, o.prototype.isubn = function(e) {
                          if (n("number" == typeof e), n(e < 67108864), e < 0) return this.iaddn(-e);
                          if (0 !== this.negative) return this.negative = 0, this.iaddn(e), this.negative = 1, this;
                          if (this.words[0] -= e, 1 === this.length && this.words[0] < 0) this.words[0] = -this.words[0], this.negative = 1;
                          else for(var t = 0; t < this.length && this.words[t] < 0; t++)this.words[t] += 67108864, this.words[t + 1] -= 1;
                          return this.strip();
                      }, o.prototype.addn = function(e) {
                          return this.clone().iaddn(e);
                      }, o.prototype.subn = function(e) {
                          return this.clone().isubn(e);
                      }, o.prototype.iabs = function() {
                          return this.negative = 0, this;
                      }, o.prototype.abs = function() {
                          return this.clone().iabs();
                      }, o.prototype._ishlnsubmul = function(e, t, r) {
                          var i, o, s = e.length + r;
                          this._expand(s);
                          var a = 0;
                          for(i = 0; i < e.length; i++){
                              o = (0 | this.words[i + r]) + a;
                              var l = (0 | e.words[i]) * t;
                              a = ((o -= 67108863 & l) >> 26) - (l / 67108864 | 0), this.words[i + r] = 67108863 & o;
                          }
                          for(; i < this.length - r; i++)a = (o = (0 | this.words[i + r]) + a) >> 26, this.words[i + r] = 67108863 & o;
                          if (0 === a) return this.strip();
                          for(n(-1 === a), a = 0, i = 0; i < this.length; i++)a = (o = -(0 | this.words[i]) + a) >> 26, this.words[i] = 67108863 & o;
                          return this.negative = 1, this.strip();
                      }, o.prototype._wordDiv = function(e, t) {
                          var r = (this.length, e.length), n = this.clone(), i = e, s = 0 | i.words[i.length - 1];
                          0 != (r = 26 - this._countBits(s)) && (i = i.ushln(r), n.iushln(r), s = 0 | i.words[i.length - 1]);
                          var a, l = n.length - i.length;
                          if ("mod" !== t) {
                              (a = new o(null)).length = l + 1, a.words = new Array(a.length);
                              for(var u = 0; u < a.length; u++)a.words[u] = 0;
                          }
                          var c = n.clone()._ishlnsubmul(i, 1, l);
                          0 === c.negative && (n = c, a && (a.words[l] = 1));
                          for(var d = l - 1; d >= 0; d--){
                              var h = 67108864 * (0 | n.words[i.length + d]) + (0 | n.words[i.length + d - 1]);
                              for(h = Math.min(h / s | 0, 67108863), n._ishlnsubmul(i, h, d); 0 !== n.negative;)h--, n.negative = 0, n._ishlnsubmul(i, 1, d), n.isZero() || (n.negative ^= 1);
                              a && (a.words[d] = h);
                          }
                          return a && a.strip(), n.strip(), "div" !== t && 0 !== r && n.iushrn(r), {
                              div: a || null,
                              mod: n
                          };
                      }, o.prototype.divmod = function(e, t, r) {
                          var i, s, a;
                          return n(!e.isZero()), this.isZero() ? {
                              div: new o(0),
                              mod: new o(0)
                          } : 0 !== this.negative && 0 === e.negative ? (a = this.neg().divmod(e, t), "mod" !== t && (i = a.div.neg()), "div" !== t && (s = a.mod.neg(), r && 0 !== s.negative && s.iadd(e)), {
                              div: i,
                              mod: s
                          }) : 0 === this.negative && 0 !== e.negative ? (a = this.divmod(e.neg(), t), "mod" !== t && (i = a.div.neg()), {
                              div: i,
                              mod: a.mod
                          }) : 0 != (this.negative & e.negative) ? (a = this.neg().divmod(e.neg(), t), "div" !== t && (s = a.mod.neg(), r && 0 !== s.negative && s.isub(e)), {
                              div: a.div,
                              mod: s
                          }) : e.length > this.length || this.cmp(e) < 0 ? {
                              div: new o(0),
                              mod: this
                          } : 1 === e.length ? "div" === t ? {
                              div: this.divn(e.words[0]),
                              mod: null
                          } : "mod" === t ? {
                              div: null,
                              mod: new o(this.modn(e.words[0]))
                          } : {
                              div: this.divn(e.words[0]),
                              mod: new o(this.modn(e.words[0]))
                          } : this._wordDiv(e, t);
                      }, o.prototype.div = function(e) {
                          return this.divmod(e, "div", !1).div;
                      }, o.prototype.mod = function(e) {
                          return this.divmod(e, "mod", !1).mod;
                      }, o.prototype.umod = function(e) {
                          return this.divmod(e, "mod", !0).mod;
                      }, o.prototype.divRound = function(e) {
                          var t = this.divmod(e);
                          if (t.mod.isZero()) return t.div;
                          var r = 0 !== t.div.negative ? t.mod.isub(e) : t.mod, n = e.ushrn(1), i = e.andln(1), o = r.cmp(n);
                          return o < 0 || 1 === i && 0 === o ? t.div : 0 !== t.div.negative ? t.div.isubn(1) : t.div.iaddn(1);
                      }, o.prototype.modn = function(e) {
                          n(e <= 67108863);
                          for(var t = 67108864 % e, r = 0, i = this.length - 1; i >= 0; i--)r = (t * r + (0 | this.words[i])) % e;
                          return r;
                      }, o.prototype.idivn = function(e) {
                          n(e <= 67108863);
                          for(var t = 0, r = this.length - 1; r >= 0; r--){
                              var i = (0 | this.words[r]) + 67108864 * t;
                              this.words[r] = i / e | 0, t = i % e;
                          }
                          return this.strip();
                      }, o.prototype.divn = function(e) {
                          return this.clone().idivn(e);
                      }, o.prototype.egcd = function(e) {
                          n(0 === e.negative), n(!e.isZero());
                          var t = this, r = e.clone();
                          t = 0 !== t.negative ? t.umod(e) : t.clone();
                          for(var i = new o(1), s = new o(0), a = new o(0), l = new o(1), u = 0; t.isEven() && r.isEven();)t.iushrn(1), r.iushrn(1), ++u;
                          for(var c = r.clone(), d = t.clone(); !t.isZero();){
                              for(var h = 0, f = 1; 0 == (t.words[0] & f) && h < 26; ++h, f <<= 1);
                              if (h > 0) for(t.iushrn(h); h-- > 0;)(i.isOdd() || s.isOdd()) && (i.iadd(c), s.isub(d)), i.iushrn(1), s.iushrn(1);
                              for(var p = 0, m = 1; 0 == (r.words[0] & m) && p < 26; ++p, m <<= 1);
                              if (p > 0) for(r.iushrn(p); p-- > 0;)(a.isOdd() || l.isOdd()) && (a.iadd(c), l.isub(d)), a.iushrn(1), l.iushrn(1);
                              t.cmp(r) >= 0 ? (t.isub(r), i.isub(a), s.isub(l)) : (r.isub(t), a.isub(i), l.isub(s));
                          }
                          return {
                              a,
                              b: l,
                              gcd: r.iushln(u)
                          };
                      }, o.prototype._invmp = function(e) {
                          n(0 === e.negative), n(!e.isZero());
                          var t = this, r = e.clone();
                          t = 0 !== t.negative ? t.umod(e) : t.clone();
                          for(var i, s = new o(1), a = new o(0), l = r.clone(); t.cmpn(1) > 0 && r.cmpn(1) > 0;){
                              for(var u = 0, c = 1; 0 == (t.words[0] & c) && u < 26; ++u, c <<= 1);
                              if (u > 0) for(t.iushrn(u); u-- > 0;)s.isOdd() && s.iadd(l), s.iushrn(1);
                              for(var d = 0, h = 1; 0 == (r.words[0] & h) && d < 26; ++d, h <<= 1);
                              if (d > 0) for(r.iushrn(d); d-- > 0;)a.isOdd() && a.iadd(l), a.iushrn(1);
                              t.cmp(r) >= 0 ? (t.isub(r), s.isub(a)) : (r.isub(t), a.isub(s));
                          }
                          return (i = 0 === t.cmpn(1) ? s : a).cmpn(0) < 0 && i.iadd(e), i;
                      }, o.prototype.gcd = function(e) {
                          if (this.isZero()) return e.abs();
                          if (e.isZero()) return this.abs();
                          var t = this.clone(), r = e.clone();
                          t.negative = 0, r.negative = 0;
                          for(var n = 0; t.isEven() && r.isEven(); n++)t.iushrn(1), r.iushrn(1);
                          for(;;){
                              for(; t.isEven();)t.iushrn(1);
                              for(; r.isEven();)r.iushrn(1);
                              var i = t.cmp(r);
                              if (i < 0) {
                                  var o = t;
                                  t = r, r = o;
                              } else if (0 === i || 0 === r.cmpn(1)) break;
                              t.isub(r);
                          }
                          return r.iushln(n);
                      }, o.prototype.invm = function(e) {
                          return this.egcd(e).a.umod(e);
                      }, o.prototype.isEven = function() {
                          return 0 == (1 & this.words[0]);
                      }, o.prototype.isOdd = function() {
                          return 1 == (1 & this.words[0]);
                      }, o.prototype.andln = function(e) {
                          return this.words[0] & e;
                      }, o.prototype.bincn = function(e) {
                          n("number" == typeof e);
                          var t = e % 26, r = (e - t) / 26, i = 1 << t;
                          if (this.length <= r) return this._expand(r + 1), this.words[r] |= i, this;
                          for(var o = i, s = r; 0 !== o && s < this.length; s++){
                              var a = 0 | this.words[s];
                              o = (a += o) >>> 26, a &= 67108863, this.words[s] = a;
                          }
                          return 0 !== o && (this.words[s] = o, this.length++), this;
                      }, o.prototype.isZero = function() {
                          return 1 === this.length && 0 === this.words[0];
                      }, o.prototype.cmpn = function(e) {
                          var t, r = e < 0;
                          if (0 !== this.negative && !r) return -1;
                          if (0 === this.negative && r) return 1;
                          if (this.strip(), this.length > 1) t = 1;
                          else {
                              r && (e = -e), n(e <= 67108863, "Number is too big");
                              var i = 0 | this.words[0];
                              t = i === e ? 0 : i < e ? -1 : 1;
                          }
                          return 0 !== this.negative ? 0 | -t : t;
                      }, o.prototype.cmp = function(e) {
                          if (0 !== this.negative && 0 === e.negative) return -1;
                          if (0 === this.negative && 0 !== e.negative) return 1;
                          var t = this.ucmp(e);
                          return 0 !== this.negative ? 0 | -t : t;
                      }, o.prototype.ucmp = function(e) {
                          if (this.length > e.length) return 1;
                          if (this.length < e.length) return -1;
                          for(var t = 0, r = this.length - 1; r >= 0; r--){
                              var n = 0 | this.words[r], i = 0 | e.words[r];
                              if (n !== i) {
                                  n < i ? t = -1 : n > i && (t = 1);
                                  break;
                              }
                          }
                          return t;
                      }, o.prototype.gtn = function(e) {
                          return 1 === this.cmpn(e);
                      }, o.prototype.gt = function(e) {
                          return 1 === this.cmp(e);
                      }, o.prototype.gten = function(e) {
                          return this.cmpn(e) >= 0;
                      }, o.prototype.gte = function(e) {
                          return this.cmp(e) >= 0;
                      }, o.prototype.ltn = function(e) {
                          return -1 === this.cmpn(e);
                      }, o.prototype.lt = function(e) {
                          return -1 === this.cmp(e);
                      }, o.prototype.lten = function(e) {
                          return this.cmpn(e) <= 0;
                      }, o.prototype.lte = function(e) {
                          return this.cmp(e) <= 0;
                      }, o.prototype.eqn = function(e) {
                          return 0 === this.cmpn(e);
                      }, o.prototype.eq = function(e) {
                          return 0 === this.cmp(e);
                      }, o.red = function(e) {
                          return new E(e);
                      }, o.prototype.toRed = function(e) {
                          return n(!this.red, "Already a number in reduction context"), n(0 === this.negative, "red works only with positives"), e.convertTo(this)._forceRed(e);
                      }, o.prototype.fromRed = function() {
                          return n(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
                      }, o.prototype._forceRed = function(e) {
                          return this.red = e, this;
                      }, o.prototype.forceRed = function(e) {
                          return n(!this.red, "Already a number in reduction context"), this._forceRed(e);
                      }, o.prototype.redAdd = function(e) {
                          return n(this.red, "redAdd works only with red numbers"), this.red.add(this, e);
                      }, o.prototype.redIAdd = function(e) {
                          return n(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, e);
                      }, o.prototype.redSub = function(e) {
                          return n(this.red, "redSub works only with red numbers"), this.red.sub(this, e);
                      }, o.prototype.redISub = function(e) {
                          return n(this.red, "redISub works only with red numbers"), this.red.isub(this, e);
                      }, o.prototype.redShl = function(e) {
                          return n(this.red, "redShl works only with red numbers"), this.red.shl(this, e);
                      }, o.prototype.redMul = function(e) {
                          return n(this.red, "redMul works only with red numbers"), this.red._verify2(this, e), this.red.mul(this, e);
                      }, o.prototype.redIMul = function(e) {
                          return n(this.red, "redMul works only with red numbers"), this.red._verify2(this, e), this.red.imul(this, e);
                      }, o.prototype.redSqr = function() {
                          return n(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
                      }, o.prototype.redISqr = function() {
                          return n(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
                      }, o.prototype.redSqrt = function() {
                          return n(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
                      }, o.prototype.redInvm = function() {
                          return n(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
                      }, o.prototype.redNeg = function() {
                          return n(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
                      }, o.prototype.redPow = function(e) {
                          return n(this.red && !e.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, e);
                      };
                      var g = {
                          k256: null,
                          p224: null,
                          p192: null,
                          p25519: null
                      };
                      function v(e, t) {
                          this.name = e, this.p = new o(t, 16), this.n = this.p.bitLength(), this.k = new o(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
                      }
                      function b() {
                          v.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
                      }
                      function w() {
                          v.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
                      }
                      function _() {
                          v.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
                      }
                      function S() {
                          v.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
                      }
                      function E(e) {
                          if ("string" == typeof e) {
                              var t = o._prime(e);
                              this.m = t.p, this.prime = t;
                          } else n(e.gtn(1), "modulus must be greater than 1"), this.m = e, this.prime = null;
                      }
                      function k(e) {
                          E.call(this, e), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), this.r = new o(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
                      }
                      v.prototype._tmp = function() {
                          var e = new o(null);
                          return e.words = new Array(Math.ceil(this.n / 13)), e;
                      }, v.prototype.ireduce = function(e) {
                          var t, r = e;
                          do this.split(r, this.tmp), t = (r = (r = this.imulK(r)).iadd(this.tmp)).bitLength();
                          while (t > this.n);
                          var n = t < this.n ? -1 : r.ucmp(this.p);
                          return 0 === n ? (r.words[0] = 0, r.length = 1) : n > 0 ? r.isub(this.p) : void 0 !== r.strip ? r.strip() : r._strip(), r;
                      }, v.prototype.split = function(e, t) {
                          e.iushrn(this.n, 0, t);
                      }, v.prototype.imulK = function(e) {
                          return e.imul(this.k);
                      }, i(b, v), b.prototype.split = function(e, t) {
                          for(var r = 4194303, n = Math.min(e.length, 9), i = 0; i < n; i++)t.words[i] = e.words[i];
                          if (t.length = n, e.length <= 9) return e.words[0] = 0, void (e.length = 1);
                          var o = e.words[9];
                          for(t.words[t.length++] = o & r, i = 10; i < e.length; i++){
                              var s = 0 | e.words[i];
                              e.words[i - 10] = (s & r) << 4 | o >>> 22, o = s;
                          }
                          o >>>= 22, e.words[i - 10] = o, 0 === o && e.length > 10 ? e.length -= 10 : e.length -= 9;
                      }, b.prototype.imulK = function(e) {
                          e.words[e.length] = 0, e.words[e.length + 1] = 0, e.length += 2;
                          for(var t = 0, r = 0; r < e.length; r++){
                              var n = 0 | e.words[r];
                              t += 977 * n, e.words[r] = 67108863 & t, t = 64 * n + (t / 67108864 | 0);
                          }
                          return 0 === e.words[e.length - 1] && (e.length--, 0 === e.words[e.length - 1] && e.length--), e;
                      }, i(w, v), i(_, v), i(S, v), S.prototype.imulK = function(e) {
                          for(var t = 0, r = 0; r < e.length; r++){
                              var n = 19 * (0 | e.words[r]) + t, i = 67108863 & n;
                              n >>>= 26, e.words[r] = i, t = n;
                          }
                          return 0 !== t && (e.words[e.length++] = t), e;
                      }, o._prime = function(e) {
                          if (g[e]) return g[e];
                          var t;
                          if ("k256" === e) t = new b;
                          else if ("p224" === e) t = new w;
                          else if ("p192" === e) t = new _;
                          else {
                              if ("p25519" !== e) throw new Error("Unknown prime " + e);
                              t = new S;
                          }
                          return g[e] = t, t;
                      }, E.prototype._verify1 = function(e) {
                          n(0 === e.negative, "red works only with positives"), n(e.red, "red works only with red numbers");
                      }, E.prototype._verify2 = function(e, t) {
                          n(0 == (e.negative | t.negative), "red works only with positives"), n(e.red && e.red === t.red, "red works only with red numbers");
                      }, E.prototype.imod = function(e) {
                          return this.prime ? this.prime.ireduce(e)._forceRed(this) : e.umod(this.m)._forceRed(this);
                      }, E.prototype.neg = function(e) {
                          return e.isZero() ? e.clone() : this.m.sub(e)._forceRed(this);
                      }, E.prototype.add = function(e, t) {
                          this._verify2(e, t);
                          var r = e.add(t);
                          return r.cmp(this.m) >= 0 && r.isub(this.m), r._forceRed(this);
                      }, E.prototype.iadd = function(e, t) {
                          this._verify2(e, t);
                          var r = e.iadd(t);
                          return r.cmp(this.m) >= 0 && r.isub(this.m), r;
                      }, E.prototype.sub = function(e, t) {
                          this._verify2(e, t);
                          var r = e.sub(t);
                          return r.cmpn(0) < 0 && r.iadd(this.m), r._forceRed(this);
                      }, E.prototype.isub = function(e, t) {
                          this._verify2(e, t);
                          var r = e.isub(t);
                          return r.cmpn(0) < 0 && r.iadd(this.m), r;
                      }, E.prototype.shl = function(e, t) {
                          return this._verify1(e), this.imod(e.ushln(t));
                      }, E.prototype.imul = function(e, t) {
                          return this._verify2(e, t), this.imod(e.imul(t));
                      }, E.prototype.mul = function(e, t) {
                          return this._verify2(e, t), this.imod(e.mul(t));
                      }, E.prototype.isqr = function(e) {
                          return this.imul(e, e.clone());
                      }, E.prototype.sqr = function(e) {
                          return this.mul(e, e);
                      }, E.prototype.sqrt = function(e) {
                          if (e.isZero()) return e.clone();
                          var t = this.m.andln(3);
                          if (n(t % 2 == 1), 3 === t) {
                              var r = this.m.add(new o(1)).iushrn(2);
                              return this.pow(e, r);
                          }
                          for(var i = this.m.subn(1), s = 0; !i.isZero() && 0 === i.andln(1);)s++, i.iushrn(1);
                          n(!i.isZero());
                          var a = new o(1).toRed(this), l = a.redNeg(), u = this.m.subn(1).iushrn(1), c = this.m.bitLength();
                          for(c = new o(2 * c * c).toRed(this); 0 !== this.pow(c, u).cmp(l);)c.redIAdd(l);
                          for(var d = this.pow(c, i), h = this.pow(e, i.addn(1).iushrn(1)), f = this.pow(e, i), p = s; 0 !== f.cmp(a);){
                              for(var m = f, y = 0; 0 !== m.cmp(a); y++)m = m.redSqr();
                              n(y < p);
                              var g = this.pow(d, new o(1).iushln(p - y - 1));
                              h = h.redMul(g), d = g.redSqr(), f = f.redMul(d), p = y;
                          }
                          return h;
                      }, E.prototype.invm = function(e) {
                          var t = e._invmp(this.m);
                          return 0 !== t.negative ? (t.negative = 0, this.imod(t).redNeg()) : this.imod(t);
                      }, E.prototype.pow = function(e, t) {
                          if (t.isZero()) return new o(1).toRed(this);
                          if (0 === t.cmpn(1)) return e.clone();
                          var r = new Array(16);
                          r[0] = new o(1).toRed(this), r[1] = e;
                          for(var n = 2; n < r.length; n++)r[n] = this.mul(r[n - 1], e);
                          var i = r[0], s = 0, a = 0, l = t.bitLength() % 26;
                          for(0 === l && (l = 26), n = t.length - 1; n >= 0; n--){
                              for(var u = t.words[n], c = l - 1; c >= 0; c--){
                                  var d = u >> c & 1;
                                  i !== r[0] && (i = this.sqr(i)), 0 !== d || 0 !== s ? (s <<= 1, s |= d, (4 == ++a || 0 === n && 0 === c) && (i = this.mul(i, r[s]), a = 0, s = 0)) : a = 0;
                              }
                              l = 26;
                          }
                          return i;
                      }, E.prototype.convertTo = function(e) {
                          var t = e.umod(this.m);
                          return t === e ? t.clone() : t;
                      }, E.prototype.convertFrom = function(e) {
                          var t = e.clone();
                          return t.red = null, t;
                      }, o.mont = function(e) {
                          return new k(e);
                      }, i(k, E), k.prototype.convertTo = function(e) {
                          return this.imod(e.ushln(this.shift));
                      }, k.prototype.convertFrom = function(e) {
                          var t = this.imod(e.mul(this.rinv));
                          return t.red = null, t;
                      }, k.prototype.imul = function(e, t) {
                          if (e.isZero() || t.isZero()) return e.words[0] = 0, e.length = 1, e;
                          var r = e.imul(t), n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), i = r.isub(n).iushrn(this.shift), o = i;
                          return i.cmp(this.m) >= 0 ? o = i.isub(this.m) : i.cmpn(0) < 0 && (o = i.iadd(this.m)), o._forceRed(this);
                      }, k.prototype.mul = function(e, t) {
                          if (e.isZero() || t.isZero()) return new o(0)._forceRed(this);
                          var r = e.mul(t), n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), i = r.isub(n).iushrn(this.shift), s = i;
                          return i.cmp(this.m) >= 0 ? s = i.isub(this.m) : i.cmpn(0) < 0 && (s = i.iadd(this.m)), s._forceRed(this);
                      }, k.prototype.invm = function(e) {
                          return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this);
                      };
                  }(e = r.nmd(e), this);
              },
              9982: (e, t, r)=>{
                  "use strict";
                  r.r(t), r.d(t, {
                      BaseContract: ()=>On,
                      BigNumber: ()=>H,
                      Contract: ()=>Bn,
                      ContractFactory: ()=>In,
                      FixedNumber: ()=>Wn,
                      Signer: ()=>lr,
                      VoidSigner: ()=>ur,
                      Wallet: ()=>bo,
                      Wordlist: ()=>_i,
                      constants: ()=>i,
                      errors: ()=>y,
                      ethers: ()=>l,
                      getDefaultProvider: ()=>Ga,
                      logger: ()=>dl,
                      providers: ()=>o,
                      utils: ()=>a,
                      version: ()=>cl,
                      wordlists: ()=>Ai
                  });
                  var n = {};
                  r.r(n), r.d(n, {
                      decode: ()=>Pe,
                      encode: ()=>Ee
                  });
                  var i = {};
                  r.r(i), r.d(i, {
                      AddressZero: ()=>So,
                      EtherSymbol: ()=>ko,
                      HashZero: ()=>Eo,
                      MaxInt256: ()=>mt,
                      MaxUint256: ()=>ft,
                      MinInt256: ()=>pt,
                      NegativeOne: ()=>lt,
                      One: ()=>ct,
                      Two: ()=>dt,
                      WeiPerEther: ()=>ht,
                      Zero: ()=>ut
                  });
                  var o = {};
                  r.r(o), r.d(o, {
                      AlchemyProvider: ()=>na,
                      AlchemyWebSocketProvider: ()=>ra,
                      BaseProvider: ()=>Bs,
                      CloudflareProvider: ()=>oa,
                      EtherscanProvider: ()=>pa,
                      FallbackProvider: ()=>xa,
                      Formatter: ()=>ls,
                      InfuraProvider: ()=>Ia,
                      InfuraWebSocketProvider: ()=>Ba,
                      IpcProvider: ()=>Ta,
                      JsonRpcBatchProvider: ()=>Ma,
                      JsonRpcProvider: ()=>Ws,
                      JsonRpcSigner: ()=>qs,
                      NodesmithProvider: ()=>Ka,
                      PocketProvider: ()=>ja,
                      Provider: ()=>nr,
                      Resolver: ()=>Ts,
                      StaticJsonRpcProvider: ()=>Qs,
                      UrlJsonRpcProvider: ()=>Ys,
                      Web3Provider: ()=>Va,
                      WebSocketProvider: ()=>Zs,
                      getDefaultProvider: ()=>Ga,
                      getNetwork: ()=>Oo,
                      isCommunityResourcable: ()=>us,
                      isCommunityResource: ()=>cs,
                      showThrottleMessage: ()=>hs
                  });
                  var s = {};
                  r.r(s), r.d(s, {
                      decode: ()=>$o,
                      encode: ()=>Zo
                  });
                  var a = {};
                  r.r(a), r.d(a, {
                      AbiCoder: ()=>Wt,
                      ConstructorFragment: ()=>It,
                      ErrorFragment: ()=>Kt,
                      EventFragment: ()=>Tt,
                      FormatTypes: ()=>At,
                      Fragment: ()=>xt,
                      FunctionFragment: ()=>Mt,
                      HDNode: ()=>Di,
                      Indexed: ()=>Xt,
                      Interface: ()=>er,
                      LogDescription: ()=>Ht,
                      Logger: ()=>v,
                      ParamType: ()=>Nt,
                      RLP: ()=>n,
                      SigningKey: ()=>Xr,
                      SupportedAlgorithm: ()=>fi,
                      TransactionDescription: ()=>$t,
                      TransactionTypes: ()=>tn,
                      UnicodeNormalizationForm: ()=>Fe,
                      Utf8ErrorFuncs: ()=>qe,
                      Utf8ErrorReason: ()=>je,
                      _TypedDataEncoder: ()=>ci,
                      _fetchData: ()=>ts,
                      _toEscapedUtf8String: ()=>Ge,
                      accessListify: ()=>dn,
                      arrayify: ()=>A,
                      base58: ()=>hi,
                      base64: ()=>s,
                      checkProperties: ()=>ne,
                      checkResultErrors: ()=>he,
                      commify: ()=>ol,
                      computeAddress: ()=>an,
                      computeHmac: ()=>vi,
                      computePublicKey: ()=>Yr,
                      concat: ()=>P,
                      deepCopy: ()=>le,
                      defaultAbiCoder: ()=>Gt,
                      defaultPath: ()=>Mi,
                      defineReadOnly: ()=>ee,
                      entropyToMnemonic: ()=>Fi,
                      fetchJson: ()=>rs,
                      formatBytes32String: ()=>tl,
                      formatEther: ()=>ll,
                      formatUnits: ()=>sl,
                      getAccountPath: ()=>Li,
                      getAddress: ()=>Be,
                      getContractAddress: ()=>De,
                      getCreate2Address: ()=>Ke,
                      getIcapAddress: ()=>Me,
                      getJsonWalletAddress: ()=>oo,
                      getStatic: ()=>te,
                      hashMessage: ()=>Hn,
                      hexConcat: ()=>I,
                      hexDataLength: ()=>O,
                      hexDataSlice: ()=>B,
                      hexStripZeros: ()=>D,
                      hexValue: ()=>M,
                      hexZeroPad: ()=>K,
                      hexlify: ()=>R,
                      id: ()=>Ze,
                      isAddress: ()=>Ie,
                      isBytes: ()=>k,
                      isBytesLike: ()=>S,
                      isHexString: ()=>x,
                      isValidMnemonic: ()=>ji,
                      isValidName: ()=>Jo,
                      joinSignature: ()=>F,
                      keccak256: ()=>ve,
                      mnemonicToEntropy: ()=>Ui,
                      mnemonicToSeed: ()=>Ki,
                      namehash: ()=>Ho,
                      nameprep: ()=>zo,
                      parseBytes32String: ()=>rl,
                      parseEther: ()=>ul,
                      parseTransaction: ()=>gn,
                      parseUnits: ()=>al,
                      poll: ()=>ns,
                      randomBytes: ()=>Wi,
                      recoverAddress: ()=>ln,
                      recoverPublicKey: ()=>Qr,
                      resolveProperties: ()=>re,
                      ripemd160: ()=>mi,
                      serializeTransaction: ()=>mn,
                      sha256: ()=>yi,
                      sha512: ()=>gi,
                      shallowCopy: ()=>ie,
                      shuffled: ()=>ma,
                      solidityKeccak256: ()=>Ya,
                      solidityPack: ()=>Qa,
                      soliditySha256: ()=>el,
                      splitSignature: ()=>U,
                      stripZeros: ()=>N,
                      toUtf8Bytes: ()=>Ve,
                      toUtf8CodePoints: ()=>$e,
                      toUtf8String: ()=>He,
                      verifyMessage: ()=>wo,
                      verifyTypedData: ()=>_o,
                      zeroPad: ()=>C
                  });
                  var l = {};
                  r.r(l), r.d(l, {
                      BaseContract: ()=>On,
                      BigNumber: ()=>H,
                      Contract: ()=>Bn,
                      ContractFactory: ()=>In,
                      FixedNumber: ()=>Wn,
                      Signer: ()=>lr,
                      VoidSigner: ()=>ur,
                      Wallet: ()=>bo,
                      Wordlist: ()=>_i,
                      constants: ()=>i,
                      errors: ()=>y,
                      getDefaultProvider: ()=>Ga,
                      logger: ()=>dl,
                      providers: ()=>o,
                      utils: ()=>a,
                      version: ()=>cl,
                      wordlists: ()=>Ai
                  });
                  let u = !1, c = !1;
                  const d = {
                      debug: 1,
                      default: 2,
                      info: 2,
                      warning: 3,
                      error: 4,
                      off: 5
                  };
                  let h = d.default, f = null;
                  const p = function() {
                      try {
                          const e = [];
                          if ([
                              "NFD",
                              "NFC",
                              "NFKD",
                              "NFKC"
                          ].forEach((t)=>{
                              try {
                                  if ("test" !== "test".normalize(t)) throw new Error("bad normalize");
                              } catch (r) {
                                  e.push(t);
                              }
                          }), e.length) throw new Error("missing " + e.join(", "));
                          if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) throw new Error("broken implementation");
                      } catch (e) {
                          return e.message;
                      }
                      return null;
                  }();
                  var m, y;
                  !function(e) {
                      e.DEBUG = "DEBUG", e.INFO = "INFO", e.WARNING = "WARNING", e.ERROR = "ERROR", e.OFF = "OFF";
                  }(m || (m = {})), function(e) {
                      e.UNKNOWN_ERROR = "UNKNOWN_ERROR", e.NOT_IMPLEMENTED = "NOT_IMPLEMENTED", e.UNSUPPORTED_OPERATION = "UNSUPPORTED_OPERATION", e.NETWORK_ERROR = "NETWORK_ERROR", e.SERVER_ERROR = "SERVER_ERROR", e.TIMEOUT = "TIMEOUT", e.BUFFER_OVERRUN = "BUFFER_OVERRUN", e.NUMERIC_FAULT = "NUMERIC_FAULT", e.MISSING_NEW = "MISSING_NEW", e.INVALID_ARGUMENT = "INVALID_ARGUMENT", e.MISSING_ARGUMENT = "MISSING_ARGUMENT", e.UNEXPECTED_ARGUMENT = "UNEXPECTED_ARGUMENT", e.CALL_EXCEPTION = "CALL_EXCEPTION", e.INSUFFICIENT_FUNDS = "INSUFFICIENT_FUNDS", e.NONCE_EXPIRED = "NONCE_EXPIRED", e.REPLACEMENT_UNDERPRICED = "REPLACEMENT_UNDERPRICED", e.UNPREDICTABLE_GAS_LIMIT = "UNPREDICTABLE_GAS_LIMIT", e.TRANSACTION_REPLACED = "TRANSACTION_REPLACED";
                  }(y || (y = {}));
                  const g = "0123456789abcdef";
                  class v {
                      constructor(e){
                          Object.defineProperty(this, "version", {
                              enumerable: !0,
                              value: e,
                              writable: !1
                          });
                      }
                      _log(e, t) {
                          const r = e.toLowerCase();
                          null == d[r] && this.throwArgumentError("invalid log level name", "logLevel", e), h > d[r] || console.log.apply(console, t);
                      }
                      debug(...e) {
                          this._log(v.levels.DEBUG, e);
                      }
                      info(...e) {
                          this._log(v.levels.INFO, e);
                      }
                      warn(...e) {
                          this._log(v.levels.WARNING, e);
                      }
                      makeError(e, t, r) {
                          if (c) return this.makeError("censored error", t, {});
                          t || (t = v.errors.UNKNOWN_ERROR), r || (r = {});
                          const n = [];
                          Object.keys(r).forEach((e)=>{
                              const t = r[e];
                              try {
                                  if (t instanceof Uint8Array) {
                                      let r = "";
                                      for(let e = 0; e < t.length; e++)r += g[t[e] >> 4], r += g[15 & t[e]];
                                      n.push(e + "=Uint8Array(0x" + r + ")");
                                  } else n.push(e + "=" + JSON.stringify(t));
                              } catch (t) {
                                  n.push(e + "=" + JSON.stringify(r[e].toString()));
                              }
                          }), n.push(`code=${t}`), n.push(`version=${this.version}`);
                          const i = e;
                          n.length && (e += " (" + n.join(", ") + ")");
                          const o = new Error(e);
                          return o.reason = i, o.code = t, Object.keys(r).forEach(function(e) {
                              o[e] = r[e];
                          }), o;
                      }
                      throwError(e, t, r) {
                          throw this.makeError(e, t, r);
                      }
                      throwArgumentError(e, t, r) {
                          return this.throwError(e, v.errors.INVALID_ARGUMENT, {
                              argument: t,
                              value: r
                          });
                      }
                      assert(e, t, r, n) {
                          e || this.throwError(t, r, n);
                      }
                      assertArgument(e, t, r, n) {
                          e || this.throwArgumentError(t, r, n);
                      }
                      checkNormalize(e) {
                          null == e && (e = "platform missing String.prototype.normalize"), p && this.throwError("platform missing String.prototype.normalize", v.errors.UNSUPPORTED_OPERATION, {
                              operation: "String.prototype.normalize",
                              form: p
                          });
                      }
                      checkSafeUint53(e, t) {
                          "number" == typeof e && (null == t && (t = "value not safe"), (e < 0 || e >= 9007199254740991) && this.throwError(t, v.errors.NUMERIC_FAULT, {
                              operation: "checkSafeInteger",
                              fault: "out-of-safe-range",
                              value: e
                          }), e % 1 && this.throwError(t, v.errors.NUMERIC_FAULT, {
                              operation: "checkSafeInteger",
                              fault: "non-integer",
                              value: e
                          }));
                      }
                      checkArgumentCount(e, t, r) {
                          r = r ? ": " + r : "", e < t && this.throwError("missing argument" + r, v.errors.MISSING_ARGUMENT, {
                              count: e,
                              expectedCount: t
                          }), e > t && this.throwError("too many arguments" + r, v.errors.UNEXPECTED_ARGUMENT, {
                              count: e,
                              expectedCount: t
                          });
                      }
                      checkNew(e, t) {
                          e !== Object && null != e || this.throwError("missing new", v.errors.MISSING_NEW, {
                              name: t.name
                          });
                      }
                      checkAbstract(e, t) {
                          e === t ? this.throwError("cannot instantiate abstract class " + JSON.stringify(t.name) + " directly; use a sub-class", v.errors.UNSUPPORTED_OPERATION, {
                              name: e.name,
                              operation: "new"
                          }) : e !== Object && null != e || this.throwError("missing new", v.errors.MISSING_NEW, {
                              name: t.name
                          });
                      }
                      static globalLogger() {
                          return f || (f = new v("logger/5.5.0")), f;
                      }
                      static setCensorship(e, t) {
                          if (!e && t && this.globalLogger().throwError("cannot permanently disable censorship", v.errors.UNSUPPORTED_OPERATION, {
                              operation: "setCensorship"
                          }), u) {
                              if (!e) return;
                              this.globalLogger().throwError("error censorship permanent", v.errors.UNSUPPORTED_OPERATION, {
                                  operation: "setCensorship"
                              });
                          }
                          c = !!e, u = !!t;
                      }
                      static setLogLevel(e) {
                          const t = d[e.toLowerCase()];
                          null != t ? h = t : v.globalLogger().warn("invalid log level - " + e);
                      }
                      static from(e) {
                          return new v(e);
                      }
                  }
                  v.errors = y, v.levels = m;
                  const b = new v("bytes/5.5.0");
                  function w(e) {
                      return !!e.toHexString;
                  }
                  function _(e) {
                      return e.slice || (e.slice = function() {
                          const t = Array.prototype.slice.call(arguments);
                          return _(new Uint8Array(Array.prototype.slice.apply(e, t)));
                      }), e;
                  }
                  function S(e) {
                      return x(e) && !(e.length % 2) || k(e);
                  }
                  function E(e) {
                      return "number" == typeof e && e == e && e % 1 == 0;
                  }
                  function k(e) {
                      if (null == e) return !1;
                      if (e.constructor === Uint8Array) return !0;
                      if ("string" == typeof e) return !1;
                      if (!E(e.length) || e.length < 0) return !1;
                      for(let t = 0; t < e.length; t++){
                          const r = e[t];
                          if (!E(r) || r < 0 || r >= 256) return !1;
                      }
                      return !0;
                  }
                  function A(e, t) {
                      if (t || (t = {}), "number" == typeof e) {
                          b.checkSafeUint53(e, "invalid arrayify value");
                          const t = [];
                          for(; e;)t.unshift(255 & e), e = parseInt(String(e / 256));
                          return 0 === t.length && t.push(0), _(new Uint8Array(t));
                      }
                      if (t.allowMissingPrefix && "string" == typeof e && "0x" !== e.substring(0, 2) && (e = "0x" + e), w(e) && (e = e.toHexString()), x(e)) {
                          let r = e.substring(2);
                          r.length % 2 && ("left" === t.hexPad ? r = "0x0" + r.substring(2) : "right" === t.hexPad ? r += "0" : b.throwArgumentError("hex data is odd-length", "value", e));
                          const n = [];
                          for(let e = 0; e < r.length; e += 2)n.push(parseInt(r.substring(e, e + 2), 16));
                          return _(new Uint8Array(n));
                      }
                      return k(e) ? _(new Uint8Array(e)) : b.throwArgumentError("invalid arrayify value", "value", e);
                  }
                  function P(e) {
                      const t = e.map((e)=>A(e)), r = t.reduce((e, t)=>e + t.length, 0), n = new Uint8Array(r);
                      return t.reduce((e, t)=>(n.set(t, e), e + t.length), 0), _(n);
                  }
                  function N(e) {
                      let t = A(e);
                      if (0 === t.length) return t;
                      let r = 0;
                      for(; r < t.length && 0 === t[r];)r++;
                      return r && (t = t.slice(r)), t;
                  }
                  function C(e, t) {
                      (e = A(e)).length > t && b.throwArgumentError("value out of range", "value", arguments[0]);
                      const r = new Uint8Array(t);
                      return r.set(e, t - e.length), _(r);
                  }
                  function x(e, t) {
                      return !("string" != typeof e || !e.match(/^0x[0-9A-Fa-f]*$/) || t && e.length !== 2 + 2 * t);
                  }
                  const T = "0123456789abcdef";
                  function R(e, t) {
                      if (t || (t = {}), "number" == typeof e) {
                          b.checkSafeUint53(e, "invalid hexlify value");
                          let t = "";
                          for(; e;)t = T[15 & e] + t, e = Math.floor(e / 16);
                          return t.length ? (t.length % 2 && (t = "0" + t), "0x" + t) : "0x00";
                      }
                      if ("bigint" == typeof e) return (e = e.toString(16)).length % 2 ? "0x0" + e : "0x" + e;
                      if (t.allowMissingPrefix && "string" == typeof e && "0x" !== e.substring(0, 2) && (e = "0x" + e), w(e)) return e.toHexString();
                      if (x(e)) return e.length % 2 && ("left" === t.hexPad ? e = "0x0" + e.substring(2) : "right" === t.hexPad ? e += "0" : b.throwArgumentError("hex data is odd-length", "value", e)), e.toLowerCase();
                      if (k(e)) {
                          let t = "0x";
                          for(let r = 0; r < e.length; r++){
                              let n = e[r];
                              t += T[(240 & n) >> 4] + T[15 & n];
                          }
                          return t;
                      }
                      return b.throwArgumentError("invalid hexlify value", "value", e);
                  }
                  function O(e) {
                      if ("string" != typeof e) e = R(e);
                      else if (!x(e) || e.length % 2) return null;
                      return (e.length - 2) / 2;
                  }
                  function B(e, t, r) {
                      return "string" != typeof e ? e = R(e) : (!x(e) || e.length % 2) && b.throwArgumentError("invalid hexData", "value", e), t = 2 + 2 * t, null != r ? "0x" + e.substring(t, 2 + 2 * r) : "0x" + e.substring(t);
                  }
                  function I(e) {
                      let t = "0x";
                      return e.forEach((e)=>{
                          t += R(e).substring(2);
                      }), t;
                  }
                  function M(e) {
                      const t = D(R(e, {
                          hexPad: "left"
                      }));
                      return "0x" === t ? "0x0" : t;
                  }
                  function D(e) {
                      "string" != typeof e && (e = R(e)), x(e) || b.throwArgumentError("invalid hex string", "value", e), e = e.substring(2);
                      let t = 0;
                      for(; t < e.length && "0" === e[t];)t++;
                      return "0x" + e.substring(t);
                  }
                  function K(e, t) {
                      for("string" != typeof e ? e = R(e) : x(e) || b.throwArgumentError("invalid hex string", "value", e), e.length > 2 * t + 2 && b.throwArgumentError("value out of range", "value", arguments[1]); e.length < 2 * t + 2;)e = "0x0" + e.substring(2);
                      return e;
                  }
                  function U(e) {
                      const t = {
                          r: "0x",
                          s: "0x",
                          _vs: "0x",
                          recoveryParam: 0,
                          v: 0
                      };
                      if (S(e)) {
                          const r = A(e);
                          65 !== r.length && b.throwArgumentError("invalid signature string; must be 65 bytes", "signature", e), t.r = R(r.slice(0, 32)), t.s = R(r.slice(32, 64)), t.v = r[64], t.v < 27 && (0 === t.v || 1 === t.v ? t.v += 27 : b.throwArgumentError("signature invalid v byte", "signature", e)), t.recoveryParam = 1 - t.v % 2, t.recoveryParam && (r[32] |= 128), t._vs = R(r.slice(32, 64));
                      } else {
                          if (t.r = e.r, t.s = e.s, t.v = e.v, t.recoveryParam = e.recoveryParam, t._vs = e._vs, null != t._vs) {
                              const r = C(A(t._vs), 32);
                              t._vs = R(r);
                              const n = r[0] >= 128 ? 1 : 0;
                              null == t.recoveryParam ? t.recoveryParam = n : t.recoveryParam !== n && b.throwArgumentError("signature recoveryParam mismatch _vs", "signature", e), r[0] &= 127;
                              const i = R(r);
                              null == t.s ? t.s = i : t.s !== i && b.throwArgumentError("signature v mismatch _vs", "signature", e);
                          }
                          if (null == t.recoveryParam) null == t.v ? b.throwArgumentError("signature missing v and recoveryParam", "signature", e) : 0 === t.v || 1 === t.v ? t.recoveryParam = t.v : t.recoveryParam = 1 - t.v % 2;
                          else if (null == t.v) t.v = 27 + t.recoveryParam;
                          else {
                              const r = 0 === t.v || 1 === t.v ? t.v : 1 - t.v % 2;
                              t.recoveryParam !== r && b.throwArgumentError("signature recoveryParam mismatch v", "signature", e);
                          }
                          null != t.r && x(t.r) ? t.r = K(t.r, 32) : b.throwArgumentError("signature missing or invalid r", "signature", e), null != t.s && x(t.s) ? t.s = K(t.s, 32) : b.throwArgumentError("signature missing or invalid s", "signature", e);
                          const r = A(t.s);
                          r[0] >= 128 && b.throwArgumentError("signature s out of range", "signature", e), t.recoveryParam && (r[0] |= 128);
                          const n = R(r);
                          t._vs && (x(t._vs) || b.throwArgumentError("signature invalid _vs", "signature", e), t._vs = K(t._vs, 32)), null == t._vs ? t._vs = n : t._vs !== n && b.throwArgumentError("signature _vs mismatch v and s", "signature", e);
                      }
                      return t;
                  }
                  function F(e) {
                      return R(P([
                          (e = U(e)).r,
                          e.s,
                          e.recoveryParam ? "0x1c" : "0x1b"
                      ]));
                  }
                  var j = r(3550), L = r.n(j);
                  const q = "bignumber/5.5.0";
                  var z = L().BN;
                  const V = new v(q), W = {}, G = 9007199254740991;
                  let J = !1;
                  class H {
                      constructor(e, t){
                          V.checkNew(new.target, H), e !== W && V.throwError("cannot call constructor directly; use BigNumber.from", v.errors.UNSUPPORTED_OPERATION, {
                              operation: "new (BigNumber)"
                          }), this._hex = t, this._isBigNumber = !0, Object.freeze(this);
                      }
                      fromTwos(e) {
                          return Z(X(this).fromTwos(e));
                      }
                      toTwos(e) {
                          return Z(X(this).toTwos(e));
                      }
                      abs() {
                          return "-" === this._hex[0] ? H.from(this._hex.substring(1)) : this;
                      }
                      add(e) {
                          return Z(X(this).add(X(e)));
                      }
                      sub(e) {
                          return Z(X(this).sub(X(e)));
                      }
                      div(e) {
                          return H.from(e).isZero() && Q("division by zero", "div"), Z(X(this).div(X(e)));
                      }
                      mul(e) {
                          return Z(X(this).mul(X(e)));
                      }
                      mod(e) {
                          const t = X(e);
                          return t.isNeg() && Q("cannot modulo negative values", "mod"), Z(X(this).umod(t));
                      }
                      pow(e) {
                          const t = X(e);
                          return t.isNeg() && Q("cannot raise to negative values", "pow"), Z(X(this).pow(t));
                      }
                      and(e) {
                          const t = X(e);
                          return (this.isNegative() || t.isNeg()) && Q("cannot 'and' negative values", "and"), Z(X(this).and(t));
                      }
                      or(e) {
                          const t = X(e);
                          return (this.isNegative() || t.isNeg()) && Q("cannot 'or' negative values", "or"), Z(X(this).or(t));
                      }
                      xor(e) {
                          const t = X(e);
                          return (this.isNegative() || t.isNeg()) && Q("cannot 'xor' negative values", "xor"), Z(X(this).xor(t));
                      }
                      mask(e) {
                          return (this.isNegative() || e < 0) && Q("cannot mask negative values", "mask"), Z(X(this).maskn(e));
                      }
                      shl(e) {
                          return (this.isNegative() || e < 0) && Q("cannot shift negative values", "shl"), Z(X(this).shln(e));
                      }
                      shr(e) {
                          return (this.isNegative() || e < 0) && Q("cannot shift negative values", "shr"), Z(X(this).shrn(e));
                      }
                      eq(e) {
                          return X(this).eq(X(e));
                      }
                      lt(e) {
                          return X(this).lt(X(e));
                      }
                      lte(e) {
                          return X(this).lte(X(e));
                      }
                      gt(e) {
                          return X(this).gt(X(e));
                      }
                      gte(e) {
                          return X(this).gte(X(e));
                      }
                      isNegative() {
                          return "-" === this._hex[0];
                      }
                      isZero() {
                          return X(this).isZero();
                      }
                      toNumber() {
                          try {
                              return X(this).toNumber();
                          } catch (e) {
                              Q("overflow", "toNumber", this.toString());
                          }
                          return null;
                      }
                      toBigInt() {
                          try {
                              return BigInt(this.toString());
                          } catch (e) {}
                          return V.throwError("this platform does not support BigInt", v.errors.UNSUPPORTED_OPERATION, {
                              value: this.toString()
                          });
                      }
                      toString() {
                          return arguments.length > 0 && (10 === arguments[0] ? J || (J = !0, V.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")) : 16 === arguments[0] ? V.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", v.errors.UNEXPECTED_ARGUMENT, {}) : V.throwError("BigNumber.toString does not accept parameters", v.errors.UNEXPECTED_ARGUMENT, {})), X(this).toString(10);
                      }
                      toHexString() {
                          return this._hex;
                      }
                      toJSON(e) {
                          return {
                              type: "BigNumber",
                              hex: this.toHexString()
                          };
                      }
                      static from(e) {
                          if (e instanceof H) return e;
                          if ("string" == typeof e) return e.match(/^-?0x[0-9a-f]+$/i) ? new H(W, $(e)) : e.match(/^-?[0-9]+$/) ? new H(W, $(new z(e))) : V.throwArgumentError("invalid BigNumber string", "value", e);
                          if ("number" == typeof e) return e % 1 && Q("underflow", "BigNumber.from", e), (e >= G || e <= -G) && Q("overflow", "BigNumber.from", e), H.from(String(e));
                          const t = e;
                          if ("bigint" == typeof t) return H.from(t.toString());
                          if (k(t)) return H.from(R(t));
                          if (t) {
                              if (t.toHexString) {
                                  const e = t.toHexString();
                                  if ("string" == typeof e) return H.from(e);
                              } else {
                                  let e = t._hex;
                                  if (null == e && "BigNumber" === t.type && (e = t.hex), "string" == typeof e && (x(e) || "-" === e[0] && x(e.substring(1)))) return H.from(e);
                              }
                          }
                          return V.throwArgumentError("invalid BigNumber value", "value", e);
                      }
                      static isBigNumber(e) {
                          return !(!e || !e._isBigNumber);
                      }
                  }
                  function $(e) {
                      if ("string" != typeof e) return $(e.toString(16));
                      if ("-" === e[0]) return "-" === (e = e.substring(1))[0] && V.throwArgumentError("invalid hex", "value", e), "0x00" === (e = $(e)) ? e : "-" + e;
                      if ("0x" !== e.substring(0, 2) && (e = "0x" + e), "0x" === e) return "0x00";
                      for(e.length % 2 && (e = "0x0" + e.substring(2)); e.length > 4 && "0x00" === e.substring(0, 4);)e = "0x" + e.substring(4);
                      return e;
                  }
                  function Z(e) {
                      return H.from($(e));
                  }
                  function X(e) {
                      const t = H.from(e).toHexString();
                      return "-" === t[0] ? new z("-" + t.substring(3), 16) : new z(t.substring(2), 16);
                  }
                  function Q(e, t, r) {
                      const n = {
                          fault: e,
                          operation: t
                      };
                      return null != r && (n.value = r), V.throwError(e, v.errors.NUMERIC_FAULT, n);
                  }
                  const Y = new v("properties/5.5.0");
                  function ee(e, t, r) {
                      Object.defineProperty(e, t, {
                          enumerable: !0,
                          value: r,
                          writable: !1
                      });
                  }
                  function te(e, t) {
                      for(let r = 0; r < 32; r++){
                          if (e[t]) return e[t];
                          if (!e.prototype || "object" != typeof e.prototype) break;
                          e = Object.getPrototypeOf(e.prototype).constructor;
                      }
                      return null;
                  }
                  function re(e) {
                      var t, r, n, i;
                      return t = this, r = void 0, i = function*() {
                          const t = Object.keys(e).map((t)=>{
                              const r = e[t];
                              return Promise.resolve(r).then((e)=>({
                                      key: t,
                                      value: e
                                  }));
                          });
                          return (yield Promise.all(t)).reduce((e, t)=>(e[t.key] = t.value, e), {});
                      }, new (n = void 0, n = Promise)(function(e, o) {
                          function s(e) {
                              try {
                                  l(i.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(i.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(t) {
                              var r;
                              t.done ? e(t.value) : (r = t.value, r instanceof n ? r : new n(function(e) {
                                  e(r);
                              })).then(s, a);
                          }
                          l((i = i.apply(t, r || [])).next());
                      });
                  }
                  function ne(e, t) {
                      e && "object" == typeof e || Y.throwArgumentError("invalid object", "object", e), Object.keys(e).forEach((r)=>{
                          t[r] || Y.throwArgumentError("invalid object key - " + r, "transaction:" + r, e);
                      });
                  }
                  function ie(e) {
                      const t = {};
                      for(const r in e)t[r] = e[r];
                      return t;
                  }
                  const oe = {
                      bigint: !0,
                      boolean: !0,
                      function: !0,
                      number: !0,
                      string: !0
                  };
                  function se(e) {
                      if (null == e || oe[typeof e]) return !0;
                      if (Array.isArray(e) || "object" == typeof e) {
                          if (!Object.isFrozen(e)) return !1;
                          const t = Object.keys(e);
                          for(let r = 0; r < t.length; r++){
                              let n = null;
                              try {
                                  n = e[t[r]];
                              } catch (e) {
                                  continue;
                              }
                              if (!se(n)) return !1;
                          }
                          return !0;
                      }
                      return Y.throwArgumentError("Cannot deepCopy " + typeof e, "object", e);
                  }
                  function ae(e) {
                      if (se(e)) return e;
                      if (Array.isArray(e)) return Object.freeze(e.map((e)=>le(e)));
                      if ("object" == typeof e) {
                          const t = {};
                          for(const r in e){
                              const n = e[r];
                              void 0 !== n && ee(t, r, le(n));
                          }
                          return t;
                      }
                      return Y.throwArgumentError("Cannot deepCopy " + typeof e, "object", e);
                  }
                  function le(e) {
                      return ae(e);
                  }
                  class ue {
                      constructor(e){
                          for(const t in e)this[t] = le(e[t]);
                      }
                  }
                  const ce = "abi/5.5.0", de = new v(ce);
                  function he(e) {
                      const t = [], r = function(e, n) {
                          if (Array.isArray(n)) for(let i in n){
                              const o = e.slice();
                              o.push(i);
                              try {
                                  r(o, n[i]);
                              } catch (e) {
                                  t.push({
                                      path: o,
                                      error: e
                                  });
                              }
                          }
                      };
                      return r([], e), t;
                  }
                  class fe {
                      constructor(e, t, r, n){
                          this.name = e, this.type = t, this.localName = r, this.dynamic = n;
                      }
                      _throwError(e, t) {
                          de.throwArgumentError(e, this.localName, t);
                      }
                  }
                  class pe {
                      constructor(e){
                          ee(this, "wordSize", e || 32), this._data = [], this._dataLength = 0, this._padding = new Uint8Array(e);
                      }
                      get data() {
                          return I(this._data);
                      }
                      get length() {
                          return this._dataLength;
                      }
                      _writeData(e) {
                          return this._data.push(e), this._dataLength += e.length, e.length;
                      }
                      appendWriter(e) {
                          return this._writeData(P(e._data));
                      }
                      writeBytes(e) {
                          let t = A(e);
                          const r = t.length % this.wordSize;
                          return r && (t = P([
                              t,
                              this._padding.slice(r)
                          ])), this._writeData(t);
                      }
                      _getValue(e) {
                          let t = A(H.from(e));
                          return t.length > this.wordSize && de.throwError("value out-of-bounds", v.errors.BUFFER_OVERRUN, {
                              length: this.wordSize,
                              offset: t.length
                          }), t.length % this.wordSize && (t = P([
                              this._padding.slice(t.length % this.wordSize),
                              t
                          ])), t;
                      }
                      writeValue(e) {
                          return this._writeData(this._getValue(e));
                      }
                      writeUpdatableValue() {
                          const e = this._data.length;
                          return this._data.push(this._padding), this._dataLength += this.wordSize, (t)=>{
                              this._data[e] = this._getValue(t);
                          };
                      }
                  }
                  class me {
                      constructor(e, t, r, n){
                          ee(this, "_data", A(e)), ee(this, "wordSize", t || 32), ee(this, "_coerceFunc", r), ee(this, "allowLoose", n), this._offset = 0;
                      }
                      get data() {
                          return R(this._data);
                      }
                      get consumed() {
                          return this._offset;
                      }
                      static coerce(e, t) {
                          let r = e.match("^u?int([0-9]+)$");
                          return r && parseInt(r[1]) <= 48 && (t = t.toNumber()), t;
                      }
                      coerce(e, t) {
                          return this._coerceFunc ? this._coerceFunc(e, t) : me.coerce(e, t);
                      }
                      _peekBytes(e, t, r) {
                          let n = Math.ceil(t / this.wordSize) * this.wordSize;
                          return this._offset + n > this._data.length && (this.allowLoose && r && this._offset + t <= this._data.length ? n = t : de.throwError("data out-of-bounds", v.errors.BUFFER_OVERRUN, {
                              length: this._data.length,
                              offset: this._offset + n
                          })), this._data.slice(this._offset, this._offset + n);
                      }
                      subReader(e) {
                          return new me(this._data.slice(this._offset + e), this.wordSize, this._coerceFunc, this.allowLoose);
                      }
                      readBytes(e, t) {
                          let r = this._peekBytes(0, e, !!t);
                          return this._offset += r.length, r.slice(0, e);
                      }
                      readValue() {
                          return H.from(this.readBytes(this.wordSize));
                      }
                  }
                  var ye = r(1094), ge = r.n(ye);
                  function ve(e) {
                      return "0x" + ge().keccak_256(A(e));
                  }
                  const be = new v("rlp/5.5.0");
                  function we(e) {
                      const t = [];
                      for(; e;)t.unshift(255 & e), e >>= 8;
                      return t;
                  }
                  function _e(e, t, r) {
                      let n = 0;
                      for(let i = 0; i < r; i++)n = 256 * n + e[t + i];
                      return n;
                  }
                  function Se(e) {
                      if (Array.isArray(e)) {
                          let t = [];
                          if (e.forEach(function(e) {
                              t = t.concat(Se(e));
                          }), t.length <= 55) return t.unshift(192 + t.length), t;
                          const r = we(t.length);
                          return r.unshift(247 + r.length), r.concat(t);
                      }
                      S(e) || be.throwArgumentError("RLP object must be BytesLike", "object", e);
                      const t = Array.prototype.slice.call(A(e));
                      if (1 === t.length && t[0] <= 127) return t;
                      if (t.length <= 55) return t.unshift(128 + t.length), t;
                      const r = we(t.length);
                      return r.unshift(183 + r.length), r.concat(t);
                  }
                  function Ee(e) {
                      return R(Se(e));
                  }
                  function ke(e, t, r, n) {
                      const i = [];
                      for(; r < t + 1 + n;){
                          const o = Ae(e, r);
                          i.push(o.result), (r += o.consumed) > t + 1 + n && be.throwError("child data too short", v.errors.BUFFER_OVERRUN, {});
                      }
                      return {
                          consumed: 1 + n,
                          result: i
                      };
                  }
                  function Ae(e, t) {
                      if (0 === e.length && be.throwError("data too short", v.errors.BUFFER_OVERRUN, {}), e[t] >= 248) {
                          const r = e[t] - 247;
                          t + 1 + r > e.length && be.throwError("data short segment too short", v.errors.BUFFER_OVERRUN, {});
                          const n = _e(e, t + 1, r);
                          return t + 1 + r + n > e.length && be.throwError("data long segment too short", v.errors.BUFFER_OVERRUN, {}), ke(e, t, t + 1 + r, r + n);
                      }
                      if (e[t] >= 192) {
                          const r = e[t] - 192;
                          return t + 1 + r > e.length && be.throwError("data array too short", v.errors.BUFFER_OVERRUN, {}), ke(e, t, t + 1, r);
                      }
                      if (e[t] >= 184) {
                          const r = e[t] - 183;
                          t + 1 + r > e.length && be.throwError("data array too short", v.errors.BUFFER_OVERRUN, {});
                          const n = _e(e, t + 1, r);
                          return t + 1 + r + n > e.length && be.throwError("data array too short", v.errors.BUFFER_OVERRUN, {}), {
                              consumed: 1 + r + n,
                              result: R(e.slice(t + 1 + r, t + 1 + r + n))
                          };
                      }
                      if (e[t] >= 128) {
                          const r = e[t] - 128;
                          return t + 1 + r > e.length && be.throwError("data too short", v.errors.BUFFER_OVERRUN, {}), {
                              consumed: 1 + r,
                              result: R(e.slice(t + 1, t + 1 + r))
                          };
                      }
                      return {
                          consumed: 1,
                          result: R(e[t])
                      };
                  }
                  function Pe(e) {
                      const t = A(e), r = Ae(t, 0);
                      return r.consumed !== t.length && be.throwArgumentError("invalid rlp data", "data", e), r.result;
                  }
                  const Ne = new v("address/5.5.0");
                  function Ce(e) {
                      x(e, 20) || Ne.throwArgumentError("invalid address", "address", e);
                      const t = (e = e.toLowerCase()).substring(2).split(""), r = new Uint8Array(40);
                      for(let e = 0; e < 40; e++)r[e] = t[e].charCodeAt(0);
                      const n = A(ve(r));
                      for(let e = 0; e < 40; e += 2)n[e >> 1] >> 4 >= 8 && (t[e] = t[e].toUpperCase()), (15 & n[e >> 1]) >= 8 && (t[e + 1] = t[e + 1].toUpperCase());
                      return "0x" + t.join("");
                  }
                  const xe = {};
                  for(let e = 0; e < 10; e++)xe[String(e)] = String(e);
                  for(let e = 0; e < 26; e++)xe[String.fromCharCode(65 + e)] = String(10 + e);
                  const Te = Math.floor((Re = 9007199254740991, Math.log10 ? Math.log10(Re) : Math.log(Re) / Math.LN10));
                  var Re;
                  function Oe(e) {
                      let t = (e = (e = e.toUpperCase()).substring(4) + e.substring(0, 2) + "00").split("").map((e)=>xe[e]).join("");
                      for(; t.length >= Te;){
                          let e = t.substring(0, Te);
                          t = parseInt(e, 10) % 97 + t.substring(e.length);
                      }
                      let r = String(98 - parseInt(t, 10) % 97);
                      for(; r.length < 2;)r = "0" + r;
                      return r;
                  }
                  function Be(e) {
                      let t = null;
                      if ("string" != typeof e && Ne.throwArgumentError("invalid address", "address", e), e.match(/^(0x)?[0-9a-fA-F]{40}$/)) "0x" !== e.substring(0, 2) && (e = "0x" + e), t = Ce(e), e.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && t !== e && Ne.throwArgumentError("bad address checksum", "address", e);
                      else if (e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
                          for(e.substring(2, 4) !== Oe(e) && Ne.throwArgumentError("bad icap checksum", "address", e), r = e.substring(4), t = new z(r, 36).toString(16); t.length < 40;)t = "0" + t;
                          t = Ce("0x" + t);
                      } else Ne.throwArgumentError("invalid address", "address", e);
                      var r;
                      return t;
                  }
                  function Ie(e) {
                      try {
                          return Be(e), !0;
                      } catch (e) {}
                      return !1;
                  }
                  function Me(e) {
                      let t = (r = Be(e).substring(2), new z(r, 16).toString(36)).toUpperCase();
                      for(var r; t.length < 30;)t = "0" + t;
                      return "XE" + Oe("XE00" + t) + t;
                  }
                  function De(e) {
                      let t = null;
                      try {
                          t = Be(e.from);
                      } catch (t) {
                          Ne.throwArgumentError("missing from address", "transaction", e);
                      }
                      return Be(B(ve(Ee([
                          t,
                          N(A(H.from(e.nonce).toHexString()))
                      ])), 12));
                  }
                  function Ke(e, t, r) {
                      return 32 !== O(t) && Ne.throwArgumentError("salt must be 32 bytes", "salt", t), 32 !== O(r) && Ne.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", r), Be(B(ve(P([
                          "0xff",
                          Be(e),
                          t,
                          r
                      ])), 12));
                  }
                  const Ue = new v("strings/5.5.0");
                  var Fe, je;
                  function Le(e, t, r, n, i) {
                      if (e === je.BAD_PREFIX || e === je.UNEXPECTED_CONTINUE) {
                          let e = 0;
                          for(let n = t + 1; n < r.length && r[n] >> 6 == 2; n++)e++;
                          return e;
                      }
                      return e === je.OVERRUN ? r.length - t - 1 : 0;
                  }
                  !function(e) {
                      e.current = "", e.NFC = "NFC", e.NFD = "NFD", e.NFKC = "NFKC", e.NFKD = "NFKD";
                  }(Fe || (Fe = {})), function(e) {
                      e.UNEXPECTED_CONTINUE = "unexpected continuation byte", e.BAD_PREFIX = "bad codepoint prefix", e.OVERRUN = "string overrun", e.MISSING_CONTINUE = "missing continuation byte", e.OUT_OF_RANGE = "out of UTF-8 range", e.UTF16_SURROGATE = "UTF-16 surrogate", e.OVERLONG = "overlong representation";
                  }(je || (je = {}));
                  const qe = Object.freeze({
                      error: function(e, t, r, n, i) {
                          return Ue.throwArgumentError(`invalid codepoint at offset ${t}; ${e}`, "bytes", r);
                      },
                      ignore: Le,
                      replace: function(e, t, r, n, i) {
                          return e === je.OVERLONG ? (n.push(i), 0) : (n.push(65533), Le(e, t, r));
                      }
                  });
                  function ze(e, t) {
                      null == t && (t = qe.error), e = A(e);
                      const r = [];
                      let n = 0;
                      for(; n < e.length;){
                          const i = e[n++];
                          if (i >> 7 == 0) {
                              r.push(i);
                              continue;
                          }
                          let o = null, s = null;
                          if (192 == (224 & i)) o = 1, s = 127;
                          else if (224 == (240 & i)) o = 2, s = 2047;
                          else {
                              if (240 != (248 & i)) {
                                  n += t(128 == (192 & i) ? je.UNEXPECTED_CONTINUE : je.BAD_PREFIX, n - 1, e, r);
                                  continue;
                              }
                              o = 3, s = 65535;
                          }
                          if (n - 1 + o >= e.length) {
                              n += t(je.OVERRUN, n - 1, e, r);
                              continue;
                          }
                          let a = i & (1 << 8 - o - 1) - 1;
                          for(let i = 0; i < o; i++){
                              let i = e[n];
                              if (128 != (192 & i)) {
                                  n += t(je.MISSING_CONTINUE, n, e, r), a = null;
                                  break;
                              }
                              a = a << 6 | 63 & i, n++;
                          }
                          null !== a && (a > 1114111 ? n += t(je.OUT_OF_RANGE, n - 1 - o, e, r, a) : a >= 55296 && a <= 57343 ? n += t(je.UTF16_SURROGATE, n - 1 - o, e, r, a) : a <= s ? n += t(je.OVERLONG, n - 1 - o, e, r, a) : r.push(a));
                      }
                      return r;
                  }
                  function Ve(e, t = Fe.current) {
                      t != Fe.current && (Ue.checkNormalize(), e = e.normalize(t));
                      let r = [];
                      for(let t = 0; t < e.length; t++){
                          const n = e.charCodeAt(t);
                          if (n < 128) r.push(n);
                          else if (n < 2048) r.push(n >> 6 | 192), r.push(63 & n | 128);
                          else if (55296 == (64512 & n)) {
                              t++;
                              const i = e.charCodeAt(t);
                              if (t >= e.length || 56320 != (64512 & i)) throw new Error("invalid utf-8 string");
                              const o = 65536 + ((1023 & n) << 10) + (1023 & i);
                              r.push(o >> 18 | 240), r.push(o >> 12 & 63 | 128), r.push(o >> 6 & 63 | 128), r.push(63 & o | 128);
                          } else r.push(n >> 12 | 224), r.push(n >> 6 & 63 | 128), r.push(63 & n | 128);
                      }
                      return A(r);
                  }
                  function We(e) {
                      const t = "0000" + e.toString(16);
                      return "\\u" + t.substring(t.length - 4);
                  }
                  function Ge(e, t) {
                      return '"' + ze(e, t).map((e)=>{
                          if (e < 256) {
                              switch(e){
                                  case 8:
                                      return "\\b";
                                  case 9:
                                      return "\\t";
                                  case 10:
                                      return "\\n";
                                  case 13:
                                      return "\\r";
                                  case 34:
                                      return '\\"';
                                  case 92:
                                      return "\\\\";
                              }
                              if (e >= 32 && e < 127) return String.fromCharCode(e);
                          }
                          return e <= 65535 ? We(e) : We(55296 + ((e -= 65536) >> 10 & 1023)) + We(56320 + (1023 & e));
                      }).join("") + '"';
                  }
                  function Je(e) {
                      return e.map((e)=>e <= 65535 ? String.fromCharCode(e) : (e -= 65536, String.fromCharCode(55296 + (e >> 10 & 1023), 56320 + (1023 & e)))).join("");
                  }
                  function He(e, t) {
                      return Je(ze(e, t));
                  }
                  function $e(e, t = Fe.current) {
                      return ze(Ve(e, t));
                  }
                  function Ze(e) {
                      return ve(Ve(e));
                  }
                  class Xe extends fe {
                      constructor(e){
                          super("address", "address", e, !1);
                      }
                      defaultValue() {
                          return "0x0000000000000000000000000000000000000000";
                      }
                      encode(e, t) {
                          try {
                              t = Be(t);
                          } catch (e) {
                              this._throwError(e.message, t);
                          }
                          return e.writeValue(t);
                      }
                      decode(e) {
                          return Be(K(e.readValue().toHexString(), 20));
                      }
                  }
                  class Qe extends fe {
                      constructor(e){
                          super(e.name, e.type, void 0, e.dynamic), this.coder = e;
                      }
                      defaultValue() {
                          return this.coder.defaultValue();
                      }
                      encode(e, t) {
                          return this.coder.encode(e, t);
                      }
                      decode(e) {
                          return this.coder.decode(e);
                      }
                  }
                  const Ye = new v(ce);
                  function et(e, t, r) {
                      let n = null;
                      if (Array.isArray(r)) n = r;
                      else if (r && "object" == typeof r) {
                          let e = {};
                          n = t.map((t)=>{
                              const n = t.localName;
                              return n || Ye.throwError("cannot encode object for signature with missing names", v.errors.INVALID_ARGUMENT, {
                                  argument: "values",
                                  coder: t,
                                  value: r
                              }), e[n] && Ye.throwError("cannot encode object for signature with duplicate names", v.errors.INVALID_ARGUMENT, {
                                  argument: "values",
                                  coder: t,
                                  value: r
                              }), e[n] = !0, r[n];
                          });
                      } else Ye.throwArgumentError("invalid tuple value", "tuple", r);
                      t.length !== n.length && Ye.throwArgumentError("types/value length mismatch", "tuple", r);
                      let i = new pe(e.wordSize), o = new pe(e.wordSize), s = [];
                      t.forEach((e, t)=>{
                          let r = n[t];
                          if (e.dynamic) {
                              let t = o.length;
                              e.encode(o, r);
                              let n = i.writeUpdatableValue();
                              s.push((e)=>{
                                  n(e + t);
                              });
                          } else e.encode(i, r);
                      }), s.forEach((e)=>{
                          e(i.length);
                      });
                      let a = e.appendWriter(i);
                      return a += e.appendWriter(o), a;
                  }
                  function tt(e, t) {
                      let r = [], n = e.subReader(0);
                      t.forEach((t)=>{
                          let i = null;
                          if (t.dynamic) {
                              let r = e.readValue(), o = n.subReader(r.toNumber());
                              try {
                                  i = t.decode(o);
                              } catch (e) {
                                  if (e.code === v.errors.BUFFER_OVERRUN) throw e;
                                  i = e, i.baseType = t.name, i.name = t.localName, i.type = t.type;
                              }
                          } else try {
                              i = t.decode(e);
                          } catch (e) {
                              if (e.code === v.errors.BUFFER_OVERRUN) throw e;
                              i = e, i.baseType = t.name, i.name = t.localName, i.type = t.type;
                          }
                          null != i && r.push(i);
                      });
                      const i = t.reduce((e, t)=>{
                          const r = t.localName;
                          return r && (e[r] || (e[r] = 0), e[r]++), e;
                      }, {});
                      t.forEach((e, t)=>{
                          let n = e.localName;
                          if (!n || 1 !== i[n]) return;
                          if ("length" === n && (n = "_length"), null != r[n]) return;
                          const o = r[t];
                          o instanceof Error ? Object.defineProperty(r, n, {
                              enumerable: !0,
                              get: ()=>{
                                  throw o;
                              }
                          }) : r[n] = o;
                      });
                      for(let e = 0; e < r.length; e++){
                          const t = r[e];
                          t instanceof Error && Object.defineProperty(r, e, {
                              enumerable: !0,
                              get: ()=>{
                                  throw t;
                              }
                          });
                      }
                      return Object.freeze(r);
                  }
                  class rt extends fe {
                      constructor(e, t, r){
                          super("array", e.type + "[" + (t >= 0 ? t : "") + "]", r, -1 === t || e.dynamic), this.coder = e, this.length = t;
                      }
                      defaultValue() {
                          const e = this.coder.defaultValue(), t = [];
                          for(let r = 0; r < this.length; r++)t.push(e);
                          return t;
                      }
                      encode(e, t) {
                          Array.isArray(t) || this._throwError("expected array value", t);
                          let r = this.length;
                          -1 === r && (r = t.length, e.writeValue(t.length)), Ye.checkArgumentCount(t.length, r, "coder array" + (this.localName ? " " + this.localName : ""));
                          let n = [];
                          for(let e = 0; e < t.length; e++)n.push(this.coder);
                          return et(e, n, t);
                      }
                      decode(e) {
                          let t = this.length;
                          -1 === t && (t = e.readValue().toNumber(), 32 * t > e._data.length && Ye.throwError("insufficient data length", v.errors.BUFFER_OVERRUN, {
                              length: e._data.length,
                              count: t
                          }));
                          let r = [];
                          for(let e = 0; e < t; e++)r.push(new Qe(this.coder));
                          return e.coerce(this.name, tt(e, r));
                      }
                  }
                  class nt extends fe {
                      constructor(e){
                          super("bool", "bool", e, !1);
                      }
                      defaultValue() {
                          return !1;
                      }
                      encode(e, t) {
                          return e.writeValue(t ? 1 : 0);
                      }
                      decode(e) {
                          return e.coerce(this.type, !e.readValue().isZero());
                      }
                  }
                  class it extends fe {
                      constructor(e, t){
                          super(e, e, t, !0);
                      }
                      defaultValue() {
                          return "0x";
                      }
                      encode(e, t) {
                          t = A(t);
                          let r = e.writeValue(t.length);
                          return r += e.writeBytes(t), r;
                      }
                      decode(e) {
                          return e.readBytes(e.readValue().toNumber(), !0);
                      }
                  }
                  class ot extends it {
                      constructor(e){
                          super("bytes", e);
                      }
                      decode(e) {
                          return e.coerce(this.name, R(super.decode(e)));
                      }
                  }
                  class st extends fe {
                      constructor(e, t){
                          let r = "bytes" + String(e);
                          super(r, r, t, !1), this.size = e;
                      }
                      defaultValue() {
                          return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + 2 * this.size);
                      }
                      encode(e, t) {
                          let r = A(t);
                          return r.length !== this.size && this._throwError("incorrect data length", t), e.writeBytes(r);
                      }
                      decode(e) {
                          return e.coerce(this.name, R(e.readBytes(this.size)));
                      }
                  }
                  class at extends fe {
                      constructor(e){
                          super("null", "", e, !1);
                      }
                      defaultValue() {
                          return null;
                      }
                      encode(e, t) {
                          return null != t && this._throwError("not null", t), e.writeBytes([]);
                      }
                      decode(e) {
                          return e.readBytes(0), e.coerce(this.name, null);
                      }
                  }
                  const lt = H.from(-1), ut = H.from(0), ct = H.from(1), dt = H.from(2), ht = H.from("1000000000000000000"), ft = H.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), pt = H.from("-0x8000000000000000000000000000000000000000000000000000000000000000"), mt = H.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
                  class yt extends fe {
                      constructor(e, t, r){
                          const n = (t ? "int" : "uint") + 8 * e;
                          super(n, n, r, !1), this.size = e, this.signed = t;
                      }
                      defaultValue() {
                          return 0;
                      }
                      encode(e, t) {
                          let r = H.from(t), n = ft.mask(8 * e.wordSize);
                          if (this.signed) {
                              let e = n.mask(8 * this.size - 1);
                              (r.gt(e) || r.lt(e.add(ct).mul(lt))) && this._throwError("value out-of-bounds", t);
                          } else (r.lt(ut) || r.gt(n.mask(8 * this.size))) && this._throwError("value out-of-bounds", t);
                          return r = r.toTwos(8 * this.size).mask(8 * this.size), this.signed && (r = r.fromTwos(8 * this.size).toTwos(8 * e.wordSize)), e.writeValue(r);
                      }
                      decode(e) {
                          let t = e.readValue().mask(8 * this.size);
                          return this.signed && (t = t.fromTwos(8 * this.size)), e.coerce(this.name, t);
                      }
                  }
                  class gt extends it {
                      constructor(e){
                          super("string", e);
                      }
                      defaultValue() {
                          return "";
                      }
                      encode(e, t) {
                          return super.encode(e, Ve(t));
                      }
                      decode(e) {
                          return He(super.decode(e));
                      }
                  }
                  class vt extends fe {
                      constructor(e, t){
                          let r = !1;
                          const n = [];
                          e.forEach((e)=>{
                              e.dynamic && (r = !0), n.push(e.type);
                          }), super("tuple", "tuple(" + n.join(",") + ")", t, r), this.coders = e;
                      }
                      defaultValue() {
                          const e = [];
                          this.coders.forEach((t)=>{
                              e.push(t.defaultValue());
                          });
                          const t = this.coders.reduce((e, t)=>{
                              const r = t.localName;
                              return r && (e[r] || (e[r] = 0), e[r]++), e;
                          }, {});
                          return this.coders.forEach((r, n)=>{
                              let i = r.localName;
                              i && 1 === t[i] && ("length" === i && (i = "_length"), null == e[i] && (e[i] = e[n]));
                          }), Object.freeze(e);
                      }
                      encode(e, t) {
                          return et(e, this.coders, t);
                      }
                      decode(e) {
                          return e.coerce(this.name, tt(e, this.coders));
                      }
                  }
                  const bt = new v(ce), wt = {};
                  let _t = {
                      calldata: !0,
                      memory: !0,
                      storage: !0
                  }, St = {
                      calldata: !0,
                      memory: !0
                  };
                  function Et(e, t) {
                      if ("bytes" === e || "string" === e) {
                          if (_t[t]) return !0;
                      } else if ("address" === e) {
                          if ("payable" === t) return !0;
                      } else if ((e.indexOf("[") >= 0 || "tuple" === e) && St[t]) return !0;
                      return (_t[t] || "payable" === t) && bt.throwArgumentError("invalid modifier", "name", t), !1;
                  }
                  function kt(e, t) {
                      for(let r in t)ee(e, r, t[r]);
                  }
                  const At = Object.freeze({
                      sighash: "sighash",
                      minimal: "minimal",
                      full: "full",
                      json: "json"
                  }), Pt = new RegExp(/^(.*)\[([0-9]*)\]$/);
                  class Nt {
                      constructor(e, t){
                          e !== wt && bt.throwError("use fromString", v.errors.UNSUPPORTED_OPERATION, {
                              operation: "new ParamType()"
                          }), kt(this, t);
                          let r = this.type.match(Pt);
                          kt(this, r ? {
                              arrayLength: parseInt(r[2] || "-1"),
                              arrayChildren: Nt.fromObject({
                                  type: r[1],
                                  components: this.components
                              }),
                              baseType: "array"
                          } : {
                              arrayLength: null,
                              arrayChildren: null,
                              baseType: null != this.components ? "tuple" : this.type
                          }), this._isParamType = !0, Object.freeze(this);
                      }
                      format(e) {
                          if (e || (e = At.sighash), At[e] || bt.throwArgumentError("invalid format type", "format", e), e === At.json) {
                              let t = {
                                  type: "tuple" === this.baseType ? "tuple" : this.type,
                                  name: this.name || void 0
                              };
                              return "boolean" == typeof this.indexed && (t.indexed = this.indexed), this.components && (t.components = this.components.map((t)=>JSON.parse(t.format(e)))), JSON.stringify(t);
                          }
                          let t = "";
                          return "array" === this.baseType ? (t += this.arrayChildren.format(e), t += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]") : "tuple" === this.baseType ? (e !== At.sighash && (t += this.type), t += "(" + this.components.map((t)=>t.format(e)).join(e === At.full ? ", " : ",") + ")") : t += this.type, e !== At.sighash && (!0 === this.indexed && (t += " indexed"), e === At.full && this.name && (t += " " + this.name)), t;
                      }
                      static from(e, t) {
                          return "string" == typeof e ? Nt.fromString(e, t) : Nt.fromObject(e);
                      }
                      static fromObject(e) {
                          return Nt.isParamType(e) ? e : new Nt(wt, {
                              name: e.name || null,
                              type: Ut(e.type),
                              indexed: null == e.indexed ? null : !!e.indexed,
                              components: e.components ? e.components.map(Nt.fromObject) : null
                          });
                      }
                      static fromString(e, t) {
                          var r;
                          return r = function(e, t) {
                              let r = e;
                              function n(t) {
                                  bt.throwArgumentError(`unexpected character at position ${t}`, "param", e);
                              }
                              function i(e) {
                                  let r = {
                                      type: "",
                                      name: "",
                                      parent: e,
                                      state: {
                                          allowType: !0
                                      }
                                  };
                                  return t && (r.indexed = !1), r;
                              }
                              e = e.replace(/\s/g, " ");
                              let o = {
                                  type: "",
                                  name: "",
                                  state: {
                                      allowType: !0
                                  }
                              }, s = o;
                              for(let r = 0; r < e.length; r++){
                                  let o = e[r];
                                  switch(o){
                                      case "(":
                                          s.state.allowType && "" === s.type ? s.type = "tuple" : s.state.allowParams || n(r), s.state.allowType = !1, s.type = Ut(s.type), s.components = [
                                              i(s)
                                          ], s = s.components[0];
                                          break;
                                      case ")":
                                          delete s.state, "indexed" === s.name && (t || n(r), s.indexed = !0, s.name = ""), Et(s.type, s.name) && (s.name = ""), s.type = Ut(s.type);
                                          let e1 = s;
                                          s = s.parent, s || n(r), delete e1.parent, s.state.allowParams = !1, s.state.allowName = !0, s.state.allowArray = !0;
                                          break;
                                      case ",":
                                          delete s.state, "indexed" === s.name && (t || n(r), s.indexed = !0, s.name = ""), Et(s.type, s.name) && (s.name = ""), s.type = Ut(s.type);
                                          let a = i(s.parent);
                                          s.parent.components.push(a), delete s.parent, s = a;
                                          break;
                                      case " ":
                                          s.state.allowType && "" !== s.type && (s.type = Ut(s.type), delete s.state.allowType, s.state.allowName = !0, s.state.allowParams = !0), s.state.allowName && "" !== s.name && ("indexed" === s.name ? (t || n(r), s.indexed && n(r), s.indexed = !0, s.name = "") : Et(s.type, s.name) ? s.name = "" : s.state.allowName = !1);
                                          break;
                                      case "[":
                                          s.state.allowArray || n(r), s.type += o, s.state.allowArray = !1, s.state.allowName = !1, s.state.readArray = !0;
                                          break;
                                      case "]":
                                          s.state.readArray || n(r), s.type += o, s.state.readArray = !1, s.state.allowArray = !0, s.state.allowName = !0;
                                          break;
                                      default:
                                          s.state.allowType ? (s.type += o, s.state.allowParams = !0, s.state.allowArray = !0) : s.state.allowName ? (s.name += o, delete s.state.allowArray) : s.state.readArray ? s.type += o : n(r);
                                  }
                              }
                              return s.parent && bt.throwArgumentError("unexpected eof", "param", e), delete o.state, "indexed" === s.name ? (t || n(r.length - 7), s.indexed && n(r.length - 7), s.indexed = !0, s.name = "") : Et(s.type, s.name) && (s.name = ""), o.type = Ut(o.type), o;
                          }(e, !!t), Nt.fromObject({
                              name: r.name,
                              type: r.type,
                              indexed: r.indexed,
                              components: r.components
                          });
                      }
                      static isParamType(e) {
                          return !(null == e || !e._isParamType);
                      }
                  }
                  function Ct(e, t) {
                      return (function(e) {
                          e = e.trim();
                          let t = [], r = "", n = 0;
                          for(let i = 0; i < e.length; i++){
                              let o = e[i];
                              "," === o && 0 === n ? (t.push(r), r = "") : (r += o, "(" === o ? n++ : ")" === o && (n--, -1 === n && bt.throwArgumentError("unbalanced parenthesis", "value", e)));
                          }
                          return r && t.push(r), t;
                      })(e).map((e)=>Nt.fromString(e, t));
                  }
                  class xt {
                      constructor(e, t){
                          e !== wt && bt.throwError("use a static from method", v.errors.UNSUPPORTED_OPERATION, {
                              operation: "new Fragment()"
                          }), kt(this, t), this._isFragment = !0, Object.freeze(this);
                      }
                      static from(e) {
                          return xt.isFragment(e) ? e : "string" == typeof e ? xt.fromString(e) : xt.fromObject(e);
                      }
                      static fromObject(e) {
                          if (xt.isFragment(e)) return e;
                          switch(e.type){
                              case "function":
                                  return Mt.fromObject(e);
                              case "event":
                                  return Tt.fromObject(e);
                              case "constructor":
                                  return It.fromObject(e);
                              case "error":
                                  return Kt.fromObject(e);
                              case "fallback":
                              case "receive":
                                  return null;
                          }
                          return bt.throwArgumentError("invalid fragment object", "value", e);
                      }
                      static fromString(e) {
                          return "event" === (e = (e = (e = e.replace(/\s/g, " ")).replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ")).trim()).split(" ")[0] ? Tt.fromString(e.substring(5).trim()) : "function" === e.split(" ")[0] ? Mt.fromString(e.substring(8).trim()) : "constructor" === e.split("(")[0].trim() ? It.fromString(e.trim()) : "error" === e.split(" ")[0] ? Kt.fromString(e.substring(5).trim()) : bt.throwArgumentError("unsupported fragment", "value", e);
                      }
                      static isFragment(e) {
                          return !(!e || !e._isFragment);
                      }
                  }
                  class Tt extends xt {
                      format(e) {
                          if (e || (e = At.sighash), At[e] || bt.throwArgumentError("invalid format type", "format", e), e === At.json) return JSON.stringify({
                              type: "event",
                              anonymous: this.anonymous,
                              name: this.name,
                              inputs: this.inputs.map((t)=>JSON.parse(t.format(e)))
                          });
                          let t = "";
                          return e !== At.sighash && (t += "event "), t += this.name + "(" + this.inputs.map((t)=>t.format(e)).join(e === At.full ? ", " : ",") + ") ", e !== At.sighash && this.anonymous && (t += "anonymous "), t.trim();
                      }
                      static from(e) {
                          return "string" == typeof e ? Tt.fromString(e) : Tt.fromObject(e);
                      }
                      static fromObject(e) {
                          if (Tt.isEventFragment(e)) return e;
                          "event" !== e.type && bt.throwArgumentError("invalid event object", "value", e);
                          const t = {
                              name: jt(e.name),
                              anonymous: e.anonymous,
                              inputs: e.inputs ? e.inputs.map(Nt.fromObject) : [],
                              type: "event"
                          };
                          return new Tt(wt, t);
                      }
                      static fromString(e) {
                          let t = e.match(Lt);
                          t || bt.throwArgumentError("invalid event string", "value", e);
                          let r = !1;
                          return t[3].split(" ").forEach((e)=>{
                              switch(e.trim()){
                                  case "anonymous":
                                      r = !0;
                                      break;
                                  case "":
                                      break;
                                  default:
                                      bt.warn("unknown modifier: " + e);
                              }
                          }), Tt.fromObject({
                              name: t[1].trim(),
                              anonymous: r,
                              inputs: Ct(t[2], !0),
                              type: "event"
                          });
                      }
                      static isEventFragment(e) {
                          return e && e._isFragment && "event" === e.type;
                      }
                  }
                  function Rt(e, t) {
                      t.gas = null;
                      let r = e.split("@");
                      return 1 !== r.length ? (r.length > 2 && bt.throwArgumentError("invalid human-readable ABI signature", "value", e), r[1].match(/^[0-9]+$/) || bt.throwArgumentError("invalid human-readable ABI signature gas", "value", e), t.gas = H.from(r[1]), r[0]) : e;
                  }
                  function Ot(e, t) {
                      t.constant = !1, t.payable = !1, t.stateMutability = "nonpayable", e.split(" ").forEach((e)=>{
                          switch(e.trim()){
                              case "constant":
                                  t.constant = !0;
                                  break;
                              case "payable":
                                  t.payable = !0, t.stateMutability = "payable";
                                  break;
                              case "nonpayable":
                                  t.payable = !1, t.stateMutability = "nonpayable";
                                  break;
                              case "pure":
                                  t.constant = !0, t.stateMutability = "pure";
                                  break;
                              case "view":
                                  t.constant = !0, t.stateMutability = "view";
                                  break;
                              case "external":
                              case "public":
                              case "":
                                  break;
                              default:
                                  console.log("unknown modifier: " + e);
                          }
                      });
                  }
                  function Bt(e) {
                      let t = {
                          constant: !1,
                          payable: !0,
                          stateMutability: "payable"
                      };
                      return null != e.stateMutability ? (t.stateMutability = e.stateMutability, t.constant = "view" === t.stateMutability || "pure" === t.stateMutability, null != e.constant && !!e.constant !== t.constant && bt.throwArgumentError("cannot have constant function with mutability " + t.stateMutability, "value", e), t.payable = "payable" === t.stateMutability, null != e.payable && !!e.payable !== t.payable && bt.throwArgumentError("cannot have payable function with mutability " + t.stateMutability, "value", e)) : null != e.payable ? (t.payable = !!e.payable, null != e.constant || t.payable || "constructor" === e.type || bt.throwArgumentError("unable to determine stateMutability", "value", e), t.constant = !!e.constant, t.constant ? t.stateMutability = "view" : t.stateMutability = t.payable ? "payable" : "nonpayable", t.payable && t.constant && bt.throwArgumentError("cannot have constant payable function", "value", e)) : null != e.constant ? (t.constant = !!e.constant, t.payable = !t.constant, t.stateMutability = t.constant ? "view" : "payable") : "constructor" !== e.type && bt.throwArgumentError("unable to determine stateMutability", "value", e), t;
                  }
                  class It extends xt {
                      format(e) {
                          if (e || (e = At.sighash), At[e] || bt.throwArgumentError("invalid format type", "format", e), e === At.json) return JSON.stringify({
                              type: "constructor",
                              stateMutability: "nonpayable" !== this.stateMutability ? this.stateMutability : void 0,
                              payable: this.payable,
                              gas: this.gas ? this.gas.toNumber() : void 0,
                              inputs: this.inputs.map((t)=>JSON.parse(t.format(e)))
                          });
                          e === At.sighash && bt.throwError("cannot format a constructor for sighash", v.errors.UNSUPPORTED_OPERATION, {
                              operation: "format(sighash)"
                          });
                          let t = "constructor(" + this.inputs.map((t)=>t.format(e)).join(e === At.full ? ", " : ",") + ") ";
                          return this.stateMutability && "nonpayable" !== this.stateMutability && (t += this.stateMutability + " "), t.trim();
                      }
                      static from(e) {
                          return "string" == typeof e ? It.fromString(e) : It.fromObject(e);
                      }
                      static fromObject(e) {
                          if (It.isConstructorFragment(e)) return e;
                          "constructor" !== e.type && bt.throwArgumentError("invalid constructor object", "value", e);
                          let t = Bt(e);
                          t.constant && bt.throwArgumentError("constructor cannot be constant", "value", e);
                          const r = {
                              name: null,
                              type: e.type,
                              inputs: e.inputs ? e.inputs.map(Nt.fromObject) : [],
                              payable: t.payable,
                              stateMutability: t.stateMutability,
                              gas: e.gas ? H.from(e.gas) : null
                          };
                          return new It(wt, r);
                      }
                      static fromString(e) {
                          let t = {
                              type: "constructor"
                          }, r = (e = Rt(e, t)).match(Lt);
                          return r && "constructor" === r[1].trim() || bt.throwArgumentError("invalid constructor string", "value", e), t.inputs = Ct(r[2].trim(), !1), Ot(r[3].trim(), t), It.fromObject(t);
                      }
                      static isConstructorFragment(e) {
                          return e && e._isFragment && "constructor" === e.type;
                      }
                  }
                  class Mt extends It {
                      format(e) {
                          if (e || (e = At.sighash), At[e] || bt.throwArgumentError("invalid format type", "format", e), e === At.json) return JSON.stringify({
                              type: "function",
                              name: this.name,
                              constant: this.constant,
                              stateMutability: "nonpayable" !== this.stateMutability ? this.stateMutability : void 0,
                              payable: this.payable,
                              gas: this.gas ? this.gas.toNumber() : void 0,
                              inputs: this.inputs.map((t)=>JSON.parse(t.format(e))),
                              outputs: this.outputs.map((t)=>JSON.parse(t.format(e)))
                          });
                          let t = "";
                          return e !== At.sighash && (t += "function "), t += this.name + "(" + this.inputs.map((t)=>t.format(e)).join(e === At.full ? ", " : ",") + ") ", e !== At.sighash && (this.stateMutability ? "nonpayable" !== this.stateMutability && (t += this.stateMutability + " ") : this.constant && (t += "view "), this.outputs && this.outputs.length && (t += "returns (" + this.outputs.map((t)=>t.format(e)).join(", ") + ") "), null != this.gas && (t += "@" + this.gas.toString() + " ")), t.trim();
                      }
                      static from(e) {
                          return "string" == typeof e ? Mt.fromString(e) : Mt.fromObject(e);
                      }
                      static fromObject(e) {
                          if (Mt.isFunctionFragment(e)) return e;
                          "function" !== e.type && bt.throwArgumentError("invalid function object", "value", e);
                          let t = Bt(e);
                          const r = {
                              type: e.type,
                              name: jt(e.name),
                              constant: t.constant,
                              inputs: e.inputs ? e.inputs.map(Nt.fromObject) : [],
                              outputs: e.outputs ? e.outputs.map(Nt.fromObject) : [],
                              payable: t.payable,
                              stateMutability: t.stateMutability,
                              gas: e.gas ? H.from(e.gas) : null
                          };
                          return new Mt(wt, r);
                      }
                      static fromString(e) {
                          let t = {
                              type: "function"
                          }, r = (e = Rt(e, t)).split(" returns ");
                          r.length > 2 && bt.throwArgumentError("invalid function string", "value", e);
                          let n = r[0].match(Lt);
                          if (n || bt.throwArgumentError("invalid function signature", "value", e), t.name = n[1].trim(), t.name && jt(t.name), t.inputs = Ct(n[2], !1), Ot(n[3].trim(), t), r.length > 1) {
                              let n = r[1].match(Lt);
                              "" == n[1].trim() && "" == n[3].trim() || bt.throwArgumentError("unexpected tokens", "value", e), t.outputs = Ct(n[2], !1);
                          } else t.outputs = [];
                          return Mt.fromObject(t);
                      }
                      static isFunctionFragment(e) {
                          return e && e._isFragment && "function" === e.type;
                      }
                  }
                  function Dt(e) {
                      const t = e.format();
                      return "Error(string)" !== t && "Panic(uint256)" !== t || bt.throwArgumentError(`cannot specify user defined ${t} error`, "fragment", e), e;
                  }
                  class Kt extends xt {
                      format(e) {
                          if (e || (e = At.sighash), At[e] || bt.throwArgumentError("invalid format type", "format", e), e === At.json) return JSON.stringify({
                              type: "error",
                              name: this.name,
                              inputs: this.inputs.map((t)=>JSON.parse(t.format(e)))
                          });
                          let t = "";
                          return e !== At.sighash && (t += "error "), t += this.name + "(" + this.inputs.map((t)=>t.format(e)).join(e === At.full ? ", " : ",") + ") ", t.trim();
                      }
                      static from(e) {
                          return "string" == typeof e ? Kt.fromString(e) : Kt.fromObject(e);
                      }
                      static fromObject(e) {
                          if (Kt.isErrorFragment(e)) return e;
                          "error" !== e.type && bt.throwArgumentError("invalid error object", "value", e);
                          const t = {
                              type: e.type,
                              name: jt(e.name),
                              inputs: e.inputs ? e.inputs.map(Nt.fromObject) : []
                          };
                          return Dt(new Kt(wt, t));
                      }
                      static fromString(e) {
                          let t = {
                              type: "error"
                          }, r = e.match(Lt);
                          return r || bt.throwArgumentError("invalid error signature", "value", e), t.name = r[1].trim(), t.name && jt(t.name), t.inputs = Ct(r[2], !1), Dt(Kt.fromObject(t));
                      }
                      static isErrorFragment(e) {
                          return e && e._isFragment && "error" === e.type;
                      }
                  }
                  function Ut(e) {
                      return e.match(/^uint($|[^1-9])/) ? e = "uint256" + e.substring(4) : e.match(/^int($|[^1-9])/) && (e = "int256" + e.substring(3)), e;
                  }
                  const Ft = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
                  function jt(e) {
                      return e && e.match(Ft) || bt.throwArgumentError(`invalid identifier "${e}"`, "value", e), e;
                  }
                  const Lt = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$"), qt = new v(ce), zt = new RegExp(/^bytes([0-9]*)$/), Vt = new RegExp(/^(u?int)([0-9]*)$/);
                  class Wt {
                      constructor(e){
                          qt.checkNew(new.target, Wt), ee(this, "coerceFunc", e || null);
                      }
                      _getCoder(e) {
                          switch(e.baseType){
                              case "address":
                                  return new Xe(e.name);
                              case "bool":
                                  return new nt(e.name);
                              case "string":
                                  return new gt(e.name);
                              case "bytes":
                                  return new ot(e.name);
                              case "array":
                                  return new rt(this._getCoder(e.arrayChildren), e.arrayLength, e.name);
                              case "tuple":
                                  return new vt((e.components || []).map((e)=>this._getCoder(e)), e.name);
                              case "":
                                  return new at(e.name);
                          }
                          let t = e.type.match(Vt);
                          if (t) {
                              let r = parseInt(t[2] || "256");
                              return (0 === r || r > 256 || r % 8 != 0) && qt.throwArgumentError("invalid " + t[1] + " bit length", "param", e), new yt(r / 8, "int" === t[1], e.name);
                          }
                          if (t = e.type.match(zt), t) {
                              let r = parseInt(t[1]);
                              return (0 === r || r > 32) && qt.throwArgumentError("invalid bytes length", "param", e), new st(r, e.name);
                          }
                          return qt.throwArgumentError("invalid type", "type", e.type);
                      }
                      _getWordSize() {
                          return 32;
                      }
                      _getReader(e, t) {
                          return new me(e, this._getWordSize(), this.coerceFunc, t);
                      }
                      _getWriter() {
                          return new pe(this._getWordSize());
                      }
                      getDefaultValue(e) {
                          const t = e.map((e)=>this._getCoder(Nt.from(e)));
                          return new vt(t, "_").defaultValue();
                      }
                      encode(e, t) {
                          e.length !== t.length && qt.throwError("types/values length mismatch", v.errors.INVALID_ARGUMENT, {
                              count: {
                                  types: e.length,
                                  values: t.length
                              },
                              value: {
                                  types: e,
                                  values: t
                              }
                          });
                          const r = e.map((e)=>this._getCoder(Nt.from(e))), n = new vt(r, "_"), i = this._getWriter();
                          return n.encode(i, t), i.data;
                      }
                      decode(e, t, r) {
                          const n = e.map((e)=>this._getCoder(Nt.from(e)));
                          return new vt(n, "_").decode(this._getReader(A(t), r));
                      }
                  }
                  const Gt = new Wt, Jt = new v(ce);
                  class Ht extends ue {
                  }
                  class $t extends ue {
                  }
                  class Zt extends ue {
                  }
                  class Xt extends ue {
                      static isIndexed(e) {
                          return !(!e || !e._isIndexed);
                      }
                  }
                  const Qt = {
                      "0x08c379a0": {
                          signature: "Error(string)",
                          name: "Error",
                          inputs: [
                              "string"
                          ],
                          reason: !0
                      },
                      "0x4e487b71": {
                          signature: "Panic(uint256)",
                          name: "Panic",
                          inputs: [
                              "uint256"
                          ]
                      }
                  };
                  function Yt(e, t) {
                      const r = new Error(`deferred error during ABI decoding triggered accessing ${e}`);
                      return r.error = t, r;
                  }
                  class er {
                      constructor(e){
                          Jt.checkNew(new.target, er);
                          let t = [];
                          t = "string" == typeof e ? JSON.parse(e) : e, ee(this, "fragments", t.map((e)=>xt.from(e)).filter((e)=>null != e)), ee(this, "_abiCoder", te(new.target, "getAbiCoder")()), ee(this, "functions", {}), ee(this, "errors", {}), ee(this, "events", {}), ee(this, "structs", {}), this.fragments.forEach((e)=>{
                              let t = null;
                              switch(e.type){
                                  case "constructor":
                                      return this.deploy ? void Jt.warn("duplicate definition - constructor") : void ee(this, "deploy", e);
                                  case "function":
                                      t = this.functions;
                                      break;
                                  case "event":
                                      t = this.events;
                                      break;
                                  case "error":
                                      t = this.errors;
                                      break;
                                  default:
                                      return;
                              }
                              let r = e.format();
                              t[r] ? Jt.warn("duplicate definition - " + r) : t[r] = e;
                          }), this.deploy || ee(this, "deploy", It.from({
                              payable: !1,
                              type: "constructor"
                          })), ee(this, "_isInterface", !0);
                      }
                      format(e) {
                          e || (e = At.full), e === At.sighash && Jt.throwArgumentError("interface does not support formatting sighash", "format", e);
                          const t = this.fragments.map((t)=>t.format(e));
                          return e === At.json ? JSON.stringify(t.map((e)=>JSON.parse(e))) : t;
                      }
                      static getAbiCoder() {
                          return Gt;
                      }
                      static getAddress(e) {
                          return Be(e);
                      }
                      static getSighash(e) {
                          return B(Ze(e.format()), 0, 4);
                      }
                      static getEventTopic(e) {
                          return Ze(e.format());
                      }
                      getFunction(e) {
                          if (x(e)) {
                              for(const t in this.functions)if (e === this.getSighash(t)) return this.functions[t];
                              Jt.throwArgumentError("no matching function", "sighash", e);
                          }
                          if (-1 === e.indexOf("(")) {
                              const t = e.trim(), r = Object.keys(this.functions).filter((e)=>e.split("(")[0] === t);
                              return 0 === r.length ? Jt.throwArgumentError("no matching function", "name", t) : r.length > 1 && Jt.throwArgumentError("multiple matching functions", "name", t), this.functions[r[0]];
                          }
                          const t = this.functions[Mt.fromString(e).format()];
                          return t || Jt.throwArgumentError("no matching function", "signature", e), t;
                      }
                      getEvent(e) {
                          if (x(e)) {
                              const t = e.toLowerCase();
                              for(const e in this.events)if (t === this.getEventTopic(e)) return this.events[e];
                              Jt.throwArgumentError("no matching event", "topichash", t);
                          }
                          if (-1 === e.indexOf("(")) {
                              const t = e.trim(), r = Object.keys(this.events).filter((e)=>e.split("(")[0] === t);
                              return 0 === r.length ? Jt.throwArgumentError("no matching event", "name", t) : r.length > 1 && Jt.throwArgumentError("multiple matching events", "name", t), this.events[r[0]];
                          }
                          const t = this.events[Tt.fromString(e).format()];
                          return t || Jt.throwArgumentError("no matching event", "signature", e), t;
                      }
                      getError(e) {
                          if (x(e)) {
                              const t = te(this.constructor, "getSighash");
                              for(const r in this.errors)if (e === t(this.errors[r])) return this.errors[r];
                              Jt.throwArgumentError("no matching error", "sighash", e);
                          }
                          if (-1 === e.indexOf("(")) {
                              const t = e.trim(), r = Object.keys(this.errors).filter((e)=>e.split("(")[0] === t);
                              return 0 === r.length ? Jt.throwArgumentError("no matching error", "name", t) : r.length > 1 && Jt.throwArgumentError("multiple matching errors", "name", t), this.errors[r[0]];
                          }
                          const t = this.errors[Mt.fromString(e).format()];
                          return t || Jt.throwArgumentError("no matching error", "signature", e), t;
                      }
                      getSighash(e) {
                          if ("string" == typeof e) try {
                              e = this.getFunction(e);
                          } catch (t) {
                              try {
                                  e = this.getError(e);
                              } catch (e) {
                                  throw t;
                              }
                          }
                          return te(this.constructor, "getSighash")(e);
                      }
                      getEventTopic(e) {
                          return "string" == typeof e && (e = this.getEvent(e)), te(this.constructor, "getEventTopic")(e);
                      }
                      _decodeParams(e, t) {
                          return this._abiCoder.decode(e, t);
                      }
                      _encodeParams(e, t) {
                          return this._abiCoder.encode(e, t);
                      }
                      encodeDeploy(e) {
                          return this._encodeParams(this.deploy.inputs, e || []);
                      }
                      decodeErrorResult(e, t) {
                          "string" == typeof e && (e = this.getError(e));
                          const r = A(t);
                          return R(r.slice(0, 4)) !== this.getSighash(e) && Jt.throwArgumentError(`data signature does not match error ${e.name}.`, "data", R(r)), this._decodeParams(e.inputs, r.slice(4));
                      }
                      encodeErrorResult(e, t) {
                          return "string" == typeof e && (e = this.getError(e)), R(P([
                              this.getSighash(e),
                              this._encodeParams(e.inputs, t || [])
                          ]));
                      }
                      decodeFunctionData(e, t) {
                          "string" == typeof e && (e = this.getFunction(e));
                          const r = A(t);
                          return R(r.slice(0, 4)) !== this.getSighash(e) && Jt.throwArgumentError(`data signature does not match function ${e.name}.`, "data", R(r)), this._decodeParams(e.inputs, r.slice(4));
                      }
                      encodeFunctionData(e, t) {
                          return "string" == typeof e && (e = this.getFunction(e)), R(P([
                              this.getSighash(e),
                              this._encodeParams(e.inputs, t || [])
                          ]));
                      }
                      decodeFunctionResult(e, t) {
                          "string" == typeof e && (e = this.getFunction(e));
                          let r = A(t), n = null, i = null, o = null, s = null;
                          switch(r.length % this._abiCoder._getWordSize()){
                              case 0:
                                  try {
                                      return this._abiCoder.decode(e.outputs, r);
                                  } catch (e) {}
                                  break;
                              case 4:
                                  {
                                      const e = R(r.slice(0, 4)), t = Qt[e];
                                      if (t) i = this._abiCoder.decode(t.inputs, r.slice(4)), o = t.name, s = t.signature, t.reason && (n = i[0]);
                                      else try {
                                          const t = this.getError(e);
                                          i = this._abiCoder.decode(t.inputs, r.slice(4)), o = t.name, s = t.format();
                                      } catch (e) {
                                          console.log(e);
                                      }
                                      break;
                                  }
                          }
                          return Jt.throwError("call revert exception", v.errors.CALL_EXCEPTION, {
                              method: e.format(),
                              errorArgs: i,
                              errorName: o,
                              errorSignature: s,
                              reason: n
                          });
                      }
                      encodeFunctionResult(e, t) {
                          return "string" == typeof e && (e = this.getFunction(e)), R(this._abiCoder.encode(e.outputs, t || []));
                      }
                      encodeFilterTopics(e, t) {
                          "string" == typeof e && (e = this.getEvent(e)), t.length > e.inputs.length && Jt.throwError("too many arguments for " + e.format(), v.errors.UNEXPECTED_ARGUMENT, {
                              argument: "values",
                              value: t
                          });
                          let r = [];
                          e.anonymous || r.push(this.getEventTopic(e));
                          const n = (e, t)=>"string" === e.type ? Ze(t) : "bytes" === e.type ? ve(R(t)) : ("address" === e.type && this._abiCoder.encode([
                                  "address"
                              ], [
                                  t
                              ]), K(R(t), 32));
                          for(t.forEach((t, i)=>{
                              let o = e.inputs[i];
                              o.indexed ? null == t ? r.push(null) : "array" === o.baseType || "tuple" === o.baseType ? Jt.throwArgumentError("filtering with tuples or arrays not supported", "contract." + o.name, t) : Array.isArray(t) ? r.push(t.map((e)=>n(o, e))) : r.push(n(o, t)) : null != t && Jt.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + o.name, t);
                          }); r.length && null === r[r.length - 1];)r.pop();
                          return r;
                      }
                      encodeEventLog(e, t) {
                          "string" == typeof e && (e = this.getEvent(e));
                          const r = [], n = [], i = [];
                          return e.anonymous || r.push(this.getEventTopic(e)), t.length !== e.inputs.length && Jt.throwArgumentError("event arguments/values mismatch", "values", t), e.inputs.forEach((e, o)=>{
                              const s = t[o];
                              if (e.indexed) {
                                  if ("string" === e.type) r.push(Ze(s));
                                  else if ("bytes" === e.type) r.push(ve(s));
                                  else {
                                      if ("tuple" === e.baseType || "array" === e.baseType) throw new Error("not implemented");
                                      r.push(this._abiCoder.encode([
                                          e.type
                                      ], [
                                          s
                                      ]));
                                  }
                              } else n.push(e), i.push(s);
                          }), {
                              data: this._abiCoder.encode(n, i),
                              topics: r
                          };
                      }
                      decodeEventLog(e, t, r) {
                          if ("string" == typeof e && (e = this.getEvent(e)), null != r && !e.anonymous) {
                              let t = this.getEventTopic(e);
                              x(r[0], 32) && r[0].toLowerCase() === t || Jt.throwError("fragment/topic mismatch", v.errors.INVALID_ARGUMENT, {
                                  argument: "topics[0]",
                                  expected: t,
                                  value: r[0]
                              }), r = r.slice(1);
                          }
                          let n = [], i = [], o = [];
                          e.inputs.forEach((e, t)=>{
                              e.indexed ? "string" === e.type || "bytes" === e.type || "tuple" === e.baseType || "array" === e.baseType ? (n.push(Nt.fromObject({
                                  type: "bytes32",
                                  name: e.name
                              })), o.push(!0)) : (n.push(e), o.push(!1)) : (i.push(e), o.push(!1));
                          });
                          let s = null != r ? this._abiCoder.decode(n, P(r)) : null, a = this._abiCoder.decode(i, t, !0), l = [], u = 0, c = 0;
                          e.inputs.forEach((e, t)=>{
                              if (e.indexed) {
                                  if (null == s) l[t] = new Xt({
                                      _isIndexed: !0,
                                      hash: null
                                  });
                                  else if (o[t]) l[t] = new Xt({
                                      _isIndexed: !0,
                                      hash: s[c++]
                                  });
                                  else try {
                                      l[t] = s[c++];
                                  } catch (e) {
                                      l[t] = e;
                                  }
                              } else try {
                                  l[t] = a[u++];
                              } catch (e) {
                                  l[t] = e;
                              }
                              if (e.name && null == l[e.name]) {
                                  const r = l[t];
                                  r instanceof Error ? Object.defineProperty(l, e.name, {
                                      enumerable: !0,
                                      get: ()=>{
                                          throw Yt(`property ${JSON.stringify(e.name)}`, r);
                                      }
                                  }) : l[e.name] = r;
                              }
                          });
                          for(let e = 0; e < l.length; e++){
                              const t = l[e];
                              t instanceof Error && Object.defineProperty(l, e, {
                                  enumerable: !0,
                                  get: ()=>{
                                      throw Yt(`index ${e}`, t);
                                  }
                              });
                          }
                          return Object.freeze(l);
                      }
                      parseTransaction(e) {
                          let t = this.getFunction(e.data.substring(0, 10).toLowerCase());
                          return t ? new $t({
                              args: this._abiCoder.decode(t.inputs, "0x" + e.data.substring(10)),
                              functionFragment: t,
                              name: t.name,
                              signature: t.format(),
                              sighash: this.getSighash(t),
                              value: H.from(e.value || "0")
                          }) : null;
                      }
                      parseLog(e) {
                          let t = this.getEvent(e.topics[0]);
                          return !t || t.anonymous ? null : new Ht({
                              eventFragment: t,
                              name: t.name,
                              signature: t.format(),
                              topic: this.getEventTopic(t),
                              args: this.decodeEventLog(t, e.data, e.topics)
                          });
                      }
                      parseError(e) {
                          const t = R(e);
                          let r = this.getError(t.substring(0, 10).toLowerCase());
                          return r ? new Zt({
                              args: this._abiCoder.decode(r.inputs, "0x" + t.substring(10)),
                              errorFragment: r,
                              name: r.name,
                              signature: r.format(),
                              sighash: this.getSighash(r)
                          }) : null;
                      }
                      static isInterface(e) {
                          return !(!e || !e._isInterface);
                      }
                  }
                  const tr = new v("abstract-provider/5.5.1");
                  class rr extends ue {
                      static isForkEvent(e) {
                          return !(!e || !e._isForkEvent);
                      }
                  }
                  class nr {
                      constructor(){
                          tr.checkAbstract(new.target, nr), ee(this, "_isProvider", !0);
                      }
                      getFeeData() {
                          var e, t, r, n;
                          return e = this, t = void 0, n = function*() {
                              const { block: e , gasPrice: t  } = yield re({
                                  block: this.getBlock("latest"),
                                  gasPrice: this.getGasPrice().catch((e)=>null)
                              });
                              let r = null, n = null;
                              return e && e.baseFeePerGas && (n = H.from("2500000000"), r = e.baseFeePerGas.mul(2).add(n)), {
                                  maxFeePerGas: r,
                                  maxPriorityFeePerGas: n,
                                  gasPrice: t
                              };
                          }, new (r = void 0, r = Promise)(function(i, o) {
                              function s(e) {
                                  try {
                                      l(n.next(e));
                                  } catch (e) {
                                      o(e);
                                  }
                              }
                              function a(e) {
                                  try {
                                      l(n.throw(e));
                                  } catch (e) {
                                      o(e);
                                  }
                              }
                              function l(e) {
                                  var t;
                                  e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                      e(t);
                                  })).then(s, a);
                              }
                              l((n = n.apply(e, t || [])).next());
                          });
                      }
                      addListener(e, t) {
                          return this.on(e, t);
                      }
                      removeListener(e, t) {
                          return this.off(e, t);
                      }
                      static isProvider(e) {
                          return !(!e || !e._isProvider);
                      }
                  }
                  var ir = function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  };
                  const or = new v("abstract-signer/5.5.0"), sr = [
                      "accessList",
                      "chainId",
                      "customData",
                      "data",
                      "from",
                      "gasLimit",
                      "gasPrice",
                      "maxFeePerGas",
                      "maxPriorityFeePerGas",
                      "nonce",
                      "to",
                      "type",
                      "value"
                  ], ar = [
                      v.errors.INSUFFICIENT_FUNDS,
                      v.errors.NONCE_EXPIRED,
                      v.errors.REPLACEMENT_UNDERPRICED
                  ];
                  class lr {
                      constructor(){
                          or.checkAbstract(new.target, lr), ee(this, "_isSigner", !0);
                      }
                      getBalance(e) {
                          return ir(this, void 0, void 0, function*() {
                              return this._checkProvider("getBalance"), yield this.provider.getBalance(this.getAddress(), e);
                          });
                      }
                      getTransactionCount(e) {
                          return ir(this, void 0, void 0, function*() {
                              return this._checkProvider("getTransactionCount"), yield this.provider.getTransactionCount(this.getAddress(), e);
                          });
                      }
                      estimateGas(e) {
                          return ir(this, void 0, void 0, function*() {
                              this._checkProvider("estimateGas");
                              const t = yield re(this.checkTransaction(e));
                              return yield this.provider.estimateGas(t);
                          });
                      }
                      call(e, t) {
                          return ir(this, void 0, void 0, function*() {
                              this._checkProvider("call");
                              const r = yield re(this.checkTransaction(e));
                              return yield this.provider.call(r, t);
                          });
                      }
                      sendTransaction(e) {
                          return ir(this, void 0, void 0, function*() {
                              this._checkProvider("sendTransaction");
                              const t = yield this.populateTransaction(e), r = yield this.signTransaction(t);
                              return yield this.provider.sendTransaction(r);
                          });
                      }
                      getChainId() {
                          return ir(this, void 0, void 0, function*() {
                              return this._checkProvider("getChainId"), (yield this.provider.getNetwork()).chainId;
                          });
                      }
                      getGasPrice() {
                          return ir(this, void 0, void 0, function*() {
                              return this._checkProvider("getGasPrice"), yield this.provider.getGasPrice();
                          });
                      }
                      getFeeData() {
                          return ir(this, void 0, void 0, function*() {
                              return this._checkProvider("getFeeData"), yield this.provider.getFeeData();
                          });
                      }
                      resolveName(e) {
                          return ir(this, void 0, void 0, function*() {
                              return this._checkProvider("resolveName"), yield this.provider.resolveName(e);
                          });
                      }
                      checkTransaction(e) {
                          for(const t in e)-1 === sr.indexOf(t) && or.throwArgumentError("invalid transaction key: " + t, "transaction", e);
                          const t = ie(e);
                          return null == t.from ? t.from = this.getAddress() : t.from = Promise.all([
                              Promise.resolve(t.from),
                              this.getAddress()
                          ]).then((t)=>(t[0].toLowerCase() !== t[1].toLowerCase() && or.throwArgumentError("from address mismatch", "transaction", e), t[0])), t;
                      }
                      populateTransaction(e) {
                          return ir(this, void 0, void 0, function*() {
                              const t = yield re(this.checkTransaction(e));
                              null != t.to && (t.to = Promise.resolve(t.to).then((e)=>ir(this, void 0, void 0, function*() {
                                      if (null == e) return null;
                                      const t = yield this.resolveName(e);
                                      return null == t && or.throwArgumentError("provided ENS name resolves to null", "tx.to", e), t;
                                  })), t.to.catch((e)=>{}));
                              const r = null != t.maxFeePerGas || null != t.maxPriorityFeePerGas;
                              if (null == t.gasPrice || 2 !== t.type && !r ? 0 !== t.type && 1 !== t.type || !r || or.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", e) : or.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", e), 2 !== t.type && null != t.type || null == t.maxFeePerGas || null == t.maxPriorityFeePerGas) {
                                  if (0 === t.type || 1 === t.type) null == t.gasPrice && (t.gasPrice = this.getGasPrice());
                                  else {
                                      const e = yield this.getFeeData();
                                      if (null == t.type) {
                                          if (null != e.maxFeePerGas && null != e.maxPriorityFeePerGas) {
                                              if (t.type = 2, null != t.gasPrice) {
                                                  const e = t.gasPrice;
                                                  delete t.gasPrice, t.maxFeePerGas = e, t.maxPriorityFeePerGas = e;
                                              } else null == t.maxFeePerGas && (t.maxFeePerGas = e.maxFeePerGas), null == t.maxPriorityFeePerGas && (t.maxPriorityFeePerGas = e.maxPriorityFeePerGas);
                                          } else null != e.gasPrice ? (r && or.throwError("network does not support EIP-1559", v.errors.UNSUPPORTED_OPERATION, {
                                              operation: "populateTransaction"
                                          }), null == t.gasPrice && (t.gasPrice = e.gasPrice), t.type = 0) : or.throwError("failed to get consistent fee data", v.errors.UNSUPPORTED_OPERATION, {
                                              operation: "signer.getFeeData"
                                          });
                                      } else 2 === t.type && (null == t.maxFeePerGas && (t.maxFeePerGas = e.maxFeePerGas), null == t.maxPriorityFeePerGas && (t.maxPriorityFeePerGas = e.maxPriorityFeePerGas));
                                  }
                              } else t.type = 2;
                              return null == t.nonce && (t.nonce = this.getTransactionCount("pending")), null == t.gasLimit && (t.gasLimit = this.estimateGas(t).catch((e)=>{
                                  if (ar.indexOf(e.code) >= 0) throw e;
                                  return or.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", v.errors.UNPREDICTABLE_GAS_LIMIT, {
                                      error: e,
                                      tx: t
                                  });
                              })), null == t.chainId ? t.chainId = this.getChainId() : t.chainId = Promise.all([
                                  Promise.resolve(t.chainId),
                                  this.getChainId()
                              ]).then((t)=>(0 !== t[1] && t[0] !== t[1] && or.throwArgumentError("chainId address mismatch", "transaction", e), t[0])), yield re(t);
                          });
                      }
                      _checkProvider(e) {
                          this.provider || or.throwError("missing provider", v.errors.UNSUPPORTED_OPERATION, {
                              operation: e || "_checkProvider"
                          });
                      }
                      static isSigner(e) {
                          return !(!e || !e._isSigner);
                      }
                  }
                  class ur extends lr {
                      constructor(e, t){
                          or.checkNew(new.target, ur), super(), ee(this, "address", e), ee(this, "provider", t || null);
                      }
                      getAddress() {
                          return Promise.resolve(this.address);
                      }
                      _fail(e, t) {
                          return Promise.resolve().then(()=>{
                              or.throwError(e, v.errors.UNSUPPORTED_OPERATION, {
                                  operation: t
                              });
                          });
                      }
                      signMessage(e) {
                          return this._fail("VoidSigner cannot sign messages", "signMessage");
                      }
                      signTransaction(e) {
                          return this._fail("VoidSigner cannot sign transactions", "signTransaction");
                      }
                      _signTypedData(e, t, r) {
                          return this._fail("VoidSigner cannot sign typed data", "signTypedData");
                      }
                      connect(e) {
                          return new ur(this.address, e);
                      }
                  }
                  var cr = r(3715), dr = r.n(cr);
                  function hr(e, t, r) {
                      return r = {
                          path: t,
                          exports: {},
                          require: function(e, t) {
                              return function() {
                                  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
                              }(null == t && r.path);
                          }
                      }, e(r, r.exports), r.exports;
                  }
                  "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : void 0 !== r.g ? r.g : "undefined" != typeof self && self;
                  var fr = pr;
                  function pr(e, t) {
                      if (!e) throw new Error(t || "Assertion failed");
                  }
                  pr.equal = function(e, t, r) {
                      if (e != t) throw new Error(r || "Assertion failed: " + e + " != " + t);
                  };
                  var mr = hr(function(e, t) {
                      var r = t;
                      function n(e) {
                          return 1 === e.length ? "0" + e : e;
                      }
                      function i(e) {
                          for(var t = "", r = 0; r < e.length; r++)t += n(e[r].toString(16));
                          return t;
                      }
                      r.toArray = function(e, t) {
                          if (Array.isArray(e)) return e.slice();
                          if (!e) return [];
                          var r = [];
                          if ("string" != typeof e) {
                              for(var n = 0; n < e.length; n++)r[n] = 0 | e[n];
                              return r;
                          }
                          if ("hex" === t) for((e = e.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e = "0" + e), n = 0; n < e.length; n += 2)r.push(parseInt(e[n] + e[n + 1], 16));
                          else for(n = 0; n < e.length; n++){
                              var i = e.charCodeAt(n), o = i >> 8, s = 255 & i;
                              o ? r.push(o, s) : r.push(s);
                          }
                          return r;
                      }, r.zero2 = n, r.toHex = i, r.encode = function(e, t) {
                          return "hex" === t ? i(e) : e;
                      };
                  }), yr = hr(function(e, t) {
                      var r = t;
                      r.assert = fr, r.toArray = mr.toArray, r.zero2 = mr.zero2, r.toHex = mr.toHex, r.encode = mr.encode, r.getNAF = function(e, t, r) {
                          var n = new Array(Math.max(e.bitLength(), r) + 1);
                          n.fill(0);
                          for(var i = 1 << t + 1, o = e.clone(), s = 0; s < n.length; s++){
                              var a, l = o.andln(i - 1);
                              o.isOdd() ? (a = l > (i >> 1) - 1 ? (i >> 1) - l : l, o.isubn(a)) : a = 0, n[s] = a, o.iushrn(1);
                          }
                          return n;
                      }, r.getJSF = function(e, t) {
                          var r = [
                              [],
                              []
                          ];
                          e = e.clone(), t = t.clone();
                          for(var n, i = 0, o = 0; e.cmpn(-i) > 0 || t.cmpn(-o) > 0;){
                              var s, a, l = e.andln(3) + i & 3, u = t.andln(3) + o & 3;
                              3 === l && (l = -1), 3 === u && (u = -1), s = 0 == (1 & l) ? 0 : 3 != (n = e.andln(7) + i & 7) && 5 !== n || 2 !== u ? l : -l, r[0].push(s), a = 0 == (1 & u) ? 0 : 3 != (n = t.andln(7) + o & 7) && 5 !== n || 2 !== l ? u : -u, r[1].push(a), 2 * i === s + 1 && (i = 1 - i), 2 * o === a + 1 && (o = 1 - o), e.iushrn(1), t.iushrn(1);
                          }
                          return r;
                      }, r.cachedProperty = function(e, t, r) {
                          var n = "_" + t;
                          e.prototype[t] = function() {
                              return void 0 !== this[n] ? this[n] : this[n] = r.call(this);
                          };
                      }, r.parseBytes = function(e) {
                          return "string" == typeof e ? r.toArray(e, "hex") : e;
                      }, r.intFromLE = function(e) {
                          return new (L())(e, "hex", "le");
                      };
                  }), gr = yr.getNAF, vr = yr.getJSF, br = yr.assert;
                  function wr(e, t) {
                      this.type = e, this.p = new (L())(t.p, 16), this.red = t.prime ? L().red(t.prime) : L().mont(this.p), this.zero = new (L())(0).toRed(this.red), this.one = new (L())(1).toRed(this.red), this.two = new (L())(2).toRed(this.red), this.n = t.n && new (L())(t.n, 16), this.g = t.g && this.pointFromJSON(t.g, t.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
                      var r = this.n && this.p.div(this.n);
                      !r || r.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = !0, this.redN = this.n.toRed(this.red));
                  }
                  var _r = wr;
                  function Sr(e, t) {
                      this.curve = e, this.type = t, this.precomputed = null;
                  }
                  wr.prototype.point = function() {
                      throw new Error("Not implemented");
                  }, wr.prototype.validate = function() {
                      throw new Error("Not implemented");
                  }, wr.prototype._fixedNafMul = function(e, t) {
                      br(e.precomputed);
                      var r = e._getDoubles(), n = gr(t, 1, this._bitLength), i = (1 << r.step + 1) - (r.step % 2 == 0 ? 2 : 1);
                      i /= 3;
                      var o, s, a = [];
                      for(o = 0; o < n.length; o += r.step){
                          s = 0;
                          for(var l = o + r.step - 1; l >= o; l--)s = (s << 1) + n[l];
                          a.push(s);
                      }
                      for(var u = this.jpoint(null, null, null), c = this.jpoint(null, null, null), d = i; d > 0; d--){
                          for(o = 0; o < a.length; o++)(s = a[o]) === d ? c = c.mixedAdd(r.points[o]) : s === -d && (c = c.mixedAdd(r.points[o].neg()));
                          u = u.add(c);
                      }
                      return u.toP();
                  }, wr.prototype._wnafMul = function(e, t) {
                      var r = 4, n = e._getNAFPoints(r);
                      r = n.wnd;
                      for(var i = n.points, o = gr(t, r, this._bitLength), s = this.jpoint(null, null, null), a = o.length - 1; a >= 0; a--){
                          for(var l = 0; a >= 0 && 0 === o[a]; a--)l++;
                          if (a >= 0 && l++, s = s.dblp(l), a < 0) break;
                          var u = o[a];
                          br(0 !== u), s = "affine" === e.type ? u > 0 ? s.mixedAdd(i[u - 1 >> 1]) : s.mixedAdd(i[-u - 1 >> 1].neg()) : u > 0 ? s.add(i[u - 1 >> 1]) : s.add(i[-u - 1 >> 1].neg());
                      }
                      return "affine" === e.type ? s.toP() : s;
                  }, wr.prototype._wnafMulAdd = function(e, t, r, n, i) {
                      var o, s, a, l = this._wnafT1, u = this._wnafT2, c = this._wnafT3, d = 0;
                      for(o = 0; o < n; o++){
                          var h = (a = t[o])._getNAFPoints(e);
                          l[o] = h.wnd, u[o] = h.points;
                      }
                      for(o = n - 1; o >= 1; o -= 2){
                          var f = o - 1, p = o;
                          if (1 === l[f] && 1 === l[p]) {
                              var m = [
                                  t[f],
                                  null,
                                  null,
                                  t[p]
                              ];
                              0 === t[f].y.cmp(t[p].y) ? (m[1] = t[f].add(t[p]), m[2] = t[f].toJ().mixedAdd(t[p].neg())) : 0 === t[f].y.cmp(t[p].y.redNeg()) ? (m[1] = t[f].toJ().mixedAdd(t[p]), m[2] = t[f].add(t[p].neg())) : (m[1] = t[f].toJ().mixedAdd(t[p]), m[2] = t[f].toJ().mixedAdd(t[p].neg()));
                              var y = [
                                  -3,
                                  -1,
                                  -5,
                                  -7,
                                  0,
                                  7,
                                  5,
                                  1,
                                  3
                              ], g = vr(r[f], r[p]);
                              for(d = Math.max(g[0].length, d), c[f] = new Array(d), c[p] = new Array(d), s = 0; s < d; s++){
                                  var v = 0 | g[0][s], b = 0 | g[1][s];
                                  c[f][s] = y[3 * (v + 1) + (b + 1)], c[p][s] = 0, u[f] = m;
                              }
                          } else c[f] = gr(r[f], l[f], this._bitLength), c[p] = gr(r[p], l[p], this._bitLength), d = Math.max(c[f].length, d), d = Math.max(c[p].length, d);
                      }
                      var w = this.jpoint(null, null, null), _ = this._wnafT4;
                      for(o = d; o >= 0; o--){
                          for(var S = 0; o >= 0;){
                              var E = !0;
                              for(s = 0; s < n; s++)_[s] = 0 | c[s][o], 0 !== _[s] && (E = !1);
                              if (!E) break;
                              S++, o--;
                          }
                          if (o >= 0 && S++, w = w.dblp(S), o < 0) break;
                          for(s = 0; s < n; s++){
                              var k = _[s];
                              0 !== k && (k > 0 ? a = u[s][k - 1 >> 1] : k < 0 && (a = u[s][-k - 1 >> 1].neg()), w = "affine" === a.type ? w.mixedAdd(a) : w.add(a));
                          }
                      }
                      for(o = 0; o < n; o++)u[o] = null;
                      return i ? w : w.toP();
                  }, wr.BasePoint = Sr, Sr.prototype.eq = function() {
                      throw new Error("Not implemented");
                  }, Sr.prototype.validate = function() {
                      return this.curve.validate(this);
                  }, wr.prototype.decodePoint = function(e, t) {
                      e = yr.toArray(e, t);
                      var r = this.p.byteLength();
                      if ((4 === e[0] || 6 === e[0] || 7 === e[0]) && e.length - 1 == 2 * r) return 6 === e[0] ? br(e[e.length - 1] % 2 == 0) : 7 === e[0] && br(e[e.length - 1] % 2 == 1), this.point(e.slice(1, 1 + r), e.slice(1 + r, 1 + 2 * r));
                      if ((2 === e[0] || 3 === e[0]) && e.length - 1 === r) return this.pointFromX(e.slice(1, 1 + r), 3 === e[0]);
                      throw new Error("Unknown point format");
                  }, Sr.prototype.encodeCompressed = function(e) {
                      return this.encode(e, !0);
                  }, Sr.prototype._encode = function(e) {
                      var t = this.curve.p.byteLength(), r = this.getX().toArray("be", t);
                      return e ? [
                          this.getY().isEven() ? 2 : 3
                      ].concat(r) : [
                          4
                      ].concat(r, this.getY().toArray("be", t));
                  }, Sr.prototype.encode = function(e, t) {
                      return yr.encode(this._encode(t), e);
                  }, Sr.prototype.precompute = function(e) {
                      if (this.precomputed) return this;
                      var t = {
                          doubles: null,
                          naf: null,
                          beta: null
                      };
                      return t.naf = this._getNAFPoints(8), t.doubles = this._getDoubles(4, e), t.beta = this._getBeta(), this.precomputed = t, this;
                  }, Sr.prototype._hasDoubles = function(e) {
                      if (!this.precomputed) return !1;
                      var t = this.precomputed.doubles;
                      return !!t && t.points.length >= Math.ceil((e.bitLength() + 1) / t.step);
                  }, Sr.prototype._getDoubles = function(e, t) {
                      if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
                      for(var r = [
                          this
                      ], n = this, i = 0; i < t; i += e){
                          for(var o = 0; o < e; o++)n = n.dbl();
                          r.push(n);
                      }
                      return {
                          step: e,
                          points: r
                      };
                  }, Sr.prototype._getNAFPoints = function(e) {
                      if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
                      for(var t = [
                          this
                      ], r = (1 << e) - 1, n = 1 === r ? null : this.dbl(), i = 1; i < r; i++)t[i] = t[i - 1].add(n);
                      return {
                          wnd: e,
                          points: t
                      };
                  }, Sr.prototype._getBeta = function() {
                      return null;
                  }, Sr.prototype.dblp = function(e) {
                      for(var t = this, r = 0; r < e; r++)t = t.dbl();
                      return t;
                  };
                  var Er = hr(function(e) {
                      "function" == typeof Object.create ? e.exports = function(e, t) {
                          t && (e.super_ = t, e.prototype = Object.create(t.prototype, {
                              constructor: {
                                  value: e,
                                  enumerable: !1,
                                  writable: !0,
                                  configurable: !0
                              }
                          }));
                      } : e.exports = function(e, t) {
                          if (t) {
                              e.super_ = t;
                              var r = function() {};
                              r.prototype = t.prototype, e.prototype = new r, e.prototype.constructor = e;
                          }
                      };
                  }), kr = yr.assert;
                  function Ar(e) {
                      _r.call(this, "short", e), this.a = new (L())(e.a, 16).toRed(this.red), this.b = new (L())(e.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = 0 === this.a.fromRed().cmpn(0), this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3), this.endo = this._getEndomorphism(e), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
                  }
                  Er(Ar, _r);
                  var Pr = Ar;
                  function Nr(e, t, r, n) {
                      _r.BasePoint.call(this, e, "affine"), null === t && null === r ? (this.x = null, this.y = null, this.inf = !0) : (this.x = new (L())(t, 16), this.y = new (L())(r, 16), n && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = !1);
                  }
                  function Cr(e, t, r, n) {
                      _r.BasePoint.call(this, e, "jacobian"), null === t && null === r && null === n ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new (L())(0)) : (this.x = new (L())(t, 16), this.y = new (L())(r, 16), this.z = new (L())(n, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
                  }
                  Ar.prototype._getEndomorphism = function(e) {
                      if (this.zeroA && this.g && this.n && 1 === this.p.modn(3)) {
                          var t, r;
                          if (e.beta) t = new (L())(e.beta, 16).toRed(this.red);
                          else {
                              var n = this._getEndoRoots(this.p);
                              t = (t = n[0].cmp(n[1]) < 0 ? n[0] : n[1]).toRed(this.red);
                          }
                          if (e.lambda) r = new (L())(e.lambda, 16);
                          else {
                              var i = this._getEndoRoots(this.n);
                              0 === this.g.mul(i[0]).x.cmp(this.g.x.redMul(t)) ? r = i[0] : (r = i[1], kr(0 === this.g.mul(r).x.cmp(this.g.x.redMul(t))));
                          }
                          return {
                              beta: t,
                              lambda: r,
                              basis: e.basis ? e.basis.map(function(e) {
                                  return {
                                      a: new (L())(e.a, 16),
                                      b: new (L())(e.b, 16)
                                  };
                              }) : this._getEndoBasis(r)
                          };
                      }
                  }, Ar.prototype._getEndoRoots = function(e) {
                      var t = e === this.p ? this.red : L().mont(e), r = new (L())(2).toRed(t).redInvm(), n = r.redNeg(), i = new (L())(3).toRed(t).redNeg().redSqrt().redMul(r);
                      return [
                          n.redAdd(i).fromRed(),
                          n.redSub(i).fromRed()
                      ];
                  }, Ar.prototype._getEndoBasis = function(e) {
                      for(var t, r, n, i, o, s, a, l, u, c = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), d = e, h = this.n.clone(), f = new (L())(1), p = new (L())(0), m = new (L())(0), y = new (L())(1), g = 0; 0 !== d.cmpn(0);){
                          var v = h.div(d);
                          l = h.sub(v.mul(d)), u = m.sub(v.mul(f));
                          var b = y.sub(v.mul(p));
                          if (!n && l.cmp(c) < 0) t = a.neg(), r = f, n = l.neg(), i = u;
                          else if (n && 2 == ++g) break;
                          a = l, h = d, d = l, m = f, f = u, y = p, p = b;
                      }
                      o = l.neg(), s = u;
                      var w = n.sqr().add(i.sqr());
                      return o.sqr().add(s.sqr()).cmp(w) >= 0 && (o = t, s = r), n.negative && (n = n.neg(), i = i.neg()), o.negative && (o = o.neg(), s = s.neg()), [
                          {
                              a: n,
                              b: i
                          },
                          {
                              a: o,
                              b: s
                          }
                      ];
                  }, Ar.prototype._endoSplit = function(e) {
                      var t = this.endo.basis, r = t[0], n = t[1], i = n.b.mul(e).divRound(this.n), o = r.b.neg().mul(e).divRound(this.n), s = i.mul(r.a), a = o.mul(n.a), l = i.mul(r.b), u = o.mul(n.b);
                      return {
                          k1: e.sub(s).sub(a),
                          k2: l.add(u).neg()
                      };
                  }, Ar.prototype.pointFromX = function(e, t) {
                      (e = new (L())(e, 16)).red || (e = e.toRed(this.red));
                      var r = e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b), n = r.redSqrt();
                      if (0 !== n.redSqr().redSub(r).cmp(this.zero)) throw new Error("invalid point");
                      var i = n.fromRed().isOdd();
                      return (t && !i || !t && i) && (n = n.redNeg()), this.point(e, n);
                  }, Ar.prototype.validate = function(e) {
                      if (e.inf) return !0;
                      var t = e.x, r = e.y, n = this.a.redMul(t), i = t.redSqr().redMul(t).redIAdd(n).redIAdd(this.b);
                      return 0 === r.redSqr().redISub(i).cmpn(0);
                  }, Ar.prototype._endoWnafMulAdd = function(e, t, r) {
                      for(var n = this._endoWnafT1, i = this._endoWnafT2, o = 0; o < e.length; o++){
                          var s = this._endoSplit(t[o]), a = e[o], l = a._getBeta();
                          s.k1.negative && (s.k1.ineg(), a = a.neg(!0)), s.k2.negative && (s.k2.ineg(), l = l.neg(!0)), n[2 * o] = a, n[2 * o + 1] = l, i[2 * o] = s.k1, i[2 * o + 1] = s.k2;
                      }
                      for(var u = this._wnafMulAdd(1, n, i, 2 * o, r), c = 0; c < 2 * o; c++)n[c] = null, i[c] = null;
                      return u;
                  }, Er(Nr, _r.BasePoint), Ar.prototype.point = function(e, t, r) {
                      return new Nr(this, e, t, r);
                  }, Ar.prototype.pointFromJSON = function(e, t) {
                      return Nr.fromJSON(this, e, t);
                  }, Nr.prototype._getBeta = function() {
                      if (this.curve.endo) {
                          var e = this.precomputed;
                          if (e && e.beta) return e.beta;
                          var t = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
                          if (e) {
                              var r = this.curve, n = function(e) {
                                  return r.point(e.x.redMul(r.endo.beta), e.y);
                              };
                              e.beta = t, t.precomputed = {
                                  beta: null,
                                  naf: e.naf && {
                                      wnd: e.naf.wnd,
                                      points: e.naf.points.map(n)
                                  },
                                  doubles: e.doubles && {
                                      step: e.doubles.step,
                                      points: e.doubles.points.map(n)
                                  }
                              };
                          }
                          return t;
                      }
                  }, Nr.prototype.toJSON = function() {
                      return this.precomputed ? [
                          this.x,
                          this.y,
                          this.precomputed && {
                              doubles: this.precomputed.doubles && {
                                  step: this.precomputed.doubles.step,
                                  points: this.precomputed.doubles.points.slice(1)
                              },
                              naf: this.precomputed.naf && {
                                  wnd: this.precomputed.naf.wnd,
                                  points: this.precomputed.naf.points.slice(1)
                              }
                          }
                      ] : [
                          this.x,
                          this.y
                      ];
                  }, Nr.fromJSON = function(e, t, r) {
                      "string" == typeof t && (t = JSON.parse(t));
                      var n = e.point(t[0], t[1], r);
                      if (!t[2]) return n;
                      function i(t) {
                          return e.point(t[0], t[1], r);
                      }
                      var o = t[2];
                      return n.precomputed = {
                          beta: null,
                          doubles: o.doubles && {
                              step: o.doubles.step,
                              points: [
                                  n
                              ].concat(o.doubles.points.map(i))
                          },
                          naf: o.naf && {
                              wnd: o.naf.wnd,
                              points: [
                                  n
                              ].concat(o.naf.points.map(i))
                          }
                      }, n;
                  }, Nr.prototype.inspect = function() {
                      return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
                  }, Nr.prototype.isInfinity = function() {
                      return this.inf;
                  }, Nr.prototype.add = function(e) {
                      if (this.inf) return e;
                      if (e.inf) return this;
                      if (this.eq(e)) return this.dbl();
                      if (this.neg().eq(e)) return this.curve.point(null, null);
                      if (0 === this.x.cmp(e.x)) return this.curve.point(null, null);
                      var t = this.y.redSub(e.y);
                      0 !== t.cmpn(0) && (t = t.redMul(this.x.redSub(e.x).redInvm()));
                      var r = t.redSqr().redISub(this.x).redISub(e.x), n = t.redMul(this.x.redSub(r)).redISub(this.y);
                      return this.curve.point(r, n);
                  }, Nr.prototype.dbl = function() {
                      if (this.inf) return this;
                      var e = this.y.redAdd(this.y);
                      if (0 === e.cmpn(0)) return this.curve.point(null, null);
                      var t = this.curve.a, r = this.x.redSqr(), n = e.redInvm(), i = r.redAdd(r).redIAdd(r).redIAdd(t).redMul(n), o = i.redSqr().redISub(this.x.redAdd(this.x)), s = i.redMul(this.x.redSub(o)).redISub(this.y);
                      return this.curve.point(o, s);
                  }, Nr.prototype.getX = function() {
                      return this.x.fromRed();
                  }, Nr.prototype.getY = function() {
                      return this.y.fromRed();
                  }, Nr.prototype.mul = function(e) {
                      return e = new (L())(e, 16), this.isInfinity() ? this : this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve.endo ? this.curve._endoWnafMulAdd([
                          this
                      ], [
                          e
                      ]) : this.curve._wnafMul(this, e);
                  }, Nr.prototype.mulAdd = function(e, t, r) {
                      var n = [
                          this,
                          t
                      ], i = [
                          e,
                          r
                      ];
                      return this.curve.endo ? this.curve._endoWnafMulAdd(n, i) : this.curve._wnafMulAdd(1, n, i, 2);
                  }, Nr.prototype.jmulAdd = function(e, t, r) {
                      var n = [
                          this,
                          t
                      ], i = [
                          e,
                          r
                      ];
                      return this.curve.endo ? this.curve._endoWnafMulAdd(n, i, !0) : this.curve._wnafMulAdd(1, n, i, 2, !0);
                  }, Nr.prototype.eq = function(e) {
                      return this === e || this.inf === e.inf && (this.inf || 0 === this.x.cmp(e.x) && 0 === this.y.cmp(e.y));
                  }, Nr.prototype.neg = function(e) {
                      if (this.inf) return this;
                      var t = this.curve.point(this.x, this.y.redNeg());
                      if (e && this.precomputed) {
                          var r = this.precomputed, n = function(e) {
                              return e.neg();
                          };
                          t.precomputed = {
                              naf: r.naf && {
                                  wnd: r.naf.wnd,
                                  points: r.naf.points.map(n)
                              },
                              doubles: r.doubles && {
                                  step: r.doubles.step,
                                  points: r.doubles.points.map(n)
                              }
                          };
                      }
                      return t;
                  }, Nr.prototype.toJ = function() {
                      return this.inf ? this.curve.jpoint(null, null, null) : this.curve.jpoint(this.x, this.y, this.curve.one);
                  }, Er(Cr, _r.BasePoint), Ar.prototype.jpoint = function(e, t, r) {
                      return new Cr(this, e, t, r);
                  }, Cr.prototype.toP = function() {
                      if (this.isInfinity()) return this.curve.point(null, null);
                      var e = this.z.redInvm(), t = e.redSqr(), r = this.x.redMul(t), n = this.y.redMul(t).redMul(e);
                      return this.curve.point(r, n);
                  }, Cr.prototype.neg = function() {
                      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
                  }, Cr.prototype.add = function(e) {
                      if (this.isInfinity()) return e;
                      if (e.isInfinity()) return this;
                      var t = e.z.redSqr(), r = this.z.redSqr(), n = this.x.redMul(t), i = e.x.redMul(r), o = this.y.redMul(t.redMul(e.z)), s = e.y.redMul(r.redMul(this.z)), a = n.redSub(i), l = o.redSub(s);
                      if (0 === a.cmpn(0)) return 0 !== l.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
                      var u = a.redSqr(), c = u.redMul(a), d = n.redMul(u), h = l.redSqr().redIAdd(c).redISub(d).redISub(d), f = l.redMul(d.redISub(h)).redISub(o.redMul(c)), p = this.z.redMul(e.z).redMul(a);
                      return this.curve.jpoint(h, f, p);
                  }, Cr.prototype.mixedAdd = function(e) {
                      if (this.isInfinity()) return e.toJ();
                      if (e.isInfinity()) return this;
                      var t = this.z.redSqr(), r = this.x, n = e.x.redMul(t), i = this.y, o = e.y.redMul(t).redMul(this.z), s = r.redSub(n), a = i.redSub(o);
                      if (0 === s.cmpn(0)) return 0 !== a.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
                      var l = s.redSqr(), u = l.redMul(s), c = r.redMul(l), d = a.redSqr().redIAdd(u).redISub(c).redISub(c), h = a.redMul(c.redISub(d)).redISub(i.redMul(u)), f = this.z.redMul(s);
                      return this.curve.jpoint(d, h, f);
                  }, Cr.prototype.dblp = function(e) {
                      if (0 === e) return this;
                      if (this.isInfinity()) return this;
                      if (!e) return this.dbl();
                      var t;
                      if (this.curve.zeroA || this.curve.threeA) {
                          var r = this;
                          for(t = 0; t < e; t++)r = r.dbl();
                          return r;
                      }
                      var n = this.curve.a, i = this.curve.tinv, o = this.x, s = this.y, a = this.z, l = a.redSqr().redSqr(), u = s.redAdd(s);
                      for(t = 0; t < e; t++){
                          var c = o.redSqr(), d = u.redSqr(), h = d.redSqr(), f = c.redAdd(c).redIAdd(c).redIAdd(n.redMul(l)), p = o.redMul(d), m = f.redSqr().redISub(p.redAdd(p)), y = p.redISub(m), g = f.redMul(y);
                          g = g.redIAdd(g).redISub(h);
                          var v = u.redMul(a);
                          t + 1 < e && (l = l.redMul(h)), o = m, a = v, u = g;
                      }
                      return this.curve.jpoint(o, u.redMul(i), a);
                  }, Cr.prototype.dbl = function() {
                      return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
                  }, Cr.prototype._zeroDbl = function() {
                      var e, t, r;
                      if (this.zOne) {
                          var n = this.x.redSqr(), i = this.y.redSqr(), o = i.redSqr(), s = this.x.redAdd(i).redSqr().redISub(n).redISub(o);
                          s = s.redIAdd(s);
                          var a = n.redAdd(n).redIAdd(n), l = a.redSqr().redISub(s).redISub(s), u = o.redIAdd(o);
                          u = (u = u.redIAdd(u)).redIAdd(u), e = l, t = a.redMul(s.redISub(l)).redISub(u), r = this.y.redAdd(this.y);
                      } else {
                          var c = this.x.redSqr(), d = this.y.redSqr(), h = d.redSqr(), f = this.x.redAdd(d).redSqr().redISub(c).redISub(h);
                          f = f.redIAdd(f);
                          var p = c.redAdd(c).redIAdd(c), m = p.redSqr(), y = h.redIAdd(h);
                          y = (y = y.redIAdd(y)).redIAdd(y), e = m.redISub(f).redISub(f), t = p.redMul(f.redISub(e)).redISub(y), r = (r = this.y.redMul(this.z)).redIAdd(r);
                      }
                      return this.curve.jpoint(e, t, r);
                  }, Cr.prototype._threeDbl = function() {
                      var e, t, r;
                      if (this.zOne) {
                          var n = this.x.redSqr(), i = this.y.redSqr(), o = i.redSqr(), s = this.x.redAdd(i).redSqr().redISub(n).redISub(o);
                          s = s.redIAdd(s);
                          var a = n.redAdd(n).redIAdd(n).redIAdd(this.curve.a), l = a.redSqr().redISub(s).redISub(s);
                          e = l;
                          var u = o.redIAdd(o);
                          u = (u = u.redIAdd(u)).redIAdd(u), t = a.redMul(s.redISub(l)).redISub(u), r = this.y.redAdd(this.y);
                      } else {
                          var c = this.z.redSqr(), d = this.y.redSqr(), h = this.x.redMul(d), f = this.x.redSub(c).redMul(this.x.redAdd(c));
                          f = f.redAdd(f).redIAdd(f);
                          var p = h.redIAdd(h), m = (p = p.redIAdd(p)).redAdd(p);
                          e = f.redSqr().redISub(m), r = this.y.redAdd(this.z).redSqr().redISub(d).redISub(c);
                          var y = d.redSqr();
                          y = (y = (y = y.redIAdd(y)).redIAdd(y)).redIAdd(y), t = f.redMul(p.redISub(e)).redISub(y);
                      }
                      return this.curve.jpoint(e, t, r);
                  }, Cr.prototype._dbl = function() {
                      var e = this.curve.a, t = this.x, r = this.y, n = this.z, i = n.redSqr().redSqr(), o = t.redSqr(), s = r.redSqr(), a = o.redAdd(o).redIAdd(o).redIAdd(e.redMul(i)), l = t.redAdd(t), u = (l = l.redIAdd(l)).redMul(s), c = a.redSqr().redISub(u.redAdd(u)), d = u.redISub(c), h = s.redSqr();
                      h = (h = (h = h.redIAdd(h)).redIAdd(h)).redIAdd(h);
                      var f = a.redMul(d).redISub(h), p = r.redAdd(r).redMul(n);
                      return this.curve.jpoint(c, f, p);
                  }, Cr.prototype.trpl = function() {
                      if (!this.curve.zeroA) return this.dbl().add(this);
                      var e = this.x.redSqr(), t = this.y.redSqr(), r = this.z.redSqr(), n = t.redSqr(), i = e.redAdd(e).redIAdd(e), o = i.redSqr(), s = this.x.redAdd(t).redSqr().redISub(e).redISub(n), a = (s = (s = (s = s.redIAdd(s)).redAdd(s).redIAdd(s)).redISub(o)).redSqr(), l = n.redIAdd(n);
                      l = (l = (l = l.redIAdd(l)).redIAdd(l)).redIAdd(l);
                      var u = i.redIAdd(s).redSqr().redISub(o).redISub(a).redISub(l), c = t.redMul(u);
                      c = (c = c.redIAdd(c)).redIAdd(c);
                      var d = this.x.redMul(a).redISub(c);
                      d = (d = d.redIAdd(d)).redIAdd(d);
                      var h = this.y.redMul(u.redMul(l.redISub(u)).redISub(s.redMul(a)));
                      h = (h = (h = h.redIAdd(h)).redIAdd(h)).redIAdd(h);
                      var f = this.z.redAdd(s).redSqr().redISub(r).redISub(a);
                      return this.curve.jpoint(d, h, f);
                  }, Cr.prototype.mul = function(e, t) {
                      return e = new (L())(e, t), this.curve._wnafMul(this, e);
                  }, Cr.prototype.eq = function(e) {
                      if ("affine" === e.type) return this.eq(e.toJ());
                      if (this === e) return !0;
                      var t = this.z.redSqr(), r = e.z.redSqr();
                      if (0 !== this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0)) return !1;
                      var n = t.redMul(this.z), i = r.redMul(e.z);
                      return 0 === this.y.redMul(i).redISub(e.y.redMul(n)).cmpn(0);
                  }, Cr.prototype.eqXToP = function(e) {
                      var t = this.z.redSqr(), r = e.toRed(this.curve.red).redMul(t);
                      if (0 === this.x.cmp(r)) return !0;
                      for(var n = e.clone(), i = this.curve.redN.redMul(t);;){
                          if (n.iadd(this.curve.n), n.cmp(this.curve.p) >= 0) return !1;
                          if (r.redIAdd(i), 0 === this.x.cmp(r)) return !0;
                      }
                  }, Cr.prototype.inspect = function() {
                      return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
                  }, Cr.prototype.isInfinity = function() {
                      return 0 === this.z.cmpn(0);
                  };
                  var xr = hr(function(e, t) {
                      var r = t;
                      r.base = _r, r.short = Pr, r.mont = null, r.edwards = null;
                  }), Tr = hr(function(e, t) {
                      var r, n = t, i = yr.assert;
                      function o(e) {
                          "short" === e.type ? this.curve = new xr.short(e) : "edwards" === e.type ? this.curve = new xr.edwards(e) : this.curve = new xr.mont(e), this.g = this.curve.g, this.n = this.curve.n, this.hash = e.hash, i(this.g.validate(), "Invalid curve"), i(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
                      }
                      function s(e, t) {
                          Object.defineProperty(n, e, {
                              configurable: !0,
                              enumerable: !0,
                              get: function() {
                                  var r = new o(t);
                                  return Object.defineProperty(n, e, {
                                      configurable: !0,
                                      enumerable: !0,
                                      value: r
                                  }), r;
                              }
                          });
                      }
                      n.PresetCurve = o, s("p192", {
                          type: "short",
                          prime: "p192",
                          p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
                          a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
                          b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
                          n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
                          hash: dr().sha256,
                          gRed: !1,
                          g: [
                              "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
                              "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
                          ]
                      }), s("p224", {
                          type: "short",
                          prime: "p224",
                          p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
                          a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
                          b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
                          n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
                          hash: dr().sha256,
                          gRed: !1,
                          g: [
                              "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
                              "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
                          ]
                      }), s("p256", {
                          type: "short",
                          prime: null,
                          p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
                          a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
                          b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
                          n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
                          hash: dr().sha256,
                          gRed: !1,
                          g: [
                              "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
                              "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
                          ]
                      }), s("p384", {
                          type: "short",
                          prime: null,
                          p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
                          a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
                          b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
                          n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
                          hash: dr().sha384,
                          gRed: !1,
                          g: [
                              "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
                              "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
                          ]
                      }), s("p521", {
                          type: "short",
                          prime: null,
                          p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
                          a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
                          b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
                          n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
                          hash: dr().sha512,
                          gRed: !1,
                          g: [
                              "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
                              "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
                          ]
                      }), s("curve25519", {
                          type: "mont",
                          prime: "p25519",
                          p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
                          a: "76d06",
                          b: "1",
                          n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
                          hash: dr().sha256,
                          gRed: !1,
                          g: [
                              "9"
                          ]
                      }), s("ed25519", {
                          type: "edwards",
                          prime: "p25519",
                          p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
                          a: "-1",
                          c: "1",
                          d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
                          n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
                          hash: dr().sha256,
                          gRed: !1,
                          g: [
                              "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
                              "6666666666666666666666666666666666666666666666666666666666666658"
                          ]
                      });
                      try {
                          r = null.crash();
                      } catch (e) {
                          r = void 0;
                      }
                      s("secp256k1", {
                          type: "short",
                          prime: "k256",
                          p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
                          a: "0",
                          b: "7",
                          n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
                          h: "1",
                          hash: dr().sha256,
                          beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
                          lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
                          basis: [
                              {
                                  a: "3086d221a7d46bcde86c90e49284eb15",
                                  b: "-e4437ed6010e88286f547fa90abfe4c3"
                              },
                              {
                                  a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
                                  b: "3086d221a7d46bcde86c90e49284eb15"
                              }
                          ],
                          gRed: !1,
                          g: [
                              "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
                              "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
                              r
                          ]
                      });
                  });
                  function Rr(e) {
                      if (!(this instanceof Rr)) return new Rr(e);
                      this.hash = e.hash, this.predResist = !!e.predResist, this.outLen = this.hash.outSize, this.minEntropy = e.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
                      var t = mr.toArray(e.entropy, e.entropyEnc || "hex"), r = mr.toArray(e.nonce, e.nonceEnc || "hex"), n = mr.toArray(e.pers, e.persEnc || "hex");
                      fr(t.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(t, r, n);
                  }
                  var Or = Rr;
                  Rr.prototype._init = function(e, t, r) {
                      var n = e.concat(t).concat(r);
                      this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
                      for(var i = 0; i < this.V.length; i++)this.K[i] = 0, this.V[i] = 1;
                      this._update(n), this._reseed = 1, this.reseedInterval = 281474976710656;
                  }, Rr.prototype._hmac = function() {
                      return new (dr()).hmac(this.hash, this.K);
                  }, Rr.prototype._update = function(e) {
                      var t = this._hmac().update(this.V).update([
                          0
                      ]);
                      e && (t = t.update(e)), this.K = t.digest(), this.V = this._hmac().update(this.V).digest(), e && (this.K = this._hmac().update(this.V).update([
                          1
                      ]).update(e).digest(), this.V = this._hmac().update(this.V).digest());
                  }, Rr.prototype.reseed = function(e, t, r, n) {
                      "string" != typeof t && (n = r, r = t, t = null), e = mr.toArray(e, t), r = mr.toArray(r, n), fr(e.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._update(e.concat(r || [])), this._reseed = 1;
                  }, Rr.prototype.generate = function(e, t, r, n) {
                      if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
                      "string" != typeof t && (n = r, r = t, t = null), r && (r = mr.toArray(r, n || "hex"), this._update(r));
                      for(var i = []; i.length < e;)this.V = this._hmac().update(this.V).digest(), i = i.concat(this.V);
                      var o = i.slice(0, e);
                      return this._update(r), this._reseed++, mr.encode(o, t);
                  };
                  var Br = yr.assert;
                  function Ir(e, t) {
                      this.ec = e, this.priv = null, this.pub = null, t.priv && this._importPrivate(t.priv, t.privEnc), t.pub && this._importPublic(t.pub, t.pubEnc);
                  }
                  var Mr = Ir;
                  Ir.fromPublic = function(e, t, r) {
                      return t instanceof Ir ? t : new Ir(e, {
                          pub: t,
                          pubEnc: r
                      });
                  }, Ir.fromPrivate = function(e, t, r) {
                      return t instanceof Ir ? t : new Ir(e, {
                          priv: t,
                          privEnc: r
                      });
                  }, Ir.prototype.validate = function() {
                      var e = this.getPublic();
                      return e.isInfinity() ? {
                          result: !1,
                          reason: "Invalid public key"
                      } : e.validate() ? e.mul(this.ec.curve.n).isInfinity() ? {
                          result: !0,
                          reason: null
                      } : {
                          result: !1,
                          reason: "Public key * N != O"
                      } : {
                          result: !1,
                          reason: "Public key is not a point"
                      };
                  }, Ir.prototype.getPublic = function(e, t) {
                      return "string" == typeof e && (t = e, e = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), t ? this.pub.encode(t, e) : this.pub;
                  }, Ir.prototype.getPrivate = function(e) {
                      return "hex" === e ? this.priv.toString(16, 2) : this.priv;
                  }, Ir.prototype._importPrivate = function(e, t) {
                      this.priv = new (L())(e, t || 16), this.priv = this.priv.umod(this.ec.curve.n);
                  }, Ir.prototype._importPublic = function(e, t) {
                      if (e.x || e.y) return "mont" === this.ec.curve.type ? Br(e.x, "Need x coordinate") : "short" !== this.ec.curve.type && "edwards" !== this.ec.curve.type || Br(e.x && e.y, "Need both x and y coordinate"), void (this.pub = this.ec.curve.point(e.x, e.y));
                      this.pub = this.ec.curve.decodePoint(e, t);
                  }, Ir.prototype.derive = function(e) {
                      return e.validate() || Br(e.validate(), "public point not validated"), e.mul(this.priv).getX();
                  }, Ir.prototype.sign = function(e, t, r) {
                      return this.ec.sign(e, this, t, r);
                  }, Ir.prototype.verify = function(e, t) {
                      return this.ec.verify(e, t, this);
                  }, Ir.prototype.inspect = function() {
                      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
                  };
                  var Dr = yr.assert;
                  function Kr(e, t) {
                      if (e instanceof Kr) return e;
                      this._importDER(e, t) || (Dr(e.r && e.s, "Signature without r or s"), this.r = new (L())(e.r, 16), this.s = new (L())(e.s, 16), void 0 === e.recoveryParam ? this.recoveryParam = null : this.recoveryParam = e.recoveryParam);
                  }
                  var Ur = Kr;
                  function Fr() {
                      this.place = 0;
                  }
                  function jr(e, t) {
                      var r = e[t.place++];
                      if (!(128 & r)) return r;
                      var n = 15 & r;
                      if (0 === n || n > 4) return !1;
                      for(var i = 0, o = 0, s = t.place; o < n; o++, s++)i <<= 8, i |= e[s], i >>>= 0;
                      return !(i <= 127) && (t.place = s, i);
                  }
                  function Lr(e) {
                      for(var t = 0, r = e.length - 1; !e[t] && !(128 & e[t + 1]) && t < r;)t++;
                      return 0 === t ? e : e.slice(t);
                  }
                  function qr(e, t) {
                      if (t < 128) e.push(t);
                      else {
                          var r = 1 + (Math.log(t) / Math.LN2 >>> 3);
                          for(e.push(128 | r); --r;)e.push(t >>> (r << 3) & 255);
                          e.push(t);
                      }
                  }
                  Kr.prototype._importDER = function(e, t) {
                      e = yr.toArray(e, t);
                      var r = new Fr;
                      if (48 !== e[r.place++]) return !1;
                      var n = jr(e, r);
                      if (!1 === n) return !1;
                      if (n + r.place !== e.length) return !1;
                      if (2 !== e[r.place++]) return !1;
                      var i = jr(e, r);
                      if (!1 === i) return !1;
                      var o = e.slice(r.place, i + r.place);
                      if (r.place += i, 2 !== e[r.place++]) return !1;
                      var s = jr(e, r);
                      if (!1 === s) return !1;
                      if (e.length !== s + r.place) return !1;
                      var a = e.slice(r.place, s + r.place);
                      if (0 === o[0]) {
                          if (!(128 & o[1])) return !1;
                          o = o.slice(1);
                      }
                      if (0 === a[0]) {
                          if (!(128 & a[1])) return !1;
                          a = a.slice(1);
                      }
                      return this.r = new (L())(o), this.s = new (L())(a), this.recoveryParam = null, !0;
                  }, Kr.prototype.toDER = function(e) {
                      var t = this.r.toArray(), r = this.s.toArray();
                      for(128 & t[0] && (t = [
                          0
                      ].concat(t)), 128 & r[0] && (r = [
                          0
                      ].concat(r)), t = Lr(t), r = Lr(r); !(r[0] || 128 & r[1]);)r = r.slice(1);
                      var n = [
                          2
                      ];
                      qr(n, t.length), (n = n.concat(t)).push(2), qr(n, r.length);
                      var i = n.concat(r), o = [
                          48
                      ];
                      return qr(o, i.length), o = o.concat(i), yr.encode(o, e);
                  };
                  var zr = function() {
                      throw new Error("unsupported");
                  }, Vr = yr.assert;
                  function Wr(e) {
                      if (!(this instanceof Wr)) return new Wr(e);
                      "string" == typeof e && (Vr(Object.prototype.hasOwnProperty.call(Tr, e), "Unknown curve " + e), e = Tr[e]), e instanceof Tr.PresetCurve && (e = {
                          curve: e
                      }), this.curve = e.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = e.curve.g, this.g.precompute(e.curve.n.bitLength() + 1), this.hash = e.hash || e.curve.hash;
                  }
                  var Gr = Wr;
                  Wr.prototype.keyPair = function(e) {
                      return new Mr(this, e);
                  }, Wr.prototype.keyFromPrivate = function(e, t) {
                      return Mr.fromPrivate(this, e, t);
                  }, Wr.prototype.keyFromPublic = function(e, t) {
                      return Mr.fromPublic(this, e, t);
                  }, Wr.prototype.genKeyPair = function(e) {
                      e || (e = {});
                      for(var t = new Or({
                          hash: this.hash,
                          pers: e.pers,
                          persEnc: e.persEnc || "utf8",
                          entropy: e.entropy || zr(this.hash.hmacStrength),
                          entropyEnc: e.entropy && e.entropyEnc || "utf8",
                          nonce: this.n.toArray()
                      }), r = this.n.byteLength(), n = this.n.sub(new (L())(2));;){
                          var i = new (L())(t.generate(r));
                          if (!(i.cmp(n) > 0)) return i.iaddn(1), this.keyFromPrivate(i);
                      }
                  }, Wr.prototype._truncateToN = function(e, t) {
                      var r = 8 * e.byteLength() - this.n.bitLength();
                      return r > 0 && (e = e.ushrn(r)), !t && e.cmp(this.n) >= 0 ? e.sub(this.n) : e;
                  }, Wr.prototype.sign = function(e, t, r, n) {
                      "object" == typeof r && (n = r, r = null), n || (n = {}), t = this.keyFromPrivate(t, r), e = this._truncateToN(new (L())(e, 16));
                      for(var i = this.n.byteLength(), o = t.getPrivate().toArray("be", i), s = e.toArray("be", i), a = new Or({
                          hash: this.hash,
                          entropy: o,
                          nonce: s,
                          pers: n.pers,
                          persEnc: n.persEnc || "utf8"
                      }), l = this.n.sub(new (L())(1)), u = 0;; u++){
                          var c = n.k ? n.k(u) : new (L())(a.generate(this.n.byteLength()));
                          if (!((c = this._truncateToN(c, !0)).cmpn(1) <= 0 || c.cmp(l) >= 0)) {
                              var d = this.g.mul(c);
                              if (!d.isInfinity()) {
                                  var h = d.getX(), f = h.umod(this.n);
                                  if (0 !== f.cmpn(0)) {
                                      var p = c.invm(this.n).mul(f.mul(t.getPrivate()).iadd(e));
                                      if (0 !== (p = p.umod(this.n)).cmpn(0)) {
                                          var m = (d.getY().isOdd() ? 1 : 0) | (0 !== h.cmp(f) ? 2 : 0);
                                          return n.canonical && p.cmp(this.nh) > 0 && (p = this.n.sub(p), m ^= 1), new Ur({
                                              r: f,
                                              s: p,
                                              recoveryParam: m
                                          });
                                      }
                                  }
                              }
                          }
                      }
                  }, Wr.prototype.verify = function(e, t, r, n) {
                      e = this._truncateToN(new (L())(e, 16)), r = this.keyFromPublic(r, n);
                      var i = (t = new Ur(t, "hex")).r, o = t.s;
                      if (i.cmpn(1) < 0 || i.cmp(this.n) >= 0) return !1;
                      if (o.cmpn(1) < 0 || o.cmp(this.n) >= 0) return !1;
                      var s, a = o.invm(this.n), l = a.mul(e).umod(this.n), u = a.mul(i).umod(this.n);
                      return this.curve._maxwellTrick ? !(s = this.g.jmulAdd(l, r.getPublic(), u)).isInfinity() && s.eqXToP(i) : !(s = this.g.mulAdd(l, r.getPublic(), u)).isInfinity() && 0 === s.getX().umod(this.n).cmp(i);
                  }, Wr.prototype.recoverPubKey = function(e, t, r, n) {
                      Vr((3 & r) === r, "The recovery param is more than two bits"), t = new Ur(t, n);
                      var i = this.n, o = new (L())(e), s = t.r, a = t.s, l = 1 & r, u = r >> 1;
                      if (s.cmp(this.curve.p.umod(this.curve.n)) >= 0 && u) throw new Error("Unable to find sencond key candinate");
                      s = u ? this.curve.pointFromX(s.add(this.curve.n), l) : this.curve.pointFromX(s, l);
                      var c = t.r.invm(i), d = i.sub(o).mul(c).umod(i), h = a.mul(c).umod(i);
                      return this.g.mulAdd(d, s, h);
                  }, Wr.prototype.getKeyRecoveryParam = function(e, t, r, n) {
                      if (null !== (t = new Ur(t, n)).recoveryParam) return t.recoveryParam;
                      for(var i = 0; i < 4; i++){
                          var o;
                          try {
                              o = this.recoverPubKey(e, t, i);
                          } catch (e) {
                              continue;
                          }
                          if (o.eq(r)) return i;
                      }
                      throw new Error("Unable to find valid recovery factor");
                  };
                  var Jr = hr(function(e, t) {
                      var r = t;
                      r.version = "6.5.4", r.utils = yr, r.rand = function() {
                          throw new Error("unsupported");
                      }, r.curve = xr, r.curves = Tr, r.ec = Gr, r.eddsa = null;
                  }).ec;
                  const Hr = new v("signing-key/5.5.0");
                  let $r = null;
                  function Zr() {
                      return $r || ($r = new Jr("secp256k1")), $r;
                  }
                  class Xr {
                      constructor(e){
                          ee(this, "curve", "secp256k1"), ee(this, "privateKey", R(e));
                          const t = Zr().keyFromPrivate(A(this.privateKey));
                          ee(this, "publicKey", "0x" + t.getPublic(!1, "hex")), ee(this, "compressedPublicKey", "0x" + t.getPublic(!0, "hex")), ee(this, "_isSigningKey", !0);
                      }
                      _addPoint(e) {
                          const t = Zr().keyFromPublic(A(this.publicKey)), r = Zr().keyFromPublic(A(e));
                          return "0x" + t.pub.add(r.pub).encodeCompressed("hex");
                      }
                      signDigest(e) {
                          const t = Zr().keyFromPrivate(A(this.privateKey)), r = A(e);
                          32 !== r.length && Hr.throwArgumentError("bad digest length", "digest", e);
                          const n = t.sign(r, {
                              canonical: !0
                          });
                          return U({
                              recoveryParam: n.recoveryParam,
                              r: K("0x" + n.r.toString(16), 32),
                              s: K("0x" + n.s.toString(16), 32)
                          });
                      }
                      computeSharedSecret(e) {
                          const t = Zr().keyFromPrivate(A(this.privateKey)), r = Zr().keyFromPublic(A(Yr(e)));
                          return K("0x" + t.derive(r.getPublic()).toString(16), 32);
                      }
                      static isSigningKey(e) {
                          return !(!e || !e._isSigningKey);
                      }
                  }
                  function Qr(e, t) {
                      const r = U(t), n = {
                          r: A(r.r),
                          s: A(r.s)
                      };
                      return "0x" + Zr().recoverPubKey(A(e), n, r.recoveryParam).encode("hex", !1);
                  }
                  function Yr(e, t) {
                      const r = A(e);
                      if (32 === r.length) {
                          const e = new Xr(r);
                          return t ? "0x" + Zr().keyFromPrivate(r).getPublic(!0, "hex") : e.publicKey;
                      }
                      return 33 === r.length ? t ? R(r) : "0x" + Zr().keyFromPublic(r).getPublic(!1, "hex") : 65 === r.length ? t ? "0x" + Zr().keyFromPublic(r).getPublic(!0, "hex") : R(r) : Hr.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
                  }
                  const en = new v("transactions/5.5.0");
                  var tn;
                  function rn(e) {
                      return "0x" === e ? null : Be(e);
                  }
                  function nn(e) {
                      return "0x" === e ? ut : H.from(e);
                  }
                  !function(e) {
                      e[e.legacy = 0] = "legacy", e[e.eip2930 = 1] = "eip2930", e[e.eip1559 = 2] = "eip1559";
                  }(tn || (tn = {}));
                  const on = [
                      {
                          name: "nonce",
                          maxLength: 32,
                          numeric: !0
                      },
                      {
                          name: "gasPrice",
                          maxLength: 32,
                          numeric: !0
                      },
                      {
                          name: "gasLimit",
                          maxLength: 32,
                          numeric: !0
                      },
                      {
                          name: "to",
                          length: 20
                      },
                      {
                          name: "value",
                          maxLength: 32,
                          numeric: !0
                      },
                      {
                          name: "data"
                      }
                  ], sn = {
                      chainId: !0,
                      data: !0,
                      gasLimit: !0,
                      gasPrice: !0,
                      nonce: !0,
                      to: !0,
                      type: !0,
                      value: !0
                  };
                  function an(e) {
                      return Be(B(ve(B(Yr(e), 1)), 12));
                  }
                  function ln(e, t) {
                      return an(Qr(A(e), t));
                  }
                  function un(e, t) {
                      const r = N(H.from(e).toHexString());
                      return r.length > 32 && en.throwArgumentError("invalid length for " + t, "transaction:" + t, e), r;
                  }
                  function cn(e, t) {
                      return {
                          address: Be(e),
                          storageKeys: (t || []).map((t, r)=>(32 !== O(t) && en.throwArgumentError("invalid access list storageKey", `accessList[${e}:${r}]`, t), t.toLowerCase()))
                      };
                  }
                  function dn(e) {
                      if (Array.isArray(e)) return e.map((e, t)=>Array.isArray(e) ? (e.length > 2 && en.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${t}]`, e), cn(e[0], e[1])) : cn(e.address, e.storageKeys));
                      const t = Object.keys(e).map((t)=>{
                          const r = e[t].reduce((e, t)=>(e[t] = !0, e), {});
                          return cn(t, Object.keys(r).sort());
                      });
                      return t.sort((e, t)=>e.address.localeCompare(t.address)), t;
                  }
                  function hn(e) {
                      return dn(e).map((e)=>[
                              e.address,
                              e.storageKeys
                          ]);
                  }
                  function fn(e, t) {
                      if (null != e.gasPrice) {
                          const t = H.from(e.gasPrice), r = H.from(e.maxFeePerGas || 0);
                          t.eq(r) || en.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
                              gasPrice: t,
                              maxFeePerGas: r
                          });
                      }
                      const r = [
                          un(e.chainId || 0, "chainId"),
                          un(e.nonce || 0, "nonce"),
                          un(e.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
                          un(e.maxFeePerGas || 0, "maxFeePerGas"),
                          un(e.gasLimit || 0, "gasLimit"),
                          null != e.to ? Be(e.to) : "0x",
                          un(e.value || 0, "value"),
                          e.data || "0x",
                          hn(e.accessList || [])
                      ];
                      if (t) {
                          const e = U(t);
                          r.push(un(e.recoveryParam, "recoveryParam")), r.push(N(e.r)), r.push(N(e.s));
                      }
                      return I([
                          "0x02",
                          Ee(r)
                      ]);
                  }
                  function pn(e, t) {
                      const r = [
                          un(e.chainId || 0, "chainId"),
                          un(e.nonce || 0, "nonce"),
                          un(e.gasPrice || 0, "gasPrice"),
                          un(e.gasLimit || 0, "gasLimit"),
                          null != e.to ? Be(e.to) : "0x",
                          un(e.value || 0, "value"),
                          e.data || "0x",
                          hn(e.accessList || [])
                      ];
                      if (t) {
                          const e = U(t);
                          r.push(un(e.recoveryParam, "recoveryParam")), r.push(N(e.r)), r.push(N(e.s));
                      }
                      return I([
                          "0x01",
                          Ee(r)
                      ]);
                  }
                  function mn(e, t) {
                      if (null == e.type || 0 === e.type) return null != e.accessList && en.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", e), function(e, t) {
                          ne(e, sn);
                          const r = [];
                          on.forEach(function(t) {
                              let n = e[t.name] || [];
                              const i = {};
                              t.numeric && (i.hexPad = "left"), n = A(R(n, i)), t.length && n.length !== t.length && n.length > 0 && en.throwArgumentError("invalid length for " + t.name, "transaction:" + t.name, n), t.maxLength && (n = N(n), n.length > t.maxLength && en.throwArgumentError("invalid length for " + t.name, "transaction:" + t.name, n)), r.push(R(n));
                          });
                          let n = 0;
                          if (null != e.chainId ? (n = e.chainId, "number" != typeof n && en.throwArgumentError("invalid transaction.chainId", "transaction", e)) : t && !S(t) && t.v > 28 && (n = Math.floor((t.v - 35) / 2)), 0 !== n && (r.push(R(n)), r.push("0x"), r.push("0x")), !t) return Ee(r);
                          const i = U(t);
                          let o = 27 + i.recoveryParam;
                          return 0 !== n ? (r.pop(), r.pop(), r.pop(), o += 2 * n + 8, i.v > 28 && i.v !== o && en.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", t)) : i.v !== o && en.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", t), r.push(R(o)), r.push(N(A(i.r))), r.push(N(A(i.s))), Ee(r);
                      }(e, t);
                      switch(e.type){
                          case 1:
                              return pn(e, t);
                          case 2:
                              return fn(e, t);
                      }
                      return en.throwError(`unsupported transaction type: ${e.type}`, v.errors.UNSUPPORTED_OPERATION, {
                          operation: "serializeTransaction",
                          transactionType: e.type
                      });
                  }
                  function yn(e, t, r) {
                      try {
                          const r = nn(t[0]).toNumber();
                          if (0 !== r && 1 !== r) throw new Error("bad recid");
                          e.v = r;
                      } catch (e) {
                          en.throwArgumentError("invalid v for transaction type: 1", "v", t[0]);
                      }
                      e.r = K(t[1], 32), e.s = K(t[2], 32);
                      try {
                          const t = ve(r(e));
                          e.from = ln(t, {
                              r: e.r,
                              s: e.s,
                              recoveryParam: e.v
                          });
                      } catch (e) {
                          console.log(e);
                      }
                  }
                  function gn(e) {
                      const t = A(e);
                      if (t[0] > 127) return function(e) {
                          const t = Pe(e);
                          9 !== t.length && 6 !== t.length && en.throwArgumentError("invalid raw transaction", "rawTransaction", e);
                          const r = {
                              nonce: nn(t[0]).toNumber(),
                              gasPrice: nn(t[1]),
                              gasLimit: nn(t[2]),
                              to: rn(t[3]),
                              value: nn(t[4]),
                              data: t[5],
                              chainId: 0
                          };
                          if (6 === t.length) return r;
                          try {
                              r.v = H.from(t[6]).toNumber();
                          } catch (e) {
                              return console.log(e), r;
                          }
                          if (r.r = K(t[7], 32), r.s = K(t[8], 32), H.from(r.r).isZero() && H.from(r.s).isZero()) r.chainId = r.v, r.v = 0;
                          else {
                              r.chainId = Math.floor((r.v - 35) / 2), r.chainId < 0 && (r.chainId = 0);
                              let n = r.v - 27;
                              const i = t.slice(0, 6);
                              0 !== r.chainId && (i.push(R(r.chainId)), i.push("0x"), i.push("0x"), n -= 2 * r.chainId + 8);
                              const o = ve(Ee(i));
                              try {
                                  r.from = ln(o, {
                                      r: R(r.r),
                                      s: R(r.s),
                                      recoveryParam: n
                                  });
                              } catch (e) {
                                  console.log(e);
                              }
                              r.hash = ve(e);
                          }
                          return r.type = null, r;
                      }(t);
                      switch(t[0]){
                          case 1:
                              return function(e) {
                                  const t = Pe(e.slice(1));
                                  8 !== t.length && 11 !== t.length && en.throwArgumentError("invalid component count for transaction type: 1", "payload", R(e));
                                  const r = {
                                      type: 1,
                                      chainId: nn(t[0]).toNumber(),
                                      nonce: nn(t[1]).toNumber(),
                                      gasPrice: nn(t[2]),
                                      gasLimit: nn(t[3]),
                                      to: rn(t[4]),
                                      value: nn(t[5]),
                                      data: t[6],
                                      accessList: dn(t[7])
                                  };
                                  return 8 === t.length || (r.hash = ve(e), yn(r, t.slice(8), pn)), r;
                              }(t);
                          case 2:
                              return function(e) {
                                  const t = Pe(e.slice(1));
                                  9 !== t.length && 12 !== t.length && en.throwArgumentError("invalid component count for transaction type: 2", "payload", R(e));
                                  const r = nn(t[2]), n = nn(t[3]), i = {
                                      type: 2,
                                      chainId: nn(t[0]).toNumber(),
                                      nonce: nn(t[1]).toNumber(),
                                      maxPriorityFeePerGas: r,
                                      maxFeePerGas: n,
                                      gasPrice: null,
                                      gasLimit: nn(t[4]),
                                      to: rn(t[5]),
                                      value: nn(t[6]),
                                      data: t[7],
                                      accessList: dn(t[8])
                                  };
                                  return 9 === t.length || (i.hash = ve(e), yn(i, t.slice(9), fn)), i;
                              }(t);
                      }
                      return en.throwError(`unsupported transaction type: ${t[0]}`, v.errors.UNSUPPORTED_OPERATION, {
                          operation: "parseTransaction",
                          transactionType: t[0]
                      });
                  }
                  var vn = function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  };
                  const bn = new v("contracts/5.5.0"), wn = {
                      chainId: !0,
                      data: !0,
                      from: !0,
                      gasLimit: !0,
                      gasPrice: !0,
                      nonce: !0,
                      to: !0,
                      value: !0,
                      type: !0,
                      accessList: !0,
                      maxFeePerGas: !0,
                      maxPriorityFeePerGas: !0,
                      customData: !0
                  };
                  function _n(e, t) {
                      return vn(this, void 0, void 0, function*() {
                          const r = yield t;
                          "string" != typeof r && bn.throwArgumentError("invalid address or ENS name", "name", r);
                          try {
                              return Be(r);
                          } catch (e) {}
                          e || bn.throwError("a provider or signer is needed to resolve ENS names", v.errors.UNSUPPORTED_OPERATION, {
                              operation: "resolveName"
                          });
                          const n = yield e.resolveName(r);
                          return null == n && bn.throwArgumentError("resolver or addr is not configured for ENS name", "name", r), n;
                      });
                  }
                  function Sn(e, t, r) {
                      return vn(this, void 0, void 0, function*() {
                          return Array.isArray(r) ? yield Promise.all(r.map((r, n)=>Sn(e, Array.isArray(t) ? t[n] : t[r.name], r))) : "address" === r.type ? yield _n(e, t) : "tuple" === r.type ? yield Sn(e, t, r.components) : "array" === r.baseType ? Array.isArray(t) ? yield Promise.all(t.map((t)=>Sn(e, t, r.arrayChildren))) : Promise.reject(bn.makeError("invalid value for array", v.errors.INVALID_ARGUMENT, {
                              argument: "value",
                              value: t
                          })) : t;
                      });
                  }
                  function En(e, t, r) {
                      return vn(this, void 0, void 0, function*() {
                          let n = {};
                          r.length === t.inputs.length + 1 && "object" == typeof r[r.length - 1] && (n = ie(r.pop())), bn.checkArgumentCount(r.length, t.inputs.length, "passed to contract"), e.signer ? n.from ? n.from = re({
                              override: _n(e.signer, n.from),
                              signer: e.signer.getAddress()
                          }).then((e)=>vn(this, void 0, void 0, function*() {
                                  return Be(e.signer) !== e.override && bn.throwError("Contract with a Signer cannot override from", v.errors.UNSUPPORTED_OPERATION, {
                                      operation: "overrides.from"
                                  }), e.override;
                              })) : n.from = e.signer.getAddress() : n.from && (n.from = _n(e.provider, n.from));
                          const i = yield re({
                              args: Sn(e.signer || e.provider, r, t.inputs),
                              address: e.resolvedAddress,
                              overrides: re(n) || {}
                          }), o = e.interface.encodeFunctionData(t, i.args), s = {
                              data: o,
                              to: i.address
                          }, a = i.overrides;
                          if (null != a.nonce && (s.nonce = H.from(a.nonce).toNumber()), null != a.gasLimit && (s.gasLimit = H.from(a.gasLimit)), null != a.gasPrice && (s.gasPrice = H.from(a.gasPrice)), null != a.maxFeePerGas && (s.maxFeePerGas = H.from(a.maxFeePerGas)), null != a.maxPriorityFeePerGas && (s.maxPriorityFeePerGas = H.from(a.maxPriorityFeePerGas)), null != a.from && (s.from = a.from), null != a.type && (s.type = a.type), null != a.accessList && (s.accessList = dn(a.accessList)), null == s.gasLimit && null != t.gas) {
                              let e = 21e3;
                              const r = A(o);
                              for(let t = 0; t < r.length; t++)e += 4, r[t] && (e += 64);
                              s.gasLimit = H.from(t.gas).add(e);
                          }
                          if (a.value) {
                              const e = H.from(a.value);
                              e.isZero() || t.payable || bn.throwError("non-payable method cannot override value", v.errors.UNSUPPORTED_OPERATION, {
                                  operation: "overrides.value",
                                  value: n.value
                              }), s.value = e;
                          }
                          a.customData && (s.customData = ie(a.customData)), delete n.nonce, delete n.gasLimit, delete n.gasPrice, delete n.from, delete n.value, delete n.type, delete n.accessList, delete n.maxFeePerGas, delete n.maxPriorityFeePerGas, delete n.customData;
                          const l = Object.keys(n).filter((e)=>null != n[e]);
                          return l.length && bn.throwError(`cannot override ${l.map((e)=>JSON.stringify(e)).join(",")}`, v.errors.UNSUPPORTED_OPERATION, {
                              operation: "overrides",
                              overrides: l
                          }), s;
                      });
                  }
                  function kn(e, t) {
                      const r = t.wait.bind(t);
                      t.wait = (t)=>r(t).then((t)=>(t.events = t.logs.map((r)=>{
                                  let n = le(r), i = null;
                                  try {
                                      i = e.interface.parseLog(r);
                                  } catch (e) {}
                                  return i && (n.args = i.args, n.decode = (t, r)=>e.interface.decodeEventLog(i.eventFragment, t, r), n.event = i.name, n.eventSignature = i.signature), n.removeListener = ()=>e.provider, n.getBlock = ()=>e.provider.getBlock(t.blockHash), n.getTransaction = ()=>e.provider.getTransaction(t.transactionHash), n.getTransactionReceipt = ()=>Promise.resolve(t), n;
                              }), t));
                  }
                  function An(e, t, r) {
                      const n = e.signer || e.provider;
                      return function(...i) {
                          return vn(this, void 0, void 0, function*() {
                              let o;
                              if (i.length === t.inputs.length + 1 && "object" == typeof i[i.length - 1]) {
                                  const e = ie(i.pop());
                                  null != e.blockTag && (o = yield e.blockTag), delete e.blockTag, i.push(e);
                              }
                              null != e.deployTransaction && (yield e._deployed(o));
                              const s = yield En(e, t, i), a = yield n.call(s, o);
                              try {
                                  let n = e.interface.decodeFunctionResult(t, a);
                                  return r && 1 === t.outputs.length && (n = n[0]), n;
                              } catch (t) {
                                  throw t.code === v.errors.CALL_EXCEPTION && (t.address = e.address, t.args = i, t.transaction = s), t;
                              }
                          });
                      };
                  }
                  function Pn(e, t, r) {
                      return t.constant ? An(e, t, r) : function(e, t) {
                          return function(...r) {
                              return vn(this, void 0, void 0, function*() {
                                  e.signer || bn.throwError("sending a transaction requires a signer", v.errors.UNSUPPORTED_OPERATION, {
                                      operation: "sendTransaction"
                                  }), null != e.deployTransaction && (yield e._deployed());
                                  const n = yield En(e, t, r), i = yield e.signer.sendTransaction(n);
                                  return kn(e, i), i;
                              });
                          };
                      }(e, t);
                  }
                  function Nn(e) {
                      return !e.address || null != e.topics && 0 !== e.topics.length ? (e.address || "*") + "@" + (e.topics ? e.topics.map((e)=>Array.isArray(e) ? e.join("|") : e).join(":") : "") : "*";
                  }
                  class Cn {
                      constructor(e, t){
                          ee(this, "tag", e), ee(this, "filter", t), this._listeners = [];
                      }
                      addListener(e, t) {
                          this._listeners.push({
                              listener: e,
                              once: t
                          });
                      }
                      removeListener(e) {
                          let t = !1;
                          this._listeners = this._listeners.filter((r)=>!(!t && r.listener === e && (t = !0, 1)));
                      }
                      removeAllListeners() {
                          this._listeners = [];
                      }
                      listeners() {
                          return this._listeners.map((e)=>e.listener);
                      }
                      listenerCount() {
                          return this._listeners.length;
                      }
                      run(e) {
                          const t = this.listenerCount();
                          return this._listeners = this._listeners.filter((t)=>{
                              const r = e.slice();
                              return setTimeout(()=>{
                                  t.listener.apply(this, r);
                              }, 0), !t.once;
                          }), t;
                      }
                      prepareEvent(e) {}
                      getEmit(e) {
                          return [
                              e
                          ];
                      }
                  }
                  class xn extends Cn {
                      constructor(){
                          super("error", null);
                      }
                  }
                  class Tn extends Cn {
                      constructor(e, t, r, n){
                          const i = {
                              address: e
                          };
                          let o = t.getEventTopic(r);
                          n ? (o !== n[0] && bn.throwArgumentError("topic mismatch", "topics", n), i.topics = n.slice()) : i.topics = [
                              o
                          ], super(Nn(i), i), ee(this, "address", e), ee(this, "interface", t), ee(this, "fragment", r);
                      }
                      prepareEvent(e) {
                          super.prepareEvent(e), e.event = this.fragment.name, e.eventSignature = this.fragment.format(), e.decode = (e, t)=>this.interface.decodeEventLog(this.fragment, e, t);
                          try {
                              e.args = this.interface.decodeEventLog(this.fragment, e.data, e.topics);
                          } catch (t) {
                              e.args = null, e.decodeError = t;
                          }
                      }
                      getEmit(e) {
                          const t = he(e.args);
                          if (t.length) throw t[0].error;
                          const r = (e.args || []).slice();
                          return r.push(e), r;
                      }
                  }
                  class Rn extends Cn {
                      constructor(e, t){
                          super("*", {
                              address: e
                          }), ee(this, "address", e), ee(this, "interface", t);
                      }
                      prepareEvent(e) {
                          super.prepareEvent(e);
                          try {
                              const t = this.interface.parseLog(e);
                              e.event = t.name, e.eventSignature = t.signature, e.decode = (e, r)=>this.interface.decodeEventLog(t.eventFragment, e, r), e.args = t.args;
                          } catch (e) {}
                      }
                  }
                  class On {
                      constructor(e, t, r){
                          bn.checkNew(new.target, Bn), ee(this, "interface", te(new.target, "getInterface")(t)), null == r ? (ee(this, "provider", null), ee(this, "signer", null)) : lr.isSigner(r) ? (ee(this, "provider", r.provider || null), ee(this, "signer", r)) : nr.isProvider(r) ? (ee(this, "provider", r), ee(this, "signer", null)) : bn.throwArgumentError("invalid signer or provider", "signerOrProvider", r), ee(this, "callStatic", {}), ee(this, "estimateGas", {}), ee(this, "functions", {}), ee(this, "populateTransaction", {}), ee(this, "filters", {});
                          {
                              const e = {};
                              Object.keys(this.interface.events).forEach((t)=>{
                                  const r = this.interface.events[t];
                                  ee(this.filters, t, (...e)=>({
                                          address: this.address,
                                          topics: this.interface.encodeFilterTopics(r, e)
                                      })), e[r.name] || (e[r.name] = []), e[r.name].push(t);
                              }), Object.keys(e).forEach((t)=>{
                                  const r = e[t];
                                  1 === r.length ? ee(this.filters, t, this.filters[r[0]]) : bn.warn(`Duplicate definition of ${t} (${r.join(", ")})`);
                              });
                          }
                          if (ee(this, "_runningEvents", {}), ee(this, "_wrappedEmits", {}), null == e && bn.throwArgumentError("invalid contract address or ENS name", "addressOrName", e), ee(this, "address", e), this.provider) ee(this, "resolvedAddress", _n(this.provider, e));
                          else try {
                              ee(this, "resolvedAddress", Promise.resolve(Be(e)));
                          } catch (e) {
                              bn.throwError("provider is required to use ENS name as contract address", v.errors.UNSUPPORTED_OPERATION, {
                                  operation: "new Contract"
                              });
                          }
                          const n = {}, i = {};
                          Object.keys(this.interface.functions).forEach((e)=>{
                              const t = this.interface.functions[e];
                              if (i[e]) bn.warn(`Duplicate ABI entry for ${JSON.stringify(e)}`);
                              else {
                                  i[e] = !0;
                                  {
                                      const r = t.name;
                                      n[`%${r}`] || (n[`%${r}`] = []), n[`%${r}`].push(e);
                                  }
                                  null == this[e] && ee(this, e, Pn(this, t, !0)), null == this.functions[e] && ee(this.functions, e, Pn(this, t, !1)), null == this.callStatic[e] && ee(this.callStatic, e, An(this, t, !0)), null == this.populateTransaction[e] && ee(this.populateTransaction, e, function(e, t) {
                                      return function(...r) {
                                          return En(e, t, r);
                                      };
                                  }(this, t)), null == this.estimateGas[e] && ee(this.estimateGas, e, function(e, t) {
                                      const r = e.signer || e.provider;
                                      return function(...n) {
                                          return vn(this, void 0, void 0, function*() {
                                              r || bn.throwError("estimate require a provider or signer", v.errors.UNSUPPORTED_OPERATION, {
                                                  operation: "estimateGas"
                                              });
                                              const i = yield En(e, t, n);
                                              return yield r.estimateGas(i);
                                          });
                                      };
                                  }(this, t));
                              }
                          }), Object.keys(n).forEach((e)=>{
                              const t = n[e];
                              if (t.length > 1) return;
                              e = e.substring(1);
                              const r = t[0];
                              try {
                                  null == this[e] && ee(this, e, this[r]);
                              } catch (e) {}
                              null == this.functions[e] && ee(this.functions, e, this.functions[r]), null == this.callStatic[e] && ee(this.callStatic, e, this.callStatic[r]), null == this.populateTransaction[e] && ee(this.populateTransaction, e, this.populateTransaction[r]), null == this.estimateGas[e] && ee(this.estimateGas, e, this.estimateGas[r]);
                          });
                      }
                      static getContractAddress(e) {
                          return De(e);
                      }
                      static getInterface(e) {
                          return er.isInterface(e) ? e : new er(e);
                      }
                      deployed() {
                          return this._deployed();
                      }
                      _deployed(e) {
                          return this._deployedPromise || (this.deployTransaction ? this._deployedPromise = this.deployTransaction.wait().then(()=>this) : this._deployedPromise = this.provider.getCode(this.address, e).then((e)=>("0x" === e && bn.throwError("contract not deployed", v.errors.UNSUPPORTED_OPERATION, {
                                  contractAddress: this.address,
                                  operation: "getDeployed"
                              }), this))), this._deployedPromise;
                      }
                      fallback(e) {
                          this.signer || bn.throwError("sending a transactions require a signer", v.errors.UNSUPPORTED_OPERATION, {
                              operation: "sendTransaction(fallback)"
                          });
                          const t = ie(e || {});
                          return [
                              "from",
                              "to"
                          ].forEach(function(e) {
                              null != t[e] && bn.throwError("cannot override " + e, v.errors.UNSUPPORTED_OPERATION, {
                                  operation: e
                              });
                          }), t.to = this.resolvedAddress, this.deployed().then(()=>this.signer.sendTransaction(t));
                      }
                      connect(e) {
                          "string" == typeof e && (e = new ur(e, this.provider));
                          const t = new this.constructor(this.address, this.interface, e);
                          return this.deployTransaction && ee(t, "deployTransaction", this.deployTransaction), t;
                      }
                      attach(e) {
                          return new this.constructor(e, this.interface, this.signer || this.provider);
                      }
                      static isIndexed(e) {
                          return Xt.isIndexed(e);
                      }
                      _normalizeRunningEvent(e) {
                          return this._runningEvents[e.tag] ? this._runningEvents[e.tag] : e;
                      }
                      _getRunningEvent(e) {
                          if ("string" == typeof e) {
                              if ("error" === e) return this._normalizeRunningEvent(new xn);
                              if ("event" === e) return this._normalizeRunningEvent(new Cn("event", null));
                              if ("*" === e) return this._normalizeRunningEvent(new Rn(this.address, this.interface));
                              const t = this.interface.getEvent(e);
                              return this._normalizeRunningEvent(new Tn(this.address, this.interface, t));
                          }
                          if (e.topics && e.topics.length > 0) {
                              try {
                                  const t = e.topics[0];
                                  if ("string" != typeof t) throw new Error("invalid topic");
                                  const r = this.interface.getEvent(t);
                                  return this._normalizeRunningEvent(new Tn(this.address, this.interface, r, e.topics));
                              } catch (e) {}
                              const t = {
                                  address: this.address,
                                  topics: e.topics
                              };
                              return this._normalizeRunningEvent(new Cn(Nn(t), t));
                          }
                          return this._normalizeRunningEvent(new Rn(this.address, this.interface));
                      }
                      _checkRunningEvents(e) {
                          if (0 === e.listenerCount()) {
                              delete this._runningEvents[e.tag];
                              const t = this._wrappedEmits[e.tag];
                              t && e.filter && (this.provider.off(e.filter, t), delete this._wrappedEmits[e.tag]);
                          }
                      }
                      _wrapEvent(e, t, r) {
                          const n = le(t);
                          return n.removeListener = ()=>{
                              r && (e.removeListener(r), this._checkRunningEvents(e));
                          }, n.getBlock = ()=>this.provider.getBlock(t.blockHash), n.getTransaction = ()=>this.provider.getTransaction(t.transactionHash), n.getTransactionReceipt = ()=>this.provider.getTransactionReceipt(t.transactionHash), e.prepareEvent(n), n;
                      }
                      _addEventListener(e, t, r) {
                          if (this.provider || bn.throwError("events require a provider or a signer with a provider", v.errors.UNSUPPORTED_OPERATION, {
                              operation: "once"
                          }), e.addListener(t, r), this._runningEvents[e.tag] = e, !this._wrappedEmits[e.tag]) {
                              const r = (r)=>{
                                  let n = this._wrapEvent(e, r, t);
                                  if (null == n.decodeError) try {
                                      const t = e.getEmit(n);
                                      this.emit(e.filter, ...t);
                                  } catch (e) {
                                      n.decodeError = e.error;
                                  }
                                  null != e.filter && this.emit("event", n), null != n.decodeError && this.emit("error", n.decodeError, n);
                              };
                              this._wrappedEmits[e.tag] = r, null != e.filter && this.provider.on(e.filter, r);
                          }
                      }
                      queryFilter(e, t, r) {
                          const n = this._getRunningEvent(e), i = ie(n.filter);
                          return "string" == typeof t && x(t, 32) ? (null != r && bn.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", r), i.blockHash = t) : (i.fromBlock = null != t ? t : 0, i.toBlock = null != r ? r : "latest"), this.provider.getLogs(i).then((e)=>e.map((e)=>this._wrapEvent(n, e, null)));
                      }
                      on(e, t) {
                          return this._addEventListener(this._getRunningEvent(e), t, !1), this;
                      }
                      once(e, t) {
                          return this._addEventListener(this._getRunningEvent(e), t, !0), this;
                      }
                      emit(e, ...t) {
                          if (!this.provider) return !1;
                          const r = this._getRunningEvent(e), n = r.run(t) > 0;
                          return this._checkRunningEvents(r), n;
                      }
                      listenerCount(e) {
                          return this.provider ? null == e ? Object.keys(this._runningEvents).reduce((e, t)=>e + this._runningEvents[t].listenerCount(), 0) : this._getRunningEvent(e).listenerCount() : 0;
                      }
                      listeners(e) {
                          if (!this.provider) return [];
                          if (null == e) {
                              const e = [];
                              for(let t in this._runningEvents)this._runningEvents[t].listeners().forEach((t)=>{
                                  e.push(t);
                              });
                              return e;
                          }
                          return this._getRunningEvent(e).listeners();
                      }
                      removeAllListeners(e) {
                          if (!this.provider) return this;
                          if (null == e) {
                              for(const e in this._runningEvents){
                                  const t = this._runningEvents[e];
                                  t.removeAllListeners(), this._checkRunningEvents(t);
                              }
                              return this;
                          }
                          const t = this._getRunningEvent(e);
                          return t.removeAllListeners(), this._checkRunningEvents(t), this;
                      }
                      off(e, t) {
                          if (!this.provider) return this;
                          const r = this._getRunningEvent(e);
                          return r.removeListener(t), this._checkRunningEvents(r), this;
                      }
                      removeListener(e, t) {
                          return this.off(e, t);
                      }
                  }
                  class Bn extends On {
                  }
                  class In {
                      constructor(e, t, r){
                          let n = null;
                          n = "string" == typeof t ? t : k(t) ? R(t) : t && "string" == typeof t.object ? t.object : "!", "0x" !== n.substring(0, 2) && (n = "0x" + n), (!x(n) || n.length % 2) && bn.throwArgumentError("invalid bytecode", "bytecode", t), r && !lr.isSigner(r) && bn.throwArgumentError("invalid signer", "signer", r), ee(this, "bytecode", n), ee(this, "interface", te(new.target, "getInterface")(e)), ee(this, "signer", r || null);
                      }
                      getDeployTransaction(...e) {
                          let t = {};
                          if (e.length === this.interface.deploy.inputs.length + 1 && "object" == typeof e[e.length - 1]) {
                              t = ie(e.pop());
                              for(const e in t)if (!wn[e]) throw new Error("unknown transaction override " + e);
                          }
                          return [
                              "data",
                              "from",
                              "to"
                          ].forEach((e)=>{
                              null != t[e] && bn.throwError("cannot override " + e, v.errors.UNSUPPORTED_OPERATION, {
                                  operation: e
                              });
                          }), t.value && (H.from(t.value).isZero() || this.interface.deploy.payable || bn.throwError("non-payable constructor cannot override value", v.errors.UNSUPPORTED_OPERATION, {
                              operation: "overrides.value",
                              value: t.value
                          })), bn.checkArgumentCount(e.length, this.interface.deploy.inputs.length, " in Contract constructor"), t.data = R(P([
                              this.bytecode,
                              this.interface.encodeDeploy(e)
                          ])), t;
                      }
                      deploy(...e) {
                          return vn(this, void 0, void 0, function*() {
                              let t = {};
                              e.length === this.interface.deploy.inputs.length + 1 && (t = e.pop()), bn.checkArgumentCount(e.length, this.interface.deploy.inputs.length, " in Contract constructor");
                              const r = yield Sn(this.signer, e, this.interface.deploy.inputs);
                              r.push(t);
                              const n = this.getDeployTransaction(...r), i = yield this.signer.sendTransaction(n), o = te(this.constructor, "getContractAddress")(i), s = te(this.constructor, "getContract")(o, this.interface, this.signer);
                              return kn(s, i), ee(s, "deployTransaction", i), s;
                          });
                      }
                      attach(e) {
                          return this.constructor.getContract(e, this.interface, this.signer);
                      }
                      connect(e) {
                          return new this.constructor(this.interface, this.bytecode, e);
                      }
                      static fromSolidity(e, t) {
                          null == e && bn.throwError("missing compiler output", v.errors.MISSING_ARGUMENT, {
                              argument: "compilerOutput"
                          }), "string" == typeof e && (e = JSON.parse(e));
                          const r = e.abi;
                          let n = null;
                          return e.bytecode ? n = e.bytecode : e.evm && e.evm.bytecode && (n = e.evm.bytecode), new this(r, n, t);
                      }
                      static getInterface(e) {
                          return Bn.getInterface(e);
                      }
                      static getContractAddress(e) {
                          return De(e);
                      }
                      static getContract(e, t, r) {
                          return new Bn(e, t, r);
                      }
                  }
                  const Mn = new v(q), Dn = {}, Kn = H.from(0), Un = H.from(-1);
                  function Fn(e, t, r, n) {
                      const i = {
                          fault: t,
                          operation: r
                      };
                      return void 0 !== n && (i.value = n), Mn.throwError(e, v.errors.NUMERIC_FAULT, i);
                  }
                  let jn = "0";
                  for(; jn.length < 256;)jn += jn;
                  function Ln(e) {
                      if ("number" != typeof e) try {
                          e = H.from(e).toNumber();
                      } catch (e) {}
                      return "number" == typeof e && e >= 0 && e <= 256 && !(e % 1) ? "1" + jn.substring(0, e) : Mn.throwArgumentError("invalid decimal size", "decimals", e);
                  }
                  function qn(e, t) {
                      null == t && (t = 0);
                      const r = Ln(t), n = (e = H.from(e)).lt(Kn);
                      n && (e = e.mul(Un));
                      let i = e.mod(r).toString();
                      for(; i.length < r.length - 1;)i = "0" + i;
                      i = i.match(/^([0-9]*[1-9]|0)(0*)/)[1];
                      const o = e.div(r).toString();
                      return e = 1 === r.length ? o : o + "." + i, n && (e = "-" + e), e;
                  }
                  function zn(e, t) {
                      null == t && (t = 0);
                      const r = Ln(t);
                      "string" == typeof e && e.match(/^-?[0-9.]+$/) || Mn.throwArgumentError("invalid decimal value", "value", e);
                      const n = "-" === e.substring(0, 1);
                      n && (e = e.substring(1)), "." === e && Mn.throwArgumentError("missing value", "value", e);
                      const i = e.split(".");
                      i.length > 2 && Mn.throwArgumentError("too many decimal points", "value", e);
                      let o = i[0], s = i[1];
                      for(o || (o = "0"), s || (s = "0"); "0" === s[s.length - 1];)s = s.substring(0, s.length - 1);
                      for(s.length > r.length - 1 && Fn("fractional component exceeds decimals", "underflow", "parseFixed"), "" === s && (s = "0"); s.length < r.length - 1;)s += "0";
                      const a = H.from(o), l = H.from(s);
                      let u = a.mul(r).add(l);
                      return n && (u = u.mul(Un)), u;
                  }
                  class Vn {
                      constructor(e, t, r, n){
                          e !== Dn && Mn.throwError("cannot use FixedFormat constructor; use FixedFormat.from", v.errors.UNSUPPORTED_OPERATION, {
                              operation: "new FixedFormat"
                          }), this.signed = t, this.width = r, this.decimals = n, this.name = (t ? "" : "u") + "fixed" + String(r) + "x" + String(n), this._multiplier = Ln(n), Object.freeze(this);
                      }
                      static from(e) {
                          if (e instanceof Vn) return e;
                          "number" == typeof e && (e = `fixed128x${e}`);
                          let t = !0, r = 128, n = 18;
                          if ("string" == typeof e) {
                              if ("fixed" === e) ;
                              else if ("ufixed" === e) t = !1;
                              else {
                                  const i = e.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
                                  i || Mn.throwArgumentError("invalid fixed format", "format", e), t = "u" !== i[1], r = parseInt(i[2]), n = parseInt(i[3]);
                              }
                          } else if (e) {
                              const i = (t, r, n)=>null == e[t] ? n : (typeof e[t] !== r && Mn.throwArgumentError("invalid fixed format (" + t + " not " + r + ")", "format." + t, e[t]), e[t]);
                              t = i("signed", "boolean", t), r = i("width", "number", r), n = i("decimals", "number", n);
                          }
                          return r % 8 && Mn.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", r), n > 80 && Mn.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", n), new Vn(Dn, t, r, n);
                      }
                  }
                  class Wn {
                      constructor(e, t, r, n){
                          Mn.checkNew(new.target, Wn), e !== Dn && Mn.throwError("cannot use FixedNumber constructor; use FixedNumber.from", v.errors.UNSUPPORTED_OPERATION, {
                              operation: "new FixedFormat"
                          }), this.format = n, this._hex = t, this._value = r, this._isFixedNumber = !0, Object.freeze(this);
                      }
                      _checkFormat(e) {
                          this.format.name !== e.format.name && Mn.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", e);
                      }
                      addUnsafe(e) {
                          this._checkFormat(e);
                          const t = zn(this._value, this.format.decimals), r = zn(e._value, e.format.decimals);
                          return Wn.fromValue(t.add(r), this.format.decimals, this.format);
                      }
                      subUnsafe(e) {
                          this._checkFormat(e);
                          const t = zn(this._value, this.format.decimals), r = zn(e._value, e.format.decimals);
                          return Wn.fromValue(t.sub(r), this.format.decimals, this.format);
                      }
                      mulUnsafe(e) {
                          this._checkFormat(e);
                          const t = zn(this._value, this.format.decimals), r = zn(e._value, e.format.decimals);
                          return Wn.fromValue(t.mul(r).div(this.format._multiplier), this.format.decimals, this.format);
                      }
                      divUnsafe(e) {
                          this._checkFormat(e);
                          const t = zn(this._value, this.format.decimals), r = zn(e._value, e.format.decimals);
                          return Wn.fromValue(t.mul(this.format._multiplier).div(r), this.format.decimals, this.format);
                      }
                      floor() {
                          const e = this.toString().split(".");
                          1 === e.length && e.push("0");
                          let t = Wn.from(e[0], this.format);
                          const r = !e[1].match(/^(0*)$/);
                          return this.isNegative() && r && (t = t.subUnsafe(Gn.toFormat(t.format))), t;
                      }
                      ceiling() {
                          const e = this.toString().split(".");
                          1 === e.length && e.push("0");
                          let t = Wn.from(e[0], this.format);
                          const r = !e[1].match(/^(0*)$/);
                          return !this.isNegative() && r && (t = t.addUnsafe(Gn.toFormat(t.format))), t;
                      }
                      round(e) {
                          null == e && (e = 0);
                          const t = this.toString().split(".");
                          if (1 === t.length && t.push("0"), (e < 0 || e > 80 || e % 1) && Mn.throwArgumentError("invalid decimal count", "decimals", e), t[1].length <= e) return this;
                          const r = Wn.from("1" + jn.substring(0, e), this.format), n = Jn.toFormat(this.format);
                          return this.mulUnsafe(r).addUnsafe(n).floor().divUnsafe(r);
                      }
                      isZero() {
                          return "0.0" === this._value || "0" === this._value;
                      }
                      isNegative() {
                          return "-" === this._value[0];
                      }
                      toString() {
                          return this._value;
                      }
                      toHexString(e) {
                          return null == e ? this._hex : (e % 8 && Mn.throwArgumentError("invalid byte width", "width", e), K(H.from(this._hex).fromTwos(this.format.width).toTwos(e).toHexString(), e / 8));
                      }
                      toUnsafeFloat() {
                          return parseFloat(this.toString());
                      }
                      toFormat(e) {
                          return Wn.fromString(this._value, e);
                      }
                      static fromValue(e, t, r) {
                          return null != r || null == t || function(e) {
                              return null != e && (H.isBigNumber(e) || "number" == typeof e && e % 1 == 0 || "string" == typeof e && !!e.match(/^-?[0-9]+$/) || x(e) || "bigint" == typeof e || k(e));
                          }(t) || (r = t, t = null), null == t && (t = 0), null == r && (r = "fixed"), Wn.fromString(qn(e, t), Vn.from(r));
                      }
                      static fromString(e, t) {
                          null == t && (t = "fixed");
                          const r = Vn.from(t), n = zn(e, r.decimals);
                          !r.signed && n.lt(Kn) && Fn("unsigned value cannot be negative", "overflow", "value", e);
                          let i = null;
                          r.signed ? i = n.toTwos(r.width).toHexString() : (i = n.toHexString(), i = K(i, r.width / 8));
                          const o = qn(n, r.decimals);
                          return new Wn(Dn, i, o, r);
                      }
                      static fromBytes(e, t) {
                          null == t && (t = "fixed");
                          const r = Vn.from(t);
                          if (A(e).length > r.width / 8) throw new Error("overflow");
                          let n = H.from(e);
                          r.signed && (n = n.fromTwos(r.width));
                          const i = n.toTwos((r.signed ? 0 : 1) + r.width).toHexString(), o = qn(n, r.decimals);
                          return new Wn(Dn, i, o, r);
                      }
                      static from(e, t) {
                          if ("string" == typeof e) return Wn.fromString(e, t);
                          if (k(e)) return Wn.fromBytes(e, t);
                          try {
                              return Wn.fromValue(e, 0, t);
                          } catch (e) {
                              if (e.code !== v.errors.INVALID_ARGUMENT) throw e;
                          }
                          return Mn.throwArgumentError("invalid FixedNumber value", "value", e);
                      }
                      static isFixedNumber(e) {
                          return !(!e || !e._isFixedNumber);
                      }
                  }
                  const Gn = Wn.from(1), Jn = Wn.from("0.5");
                  function Hn(e) {
                      return "string" == typeof e && (e = Ve(e)), ve(P([
                          Ve("\x19Ethereum Signed Message:\n"),
                          Ve(String(e.length)),
                          e
                      ]));
                  }
                  const $n = "hash/5.5.0";
                  const Zn = new v($n), Xn = new Uint8Array(32);
                  Xn.fill(0);
                  const Qn = H.from(-1), Yn = H.from(0), ei = H.from(1), ti = H.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), ri = K(ei.toHexString(), 32), ni = K(Yn.toHexString(), 32), ii = {
                      name: "string",
                      version: "string",
                      chainId: "uint256",
                      verifyingContract: "address",
                      salt: "bytes32"
                  }, oi = [
                      "name",
                      "version",
                      "chainId",
                      "verifyingContract",
                      "salt"
                  ];
                  function si(e) {
                      return function(t) {
                          return "string" != typeof t && Zn.throwArgumentError(`invalid domain value for ${JSON.stringify(e)}`, `domain.${e}`, t), t;
                      };
                  }
                  const ai = {
                      name: si("name"),
                      version: si("version"),
                      chainId: function(e) {
                          try {
                              return H.from(e).toString();
                          } catch (e) {}
                          return Zn.throwArgumentError('invalid domain value for "chainId"', "domain.chainId", e);
                      },
                      verifyingContract: function(e) {
                          try {
                              return Be(e).toLowerCase();
                          } catch (e) {}
                          return Zn.throwArgumentError('invalid domain value "verifyingContract"', "domain.verifyingContract", e);
                      },
                      salt: function(e) {
                          try {
                              const t = A(e);
                              if (32 !== t.length) throw new Error("bad length");
                              return R(t);
                          } catch (e) {}
                          return Zn.throwArgumentError('invalid domain value "salt"', "domain.salt", e);
                      }
                  };
                  function li(e) {
                      {
                          const t = e.match(/^(u?)int(\d*)$/);
                          if (t) {
                              const r = "" === t[1], n = parseInt(t[2] || "256");
                              (n % 8 != 0 || n > 256 || t[2] && t[2] !== String(n)) && Zn.throwArgumentError("invalid numeric width", "type", e);
                              const i = ti.mask(r ? n - 1 : n), o = r ? i.add(ei).mul(Qn) : Yn;
                              return function(t) {
                                  const r = H.from(t);
                                  return (r.lt(o) || r.gt(i)) && Zn.throwArgumentError(`value out-of-bounds for ${e}`, "value", t), K(r.toTwos(256).toHexString(), 32);
                              };
                          }
                      }
                      {
                          const t = e.match(/^bytes(\d+)$/);
                          if (t) {
                              const r = parseInt(t[1]);
                              return (0 === r || r > 32 || t[1] !== String(r)) && Zn.throwArgumentError("invalid bytes width", "type", e), function(t) {
                                  return A(t).length !== r && Zn.throwArgumentError(`invalid length for ${e}`, "value", t), function(e) {
                                      const t = A(e), r = t.length % 32;
                                      return r ? I([
                                          t,
                                          Xn.slice(r)
                                      ]) : R(t);
                                  }(t);
                              };
                          }
                      }
                      switch(e){
                          case "address":
                              return function(e) {
                                  return K(Be(e), 32);
                              };
                          case "bool":
                              return function(e) {
                                  return e ? ri : ni;
                              };
                          case "bytes":
                              return function(e) {
                                  return ve(e);
                              };
                          case "string":
                              return function(e) {
                                  return Ze(e);
                              };
                      }
                      return null;
                  }
                  function ui(e, t) {
                      return `${e}(${t.map(({ name: e , type: t  })=>t + " " + e).join(",")})`;
                  }
                  class ci {
                      constructor(e){
                          ee(this, "types", Object.freeze(le(e))), ee(this, "_encoderCache", {}), ee(this, "_types", {});
                          const t = {}, r = {}, n = {};
                          Object.keys(e).forEach((e)=>{
                              t[e] = {}, r[e] = [], n[e] = {};
                          });
                          for(const n in e){
                              const i = {};
                              e[n].forEach((o)=>{
                                  i[o.name] && Zn.throwArgumentError(`duplicate variable name ${JSON.stringify(o.name)} in ${JSON.stringify(n)}`, "types", e), i[o.name] = !0;
                                  const s = o.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
                                  s === n && Zn.throwArgumentError(`circular type reference to ${JSON.stringify(s)}`, "types", e), li(s) || (r[s] || Zn.throwArgumentError(`unknown type ${JSON.stringify(s)}`, "types", e), r[s].push(n), t[n][s] = !0);
                              });
                          }
                          const i = Object.keys(r).filter((e)=>0 === r[e].length);
                          0 === i.length ? Zn.throwArgumentError("missing primary type", "types", e) : i.length > 1 && Zn.throwArgumentError(`ambiguous primary types or unused types: ${i.map((e)=>JSON.stringify(e)).join(", ")}`, "types", e), ee(this, "primaryType", i[0]), function i(o, s) {
                              s[o] && Zn.throwArgumentError(`circular type reference to ${JSON.stringify(o)}`, "types", e), s[o] = !0, Object.keys(t[o]).forEach((e)=>{
                                  r[e] && (i(e, s), Object.keys(s).forEach((t)=>{
                                      n[t][e] = !0;
                                  }));
                              }), delete s[o];
                          }(this.primaryType, {});
                          for(const t in n){
                              const r = Object.keys(n[t]);
                              r.sort(), this._types[t] = ui(t, e[t]) + r.map((t)=>ui(t, e[t])).join("");
                          }
                      }
                      getEncoder(e) {
                          let t = this._encoderCache[e];
                          return t || (t = this._encoderCache[e] = this._getEncoder(e)), t;
                      }
                      _getEncoder(e) {
                          {
                              const t = li(e);
                              if (t) return t;
                          }
                          const t = e.match(/^(.*)(\x5b(\d*)\x5d)$/);
                          if (t) {
                              const e = t[1], r = this.getEncoder(e), n = parseInt(t[3]);
                              return (t)=>{
                                  n >= 0 && t.length !== n && Zn.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", t);
                                  let i = t.map(r);
                                  return this._types[e] && (i = i.map(ve)), ve(I(i));
                              };
                          }
                          const r = this.types[e];
                          if (r) {
                              const t = Ze(this._types[e]);
                              return (e)=>{
                                  const n = r.map(({ name: t , type: r  })=>{
                                      const n = this.getEncoder(r)(e[t]);
                                      return this._types[r] ? ve(n) : n;
                                  });
                                  return n.unshift(t), I(n);
                              };
                          }
                          return Zn.throwArgumentError(`unknown type: ${e}`, "type", e);
                      }
                      encodeType(e) {
                          const t = this._types[e];
                          return t || Zn.throwArgumentError(`unknown type: ${JSON.stringify(e)}`, "name", e), t;
                      }
                      encodeData(e, t) {
                          return this.getEncoder(e)(t);
                      }
                      hashStruct(e, t) {
                          return ve(this.encodeData(e, t));
                      }
                      encode(e) {
                          return this.encodeData(this.primaryType, e);
                      }
                      hash(e) {
                          return this.hashStruct(this.primaryType, e);
                      }
                      _visit(e, t, r) {
                          if (li(e)) return r(e, t);
                          const n = e.match(/^(.*)(\x5b(\d*)\x5d)$/);
                          if (n) {
                              const e = n[1], i = parseInt(n[3]);
                              return i >= 0 && t.length !== i && Zn.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", t), t.map((t)=>this._visit(e, t, r));
                          }
                          const i = this.types[e];
                          return i ? i.reduce((e, { name: n , type: i  })=>(e[n] = this._visit(i, t[n], r), e), {}) : Zn.throwArgumentError(`unknown type: ${e}`, "type", e);
                      }
                      visit(e, t) {
                          return this._visit(this.primaryType, e, t);
                      }
                      static from(e) {
                          return new ci(e);
                      }
                      static getPrimaryType(e) {
                          return ci.from(e).primaryType;
                      }
                      static hashStruct(e, t, r) {
                          return ci.from(t).hashStruct(e, r);
                      }
                      static hashDomain(e) {
                          const t = [];
                          for(const r in e){
                              const n = ii[r];
                              n || Zn.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(r)}`, "domain", e), t.push({
                                  name: r,
                                  type: n
                              });
                          }
                          return t.sort((e, t)=>oi.indexOf(e.name) - oi.indexOf(t.name)), ci.hashStruct("EIP712Domain", {
                              EIP712Domain: t
                          }, e);
                      }
                      static encode(e, t, r) {
                          return I([
                              "0x1901",
                              ci.hashDomain(e),
                              ci.from(t).hash(r)
                          ]);
                      }
                      static hash(e, t, r) {
                          return ve(ci.encode(e, t, r));
                      }
                      static resolveNames(e, t, r, n) {
                          var i, o, s, a;
                          return i = this, o = void 0, a = function*() {
                              e = ie(e);
                              const i = {};
                              e.verifyingContract && !x(e.verifyingContract, 20) && (i[e.verifyingContract] = "0x");
                              const o = ci.from(t);
                              o.visit(r, (e, t)=>("address" !== e || x(t, 20) || (i[t] = "0x"), t));
                              for(const e in i)i[e] = yield n(e);
                              return e.verifyingContract && i[e.verifyingContract] && (e.verifyingContract = i[e.verifyingContract]), r = o.visit(r, (e, t)=>"address" === e && i[t] ? i[t] : t), {
                                  domain: e,
                                  value: r
                              };
                          }, new (s = void 0, s = Promise)(function(e, t) {
                              function r(e) {
                                  try {
                                      l(a.next(e));
                                  } catch (e) {
                                      t(e);
                                  }
                              }
                              function n(e) {
                                  try {
                                      l(a.throw(e));
                                  } catch (e) {
                                      t(e);
                                  }
                              }
                              function l(t) {
                                  var i;
                                  t.done ? e(t.value) : (i = t.value, i instanceof s ? i : new s(function(e) {
                                      e(i);
                                  })).then(r, n);
                              }
                              l((a = a.apply(i, o || [])).next());
                          });
                      }
                      static getPayload(e, t, r) {
                          ci.hashDomain(e);
                          const n = {}, i = [];
                          oi.forEach((t)=>{
                              const r = e[t];
                              null != r && (n[t] = ai[t](r), i.push({
                                  name: t,
                                  type: ii[t]
                              }));
                          });
                          const o = ci.from(t), s = ie(t);
                          return s.EIP712Domain ? Zn.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", t) : s.EIP712Domain = i, o.encode(r), {
                              types: s,
                              domain: n,
                              primaryType: o.primaryType,
                              message: o.visit(r, (e, t)=>{
                                  if (e.match(/^bytes(\d*)/)) return R(A(t));
                                  if (e.match(/^u?int/)) return H.from(t).toString();
                                  switch(e){
                                      case "address":
                                          return t.toLowerCase();
                                      case "bool":
                                          return !!t;
                                      case "string":
                                          return "string" != typeof t && Zn.throwArgumentError("invalid string", "value", t), t;
                                  }
                                  return Zn.throwArgumentError("unsupported type", "type", e);
                              })
                          };
                      }
                  }
                  class di {
                      constructor(e){
                          ee(this, "alphabet", e), ee(this, "base", e.length), ee(this, "_alphabetMap", {}), ee(this, "_leader", e.charAt(0));
                          for(let t = 0; t < e.length; t++)this._alphabetMap[e.charAt(t)] = t;
                      }
                      encode(e) {
                          let t = A(e);
                          if (0 === t.length) return "";
                          let r = [
                              0
                          ];
                          for(let e = 0; e < t.length; ++e){
                              let n = t[e];
                              for(let e = 0; e < r.length; ++e)n += r[e] << 8, r[e] = n % this.base, n = n / this.base | 0;
                              for(; n > 0;)r.push(n % this.base), n = n / this.base | 0;
                          }
                          let n = "";
                          for(let e = 0; 0 === t[e] && e < t.length - 1; ++e)n += this._leader;
                          for(let e = r.length - 1; e >= 0; --e)n += this.alphabet[r[e]];
                          return n;
                      }
                      decode(e) {
                          if ("string" != typeof e) throw new TypeError("Expected String");
                          let t = [];
                          if (0 === e.length) return new Uint8Array(t);
                          t.push(0);
                          for(let r = 0; r < e.length; r++){
                              let n = this._alphabetMap[e[r]];
                              if (void 0 === n) throw new Error("Non-base" + this.base + " character");
                              let i = n;
                              for(let e = 0; e < t.length; ++e)i += t[e] * this.base, t[e] = 255 & i, i >>= 8;
                              for(; i > 0;)t.push(255 & i), i >>= 8;
                          }
                          for(let r = 0; e[r] === this._leader && r < e.length - 1; ++r)t.push(0);
                          return A(new Uint8Array(t.reverse()));
                      }
                  }
                  new di("abcdefghijklmnopqrstuvwxyz234567");
                  const hi = new di("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
                  var fi;
                  !function(e) {
                      e.sha256 = "sha256", e.sha512 = "sha512";
                  }(fi || (fi = {}));
                  const pi = new v("sha2/5.5.0");
                  function mi(e) {
                      return "0x" + dr().ripemd160().update(A(e)).digest("hex");
                  }
                  function yi(e) {
                      return "0x" + dr().sha256().update(A(e)).digest("hex");
                  }
                  function gi(e) {
                      return "0x" + dr().sha512().update(A(e)).digest("hex");
                  }
                  function vi(e, t, r) {
                      return fi[e] || pi.throwError("unsupported algorithm " + e, v.errors.UNSUPPORTED_OPERATION, {
                          operation: "hmac",
                          algorithm: e
                      }), "0x" + dr().hmac(dr()[e], A(t)).update(A(r)).digest("hex");
                  }
                  function bi(e, t, r, n, i) {
                      let o;
                      e = A(e), t = A(t);
                      let s = 1;
                      const a = new Uint8Array(n), l = new Uint8Array(t.length + 4);
                      let u, c;
                      l.set(t);
                      for(let d = 1; d <= s; d++){
                          l[t.length] = d >> 24 & 255, l[t.length + 1] = d >> 16 & 255, l[t.length + 2] = d >> 8 & 255, l[t.length + 3] = 255 & d;
                          let h = A(vi(i, e, l));
                          o || (o = h.length, c = new Uint8Array(o), s = Math.ceil(n / o), u = n - (s - 1) * o), c.set(h);
                          for(let t = 1; t < r; t++){
                              h = A(vi(i, e, h));
                              for(let e = 0; e < o; e++)c[e] ^= h[e];
                          }
                          const f = (d - 1) * o, p = d === s ? u : o;
                          a.set(A(c).slice(0, p), f);
                      }
                      return R(a);
                  }
                  const wi = new v("wordlists/5.5.0");
                  class _i {
                      constructor(e){
                          wi.checkAbstract(new.target, _i), ee(this, "locale", e);
                      }
                      split(e) {
                          return e.toLowerCase().split(/ +/g);
                      }
                      join(e) {
                          return e.join(" ");
                      }
                      static check(e) {
                          const t = [];
                          for(let r = 0; r < 2048; r++){
                              const n = e.getWord(r);
                              if (r !== e.getWordIndex(n)) return "0x";
                              t.push(n);
                          }
                          return Ze(t.join("\n") + "\n");
                      }
                      static register(e, t) {
                          t || (t = e.locale);
                      }
                  }
                  let Si = null;
                  function Ei(e) {
                      if (null == Si && (Si = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo".replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" "), "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60" !== _i.check(e))) throw Si = null, new Error("BIP39 Wordlist for en (English) FAILED");
                  }
                  const ki = new class extends _i {
                      constructor(){
                          super("en");
                      }
                      getWord(e) {
                          return Ei(this), Si[e];
                      }
                      getWordIndex(e) {
                          return Ei(this), Si.indexOf(e);
                      }
                  };
                  _i.register(ki);
                  const Ai = {
                      en: ki
                  }, Pi = new v("hdnode/5.5.0"), Ni = H.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), Ci = Ve("Bitcoin seed"), xi = 2147483648;
                  function Ti(e) {
                      return (1 << e) - 1 << 8 - e;
                  }
                  function Ri(e) {
                      return K(R(e), 32);
                  }
                  function Oi(e) {
                      return hi.encode(P([
                          e,
                          B(yi(yi(e)), 0, 4)
                      ]));
                  }
                  function Bi(e) {
                      if (null == e) return Ai.en;
                      if ("string" == typeof e) {
                          const t = Ai[e];
                          return null == t && Pi.throwArgumentError("unknown locale", "wordlist", e), t;
                      }
                      return e;
                  }
                  const Ii = {}, Mi = "m/44'/60'/0'/0/0";
                  class Di {
                      constructor(e, t, r, n, i, o, s, a){
                          if (Pi.checkNew(new.target, Di), e !== Ii) throw new Error("HDNode constructor cannot be called directly");
                          if (t) {
                              const e = new Xr(t);
                              ee(this, "privateKey", e.privateKey), ee(this, "publicKey", e.compressedPublicKey);
                          } else ee(this, "privateKey", null), ee(this, "publicKey", R(r));
                          ee(this, "parentFingerprint", n), ee(this, "fingerprint", B(mi(yi(this.publicKey)), 0, 4)), ee(this, "address", an(this.publicKey)), ee(this, "chainCode", i), ee(this, "index", o), ee(this, "depth", s), null == a ? (ee(this, "mnemonic", null), ee(this, "path", null)) : "string" == typeof a ? (ee(this, "mnemonic", null), ee(this, "path", a)) : (ee(this, "mnemonic", a), ee(this, "path", a.path));
                      }
                      get extendedKey() {
                          if (this.depth >= 256) throw new Error("Depth too large!");
                          return Oi(P([
                              null != this.privateKey ? "0x0488ADE4" : "0x0488B21E",
                              R(this.depth),
                              this.parentFingerprint,
                              K(R(this.index), 4),
                              this.chainCode,
                              null != this.privateKey ? P([
                                  "0x00",
                                  this.privateKey
                              ]) : this.publicKey
                          ]));
                      }
                      neuter() {
                          return new Di(Ii, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
                      }
                      _derive(e) {
                          if (e > 4294967295) throw new Error("invalid index - " + String(e));
                          let t = this.path;
                          t && (t += "/" + (2147483647 & e));
                          const r = new Uint8Array(37);
                          if (e & xi) {
                              if (!this.privateKey) throw new Error("cannot derive child of neutered node");
                              r.set(A(this.privateKey), 1), t && (t += "'");
                          } else r.set(A(this.publicKey));
                          for(let t = 24; t >= 0; t -= 8)r[33 + (t >> 3)] = e >> 24 - t & 255;
                          const n = A(vi(fi.sha512, this.chainCode, r)), i = n.slice(0, 32), o = n.slice(32);
                          let s = null, a = null;
                          this.privateKey ? s = Ri(H.from(i).add(this.privateKey).mod(Ni)) : a = new Xr(R(i))._addPoint(this.publicKey);
                          let l = t;
                          const u = this.mnemonic;
                          return u && (l = Object.freeze({
                              phrase: u.phrase,
                              path: t,
                              locale: u.locale || "en"
                          })), new Di(Ii, s, a, this.fingerprint, Ri(o), e, this.depth + 1, l);
                      }
                      derivePath(e) {
                          const t = e.split("/");
                          if (0 === t.length || "m" === t[0] && 0 !== this.depth) throw new Error("invalid path - " + e);
                          "m" === t[0] && t.shift();
                          let r = this;
                          for(let e = 0; e < t.length; e++){
                              const n = t[e];
                              if (n.match(/^[0-9]+'$/)) {
                                  const e = parseInt(n.substring(0, n.length - 1));
                                  if (e >= xi) throw new Error("invalid path index - " + n);
                                  r = r._derive(xi + e);
                              } else {
                                  if (!n.match(/^[0-9]+$/)) throw new Error("invalid path component - " + n);
                                  {
                                      const e = parseInt(n);
                                      if (e >= xi) throw new Error("invalid path index - " + n);
                                      r = r._derive(e);
                                  }
                              }
                          }
                          return r;
                      }
                      static _fromSeed(e, t) {
                          const r = A(e);
                          if (r.length < 16 || r.length > 64) throw new Error("invalid seed");
                          const n = A(vi(fi.sha512, Ci, r));
                          return new Di(Ii, Ri(n.slice(0, 32)), null, "0x00000000", Ri(n.slice(32)), 0, 0, t);
                      }
                      static fromMnemonic(e, t, r) {
                          return e = Fi(Ui(e, r = Bi(r)), r), Di._fromSeed(Ki(e, t), {
                              phrase: e,
                              path: "m",
                              locale: r.locale
                          });
                      }
                      static fromSeed(e) {
                          return Di._fromSeed(e, null);
                      }
                      static fromExtendedKey(e) {
                          const t = hi.decode(e);
                          82 === t.length && Oi(t.slice(0, 78)) === e || Pi.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
                          const r = t[4], n = R(t.slice(5, 9)), i = parseInt(R(t.slice(9, 13)).substring(2), 16), o = R(t.slice(13, 45)), s = t.slice(45, 78);
                          switch(R(t.slice(0, 4))){
                              case "0x0488b21e":
                              case "0x043587cf":
                                  return new Di(Ii, null, R(s), n, o, i, r, null);
                              case "0x0488ade4":
                              case "0x04358394 ":
                                  if (0 !== s[0]) break;
                                  return new Di(Ii, R(s.slice(1)), null, n, o, i, r, null);
                          }
                          return Pi.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
                      }
                  }
                  function Ki(e, t) {
                      t || (t = "");
                      const r = Ve("mnemonic" + t, Fe.NFKD);
                      return bi(Ve(e, Fe.NFKD), r, 2048, 64, "sha512");
                  }
                  function Ui(e, t) {
                      t = Bi(t), Pi.checkNormalize();
                      const r = t.split(e);
                      if (r.length % 3 != 0) throw new Error("invalid mnemonic");
                      const n = A(new Uint8Array(Math.ceil(11 * r.length / 8)));
                      let i = 0;
                      for(let e = 0; e < r.length; e++){
                          let o = t.getWordIndex(r[e].normalize("NFKD"));
                          if (-1 === o) throw new Error("invalid mnemonic");
                          for(let e = 0; e < 11; e++)o & 1 << 10 - e && (n[i >> 3] |= 1 << 7 - i % 8), i++;
                      }
                      const o = 32 * r.length / 3, s = Ti(r.length / 3);
                      if ((A(yi(n.slice(0, o / 8)))[0] & s) != (n[n.length - 1] & s)) throw new Error("invalid checksum");
                      return R(n.slice(0, o / 8));
                  }
                  function Fi(e, t) {
                      if (t = Bi(t), (e = A(e)).length % 4 != 0 || e.length < 16 || e.length > 32) throw new Error("invalid entropy");
                      const r = [
                          0
                      ];
                      let n = 11;
                      for(let t = 0; t < e.length; t++)n > 8 ? (r[r.length - 1] <<= 8, r[r.length - 1] |= e[t], n -= 8) : (r[r.length - 1] <<= n, r[r.length - 1] |= e[t] >> 8 - n, r.push(e[t] & (1 << 8 - n) - 1), n += 3);
                      const i = e.length / 4, o = A(yi(e))[0] & Ti(i);
                      return r[r.length - 1] <<= i, r[r.length - 1] |= o >> 8 - i, t.join(r.map((e)=>t.getWord(e)));
                  }
                  function ji(e, t) {
                      try {
                          return Ui(e, t), !0;
                      } catch (e) {}
                      return !1;
                  }
                  function Li(e) {
                      return ("number" != typeof e || e < 0 || e >= xi || e % 1) && Pi.throwArgumentError("invalid account index", "index", e), `m/44'/60'/${e}'/0/0`;
                  }
                  const qi = new v("random/5.5.1"), zi = function() {
                      if ("undefined" != typeof self) return self;
                      if ("undefined" != typeof window) return window;
                      if (void 0 !== r.g) return r.g;
                      throw new Error("unable to locate global object");
                  }();
                  let Vi = zi.crypto || zi.msCrypto;
                  function Wi(e) {
                      (e <= 0 || e > 1024 || e % 1 || e != e) && qi.throwArgumentError("invalid length", "length", e);
                      const t = new Uint8Array(e);
                      return Vi.getRandomValues(t), A(t);
                  }
                  Vi && Vi.getRandomValues || (qi.warn("WARNING: Missing strong random number source"), Vi = {
                      getRandomValues: function(e) {
                          return qi.throwError("no secure random source avaialble", v.errors.UNSUPPORTED_OPERATION, {
                              operation: "crypto.getRandomValues"
                          });
                      }
                  });
                  var Gi = r(8826), Ji = r.n(Gi);
                  const Hi = "json-wallets/5.5.0";
                  function $i(e) {
                      return "string" == typeof e && "0x" !== e.substring(0, 2) && (e = "0x" + e), A(e);
                  }
                  function Zi(e, t) {
                      for(e = String(e); e.length < t;)e = "0" + e;
                      return e;
                  }
                  function Xi(e) {
                      return "string" == typeof e ? Ve(e, Fe.NFKC) : A(e);
                  }
                  function Qi(e, t) {
                      let r = e;
                      const n = t.toLowerCase().split("/");
                      for(let e = 0; e < n.length; e++){
                          let t = null;
                          for(const i in r)if (i.toLowerCase() === n[e]) {
                              t = r[i];
                              break;
                          }
                          if (null === t) return null;
                          r = t;
                      }
                      return r;
                  }
                  function Yi(e) {
                      const t = A(e);
                      t[6] = 15 & t[6] | 64, t[8] = 63 & t[8] | 128;
                      const r = R(t);
                      return [
                          r.substring(2, 10),
                          r.substring(10, 14),
                          r.substring(14, 18),
                          r.substring(18, 22),
                          r.substring(22, 34)
                      ].join("-");
                  }
                  const eo = new v(Hi);
                  class to extends ue {
                      isCrowdsaleAccount(e) {
                          return !(!e || !e._isCrowdsaleAccount);
                      }
                  }
                  function ro(e, t) {
                      const r = JSON.parse(e);
                      t = Xi(t);
                      const n = Be(Qi(r, "ethaddr")), i = $i(Qi(r, "encseed"));
                      i && i.length % 16 == 0 || eo.throwArgumentError("invalid encseed", "json", e);
                      const o = A(bi(t, t, 2e3, 32, "sha256")).slice(0, 16), s = i.slice(0, 16), a = i.slice(16), l = new (Ji()).ModeOfOperation.cbc(o, s), u = Ji().padding.pkcs7.strip(A(l.decrypt(a)));
                      let c = "";
                      for(let e = 0; e < u.length; e++)c += String.fromCharCode(u[e]);
                      const d = ve(Ve(c));
                      return new to({
                          _isCrowdsaleAccount: !0,
                          address: n,
                          privateKey: d
                      });
                  }
                  function no(e) {
                      let t = null;
                      try {
                          t = JSON.parse(e);
                      } catch (e) {
                          return !1;
                      }
                      return t.encseed && t.ethaddr;
                  }
                  function io(e) {
                      let t = null;
                      try {
                          t = JSON.parse(e);
                      } catch (e) {
                          return !1;
                      }
                      return !(!t.version || parseInt(t.version) !== t.version || 3 !== parseInt(t.version));
                  }
                  function oo(e) {
                      if (no(e)) try {
                          return Be(JSON.parse(e).ethaddr);
                      } catch (e) {
                          return null;
                      }
                      if (io(e)) try {
                          return Be(JSON.parse(e).address);
                      } catch (e) {
                          return null;
                      }
                      return null;
                  }
                  var so = r(7635), ao = r.n(so);
                  const lo = new v(Hi);
                  function uo(e) {
                      return null != e && e.mnemonic && e.mnemonic.phrase;
                  }
                  class co extends ue {
                      isKeystoreAccount(e) {
                          return !(!e || !e._isKeystoreAccount);
                      }
                  }
                  function ho(e, t) {
                      const r = $i(Qi(e, "crypto/ciphertext"));
                      if (R(ve(P([
                          t.slice(16, 32),
                          r
                      ]))).substring(2) !== Qi(e, "crypto/mac").toLowerCase()) throw new Error("invalid password");
                      const n = function(e, t, r) {
                          if ("aes-128-ctr" === Qi(e, "crypto/cipher")) {
                              const n = $i(Qi(e, "crypto/cipherparams/iv")), i = new (Ji()).Counter(n);
                              return A(new (Ji()).ModeOfOperation.ctr(t, i).decrypt(r));
                          }
                          return null;
                      }(e, t.slice(0, 16), r);
                      n || lo.throwError("unsupported cipher", v.errors.UNSUPPORTED_OPERATION, {
                          operation: "decrypt"
                      });
                      const i = t.slice(32, 64), o = an(n);
                      if (e.address) {
                          let t = e.address.toLowerCase();
                          if ("0x" !== t.substring(0, 2) && (t = "0x" + t), Be(t) !== o) throw new Error("address mismatch");
                      }
                      const s = {
                          _isKeystoreAccount: !0,
                          address: o,
                          privateKey: R(n)
                      };
                      if ("0.1" === Qi(e, "x-ethers/version")) {
                          const t = $i(Qi(e, "x-ethers/mnemonicCiphertext")), r = $i(Qi(e, "x-ethers/mnemonicCounter")), n = new (Ji()).Counter(r), o = new (Ji()).ModeOfOperation.ctr(i, n), a = Qi(e, "x-ethers/path") || Mi, l = Qi(e, "x-ethers/locale") || "en", u = A(o.decrypt(t));
                          try {
                              const e = Fi(u, l), t = Di.fromMnemonic(e, null, l).derivePath(a);
                              if (t.privateKey != s.privateKey) throw new Error("mnemonic mismatch");
                              s.mnemonic = t.mnemonic;
                          } catch (e) {
                              if (e.code !== v.errors.INVALID_ARGUMENT || "wordlist" !== e.argument) throw e;
                          }
                      }
                      return new co(s);
                  }
                  function fo(e, t, r, n, i) {
                      return A(bi(e, t, r, n, i));
                  }
                  function po(e, t, r, n, i) {
                      return Promise.resolve(fo(e, t, r, n, i));
                  }
                  function mo(e, t, r, n, i) {
                      const o = Xi(t), s = Qi(e, "crypto/kdf");
                      if (s && "string" == typeof s) {
                          const t = function(e, t) {
                              return lo.throwArgumentError("invalid key-derivation function parameters", e, t);
                          };
                          if ("scrypt" === s.toLowerCase()) {
                              const r = $i(Qi(e, "crypto/kdfparams/salt")), a = parseInt(Qi(e, "crypto/kdfparams/n")), l = parseInt(Qi(e, "crypto/kdfparams/r")), u = parseInt(Qi(e, "crypto/kdfparams/p"));
                              a && l && u || t("kdf", s), 0 != (a & a - 1) && t("N", a);
                              const c = parseInt(Qi(e, "crypto/kdfparams/dklen"));
                              return 32 !== c && t("dklen", c), n(o, r, a, l, u, 64, i);
                          }
                          if ("pbkdf2" === s.toLowerCase()) {
                              const n = $i(Qi(e, "crypto/kdfparams/salt"));
                              let i = null;
                              const s = Qi(e, "crypto/kdfparams/prf");
                              "hmac-sha256" === s ? i = "sha256" : "hmac-sha512" === s ? i = "sha512" : t("prf", s);
                              const a = parseInt(Qi(e, "crypto/kdfparams/c")), l = parseInt(Qi(e, "crypto/kdfparams/dklen"));
                              return 32 !== l && t("dklen", l), r(o, n, a, l, i);
                          }
                      }
                      return lo.throwArgumentError("unsupported key-derivation function", "kdf", s);
                  }
                  function yo(e, t, r) {
                      if (no(e)) {
                          r && r(0);
                          const n = ro(e, t);
                          return r && r(1), Promise.resolve(n);
                      }
                      return io(e) ? function(e, t, r) {
                          var n, i, o, s;
                          return n = this, i = void 0, s = function*() {
                              const n = JSON.parse(e);
                              return ho(n, (yield mo(n, t, po, ao().scrypt, r)));
                          }, new (o = void 0, o = Promise)(function(e, t) {
                              function r(e) {
                                  try {
                                      l(s.next(e));
                                  } catch (e) {
                                      t(e);
                                  }
                              }
                              function a(e) {
                                  try {
                                      l(s.throw(e));
                                  } catch (e) {
                                      t(e);
                                  }
                              }
                              function l(t) {
                                  var n;
                                  t.done ? e(t.value) : (n = t.value, n instanceof o ? n : new o(function(e) {
                                      e(n);
                                  })).then(r, a);
                              }
                              l((s = s.apply(n, i || [])).next());
                          });
                      }(e, t, r) : Promise.reject(new Error("invalid JSON wallet"));
                  }
                  var go = function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  };
                  const vo = new v("wallet/5.5.0");
                  class bo extends lr {
                      constructor(e, t){
                          if (vo.checkNew(new.target, bo), super(), null != (r = e) && x(r.privateKey, 32) && null != r.address) {
                              const t = new Xr(e.privateKey);
                              if (ee(this, "_signingKey", ()=>t), ee(this, "address", an(this.publicKey)), this.address !== Be(e.address) && vo.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]"), function(e) {
                                  const t = e.mnemonic;
                                  return t && t.phrase;
                              }(e)) {
                                  const t = e.mnemonic;
                                  ee(this, "_mnemonic", ()=>({
                                          phrase: t.phrase,
                                          path: t.path || Mi,
                                          locale: t.locale || "en"
                                      }));
                                  const r = this.mnemonic;
                                  an(Di.fromMnemonic(r.phrase, null, r.locale).derivePath(r.path).privateKey) !== this.address && vo.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
                              } else ee(this, "_mnemonic", ()=>null);
                          } else {
                              if (Xr.isSigningKey(e)) "secp256k1" !== e.curve && vo.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]"), ee(this, "_signingKey", ()=>e);
                              else {
                                  "string" == typeof e && e.match(/^[0-9a-f]*$/i) && 64 === e.length && (e = "0x" + e);
                                  const t = new Xr(e);
                                  ee(this, "_signingKey", ()=>t);
                              }
                              ee(this, "_mnemonic", ()=>null), ee(this, "address", an(this.publicKey));
                          }
                          var r;
                          t && !nr.isProvider(t) && vo.throwArgumentError("invalid provider", "provider", t), ee(this, "provider", t || null);
                      }
                      get mnemonic() {
                          return this._mnemonic();
                      }
                      get privateKey() {
                          return this._signingKey().privateKey;
                      }
                      get publicKey() {
                          return this._signingKey().publicKey;
                      }
                      getAddress() {
                          return Promise.resolve(this.address);
                      }
                      connect(e) {
                          return new bo(this, e);
                      }
                      signTransaction(e) {
                          return re(e).then((t)=>{
                              null != t.from && (Be(t.from) !== this.address && vo.throwArgumentError("transaction from address mismatch", "transaction.from", e.from), delete t.from);
                              const r = this._signingKey().signDigest(ve(mn(t)));
                              return mn(t, r);
                          });
                      }
                      signMessage(e) {
                          return go(this, void 0, void 0, function*() {
                              return F(this._signingKey().signDigest(Hn(e)));
                          });
                      }
                      _signTypedData(e, t, r) {
                          return go(this, void 0, void 0, function*() {
                              const n = yield ci.resolveNames(e, t, r, (e)=>(null == this.provider && vo.throwError("cannot resolve ENS names without a provider", v.errors.UNSUPPORTED_OPERATION, {
                                      operation: "resolveName",
                                      value: e
                                  }), this.provider.resolveName(e)));
                              return F(this._signingKey().signDigest(ci.hash(n.domain, t, n.value)));
                          });
                      }
                      encrypt(e, t, r) {
                          if ("function" != typeof t || r || (r = t, t = {}), r && "function" != typeof r) throw new Error("invalid callback");
                          return t || (t = {}), function(e, t, r, n) {
                              try {
                                  if (Be(e.address) !== an(e.privateKey)) throw new Error("address/privateKey mismatch");
                                  if (uo(e)) {
                                      const t = e.mnemonic;
                                      if (Di.fromMnemonic(t.phrase, null, t.locale).derivePath(t.path || Mi).privateKey != e.privateKey) throw new Error("mnemonic mismatch");
                                  }
                              } catch (e) {
                                  return Promise.reject(e);
                              }
                              "function" != typeof r || n || (n = r, r = {}), r || (r = {});
                              const i = A(e.privateKey), o = Xi(t);
                              let s = null, a = null, l = null;
                              if (uo(e)) {
                                  const t = e.mnemonic;
                                  s = A(Ui(t.phrase, t.locale || "en")), a = t.path || Mi, l = t.locale || "en";
                              }
                              let u = r.client;
                              u || (u = "ethers.js");
                              let c = null;
                              c = r.salt ? A(r.salt) : Wi(32);
                              let d = null;
                              if (r.iv) {
                                  if (d = A(r.iv), 16 !== d.length) throw new Error("invalid iv");
                              } else d = Wi(16);
                              let h = null;
                              if (r.uuid) {
                                  if (h = A(r.uuid), 16 !== h.length) throw new Error("invalid uuid");
                              } else h = Wi(16);
                              let f = 131072, p = 8, m = 1;
                              return r.scrypt && (r.scrypt.N && (f = r.scrypt.N), r.scrypt.r && (p = r.scrypt.r), r.scrypt.p && (m = r.scrypt.p)), ao().scrypt(o, c, f, p, m, 64, n).then((t)=>{
                                  const r = (t = A(t)).slice(0, 16), n = t.slice(16, 32), o = t.slice(32, 64), y = new (Ji()).Counter(d), g = A(new (Ji()).ModeOfOperation.ctr(r, y).encrypt(i)), v = ve(P([
                                      n,
                                      g
                                  ])), b = {
                                      address: e.address.substring(2).toLowerCase(),
                                      id: Yi(h),
                                      version: 3,
                                      Crypto: {
                                          cipher: "aes-128-ctr",
                                          cipherparams: {
                                              iv: R(d).substring(2)
                                          },
                                          ciphertext: R(g).substring(2),
                                          kdf: "scrypt",
                                          kdfparams: {
                                              salt: R(c).substring(2),
                                              n: f,
                                              dklen: 32,
                                              p: m,
                                              r: p
                                          },
                                          mac: v.substring(2)
                                      }
                                  };
                                  if (s) {
                                      const e = Wi(16), t = new (Ji()).Counter(e), r = A(new (Ji()).ModeOfOperation.ctr(o, t).encrypt(s)), n = new Date, i = n.getUTCFullYear() + "-" + Zi(n.getUTCMonth() + 1, 2) + "-" + Zi(n.getUTCDate(), 2) + "T" + Zi(n.getUTCHours(), 2) + "-" + Zi(n.getUTCMinutes(), 2) + "-" + Zi(n.getUTCSeconds(), 2) + ".0Z";
                                      b["x-ethers"] = {
                                          client: u,
                                          gethFilename: "UTC--" + i + "--" + b.address,
                                          mnemonicCounter: R(e).substring(2),
                                          mnemonicCiphertext: R(r).substring(2),
                                          path: a,
                                          locale: l,
                                          version: "0.1"
                                      };
                                  }
                                  return JSON.stringify(b);
                              });
                          }(this, e, t, r);
                      }
                      static createRandom(e) {
                          let t = Wi(16);
                          e || (e = {}), e.extraEntropy && (t = A(B(ve(P([
                              t,
                              e.extraEntropy
                          ])), 0, 16)));
                          const r = Fi(t, e.locale);
                          return bo.fromMnemonic(r, e.path, e.locale);
                      }
                      static fromEncryptedJson(e, t, r) {
                          return yo(e, t, r).then((e)=>new bo(e));
                      }
                      static fromEncryptedJsonSync(e, t) {
                          return new bo(function(e, t) {
                              if (no(e)) return ro(e, t);
                              if (io(e)) return function(e, t) {
                                  const r = JSON.parse(e);
                                  return ho(r, mo(r, t, fo, ao().syncScrypt));
                              }(e, t);
                              throw new Error("invalid JSON wallet");
                          }(e, t));
                      }
                      static fromMnemonic(e, t, r) {
                          return t || (t = Mi), new bo(Di.fromMnemonic(e, null, r).derivePath(t));
                      }
                  }
                  function wo(e, t) {
                      return ln(Hn(e), t);
                  }
                  function _o(e, t, r, n) {
                      return ln(ci.hash(e, t, r), n);
                  }
                  const So = "0x0000000000000000000000000000000000000000", Eo = "0x0000000000000000000000000000000000000000000000000000000000000000", ko = "Ξ", Ao = new v("networks/5.5.2");
                  function Po(e) {
                      const t = function(t, r) {
                          null == r && (r = {});
                          const n = [];
                          if (t.InfuraProvider) try {
                              n.push(new t.InfuraProvider(e, r.infura));
                          } catch (e) {}
                          if (t.EtherscanProvider) try {
                              n.push(new t.EtherscanProvider(e, r.etherscan));
                          } catch (e) {}
                          if (t.AlchemyProvider) try {
                              n.push(new t.AlchemyProvider(e, r.alchemy));
                          } catch (e) {}
                          if (t.PocketProvider) {
                              const r = [
                                  "goerli",
                                  "ropsten",
                                  "rinkeby"
                              ];
                              try {
                                  const i = new t.PocketProvider(e);
                                  i.network && -1 === r.indexOf(i.network.name) && n.push(i);
                              } catch (e) {}
                          }
                          if (t.CloudflareProvider) try {
                              n.push(new t.CloudflareProvider(e));
                          } catch (e) {}
                          if (0 === n.length) return null;
                          if (t.FallbackProvider) {
                              let i = 1;
                              return null != r.quorum ? i = r.quorum : "homestead" === e && (i = 2), new t.FallbackProvider(n, i);
                          }
                          return n[0];
                      };
                      return t.renetwork = function(e) {
                          return Po(e);
                      }, t;
                  }
                  function No(e, t) {
                      const r = function(r, n) {
                          return r.JsonRpcProvider ? new r.JsonRpcProvider(e, t) : null;
                      };
                      return r.renetwork = function(t) {
                          return No(e, t);
                      }, r;
                  }
                  const Co = {
                      chainId: 1,
                      ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
                      name: "homestead",
                      _defaultProvider: Po("homestead")
                  }, xo = {
                      chainId: 3,
                      ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
                      name: "ropsten",
                      _defaultProvider: Po("ropsten")
                  }, To = {
                      chainId: 63,
                      name: "classicMordor",
                      _defaultProvider: No("https://www.ethercluster.com/mordor", "classicMordor")
                  }, Ro = {
                      unspecified: {
                          chainId: 0,
                          name: "unspecified"
                      },
                      homestead: Co,
                      mainnet: Co,
                      morden: {
                          chainId: 2,
                          name: "morden"
                      },
                      ropsten: xo,
                      testnet: xo,
                      rinkeby: {
                          chainId: 4,
                          ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
                          name: "rinkeby",
                          _defaultProvider: Po("rinkeby")
                      },
                      kovan: {
                          chainId: 42,
                          name: "kovan",
                          _defaultProvider: Po("kovan")
                      },
                      goerli: {
                          chainId: 5,
                          ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
                          name: "goerli",
                          _defaultProvider: Po("goerli")
                      },
                      kintsugi: {
                          chainId: 1337702,
                          name: "kintsugi"
                      },
                      classic: {
                          chainId: 61,
                          name: "classic",
                          _defaultProvider: No("https://www.ethercluster.com/etc", "classic")
                      },
                      classicMorden: {
                          chainId: 62,
                          name: "classicMorden"
                      },
                      classicMordor: To,
                      classicTestnet: To,
                      classicKotti: {
                          chainId: 6,
                          name: "classicKotti",
                          _defaultProvider: No("https://www.ethercluster.com/kotti", "classicKotti")
                      },
                      xdai: {
                          chainId: 100,
                          name: "xdai"
                      },
                      matic: {
                          chainId: 137,
                          name: "matic"
                      },
                      maticmum: {
                          chainId: 80001,
                          name: "maticmum"
                      },
                      optimism: {
                          chainId: 10,
                          name: "optimism"
                      },
                      "optimism-kovan": {
                          chainId: 69,
                          name: "optimism-kovan"
                      },
                      "optimism-goerli": {
                          chainId: 420,
                          name: "optimism-goerli"
                      },
                      arbitrum: {
                          chainId: 42161,
                          name: "arbitrum"
                      },
                      "arbitrum-rinkeby": {
                          chainId: 421611,
                          name: "arbitrum-rinkeby"
                      },
                      bnb: {
                          chainId: 56,
                          name: "bnb"
                      },
                      bnbt: {
                          chainId: 97,
                          name: "bnbt"
                      }
                  };
                  function Oo(e) {
                      if (null == e) return null;
                      if ("number" == typeof e) {
                          for(const t in Ro){
                              const r = Ro[t];
                              if (r.chainId === e) return {
                                  name: r.name,
                                  chainId: r.chainId,
                                  ensAddress: r.ensAddress || null,
                                  _defaultProvider: r._defaultProvider || null
                              };
                          }
                          return {
                              chainId: e,
                              name: "unknown"
                          };
                      }
                      if ("string" == typeof e) {
                          const t = Ro[e];
                          return null == t ? null : {
                              name: t.name,
                              chainId: t.chainId,
                              ensAddress: t.ensAddress,
                              _defaultProvider: t._defaultProvider || null
                          };
                      }
                      const t = Ro[e.name];
                      if (!t) return "number" != typeof e.chainId && Ao.throwArgumentError("invalid network chainId", "network", e), e;
                      0 !== e.chainId && e.chainId !== t.chainId && Ao.throwArgumentError("network chainId mismatch", "network", e);
                      let r = e._defaultProvider || null;
                      var n;
                      return null == r && t._defaultProvider && (r = (n = t._defaultProvider) && "function" == typeof n.renetwork ? t._defaultProvider.renetwork(e) : t._defaultProvider), {
                          name: e.name,
                          chainId: t.chainId,
                          ensAddress: e.ensAddress || t.ensAddress || null,
                          _defaultProvider: r
                      };
                  }
                  function Bo(e, t) {
                      t || (t = function(e) {
                          return [
                              parseInt(e, 16)
                          ];
                      });
                      let r = 0, n = {};
                      return e.split(",").forEach((e)=>{
                          let i = e.split(":");
                          r += parseInt(i[0], 16), n[r] = t(i[1]);
                      }), n;
                  }
                  function Io(e) {
                      let t = 0;
                      return e.split(",").map((e)=>{
                          let r = e.split("-");
                          1 === r.length ? r[1] = "0" : "" === r[1] && (r[1] = "1");
                          let n = t + parseInt(r[0], 16);
                          return t = parseInt(r[1], 16), {
                              l: n,
                              h: t
                          };
                      });
                  }
                  function Mo(e, t) {
                      let r = 0;
                      for(let n = 0; n < t.length; n++){
                          let i = t[n];
                          if (r += i.l, e >= r && e <= r + i.h && (e - r) % (i.d || 1) == 0) {
                              if (i.e && -1 !== i.e.indexOf(e - r)) continue;
                              return i;
                          }
                      }
                      return null;
                  }
                  const Do = Io("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d"), Ko = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((e)=>parseInt(e, 16)), Uo = [
                      {
                          h: 25,
                          s: 32,
                          l: 65
                      },
                      {
                          h: 30,
                          s: 32,
                          e: [
                              23
                          ],
                          l: 127
                      },
                      {
                          h: 54,
                          s: 1,
                          e: [
                              48
                          ],
                          l: 64,
                          d: 2
                      },
                      {
                          h: 14,
                          s: 1,
                          l: 57,
                          d: 2
                      },
                      {
                          h: 44,
                          s: 1,
                          l: 17,
                          d: 2
                      },
                      {
                          h: 10,
                          s: 1,
                          e: [
                              2,
                              6,
                              8
                          ],
                          l: 61,
                          d: 2
                      },
                      {
                          h: 16,
                          s: 1,
                          l: 68,
                          d: 2
                      },
                      {
                          h: 84,
                          s: 1,
                          e: [
                              18,
                              24,
                              66
                          ],
                          l: 19,
                          d: 2
                      },
                      {
                          h: 26,
                          s: 32,
                          e: [
                              17
                          ],
                          l: 435
                      },
                      {
                          h: 22,
                          s: 1,
                          l: 71,
                          d: 2
                      },
                      {
                          h: 15,
                          s: 80,
                          l: 40
                      },
                      {
                          h: 31,
                          s: 32,
                          l: 16
                      },
                      {
                          h: 32,
                          s: 1,
                          l: 80,
                          d: 2
                      },
                      {
                          h: 52,
                          s: 1,
                          l: 42,
                          d: 2
                      },
                      {
                          h: 12,
                          s: 1,
                          l: 55,
                          d: 2
                      },
                      {
                          h: 40,
                          s: 1,
                          e: [
                              38
                          ],
                          l: 15,
                          d: 2
                      },
                      {
                          h: 14,
                          s: 1,
                          l: 48,
                          d: 2
                      },
                      {
                          h: 37,
                          s: 48,
                          l: 49
                      },
                      {
                          h: 148,
                          s: 1,
                          l: 6351,
                          d: 2
                      },
                      {
                          h: 88,
                          s: 1,
                          l: 160,
                          d: 2
                      },
                      {
                          h: 15,
                          s: 16,
                          l: 704
                      },
                      {
                          h: 25,
                          s: 26,
                          l: 854
                      },
                      {
                          h: 25,
                          s: 32,
                          l: 55915
                      },
                      {
                          h: 37,
                          s: 40,
                          l: 1247
                      },
                      {
                          h: 25,
                          s: -119711,
                          l: 53248
                      },
                      {
                          h: 25,
                          s: -119763,
                          l: 52
                      },
                      {
                          h: 25,
                          s: -119815,
                          l: 52
                      },
                      {
                          h: 25,
                          s: -119867,
                          e: [
                              1,
                              4,
                              5,
                              7,
                              8,
                              11,
                              12,
                              17
                          ],
                          l: 52
                      },
                      {
                          h: 25,
                          s: -119919,
                          l: 52
                      },
                      {
                          h: 24,
                          s: -119971,
                          e: [
                              2,
                              7,
                              8,
                              17
                          ],
                          l: 52
                      },
                      {
                          h: 24,
                          s: -120023,
                          e: [
                              2,
                              7,
                              13,
                              15,
                              16,
                              17
                          ],
                          l: 52
                      },
                      {
                          h: 25,
                          s: -120075,
                          l: 52
                      },
                      {
                          h: 25,
                          s: -120127,
                          l: 52
                      },
                      {
                          h: 25,
                          s: -120179,
                          l: 52
                      },
                      {
                          h: 25,
                          s: -120231,
                          l: 52
                      },
                      {
                          h: 25,
                          s: -120283,
                          l: 52
                      },
                      {
                          h: 25,
                          s: -120335,
                          l: 52
                      },
                      {
                          h: 24,
                          s: -119543,
                          e: [
                              17
                          ],
                          l: 56
                      },
                      {
                          h: 24,
                          s: -119601,
                          e: [
                              17
                          ],
                          l: 58
                      },
                      {
                          h: 24,
                          s: -119659,
                          e: [
                              17
                          ],
                          l: 58
                      },
                      {
                          h: 24,
                          s: -119717,
                          e: [
                              17
                          ],
                          l: 58
                      },
                      {
                          h: 24,
                          s: -119775,
                          e: [
                              17
                          ],
                          l: 58
                      }
                  ], Fo = Bo("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3"), jo = Bo("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7"), Lo = Bo("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", function(e) {
                      if (e.length % 4 != 0) throw new Error("bad data");
                      let t = [];
                      for(let r = 0; r < e.length; r += 4)t.push(parseInt(e.substring(r, r + 4), 16));
                      return t;
                  }), qo = Io("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
                  function zo(e) {
                      if (e.match(/^[a-z0-9-]*$/i) && e.length <= 59) return e.toLowerCase();
                      let t = $e(e);
                      var r;
                      r = t.map((e)=>{
                          if (Ko.indexOf(e) >= 0) return [];
                          if (e >= 65024 && e <= 65039) return [];
                          let t = function(e) {
                              let t = Mo(e, Uo);
                              if (t) return [
                                  e + t.s
                              ];
                              let r = Fo[e];
                              if (r) return r;
                              let n = jo[e];
                              return n ? [
                                  e + n[0]
                              ] : Lo[e] || null;
                          }(e);
                          return t || [
                              e
                          ];
                      }), t = r.reduce((e, t)=>(t.forEach((t)=>{
                              e.push(t);
                          }), e), []), t = $e(Je(t), Fe.NFKC), t.forEach((e)=>{
                          if (Mo(e, qo)) throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
                      }), t.forEach((e)=>{
                          if (Mo(e, Do)) throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
                      });
                      let n = Je(t);
                      if ("-" === n.substring(0, 1) || "--" === n.substring(2, 4) || "-" === n.substring(n.length - 1)) throw new Error("invalid hyphen");
                      if (n.length > 63) throw new Error("too long");
                      return n;
                  }
                  const Vo = new v($n), Wo = new Uint8Array(32);
                  Wo.fill(0);
                  const Go = new RegExp("^((.*)\\.)?([^.]+)$");
                  function Jo(e) {
                      try {
                          const t = e.split(".");
                          for(let e = 0; e < t.length; e++)if (0 === zo(t[e]).length) throw new Error("empty");
                          return !0;
                      } catch (e) {}
                      return !1;
                  }
                  function Ho(e) {
                      "string" != typeof e && Vo.throwArgumentError("invalid ENS name; not a string", "name", e);
                      let t = e, r = Wo;
                      for(; t.length;){
                          const n = t.match(Go);
                          null != n && "" !== n[2] || Vo.throwArgumentError("invalid ENS address; missing component", "name", e), r = ve(P([
                              r,
                              ve(Ve(zo(n[3])))
                          ])), t = n[2] || "";
                      }
                      return R(r);
                  }
                  function $o(e) {
                      e = atob(e);
                      const t = [];
                      for(let r = 0; r < e.length; r++)t.push(e.charCodeAt(r));
                      return A(t);
                  }
                  function Zo(e) {
                      e = A(e);
                      let t = "";
                      for(let r = 0; r < e.length; r++)t += String.fromCharCode(e[r]);
                      return btoa(t);
                  }
                  function Xo(e, t) {
                      var r, n, i, o;
                      return r = this, n = void 0, o = function*() {
                          null == t && (t = {});
                          const r = {
                              method: t.method || "GET",
                              headers: t.headers || {},
                              body: t.body || void 0
                          };
                          !0 !== t.skipFetchSetup && (r.mode = "cors", r.cache = "no-cache", r.credentials = "same-origin", r.redirect = "follow", r.referrer = "client");
                          const n = yield fetch(e, r), i = yield n.arrayBuffer(), o = {};
                          return n.headers.forEach ? n.headers.forEach((e, t)=>{
                              o[t.toLowerCase()] = e;
                          }) : n.headers.keys().forEach((e)=>{
                              o[e.toLowerCase()] = n.headers.get(e);
                          }), {
                              headers: o,
                              statusCode: n.status,
                              statusMessage: n.statusText,
                              body: A(new Uint8Array(i))
                          };
                      }, new (i = void 0, i = Promise)(function(e, t) {
                          function s(e) {
                              try {
                                  l(o.next(e));
                              } catch (e) {
                                  t(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(o.throw(e));
                              } catch (e) {
                                  t(e);
                              }
                          }
                          function l(t) {
                              var r;
                              t.done ? e(t.value) : (r = t.value, r instanceof i ? r : new i(function(e) {
                                  e(r);
                              })).then(s, a);
                          }
                          l((o = o.apply(r, n || [])).next());
                      });
                  }
                  const Qo = new v("web/5.5.1");
                  function Yo(e) {
                      return new Promise((t)=>{
                          setTimeout(t, e);
                      });
                  }
                  function es(e, t) {
                      if (null == e) return null;
                      if ("string" == typeof e) return e;
                      if (S(e)) {
                          if (t && ("text" === t.split("/")[0] || "application/json" === t.split(";")[0].trim())) try {
                              return He(e);
                          } catch (e) {}
                          return R(e);
                      }
                      return e;
                  }
                  function ts(e, t, r) {
                      const n = "object" == typeof e && null != e.throttleLimit ? e.throttleLimit : 12;
                      Qo.assertArgument(n > 0 && n % 1 == 0, "invalid connection throttle limit", "connection.throttleLimit", n);
                      const i = "object" == typeof e ? e.throttleCallback : null, o = "object" == typeof e && "number" == typeof e.throttleSlotInterval ? e.throttleSlotInterval : 100;
                      Qo.assertArgument(o > 0 && o % 1 == 0, "invalid connection throttle slot interval", "connection.throttleSlotInterval", o);
                      const s = {};
                      let a = null;
                      const l = {
                          method: "GET"
                      };
                      let u = !1, c = 12e4;
                      if ("string" == typeof e) a = e;
                      else if ("object" == typeof e) {
                          if (null != e && null != e.url || Qo.throwArgumentError("missing URL", "connection.url", e), a = e.url, "number" == typeof e.timeout && e.timeout > 0 && (c = e.timeout), e.headers) for(const t in e.headers)s[t.toLowerCase()] = {
                              key: t,
                              value: String(e.headers[t])
                          }, [
                              "if-none-match",
                              "if-modified-since"
                          ].indexOf(t.toLowerCase()) >= 0 && (u = !0);
                          if (l.allowGzip = !!e.allowGzip, null != e.user && null != e.password) {
                              "https:" !== a.substring(0, 6) && !0 !== e.allowInsecureAuthentication && Qo.throwError("basic authentication requires a secure https url", v.errors.INVALID_ARGUMENT, {
                                  argument: "url",
                                  url: a,
                                  user: e.user,
                                  password: "[REDACTED]"
                              });
                              const t = e.user + ":" + e.password;
                              s.authorization = {
                                  key: "Authorization",
                                  value: "Basic " + Zo(Ve(t))
                              };
                          }
                      }
                      const d = new RegExp("^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$", "i"), h = a ? a.match(d) : null;
                      if (h) try {
                          const e = {
                              statusCode: 200,
                              statusMessage: "OK",
                              headers: {
                                  "content-type": h[1]
                              },
                              body: $o(h[2])
                          };
                          let t = e.body;
                          return r && (t = r(e.body, e)), Promise.resolve(t);
                      } catch (e) {
                          Qo.throwError("processing response error", v.errors.SERVER_ERROR, {
                              body: es(h[1], h[2]),
                              error: e,
                              requestBody: null,
                              requestMethod: "GET",
                              url: a
                          });
                      }
                      t && (l.method = "POST", l.body = t, null == s["content-type"] && (s["content-type"] = {
                          key: "Content-Type",
                          value: "application/octet-stream"
                      }), null == s["content-length"] && (s["content-length"] = {
                          key: "Content-Length",
                          value: String(t.length)
                      }));
                      const f = {};
                      Object.keys(s).forEach((e)=>{
                          const t = s[e];
                          f[t.key] = t.value;
                      }), l.headers = f;
                      const p = function() {
                          let e = null;
                          return {
                              promise: new Promise(function(t, r) {
                                  c && (e = setTimeout(()=>{
                                      null != e && (e = null, r(Qo.makeError("timeout", v.errors.TIMEOUT, {
                                          requestBody: es(l.body, f["content-type"]),
                                          requestMethod: l.method,
                                          timeout: c,
                                          url: a
                                      })));
                                  }, c));
                              }),
                              cancel: function() {
                                  null != e && (clearTimeout(e), e = null);
                              }
                          };
                      }(), m = function() {
                          var e, t, s, c;
                          return e = this, t = void 0, c = function*() {
                              for(let e = 0; e < n; e++){
                                  let t = null;
                                  try {
                                      if (t = yield Xo(a, l), e < n) {
                                          if (301 === t.statusCode || 302 === t.statusCode) {
                                              const e = t.headers.location || "";
                                              if ("GET" === l.method && e.match(/^https:/)) {
                                                  a = t.headers.location;
                                                  continue;
                                              }
                                          } else if (429 === t.statusCode) {
                                              let r = !0;
                                              if (i && (r = yield i(e, a)), r) {
                                                  let r = 0;
                                                  const n = t.headers["retry-after"];
                                                  r = "string" == typeof n && n.match(/^[1-9][0-9]*$/) ? 1e3 * parseInt(n) : o * parseInt(String(Math.random() * Math.pow(2, e))), yield Yo(r);
                                                  continue;
                                              }
                                          }
                                      }
                                  } catch (e) {
                                      t = e.response, null == t && (p.cancel(), Qo.throwError("missing response", v.errors.SERVER_ERROR, {
                                          requestBody: es(l.body, f["content-type"]),
                                          requestMethod: l.method,
                                          serverError: e,
                                          url: a
                                      }));
                                  }
                                  let s = t.body;
                                  if (u && 304 === t.statusCode ? s = null : (t.statusCode < 200 || t.statusCode >= 300) && (p.cancel(), Qo.throwError("bad response", v.errors.SERVER_ERROR, {
                                      status: t.statusCode,
                                      headers: t.headers,
                                      body: es(s, t.headers ? t.headers["content-type"] : null),
                                      requestBody: es(l.body, f["content-type"]),
                                      requestMethod: l.method,
                                      url: a
                                  })), r) try {
                                      const e = yield r(s, t);
                                      return p.cancel(), e;
                                  } catch (r) {
                                      if (r.throttleRetry && e < n) {
                                          let t = !0;
                                          if (i && (t = yield i(e, a)), t) {
                                              const t = o * parseInt(String(Math.random() * Math.pow(2, e)));
                                              yield Yo(t);
                                              continue;
                                          }
                                      }
                                      p.cancel(), Qo.throwError("processing response error", v.errors.SERVER_ERROR, {
                                          body: es(s, t.headers ? t.headers["content-type"] : null),
                                          error: r,
                                          requestBody: es(l.body, f["content-type"]),
                                          requestMethod: l.method,
                                          url: a
                                      });
                                  }
                                  return p.cancel(), s;
                              }
                              return Qo.throwError("failed response", v.errors.SERVER_ERROR, {
                                  requestBody: es(l.body, f["content-type"]),
                                  requestMethod: l.method,
                                  url: a
                              });
                          }, new (s = void 0, s = Promise)(function(r, n) {
                              function i(e) {
                                  try {
                                      a(c.next(e));
                                  } catch (e) {
                                      n(e);
                                  }
                              }
                              function o(e) {
                                  try {
                                      a(c.throw(e));
                                  } catch (e) {
                                      n(e);
                                  }
                              }
                              function a(e) {
                                  var t;
                                  e.done ? r(e.value) : (t = e.value, t instanceof s ? t : new s(function(e) {
                                      e(t);
                                  })).then(i, o);
                              }
                              a((c = c.apply(e, t || [])).next());
                          });
                      }();
                      return Promise.race([
                          p.promise,
                          m
                      ]);
                  }
                  function rs(e, t, r) {
                      let n = null;
                      if (null != t) {
                          n = Ve(t);
                          const r = "string" == typeof e ? {
                              url: e
                          } : ie(e);
                          r.headers ? 0 !== Object.keys(r.headers).filter((e)=>"content-type" === e.toLowerCase()).length || (r.headers = ie(r.headers), r.headers["content-type"] = "application/json") : r.headers = {
                              "content-type": "application/json"
                          }, e = r;
                      }
                      return ts(e, n, (e, t)=>{
                          let n = null;
                          if (null != e) try {
                              n = JSON.parse(He(e));
                          } catch (t) {
                              Qo.throwError("invalid JSON", v.errors.SERVER_ERROR, {
                                  body: e,
                                  error: t
                              });
                          }
                          return r && (n = r(n, t)), n;
                      });
                  }
                  function ns(e, t) {
                      return t || (t = {}), null == (t = ie(t)).floor && (t.floor = 0), null == t.ceiling && (t.ceiling = 1e4), null == t.interval && (t.interval = 250), new Promise(function(r, n) {
                          let i = null, o = !1;
                          const s = ()=>!o && (o = !0, i && clearTimeout(i), !0);
                          t.timeout && (i = setTimeout(()=>{
                              s() && n(new Error("timeout"));
                          }, t.timeout));
                          const a = t.retryLimit;
                          let l = 0;
                          !function i() {
                              return e().then(function(e) {
                                  if (void 0 !== e) s() && r(e);
                                  else if (t.oncePoll) t.oncePoll.once("poll", i);
                                  else if (t.onceBlock) t.onceBlock.once("block", i);
                                  else if (!o) {
                                      if (l++, l > a) return void (s() && n(new Error("retry limit reached")));
                                      let e = t.interval * parseInt(String(Math.random() * Math.pow(2, l)));
                                      e < t.floor && (e = t.floor), e > t.ceiling && (e = t.ceiling), setTimeout(i, e);
                                  }
                                  return null;
                              }, function(e) {
                                  s() && n(e);
                              });
                          }();
                      });
                  }
                  var is = r(2882), os = r.n(is);
                  const ss = "providers/5.5.2", as = new v(ss);
                  class ls {
                      constructor(){
                          as.checkNew(new.target, ls), this.formats = this.getDefaultFormats();
                      }
                      getDefaultFormats() {
                          const e = {}, t = this.address.bind(this), r = this.bigNumber.bind(this), n = this.blockTag.bind(this), i = this.data.bind(this), o = this.hash.bind(this), s = this.hex.bind(this), a = this.number.bind(this), l = this.type.bind(this);
                          return e.transaction = {
                              hash: o,
                              type: l,
                              accessList: ls.allowNull(this.accessList.bind(this), null),
                              blockHash: ls.allowNull(o, null),
                              blockNumber: ls.allowNull(a, null),
                              transactionIndex: ls.allowNull(a, null),
                              confirmations: ls.allowNull(a, null),
                              from: t,
                              gasPrice: ls.allowNull(r),
                              maxPriorityFeePerGas: ls.allowNull(r),
                              maxFeePerGas: ls.allowNull(r),
                              gasLimit: r,
                              to: ls.allowNull(t, null),
                              value: r,
                              nonce: a,
                              data: i,
                              r: ls.allowNull(this.uint256),
                              s: ls.allowNull(this.uint256),
                              v: ls.allowNull(a),
                              creates: ls.allowNull(t, null),
                              raw: ls.allowNull(i)
                          }, e.transactionRequest = {
                              from: ls.allowNull(t),
                              nonce: ls.allowNull(a),
                              gasLimit: ls.allowNull(r),
                              gasPrice: ls.allowNull(r),
                              maxPriorityFeePerGas: ls.allowNull(r),
                              maxFeePerGas: ls.allowNull(r),
                              to: ls.allowNull(t),
                              value: ls.allowNull(r),
                              data: ls.allowNull((e)=>this.data(e, !0)),
                              type: ls.allowNull(a),
                              accessList: ls.allowNull(this.accessList.bind(this), null)
                          }, e.receiptLog = {
                              transactionIndex: a,
                              blockNumber: a,
                              transactionHash: o,
                              address: t,
                              topics: ls.arrayOf(o),
                              data: i,
                              logIndex: a,
                              blockHash: o
                          }, e.receipt = {
                              to: ls.allowNull(this.address, null),
                              from: ls.allowNull(this.address, null),
                              contractAddress: ls.allowNull(t, null),
                              transactionIndex: a,
                              root: ls.allowNull(s),
                              gasUsed: r,
                              logsBloom: ls.allowNull(i),
                              blockHash: o,
                              transactionHash: o,
                              logs: ls.arrayOf(this.receiptLog.bind(this)),
                              blockNumber: a,
                              confirmations: ls.allowNull(a, null),
                              cumulativeGasUsed: r,
                              effectiveGasPrice: ls.allowNull(r),
                              status: ls.allowNull(a),
                              type: l
                          }, e.block = {
                              hash: o,
                              parentHash: o,
                              number: a,
                              timestamp: a,
                              nonce: ls.allowNull(s),
                              difficulty: this.difficulty.bind(this),
                              gasLimit: r,
                              gasUsed: r,
                              miner: t,
                              extraData: i,
                              transactions: ls.allowNull(ls.arrayOf(o)),
                              baseFeePerGas: ls.allowNull(r)
                          }, e.blockWithTransactions = ie(e.block), e.blockWithTransactions.transactions = ls.allowNull(ls.arrayOf(this.transactionResponse.bind(this))), e.filter = {
                              fromBlock: ls.allowNull(n, void 0),
                              toBlock: ls.allowNull(n, void 0),
                              blockHash: ls.allowNull(o, void 0),
                              address: ls.allowNull(t, void 0),
                              topics: ls.allowNull(this.topics.bind(this), void 0)
                          }, e.filterLog = {
                              blockNumber: ls.allowNull(a),
                              blockHash: ls.allowNull(o),
                              transactionIndex: a,
                              removed: ls.allowNull(this.boolean.bind(this)),
                              address: t,
                              data: ls.allowFalsish(i, "0x"),
                              topics: ls.arrayOf(o),
                              transactionHash: o,
                              logIndex: a
                          }, e;
                      }
                      accessList(e) {
                          return dn(e || []);
                      }
                      number(e) {
                          return "0x" === e ? 0 : H.from(e).toNumber();
                      }
                      type(e) {
                          return "0x" === e || null == e ? 0 : H.from(e).toNumber();
                      }
                      bigNumber(e) {
                          return H.from(e);
                      }
                      boolean(e) {
                          if ("boolean" == typeof e) return e;
                          if ("string" == typeof e) {
                              if ("true" === (e = e.toLowerCase())) return !0;
                              if ("false" === e) return !1;
                          }
                          throw new Error("invalid boolean - " + e);
                      }
                      hex(e, t) {
                          return "string" == typeof e && (t || "0x" === e.substring(0, 2) || (e = "0x" + e), x(e)) ? e.toLowerCase() : as.throwArgumentError("invalid hash", "value", e);
                      }
                      data(e, t) {
                          const r = this.hex(e, t);
                          if (r.length % 2 != 0) throw new Error("invalid data; odd-length - " + e);
                          return r;
                      }
                      address(e) {
                          return Be(e);
                      }
                      callAddress(e) {
                          if (!x(e, 32)) return null;
                          const t = Be(B(e, 12));
                          return t === So ? null : t;
                      }
                      contractAddress(e) {
                          return De(e);
                      }
                      blockTag(e) {
                          if (null == e) return "latest";
                          if ("earliest" === e) return "0x0";
                          if ("latest" === e || "pending" === e) return e;
                          if ("number" == typeof e || x(e)) return M(e);
                          throw new Error("invalid blockTag");
                      }
                      hash(e, t) {
                          const r = this.hex(e, t);
                          return 32 !== O(r) ? as.throwArgumentError("invalid hash", "value", e) : r;
                      }
                      difficulty(e) {
                          if (null == e) return null;
                          const t = H.from(e);
                          try {
                              return t.toNumber();
                          } catch (e) {}
                          return null;
                      }
                      uint256(e) {
                          if (!x(e)) throw new Error("invalid uint256");
                          return K(e, 32);
                      }
                      _block(e, t) {
                          null != e.author && null == e.miner && (e.miner = e.author);
                          const r = null != e._difficulty ? e._difficulty : e.difficulty, n = ls.check(t, e);
                          return n._difficulty = null == r ? null : H.from(r), n;
                      }
                      block(e) {
                          return this._block(e, this.formats.block);
                      }
                      blockWithTransactions(e) {
                          return this._block(e, this.formats.blockWithTransactions);
                      }
                      transactionRequest(e) {
                          return ls.check(this.formats.transactionRequest, e);
                      }
                      transactionResponse(e) {
                          null != e.gas && null == e.gasLimit && (e.gasLimit = e.gas), e.to && H.from(e.to).isZero() && (e.to = "0x0000000000000000000000000000000000000000"), null != e.input && null == e.data && (e.data = e.input), null == e.to && null == e.creates && (e.creates = this.contractAddress(e)), 1 !== e.type && 2 !== e.type || null != e.accessList || (e.accessList = []);
                          const t = ls.check(this.formats.transaction, e);
                          if (null != e.chainId) {
                              let r = e.chainId;
                              x(r) && (r = H.from(r).toNumber()), t.chainId = r;
                          } else {
                              let r = e.networkId;
                              null == r && null == t.v && (r = e.chainId), x(r) && (r = H.from(r).toNumber()), "number" != typeof r && null != t.v && (r = (t.v - 35) / 2, r < 0 && (r = 0), r = parseInt(r)), "number" != typeof r && (r = 0), t.chainId = r;
                          }
                          return t.blockHash && "x" === t.blockHash.replace(/0/g, "") && (t.blockHash = null), t;
                      }
                      transaction(e) {
                          return gn(e);
                      }
                      receiptLog(e) {
                          return ls.check(this.formats.receiptLog, e);
                      }
                      receipt(e) {
                          const t = ls.check(this.formats.receipt, e);
                          if (null != t.root) {
                              if (t.root.length <= 4) {
                                  const e = H.from(t.root).toNumber();
                                  0 === e || 1 === e ? (null != t.status && t.status !== e && as.throwArgumentError("alt-root-status/status mismatch", "value", {
                                      root: t.root,
                                      status: t.status
                                  }), t.status = e, delete t.root) : as.throwArgumentError("invalid alt-root-status", "value.root", t.root);
                              } else 66 !== t.root.length && as.throwArgumentError("invalid root hash", "value.root", t.root);
                          }
                          return null != t.status && (t.byzantium = !0), t;
                      }
                      topics(e) {
                          return Array.isArray(e) ? e.map((e)=>this.topics(e)) : null != e ? this.hash(e, !0) : null;
                      }
                      filter(e) {
                          return ls.check(this.formats.filter, e);
                      }
                      filterLog(e) {
                          return ls.check(this.formats.filterLog, e);
                      }
                      static check(e, t) {
                          const r = {};
                          for(const n in e)try {
                              const i = e[n](t[n]);
                              void 0 !== i && (r[n] = i);
                          } catch (e) {
                              throw e.checkKey = n, e.checkValue = t[n], e;
                          }
                          return r;
                      }
                      static allowNull(e, t) {
                          return function(r) {
                              return null == r ? t : e(r);
                          };
                      }
                      static allowFalsish(e, t) {
                          return function(r) {
                              return r ? e(r) : t;
                          };
                      }
                      static arrayOf(e) {
                          return function(t) {
                              if (!Array.isArray(t)) throw new Error("not an array");
                              const r = [];
                              return t.forEach(function(t) {
                                  r.push(e(t));
                              }), r;
                          };
                      }
                  }
                  function us(e) {
                      return e && "function" == typeof e.isCommunityResource;
                  }
                  function cs(e) {
                      return us(e) && e.isCommunityResource();
                  }
                  let ds = !1;
                  function hs() {
                      ds || (ds = !0, console.log("========= NOTICE ========="), console.log("Request-Rate Exceeded  (this message will not be repeated)"), console.log(""), console.log("The default API keys for each service are provided as a highly-throttled,"), console.log("community resource for low-traffic projects and early prototyping."), console.log(""), console.log("While your application will continue to function, we highly recommended"), console.log("signing up for your own API keys to improve performance, increase your"), console.log("request rate/limit and enable other perks, such as metrics and advanced APIs."), console.log(""), console.log("For more details: https://docs.ethers.io/api-keys/"), console.log("=========================="));
                  }
                  var fs = function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  };
                  const ps = new v(ss);
                  function ms(e) {
                      return null == e ? "null" : (32 !== O(e) && ps.throwArgumentError("invalid topic", "topic", e), e.toLowerCase());
                  }
                  function ys(e) {
                      for(e = e.slice(); e.length > 0 && null == e[e.length - 1];)e.pop();
                      return e.map((e)=>{
                          if (Array.isArray(e)) {
                              const t = {};
                              e.forEach((e)=>{
                                  t[ms(e)] = !0;
                              });
                              const r = Object.keys(t);
                              return r.sort(), r.join("|");
                          }
                          return ms(e);
                      }).join("&");
                  }
                  function gs(e) {
                      if ("string" == typeof e) {
                          if (32 === O(e = e.toLowerCase())) return "tx:" + e;
                          if (-1 === e.indexOf(":")) return e;
                      } else {
                          if (Array.isArray(e)) return "filter:*:" + ys(e);
                          if (rr.isForkEvent(e)) throw ps.warn("not implemented"), new Error("not implemented");
                          if (e && "object" == typeof e) return "filter:" + (e.address || "*") + ":" + ys(e.topics || []);
                      }
                      throw new Error("invalid event - " + e);
                  }
                  function vs() {
                      return (new Date).getTime();
                  }
                  function bs(e) {
                      return new Promise((t)=>{
                          setTimeout(t, e);
                      });
                  }
                  const ws = [
                      "block",
                      "network",
                      "pending",
                      "poll"
                  ];
                  class _s {
                      constructor(e, t, r){
                          ee(this, "tag", e), ee(this, "listener", t), ee(this, "once", r);
                      }
                      get event() {
                          switch(this.type){
                              case "tx":
                                  return this.hash;
                              case "filter":
                                  return this.filter;
                          }
                          return this.tag;
                      }
                      get type() {
                          return this.tag.split(":")[0];
                      }
                      get hash() {
                          const e = this.tag.split(":");
                          return "tx" !== e[0] ? null : e[1];
                      }
                      get filter() {
                          const e = this.tag.split(":");
                          if ("filter" !== e[0]) return null;
                          const t = e[1], r = "" === (n = e[2]) ? [] : n.split(/&/g).map((e)=>{
                              if ("" === e) return [];
                              const t = e.split("|").map((e)=>"null" === e ? null : e);
                              return 1 === t.length ? t[0] : t;
                          });
                          var n;
                          const i = {};
                          return r.length > 0 && (i.topics = r), t && "*" !== t && (i.address = t), i;
                      }
                      pollable() {
                          return this.tag.indexOf(":") >= 0 || ws.indexOf(this.tag) >= 0;
                      }
                  }
                  const Ss = {
                      0: {
                          symbol: "btc",
                          p2pkh: 0,
                          p2sh: 5,
                          prefix: "bc"
                      },
                      2: {
                          symbol: "ltc",
                          p2pkh: 48,
                          p2sh: 50,
                          prefix: "ltc"
                      },
                      3: {
                          symbol: "doge",
                          p2pkh: 30,
                          p2sh: 22
                      },
                      60: {
                          symbol: "eth",
                          ilk: "eth"
                      },
                      61: {
                          symbol: "etc",
                          ilk: "eth"
                      },
                      700: {
                          symbol: "xdai",
                          ilk: "eth"
                      }
                  };
                  function Es(e) {
                      return K(H.from(e).toHexString(), 32);
                  }
                  function ks(e) {
                      return hi.encode(P([
                          e,
                          B(yi(yi(e)), 0, 4)
                      ]));
                  }
                  const As = new RegExp("^(ipfs)://(.*)$", "i"), Ps = [
                      new RegExp("^(https)://(.*)$", "i"),
                      new RegExp("^(data):(.*)$", "i"),
                      As,
                      new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
                  ];
                  function Ns(e) {
                      try {
                          return He(Cs(e));
                      } catch (e) {}
                      return null;
                  }
                  function Cs(e) {
                      if ("0x" === e) return null;
                      const t = H.from(B(e, 0, 32)).toNumber(), r = H.from(B(e, t, t + 32)).toNumber();
                      return B(e, t + 32, t + 32 + r);
                  }
                  function xs(e) {
                      return `https://gateway.ipfs.io/ipfs/${e.substring(7)}`;
                  }
                  class Ts {
                      constructor(e, t, r, n){
                          ee(this, "provider", e), ee(this, "name", r), ee(this, "address", e.formatter.address(t)), ee(this, "_resolvedAddress", n);
                      }
                      _fetchBytes(e, t) {
                          return fs(this, void 0, void 0, function*() {
                              const r = {
                                  to: this.address,
                                  data: I([
                                      e,
                                      Ho(this.name),
                                      t || "0x"
                                  ])
                              };
                              try {
                                  return Cs((yield this.provider.call(r)));
                              } catch (e) {
                                  return e.code, v.errors.CALL_EXCEPTION, null;
                              }
                          });
                      }
                      _getAddress(e, t) {
                          const r = Ss[String(e)];
                          if (null == r && ps.throwError(`unsupported coin type: ${e}`, v.errors.UNSUPPORTED_OPERATION, {
                              operation: `getAddress(${e})`
                          }), "eth" === r.ilk) return this.provider.formatter.address(t);
                          const n = A(t);
                          if (null != r.p2pkh) {
                              const e = t.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
                              if (e) {
                                  const t = parseInt(e[1], 16);
                                  if (e[2].length === 2 * t && t >= 1 && t <= 75) return ks(P([
                                      [
                                          r.p2pkh
                                      ],
                                      "0x" + e[2]
                                  ]));
                              }
                          }
                          if (null != r.p2sh) {
                              const e = t.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
                              if (e) {
                                  const t = parseInt(e[1], 16);
                                  if (e[2].length === 2 * t && t >= 1 && t <= 75) return ks(P([
                                      [
                                          r.p2sh
                                      ],
                                      "0x" + e[2]
                                  ]));
                              }
                          }
                          if (null != r.prefix) {
                              const e = n[1];
                              let t = n[0];
                              if (0 === t ? 20 !== e && 32 !== e && (t = -1) : t = -1, t >= 0 && n.length === 2 + e && e >= 1 && e <= 75) {
                                  const e = os().toWords(n.slice(2));
                                  return e.unshift(t), os().encode(r.prefix, e);
                              }
                          }
                          return null;
                      }
                      getAddress(e) {
                          return fs(this, void 0, void 0, function*() {
                              if (null == e && (e = 60), 60 === e) try {
                                  const e = {
                                      to: this.address,
                                      data: "0x3b3b57de" + Ho(this.name).substring(2)
                                  }, t = yield this.provider.call(e);
                                  return "0x" === t || t === Eo ? null : this.provider.formatter.callAddress(t);
                              } catch (e) {
                                  if (e.code === v.errors.CALL_EXCEPTION) return null;
                                  throw e;
                              }
                              const t = yield this._fetchBytes("0xf1cb7e06", Es(e));
                              if (null == t || "0x" === t) return null;
                              const r = this._getAddress(e, t);
                              return null == r && ps.throwError("invalid or unsupported coin data", v.errors.UNSUPPORTED_OPERATION, {
                                  operation: `getAddress(${e})`,
                                  coinType: e,
                                  data: t
                              }), r;
                          });
                      }
                      getAvatar() {
                          return fs(this, void 0, void 0, function*() {
                              const e = [
                                  {
                                      type: "name",
                                      content: this.name
                                  }
                              ];
                              try {
                                  const t = yield this.getText("avatar");
                                  if (null == t) return null;
                                  for(let r = 0; r < Ps.length; r++){
                                      const n = t.match(Ps[r]);
                                      if (null == n) continue;
                                      const i = n[1].toLowerCase();
                                      switch(i){
                                          case "https":
                                              return e.push({
                                                  type: "url",
                                                  content: t
                                              }), {
                                                  linkage: e,
                                                  url: t
                                              };
                                          case "data":
                                              return e.push({
                                                  type: "data",
                                                  content: t
                                              }), {
                                                  linkage: e,
                                                  url: t
                                              };
                                          case "ipfs":
                                              return e.push({
                                                  type: "ipfs",
                                                  content: t
                                              }), {
                                                  linkage: e,
                                                  url: xs(t)
                                              };
                                          case "erc721":
                                          case "erc1155":
                                              {
                                                  const r = "erc721" === i ? "0xc87b56dd" : "0x0e89341c";
                                                  e.push({
                                                      type: i,
                                                      content: t
                                                  });
                                                  const o = this._resolvedAddress || (yield this.getAddress()), s = (n[2] || "").split("/");
                                                  if (2 !== s.length) return null;
                                                  const a = yield this.provider.formatter.address(s[0]), l = K(H.from(s[1]).toHexString(), 32);
                                                  if ("erc721" === i) {
                                                      const t = this.provider.formatter.callAddress((yield this.provider.call({
                                                          to: a,
                                                          data: I([
                                                              "0x6352211e",
                                                              l
                                                          ])
                                                      })));
                                                      if (o !== t) return null;
                                                      e.push({
                                                          type: "owner",
                                                          content: t
                                                      });
                                                  } else if ("erc1155" === i) {
                                                      const t = H.from((yield this.provider.call({
                                                          to: a,
                                                          data: I([
                                                              "0x00fdd58e",
                                                              K(o, 32),
                                                              l
                                                          ])
                                                      })));
                                                      if (t.isZero()) return null;
                                                      e.push({
                                                          type: "balance",
                                                          content: t.toString()
                                                      });
                                                  }
                                                  const u = {
                                                      to: this.provider.formatter.address(s[0]),
                                                      data: I([
                                                          r,
                                                          l
                                                      ])
                                                  };
                                                  let c = Ns((yield this.provider.call(u)));
                                                  if (null == c) return null;
                                                  e.push({
                                                      type: "metadata-url",
                                                      content: c
                                                  }), "erc1155" === i && (c = c.replace("{id}", l.substring(2)), e.push({
                                                      type: "metadata-url-expanded",
                                                      content: c
                                                  }));
                                                  const d = yield rs(c);
                                                  if (!d) return null;
                                                  e.push({
                                                      type: "metadata",
                                                      content: JSON.stringify(d)
                                                  });
                                                  let h = d.image;
                                                  if ("string" != typeof h) return null;
                                                  if (h.match(/^(https:\/\/|data:)/i)) ;
                                                  else {
                                                      if (null == h.match(As)) return null;
                                                      e.push({
                                                          type: "url-ipfs",
                                                          content: h
                                                      }), h = xs(h);
                                                  }
                                                  return e.push({
                                                      type: "url",
                                                      content: h
                                                  }), {
                                                      linkage: e,
                                                      url: h
                                                  };
                                              }
                                      }
                                  }
                              } catch (e) {}
                              return null;
                          });
                      }
                      getContentHash() {
                          return fs(this, void 0, void 0, function*() {
                              const e = yield this._fetchBytes("0xbc1c58d1");
                              if (null == e || "0x" === e) return null;
                              const t = e.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                              if (t) {
                                  const e = parseInt(t[3], 16);
                                  if (t[4].length === 2 * e) return "ipfs://" + hi.encode("0x" + t[1]);
                              }
                              const r = e.match(/^0xe40101fa011b20([0-9a-f]*)$/);
                              return r && 64 === r[1].length ? "bzz://" + r[1] : ps.throwError("invalid or unsupported content hash data", v.errors.UNSUPPORTED_OPERATION, {
                                  operation: "getContentHash()",
                                  data: e
                              });
                          });
                      }
                      getText(e) {
                          return fs(this, void 0, void 0, function*() {
                              let t = Ve(e);
                              t = P([
                                  Es(64),
                                  Es(t.length),
                                  t
                              ]), t.length % 32 != 0 && (t = P([
                                  t,
                                  K("0x", 32 - e.length % 32)
                              ]));
                              const r = yield this._fetchBytes("0x59d1d43c", R(t));
                              return null == r || "0x" === r ? null : He(r);
                          });
                      }
                  }
                  let Rs = null, Os = 1;
                  class Bs extends nr {
                      constructor(e){
                          if (ps.checkNew(new.target, nr), super(), this._events = [], this._emitted = {
                              block: -2
                          }, this.formatter = new.target.getFormatter(), ee(this, "anyNetwork", "any" === e), this.anyNetwork && (e = this.detectNetwork()), e instanceof Promise) this._networkPromise = e, e.catch((e)=>{}), this._ready().catch((e)=>{});
                          else {
                              const t = te(new.target, "getNetwork")(e);
                              t ? (ee(this, "_network", t), this.emit("network", t, null)) : ps.throwArgumentError("invalid network", "network", e);
                          }
                          this._maxInternalBlockNumber = -1024, this._lastBlockNumber = -2, this._pollingInterval = 4e3, this._fastQueryDate = 0;
                      }
                      _ready() {
                          return fs(this, void 0, void 0, function*() {
                              if (null == this._network) {
                                  let e = null;
                                  if (this._networkPromise) try {
                                      e = yield this._networkPromise;
                                  } catch (e) {}
                                  null == e && (e = yield this.detectNetwork()), e || ps.throwError("no network detected", v.errors.UNKNOWN_ERROR, {}), null == this._network && (this.anyNetwork ? this._network = e : ee(this, "_network", e), this.emit("network", e, null));
                              }
                              return this._network;
                          });
                      }
                      get ready() {
                          return ns(()=>this._ready().then((e)=>e, (e)=>{
                                  if (e.code !== v.errors.NETWORK_ERROR || "noNetwork" !== e.event) throw e;
                              }));
                      }
                      static getFormatter() {
                          return null == Rs && (Rs = new ls), Rs;
                      }
                      static getNetwork(e) {
                          return Oo(null == e ? "homestead" : e);
                      }
                      _getInternalBlockNumber(e) {
                          return fs(this, void 0, void 0, function*() {
                              if (yield this._ready(), e > 0) for(; this._internalBlockNumber;){
                                  const t = this._internalBlockNumber;
                                  try {
                                      const r = yield t;
                                      if (vs() - r.respTime <= e) return r.blockNumber;
                                      break;
                                  } catch (e) {
                                      if (this._internalBlockNumber === t) break;
                                  }
                              }
                              const t = vs(), r = re({
                                  blockNumber: this.perform("getBlockNumber", {}),
                                  networkError: this.getNetwork().then((e)=>null, (e)=>e)
                              }).then(({ blockNumber: e , networkError: n  })=>{
                                  if (n) throw this._internalBlockNumber === r && (this._internalBlockNumber = null), n;
                                  const i = vs();
                                  return (e = H.from(e).toNumber()) < this._maxInternalBlockNumber && (e = this._maxInternalBlockNumber), this._maxInternalBlockNumber = e, this._setFastBlockNumber(e), {
                                      blockNumber: e,
                                      reqTime: t,
                                      respTime: i
                                  };
                              });
                              return this._internalBlockNumber = r, r.catch((e)=>{
                                  this._internalBlockNumber === r && (this._internalBlockNumber = null);
                              }), (yield r).blockNumber;
                          });
                      }
                      poll() {
                          return fs(this, void 0, void 0, function*() {
                              const e = Os++, t = [];
                              let r = null;
                              try {
                                  r = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);
                              } catch (e) {
                                  return void this.emit("error", e);
                              }
                              if (this._setFastBlockNumber(r), this.emit("poll", e, r), r !== this._lastBlockNumber) {
                                  if (-2 === this._emitted.block && (this._emitted.block = r - 1), Math.abs(this._emitted.block - r) > 1e3) ps.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${r})`), this.emit("error", ps.makeError("network block skew detected", v.errors.NETWORK_ERROR, {
                                      blockNumber: r,
                                      event: "blockSkew",
                                      previousBlockNumber: this._emitted.block
                                  })), this.emit("block", r);
                                  else for(let e = this._emitted.block + 1; e <= r; e++)this.emit("block", e);
                                  this._emitted.block !== r && (this._emitted.block = r, Object.keys(this._emitted).forEach((e)=>{
                                      if ("block" === e) return;
                                      const t = this._emitted[e];
                                      "pending" !== t && r - t > 12 && delete this._emitted[e];
                                  })), -2 === this._lastBlockNumber && (this._lastBlockNumber = r - 1), this._events.forEach((e)=>{
                                      switch(e.type){
                                          case "tx":
                                              {
                                                  const r = e.hash;
                                                  let n = this.getTransactionReceipt(r).then((e)=>e && null != e.blockNumber ? (this._emitted["t:" + r] = e.blockNumber, this.emit(r, e), null) : null).catch((e)=>{
                                                      this.emit("error", e);
                                                  });
                                                  t.push(n);
                                                  break;
                                              }
                                          case "filter":
                                              {
                                                  const n = e.filter;
                                                  n.fromBlock = this._lastBlockNumber + 1, n.toBlock = r;
                                                  const i = this.getLogs(n).then((e)=>{
                                                      0 !== e.length && e.forEach((e)=>{
                                                          this._emitted["b:" + e.blockHash] = e.blockNumber, this._emitted["t:" + e.transactionHash] = e.blockNumber, this.emit(n, e);
                                                      });
                                                  }).catch((e)=>{
                                                      this.emit("error", e);
                                                  });
                                                  t.push(i);
                                                  break;
                                              }
                                      }
                                  }), this._lastBlockNumber = r, Promise.all(t).then(()=>{
                                      this.emit("didPoll", e);
                                  }).catch((e)=>{
                                      this.emit("error", e);
                                  });
                              } else this.emit("didPoll", e);
                          });
                      }
                      resetEventsBlock(e) {
                          this._lastBlockNumber = e - 1, this.polling && this.poll();
                      }
                      get network() {
                          return this._network;
                      }
                      detectNetwork() {
                          return fs(this, void 0, void 0, function*() {
                              return ps.throwError("provider does not support network detection", v.errors.UNSUPPORTED_OPERATION, {
                                  operation: "provider.detectNetwork"
                              });
                          });
                      }
                      getNetwork() {
                          return fs(this, void 0, void 0, function*() {
                              const e = yield this._ready(), t = yield this.detectNetwork();
                              if (e.chainId !== t.chainId) {
                                  if (this.anyNetwork) return this._network = t, this._lastBlockNumber = -2, this._fastBlockNumber = null, this._fastBlockNumberPromise = null, this._fastQueryDate = 0, this._emitted.block = -2, this._maxInternalBlockNumber = -1024, this._internalBlockNumber = null, this.emit("network", t, e), yield bs(0), this._network;
                                  const r = ps.makeError("underlying network changed", v.errors.NETWORK_ERROR, {
                                      event: "changed",
                                      network: e,
                                      detectedNetwork: t
                                  });
                                  throw this.emit("error", r), r;
                              }
                              return e;
                          });
                      }
                      get blockNumber() {
                          return this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((e)=>{
                              this._setFastBlockNumber(e);
                          }, (e)=>{}), null != this._fastBlockNumber ? this._fastBlockNumber : -1;
                      }
                      get polling() {
                          return null != this._poller;
                      }
                      set polling(e) {
                          e && !this._poller ? (this._poller = setInterval(()=>{
                              this.poll();
                          }, this.pollingInterval), this._bootstrapPoll || (this._bootstrapPoll = setTimeout(()=>{
                              this.poll(), this._bootstrapPoll = setTimeout(()=>{
                                  this._poller || this.poll(), this._bootstrapPoll = null;
                              }, this.pollingInterval);
                          }, 0))) : !e && this._poller && (clearInterval(this._poller), this._poller = null);
                      }
                      get pollingInterval() {
                          return this._pollingInterval;
                      }
                      set pollingInterval(e) {
                          if ("number" != typeof e || e <= 0 || parseInt(String(e)) != e) throw new Error("invalid polling interval");
                          this._pollingInterval = e, this._poller && (clearInterval(this._poller), this._poller = setInterval(()=>{
                              this.poll();
                          }, this._pollingInterval));
                      }
                      _getFastBlockNumber() {
                          const e = vs();
                          return e - this._fastQueryDate > 2 * this._pollingInterval && (this._fastQueryDate = e, this._fastBlockNumberPromise = this.getBlockNumber().then((e)=>((null == this._fastBlockNumber || e > this._fastBlockNumber) && (this._fastBlockNumber = e), this._fastBlockNumber))), this._fastBlockNumberPromise;
                      }
                      _setFastBlockNumber(e) {
                          null != this._fastBlockNumber && e < this._fastBlockNumber || (this._fastQueryDate = vs(), (null == this._fastBlockNumber || e > this._fastBlockNumber) && (this._fastBlockNumber = e, this._fastBlockNumberPromise = Promise.resolve(e)));
                      }
                      waitForTransaction(e, t, r) {
                          return fs(this, void 0, void 0, function*() {
                              return this._waitForTransaction(e, null == t ? 1 : t, r || 0, null);
                          });
                      }
                      _waitForTransaction(e, t, r, n) {
                          return fs(this, void 0, void 0, function*() {
                              const i = yield this.getTransactionReceipt(e);
                              return (i ? i.confirmations : 0) >= t ? i : new Promise((i, o)=>{
                                  const s = [];
                                  let a = !1;
                                  const l = function() {
                                      return !!a || (a = !0, s.forEach((e)=>{
                                          e();
                                      }), !1);
                                  }, u = (e)=>{
                                      e.confirmations < t || l() || i(e);
                                  };
                                  if (this.on(e, u), s.push(()=>{
                                      this.removeListener(e, u);
                                  }), n) {
                                      let r = n.startBlock, i = null;
                                      const u = (s)=>fs(this, void 0, void 0, function*() {
                                              a || (yield bs(1e3), this.getTransactionCount(n.from).then((c)=>fs(this, void 0, void 0, function*() {
                                                      if (!a) {
                                                          if (c <= n.nonce) r = s;
                                                          else {
                                                              {
                                                                  const t = yield this.getTransaction(e);
                                                                  if (t && null != t.blockNumber) return;
                                                              }
                                                              for(null == i && (i = r - 3, i < n.startBlock && (i = n.startBlock)); i <= s;){
                                                                  if (a) return;
                                                                  const r = yield this.getBlockWithTransactions(i);
                                                                  for(let i = 0; i < r.transactions.length; i++){
                                                                      const s = r.transactions[i];
                                                                      if (s.hash === e) return;
                                                                      if (s.from === n.from && s.nonce === n.nonce) {
                                                                          if (a) return;
                                                                          const r = yield this.waitForTransaction(s.hash, t);
                                                                          if (l()) return;
                                                                          let i = "replaced";
                                                                          return s.data === n.data && s.to === n.to && s.value.eq(n.value) ? i = "repriced" : "0x" === s.data && s.from === s.to && s.value.isZero() && (i = "cancelled"), void o(ps.makeError("transaction was replaced", v.errors.TRANSACTION_REPLACED, {
                                                                              cancelled: "replaced" === i || "cancelled" === i,
                                                                              reason: i,
                                                                              replacement: this._wrapTransaction(s),
                                                                              hash: e,
                                                                              receipt: r
                                                                          }));
                                                                      }
                                                                  }
                                                                  i++;
                                                              }
                                                          }
                                                          a || this.once("block", u);
                                                      }
                                                  }), (e)=>{
                                                  a || this.once("block", u);
                                              }));
                                          });
                                      if (a) return;
                                      this.once("block", u), s.push(()=>{
                                          this.removeListener("block", u);
                                      });
                                  }
                                  if ("number" == typeof r && r > 0) {
                                      const e = setTimeout(()=>{
                                          l() || o(ps.makeError("timeout exceeded", v.errors.TIMEOUT, {
                                              timeout: r
                                          }));
                                      }, r);
                                      e.unref && e.unref(), s.push(()=>{
                                          clearTimeout(e);
                                      });
                                  }
                              });
                          });
                      }
                      getBlockNumber() {
                          return fs(this, void 0, void 0, function*() {
                              return this._getInternalBlockNumber(0);
                          });
                      }
                      getGasPrice() {
                          return fs(this, void 0, void 0, function*() {
                              yield this.getNetwork();
                              const e = yield this.perform("getGasPrice", {});
                              try {
                                  return H.from(e);
                              } catch (t) {
                                  return ps.throwError("bad result from backend", v.errors.SERVER_ERROR, {
                                      method: "getGasPrice",
                                      result: e,
                                      error: t
                                  });
                              }
                          });
                      }
                      getBalance(e, t) {
                          return fs(this, void 0, void 0, function*() {
                              yield this.getNetwork();
                              const r = yield re({
                                  address: this._getAddress(e),
                                  blockTag: this._getBlockTag(t)
                              }), n = yield this.perform("getBalance", r);
                              try {
                                  return H.from(n);
                              } catch (e) {
                                  return ps.throwError("bad result from backend", v.errors.SERVER_ERROR, {
                                      method: "getBalance",
                                      params: r,
                                      result: n,
                                      error: e
                                  });
                              }
                          });
                      }
                      getTransactionCount(e, t) {
                          return fs(this, void 0, void 0, function*() {
                              yield this.getNetwork();
                              const r = yield re({
                                  address: this._getAddress(e),
                                  blockTag: this._getBlockTag(t)
                              }), n = yield this.perform("getTransactionCount", r);
                              try {
                                  return H.from(n).toNumber();
                              } catch (e) {
                                  return ps.throwError("bad result from backend", v.errors.SERVER_ERROR, {
                                      method: "getTransactionCount",
                                      params: r,
                                      result: n,
                                      error: e
                                  });
                              }
                          });
                      }
                      getCode(e, t) {
                          return fs(this, void 0, void 0, function*() {
                              yield this.getNetwork();
                              const r = yield re({
                                  address: this._getAddress(e),
                                  blockTag: this._getBlockTag(t)
                              }), n = yield this.perform("getCode", r);
                              try {
                                  return R(n);
                              } catch (e) {
                                  return ps.throwError("bad result from backend", v.errors.SERVER_ERROR, {
                                      method: "getCode",
                                      params: r,
                                      result: n,
                                      error: e
                                  });
                              }
                          });
                      }
                      getStorageAt(e, t, r) {
                          return fs(this, void 0, void 0, function*() {
                              yield this.getNetwork();
                              const n = yield re({
                                  address: this._getAddress(e),
                                  blockTag: this._getBlockTag(r),
                                  position: Promise.resolve(t).then((e)=>M(e))
                              }), i = yield this.perform("getStorageAt", n);
                              try {
                                  return R(i);
                              } catch (e) {
                                  return ps.throwError("bad result from backend", v.errors.SERVER_ERROR, {
                                      method: "getStorageAt",
                                      params: n,
                                      result: i,
                                      error: e
                                  });
                              }
                          });
                      }
                      _wrapTransaction(e, t, r) {
                          if (null != t && 32 !== O(t)) throw new Error("invalid response - sendTransaction");
                          const n = e;
                          return null != t && e.hash !== t && ps.throwError("Transaction hash mismatch from Provider.sendTransaction.", v.errors.UNKNOWN_ERROR, {
                              expectedHash: e.hash,
                              returnedHash: t
                          }), n.wait = (t, n)=>fs(this, void 0, void 0, function*() {
                                  let i;
                                  null == t && (t = 1), null == n && (n = 0), 0 !== t && null != r && (i = {
                                      data: e.data,
                                      from: e.from,
                                      nonce: e.nonce,
                                      to: e.to,
                                      value: e.value,
                                      startBlock: r
                                  });
                                  const o = yield this._waitForTransaction(e.hash, t, n, i);
                                  return null == o && 0 === t ? null : (this._emitted["t:" + e.hash] = o.blockNumber, 0 === o.status && ps.throwError("transaction failed", v.errors.CALL_EXCEPTION, {
                                      transactionHash: e.hash,
                                      transaction: e,
                                      receipt: o
                                  }), o);
                              }), n;
                      }
                      sendTransaction(e) {
                          return fs(this, void 0, void 0, function*() {
                              yield this.getNetwork();
                              const t = yield Promise.resolve(e).then((e)=>R(e)), r = this.formatter.transaction(e);
                              null == r.confirmations && (r.confirmations = 0);
                              const n = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                              try {
                                  const e = yield this.perform("sendTransaction", {
                                      signedTransaction: t
                                  });
                                  return this._wrapTransaction(r, e, n);
                              } catch (e) {
                                  throw e.transaction = r, e.transactionHash = r.hash, e;
                              }
                          });
                      }
                      _getTransactionRequest(e) {
                          return fs(this, void 0, void 0, function*() {
                              const t = yield e, r = {};
                              return [
                                  "from",
                                  "to"
                              ].forEach((e)=>{
                                  null != t[e] && (r[e] = Promise.resolve(t[e]).then((e)=>e ? this._getAddress(e) : null));
                              }), [
                                  "gasLimit",
                                  "gasPrice",
                                  "maxFeePerGas",
                                  "maxPriorityFeePerGas",
                                  "value"
                              ].forEach((e)=>{
                                  null != t[e] && (r[e] = Promise.resolve(t[e]).then((e)=>e ? H.from(e) : null));
                              }), [
                                  "type"
                              ].forEach((e)=>{
                                  null != t[e] && (r[e] = Promise.resolve(t[e]).then((e)=>null != e ? e : null));
                              }), t.accessList && (r.accessList = this.formatter.accessList(t.accessList)), [
                                  "data"
                              ].forEach((e)=>{
                                  null != t[e] && (r[e] = Promise.resolve(t[e]).then((e)=>e ? R(e) : null));
                              }), this.formatter.transactionRequest((yield re(r)));
                          });
                      }
                      _getFilter(e) {
                          return fs(this, void 0, void 0, function*() {
                              e = yield e;
                              const t = {};
                              return null != e.address && (t.address = this._getAddress(e.address)), [
                                  "blockHash",
                                  "topics"
                              ].forEach((r)=>{
                                  null != e[r] && (t[r] = e[r]);
                              }), [
                                  "fromBlock",
                                  "toBlock"
                              ].forEach((r)=>{
                                  null != e[r] && (t[r] = this._getBlockTag(e[r]));
                              }), this.formatter.filter((yield re(t)));
                          });
                      }
                      call(e, t) {
                          return fs(this, void 0, void 0, function*() {
                              yield this.getNetwork();
                              const r = yield re({
                                  transaction: this._getTransactionRequest(e),
                                  blockTag: this._getBlockTag(t)
                              }), n = yield this.perform("call", r);
                              try {
                                  return R(n);
                              } catch (e) {
                                  return ps.throwError("bad result from backend", v.errors.SERVER_ERROR, {
                                      method: "call",
                                      params: r,
                                      result: n,
                                      error: e
                                  });
                              }
                          });
                      }
                      estimateGas(e) {
                          return fs(this, void 0, void 0, function*() {
                              yield this.getNetwork();
                              const t = yield re({
                                  transaction: this._getTransactionRequest(e)
                              }), r = yield this.perform("estimateGas", t);
                              try {
                                  return H.from(r);
                              } catch (e) {
                                  return ps.throwError("bad result from backend", v.errors.SERVER_ERROR, {
                                      method: "estimateGas",
                                      params: t,
                                      result: r,
                                      error: e
                                  });
                              }
                          });
                      }
                      _getAddress(e) {
                          return fs(this, void 0, void 0, function*() {
                              "string" != typeof (e = yield e) && ps.throwArgumentError("invalid address or ENS name", "name", e);
                              const t = yield this.resolveName(e);
                              return null == t && ps.throwError("ENS name not configured", v.errors.UNSUPPORTED_OPERATION, {
                                  operation: `resolveName(${JSON.stringify(e)})`
                              }), t;
                          });
                      }
                      _getBlock(e, t) {
                          return fs(this, void 0, void 0, function*() {
                              yield this.getNetwork(), e = yield e;
                              let r = -128;
                              const n = {
                                  includeTransactions: !!t
                              };
                              if (x(e, 32)) n.blockHash = e;
                              else try {
                                  n.blockTag = yield this._getBlockTag(e), x(n.blockTag) && (r = parseInt(n.blockTag.substring(2), 16));
                              } catch (t) {
                                  ps.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", e);
                              }
                              return ns(()=>fs(this, void 0, void 0, function*() {
                                      const e = yield this.perform("getBlock", n);
                                      if (null == e) return null != n.blockHash && null == this._emitted["b:" + n.blockHash] || null != n.blockTag && r > this._emitted.block ? null : void 0;
                                      if (t) {
                                          let t = null;
                                          for(let r = 0; r < e.transactions.length; r++){
                                              const n = e.transactions[r];
                                              if (null == n.blockNumber) n.confirmations = 0;
                                              else if (null == n.confirmations) {
                                                  null == t && (t = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval));
                                                  let e = t - n.blockNumber + 1;
                                                  e <= 0 && (e = 1), n.confirmations = e;
                                              }
                                          }
                                          const r = this.formatter.blockWithTransactions(e);
                                          return r.transactions = r.transactions.map((e)=>this._wrapTransaction(e)), r;
                                      }
                                      return this.formatter.block(e);
                                  }), {
                                  oncePoll: this
                              });
                          });
                      }
                      getBlock(e) {
                          return this._getBlock(e, !1);
                      }
                      getBlockWithTransactions(e) {
                          return this._getBlock(e, !0);
                      }
                      getTransaction(e) {
                          return fs(this, void 0, void 0, function*() {
                              yield this.getNetwork(), e = yield e;
                              const t = {
                                  transactionHash: this.formatter.hash(e, !0)
                              };
                              return ns(()=>fs(this, void 0, void 0, function*() {
                                      const r = yield this.perform("getTransaction", t);
                                      if (null == r) return null == this._emitted["t:" + e] ? null : void 0;
                                      const n = this.formatter.transactionResponse(r);
                                      if (null == n.blockNumber) n.confirmations = 0;
                                      else if (null == n.confirmations) {
                                          let e = (yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval)) - n.blockNumber + 1;
                                          e <= 0 && (e = 1), n.confirmations = e;
                                      }
                                      return this._wrapTransaction(n);
                                  }), {
                                  oncePoll: this
                              });
                          });
                      }
                      getTransactionReceipt(e) {
                          return fs(this, void 0, void 0, function*() {
                              yield this.getNetwork(), e = yield e;
                              const t = {
                                  transactionHash: this.formatter.hash(e, !0)
                              };
                              return ns(()=>fs(this, void 0, void 0, function*() {
                                      const r = yield this.perform("getTransactionReceipt", t);
                                      if (null == r) return null == this._emitted["t:" + e] ? null : void 0;
                                      if (null == r.blockHash) return;
                                      const n = this.formatter.receipt(r);
                                      if (null == n.blockNumber) n.confirmations = 0;
                                      else if (null == n.confirmations) {
                                          let e = (yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval)) - n.blockNumber + 1;
                                          e <= 0 && (e = 1), n.confirmations = e;
                                      }
                                      return n;
                                  }), {
                                  oncePoll: this
                              });
                          });
                      }
                      getLogs(e) {
                          return fs(this, void 0, void 0, function*() {
                              yield this.getNetwork();
                              const t = yield re({
                                  filter: this._getFilter(e)
                              }), r = yield this.perform("getLogs", t);
                              return r.forEach((e)=>{
                                  null == e.removed && (e.removed = !1);
                              }), ls.arrayOf(this.formatter.filterLog.bind(this.formatter))(r);
                          });
                      }
                      getEtherPrice() {
                          return fs(this, void 0, void 0, function*() {
                              return yield this.getNetwork(), this.perform("getEtherPrice", {});
                          });
                      }
                      _getBlockTag(e) {
                          return fs(this, void 0, void 0, function*() {
                              if ("number" == typeof (e = yield e) && e < 0) {
                                  e % 1 && ps.throwArgumentError("invalid BlockTag", "blockTag", e);
                                  let t = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                                  return t += e, t < 0 && (t = 0), this.formatter.blockTag(t);
                              }
                              return this.formatter.blockTag(e);
                          });
                      }
                      getResolver(e) {
                          return fs(this, void 0, void 0, function*() {
                              try {
                                  const t = yield this._getResolver(e);
                                  return null == t ? null : new Ts(this, t, e);
                              } catch (e) {
                                  if (e.code === v.errors.CALL_EXCEPTION) return null;
                                  throw e;
                              }
                          });
                      }
                      _getResolver(e) {
                          return fs(this, void 0, void 0, function*() {
                              const t = yield this.getNetwork();
                              t.ensAddress || ps.throwError("network does not support ENS", v.errors.UNSUPPORTED_OPERATION, {
                                  operation: "ENS",
                                  network: t.name
                              });
                              const r = {
                                  to: t.ensAddress,
                                  data: "0x0178b8bf" + Ho(e).substring(2)
                              };
                              try {
                                  return this.formatter.callAddress((yield this.call(r)));
                              } catch (e) {
                                  if (e.code === v.errors.CALL_EXCEPTION) return null;
                                  throw e;
                              }
                          });
                      }
                      resolveName(e) {
                          return fs(this, void 0, void 0, function*() {
                              e = yield e;
                              try {
                                  return Promise.resolve(this.formatter.address(e));
                              } catch (t) {
                                  if (x(e)) throw t;
                              }
                              "string" != typeof e && ps.throwArgumentError("invalid ENS name", "name", e);
                              const t = yield this.getResolver(e);
                              return t ? yield t.getAddress() : null;
                          });
                      }
                      lookupAddress(e) {
                          return fs(this, void 0, void 0, function*() {
                              e = yield e;
                              const t = (e = this.formatter.address(e)).substring(2).toLowerCase() + ".addr.reverse", r = yield this._getResolver(t);
                              if (!r) return null;
                              let n = A((yield this.call({
                                  to: r,
                                  data: "0x691f3431" + Ho(t).substring(2)
                              })));
                              if (n.length < 32 || !H.from(n.slice(0, 32)).eq(32)) return null;
                              if (n = n.slice(32), n.length < 32) return null;
                              const i = H.from(n.slice(0, 32)).toNumber();
                              if (n = n.slice(32), i > n.length) return null;
                              const o = He(n.slice(0, i));
                              return (yield this.resolveName(o)) != e ? null : o;
                          });
                      }
                      getAvatar(e) {
                          return fs(this, void 0, void 0, function*() {
                              let t = null;
                              if (x(e)) {
                                  const r = this.formatter.address(e), n = r.substring(2).toLowerCase() + ".addr.reverse", i = yield this._getResolver(n);
                                  if (!i) return null;
                                  t = new Ts(this, i, "_", r);
                              } else if (t = yield this.getResolver(e), !t) return null;
                              const r = yield t.getAvatar();
                              return null == r ? null : r.url;
                          });
                      }
                      perform(e, t) {
                          return ps.throwError(e + " not implemented", v.errors.NOT_IMPLEMENTED, {
                              operation: e
                          });
                      }
                      _startEvent(e) {
                          this.polling = this._events.filter((e)=>e.pollable()).length > 0;
                      }
                      _stopEvent(e) {
                          this.polling = this._events.filter((e)=>e.pollable()).length > 0;
                      }
                      _addEventListener(e, t, r) {
                          const n = new _s(gs(e), t, r);
                          return this._events.push(n), this._startEvent(n), this;
                      }
                      on(e, t) {
                          return this._addEventListener(e, t, !1);
                      }
                      once(e, t) {
                          return this._addEventListener(e, t, !0);
                      }
                      emit(e, ...t) {
                          let r = !1, n = [], i = gs(e);
                          return this._events = this._events.filter((e)=>e.tag !== i || (setTimeout(()=>{
                                  e.listener.apply(this, t);
                              }, 0), r = !0, !e.once || (n.push(e), !1))), n.forEach((e)=>{
                              this._stopEvent(e);
                          }), r;
                      }
                      listenerCount(e) {
                          if (!e) return this._events.length;
                          let t = gs(e);
                          return this._events.filter((e)=>e.tag === t).length;
                      }
                      listeners(e) {
                          if (null == e) return this._events.map((e)=>e.listener);
                          let t = gs(e);
                          return this._events.filter((e)=>e.tag === t).map((e)=>e.listener);
                      }
                      off(e, t) {
                          if (null == t) return this.removeAllListeners(e);
                          const r = [];
                          let n = !1, i = gs(e);
                          return this._events = this._events.filter((e)=>e.tag !== i || e.listener != t || !!n || (n = !0, r.push(e), !1)), r.forEach((e)=>{
                              this._stopEvent(e);
                          }), this;
                      }
                      removeAllListeners(e) {
                          let t = [];
                          if (null == e) t = this._events, this._events = [];
                          else {
                              const r = gs(e);
                              this._events = this._events.filter((e)=>e.tag !== r || (t.push(e), !1));
                          }
                          return t.forEach((e)=>{
                              this._stopEvent(e);
                          }), this;
                      }
                  }
                  var Is = function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  };
                  const Ms = new v(ss), Ds = [
                      "call",
                      "estimateGas"
                  ];
                  function Ks(e, t, r) {
                      if ("call" === e && t.code === v.errors.SERVER_ERROR) {
                          const e = t.error;
                          if (e && e.message.match("reverted") && x(e.data)) return e.data;
                          Ms.throwError("missing revert data in call exception", v.errors.CALL_EXCEPTION, {
                              error: t,
                              data: "0x"
                          });
                      }
                      let n = t.message;
                      t.code === v.errors.SERVER_ERROR && t.error && "string" == typeof t.error.message ? n = t.error.message : "string" == typeof t.body ? n = t.body : "string" == typeof t.responseText && (n = t.responseText), n = (n || "").toLowerCase();
                      const i = r.transaction || r.signedTransaction;
                      throw n.match(/insufficient funds|base fee exceeds gas limit/) && Ms.throwError("insufficient funds for intrinsic transaction cost", v.errors.INSUFFICIENT_FUNDS, {
                          error: t,
                          method: e,
                          transaction: i
                      }), n.match(/nonce too low/) && Ms.throwError("nonce has already been used", v.errors.NONCE_EXPIRED, {
                          error: t,
                          method: e,
                          transaction: i
                      }), n.match(/replacement transaction underpriced/) && Ms.throwError("replacement fee too low", v.errors.REPLACEMENT_UNDERPRICED, {
                          error: t,
                          method: e,
                          transaction: i
                      }), n.match(/only replay-protected/) && Ms.throwError("legacy pre-eip-155 transactions not supported", v.errors.UNSUPPORTED_OPERATION, {
                          error: t,
                          method: e,
                          transaction: i
                      }), Ds.indexOf(e) >= 0 && n.match(/gas required exceeds allowance|always failing transaction|execution reverted/) && Ms.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", v.errors.UNPREDICTABLE_GAS_LIMIT, {
                          error: t,
                          method: e,
                          transaction: i
                      }), t;
                  }
                  function Us(e) {
                      return new Promise(function(t) {
                          setTimeout(t, e);
                      });
                  }
                  function Fs(e) {
                      if (e.error) {
                          const t = new Error(e.error.message);
                          throw t.code = e.error.code, t.data = e.error.data, t;
                      }
                      return e.result;
                  }
                  function js(e) {
                      return e ? e.toLowerCase() : e;
                  }
                  const Ls = {};
                  class qs extends lr {
                      constructor(e, t, r){
                          if (Ms.checkNew(new.target, qs), super(), e !== Ls) throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
                          ee(this, "provider", t), null == r && (r = 0), "string" == typeof r ? (ee(this, "_address", this.provider.formatter.address(r)), ee(this, "_index", null)) : "number" == typeof r ? (ee(this, "_index", r), ee(this, "_address", null)) : Ms.throwArgumentError("invalid address or index", "addressOrIndex", r);
                      }
                      connect(e) {
                          return Ms.throwError("cannot alter JSON-RPC Signer connection", v.errors.UNSUPPORTED_OPERATION, {
                              operation: "connect"
                          });
                      }
                      connectUnchecked() {
                          return new zs(Ls, this.provider, this._address || this._index);
                      }
                      getAddress() {
                          return this._address ? Promise.resolve(this._address) : this.provider.send("eth_accounts", []).then((e)=>(e.length <= this._index && Ms.throwError("unknown account #" + this._index, v.errors.UNSUPPORTED_OPERATION, {
                                  operation: "getAddress"
                              }), this.provider.formatter.address(e[this._index])));
                      }
                      sendUncheckedTransaction(e) {
                          e = ie(e);
                          const t = this.getAddress().then((e)=>(e && (e = e.toLowerCase()), e));
                          if (null == e.gasLimit) {
                              const r = ie(e);
                              r.from = t, e.gasLimit = this.provider.estimateGas(r);
                          }
                          return null != e.to && (e.to = Promise.resolve(e.to).then((e)=>Is(this, void 0, void 0, function*() {
                                  if (null == e) return null;
                                  const t = yield this.provider.resolveName(e);
                                  return null == t && Ms.throwArgumentError("provided ENS name resolves to null", "tx.to", e), t;
                              }))), re({
                              tx: re(e),
                              sender: t
                          }).then(({ tx: t , sender: r  })=>{
                              null != t.from ? t.from.toLowerCase() !== r && Ms.throwArgumentError("from address mismatch", "transaction", e) : t.from = r;
                              const n = this.provider.constructor.hexlifyTransaction(t, {
                                  from: !0
                              });
                              return this.provider.send("eth_sendTransaction", [
                                  n
                              ]).then((e)=>e, (e)=>Ks("sendTransaction", e, n));
                          });
                      }
                      signTransaction(e) {
                          return Ms.throwError("signing transactions is unsupported", v.errors.UNSUPPORTED_OPERATION, {
                              operation: "signTransaction"
                          });
                      }
                      sendTransaction(e) {
                          return Is(this, void 0, void 0, function*() {
                              const t = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval), r = yield this.sendUncheckedTransaction(e);
                              try {
                                  return yield ns(()=>Is(this, void 0, void 0, function*() {
                                          const e = yield this.provider.getTransaction(r);
                                          if (null !== e) return this.provider._wrapTransaction(e, r, t);
                                      }), {
                                      oncePoll: this.provider
                                  });
                              } catch (e) {
                                  throw e.transactionHash = r, e;
                              }
                          });
                      }
                      signMessage(e) {
                          return Is(this, void 0, void 0, function*() {
                              const t = "string" == typeof e ? Ve(e) : e, r = yield this.getAddress();
                              return yield this.provider.send("personal_sign", [
                                  R(t),
                                  r.toLowerCase()
                              ]);
                          });
                      }
                      _legacySignMessage(e) {
                          return Is(this, void 0, void 0, function*() {
                              const t = "string" == typeof e ? Ve(e) : e, r = yield this.getAddress();
                              return yield this.provider.send("eth_sign", [
                                  r.toLowerCase(),
                                  R(t)
                              ]);
                          });
                      }
                      _signTypedData(e, t, r) {
                          return Is(this, void 0, void 0, function*() {
                              const n = yield ci.resolveNames(e, t, r, (e)=>this.provider.resolveName(e)), i = yield this.getAddress();
                              return yield this.provider.send("eth_signTypedData_v4", [
                                  i.toLowerCase(),
                                  JSON.stringify(ci.getPayload(n.domain, t, n.value))
                              ]);
                          });
                      }
                      unlock(e) {
                          return Is(this, void 0, void 0, function*() {
                              const t = this.provider, r = yield this.getAddress();
                              return t.send("personal_unlockAccount", [
                                  r.toLowerCase(),
                                  e,
                                  null
                              ]);
                          });
                      }
                  }
                  class zs extends qs {
                      sendTransaction(e) {
                          return this.sendUncheckedTransaction(e).then((e)=>({
                                  hash: e,
                                  nonce: null,
                                  gasLimit: null,
                                  gasPrice: null,
                                  data: null,
                                  value: null,
                                  chainId: null,
                                  confirmations: 0,
                                  from: null,
                                  wait: (t)=>this.provider.waitForTransaction(e, t)
                              }));
                      }
                  }
                  const Vs = {
                      chainId: !0,
                      data: !0,
                      gasLimit: !0,
                      gasPrice: !0,
                      nonce: !0,
                      to: !0,
                      value: !0,
                      type: !0,
                      accessList: !0,
                      maxFeePerGas: !0,
                      maxPriorityFeePerGas: !0
                  };
                  class Ws extends Bs {
                      constructor(e, t){
                          Ms.checkNew(new.target, Ws);
                          let r = t;
                          null == r && (r = new Promise((e, t)=>{
                              setTimeout(()=>{
                                  this.detectNetwork().then((t)=>{
                                      e(t);
                                  }, (e)=>{
                                      t(e);
                                  });
                              }, 0);
                          })), super(r), e || (e = te(this.constructor, "defaultUrl")()), ee(this, "connection", "string" == typeof e ? Object.freeze({
                              url: e
                          }) : Object.freeze(ie(e))), this._nextId = 42;
                      }
                      get _cache() {
                          return null == this._eventLoopCache && (this._eventLoopCache = {}), this._eventLoopCache;
                      }
                      static defaultUrl() {
                          return "http://localhost:8545";
                      }
                      detectNetwork() {
                          return this._cache.detectNetwork || (this._cache.detectNetwork = this._uncachedDetectNetwork(), setTimeout(()=>{
                              this._cache.detectNetwork = null;
                          }, 0)), this._cache.detectNetwork;
                      }
                      _uncachedDetectNetwork() {
                          return Is(this, void 0, void 0, function*() {
                              yield Us(0);
                              let e = null;
                              try {
                                  e = yield this.send("eth_chainId", []);
                              } catch (t) {
                                  try {
                                      e = yield this.send("net_version", []);
                                  } catch (e) {}
                              }
                              if (null != e) {
                                  const t = te(this.constructor, "getNetwork");
                                  try {
                                      return t(H.from(e).toNumber());
                                  } catch (t) {
                                      return Ms.throwError("could not detect network", v.errors.NETWORK_ERROR, {
                                          chainId: e,
                                          event: "invalidNetwork",
                                          serverError: t
                                      });
                                  }
                              }
                              return Ms.throwError("could not detect network", v.errors.NETWORK_ERROR, {
                                  event: "noNetwork"
                              });
                          });
                      }
                      getSigner(e) {
                          return new qs(Ls, this, e);
                      }
                      getUncheckedSigner(e) {
                          return this.getSigner(e).connectUnchecked();
                      }
                      listAccounts() {
                          return this.send("eth_accounts", []).then((e)=>e.map((e)=>this.formatter.address(e)));
                      }
                      send(e, t) {
                          const r = {
                              method: e,
                              params: t,
                              id: this._nextId++,
                              jsonrpc: "2.0"
                          };
                          this.emit("debug", {
                              action: "request",
                              request: le(r),
                              provider: this
                          });
                          const n = [
                              "eth_chainId",
                              "eth_blockNumber"
                          ].indexOf(e) >= 0;
                          if (n && this._cache[e]) return this._cache[e];
                          const i = rs(this.connection, JSON.stringify(r), Fs).then((e)=>(this.emit("debug", {
                                  action: "response",
                                  request: r,
                                  response: e,
                                  provider: this
                              }), e), (e)=>{
                              throw this.emit("debug", {
                                  action: "response",
                                  error: e,
                                  request: r,
                                  provider: this
                              }), e;
                          });
                          return n && (this._cache[e] = i, setTimeout(()=>{
                              this._cache[e] = null;
                          }, 0)), i;
                      }
                      prepareRequest(e, t) {
                          switch(e){
                              case "getBlockNumber":
                                  return [
                                      "eth_blockNumber",
                                      []
                                  ];
                              case "getGasPrice":
                                  return [
                                      "eth_gasPrice",
                                      []
                                  ];
                              case "getBalance":
                                  return [
                                      "eth_getBalance",
                                      [
                                          js(t.address),
                                          t.blockTag
                                      ]
                                  ];
                              case "getTransactionCount":
                                  return [
                                      "eth_getTransactionCount",
                                      [
                                          js(t.address),
                                          t.blockTag
                                      ]
                                  ];
                              case "getCode":
                                  return [
                                      "eth_getCode",
                                      [
                                          js(t.address),
                                          t.blockTag
                                      ]
                                  ];
                              case "getStorageAt":
                                  return [
                                      "eth_getStorageAt",
                                      [
                                          js(t.address),
                                          t.position,
                                          t.blockTag
                                      ]
                                  ];
                              case "sendTransaction":
                                  return [
                                      "eth_sendRawTransaction",
                                      [
                                          t.signedTransaction
                                      ]
                                  ];
                              case "getBlock":
                                  return t.blockTag ? [
                                      "eth_getBlockByNumber",
                                      [
                                          t.blockTag,
                                          !!t.includeTransactions
                                      ]
                                  ] : t.blockHash ? [
                                      "eth_getBlockByHash",
                                      [
                                          t.blockHash,
                                          !!t.includeTransactions
                                      ]
                                  ] : null;
                              case "getTransaction":
                                  return [
                                      "eth_getTransactionByHash",
                                      [
                                          t.transactionHash
                                      ]
                                  ];
                              case "getTransactionReceipt":
                                  return [
                                      "eth_getTransactionReceipt",
                                      [
                                          t.transactionHash
                                      ]
                                  ];
                              case "call":
                                  return [
                                      "eth_call",
                                      [
                                          te(this.constructor, "hexlifyTransaction")(t.transaction, {
                                              from: !0
                                          }),
                                          t.blockTag
                                      ]
                                  ];
                              case "estimateGas":
                                  return [
                                      "eth_estimateGas",
                                      [
                                          te(this.constructor, "hexlifyTransaction")(t.transaction, {
                                              from: !0
                                          })
                                      ]
                                  ];
                              case "getLogs":
                                  return t.filter && null != t.filter.address && (t.filter.address = js(t.filter.address)), [
                                      "eth_getLogs",
                                      [
                                          t.filter
                                      ]
                                  ];
                          }
                          return null;
                      }
                      perform(e, t) {
                          return Is(this, void 0, void 0, function*() {
                              if ("call" === e || "estimateGas" === e) {
                                  const e = t.transaction;
                                  if (e && null != e.type && H.from(e.type).isZero() && null == e.maxFeePerGas && null == e.maxPriorityFeePerGas) {
                                      const r = yield this.getFeeData();
                                      null == r.maxFeePerGas && null == r.maxPriorityFeePerGas && ((t = ie(t)).transaction = ie(e), delete t.transaction.type);
                                  }
                              }
                              const r = this.prepareRequest(e, t);
                              null == r && Ms.throwError(e + " not implemented", v.errors.NOT_IMPLEMENTED, {
                                  operation: e
                              });
                              try {
                                  return yield this.send(r[0], r[1]);
                              } catch (r) {
                                  return Ks(e, r, t);
                              }
                          });
                      }
                      _startEvent(e) {
                          "pending" === e.tag && this._startPending(), super._startEvent(e);
                      }
                      _startPending() {
                          if (null != this._pendingFilter) return;
                          const e = this, t = this.send("eth_newPendingTransactionFilter", []);
                          this._pendingFilter = t, t.then(function(r) {
                              return function n() {
                                  e.send("eth_getFilterChanges", [
                                      r
                                  ]).then(function(r) {
                                      if (e._pendingFilter != t) return null;
                                      let n = Promise.resolve();
                                      return r.forEach(function(t) {
                                          e._emitted["t:" + t.toLowerCase()] = "pending", n = n.then(function() {
                                              return e.getTransaction(t).then(function(t) {
                                                  return e.emit("pending", t), null;
                                              });
                                          });
                                      }), n.then(function() {
                                          return Us(1e3);
                                      });
                                  }).then(function() {
                                      if (e._pendingFilter == t) return setTimeout(function() {
                                          n();
                                      }, 0), null;
                                      e.send("eth_uninstallFilter", [
                                          r
                                      ]);
                                  }).catch((e)=>{});
                              }(), r;
                          }).catch((e)=>{});
                      }
                      _stopEvent(e) {
                          "pending" === e.tag && 0 === this.listenerCount("pending") && (this._pendingFilter = null), super._stopEvent(e);
                      }
                      static hexlifyTransaction(e, t) {
                          const r = ie(Vs);
                          if (t) for(const e in t)t[e] && (r[e] = !0);
                          ne(e, r);
                          const n = {};
                          return [
                              "gasLimit",
                              "gasPrice",
                              "type",
                              "maxFeePerGas",
                              "maxPriorityFeePerGas",
                              "nonce",
                              "value"
                          ].forEach(function(t) {
                              if (null == e[t]) return;
                              const r = M(e[t]);
                              "gasLimit" === t && (t = "gas"), n[t] = r;
                          }), [
                              "from",
                              "to",
                              "data"
                          ].forEach(function(t) {
                              null != e[t] && (n[t] = R(e[t]));
                          }), e.accessList && (n.accessList = dn(e.accessList)), n;
                      }
                  }
                  let Gs = null;
                  try {
                      if (Gs = WebSocket, null == Gs) throw new Error("inject please");
                  } catch (e) {
                      const t = new v(ss);
                      Gs = function() {
                          t.throwError("WebSockets not supported in this environment", v.errors.UNSUPPORTED_OPERATION, {
                              operation: "new WebSocket()"
                          });
                      };
                  }
                  var Js = function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  };
                  const Hs = new v(ss);
                  let $s = 1;
                  class Zs extends Ws {
                      constructor(e, t){
                          "any" === t && Hs.throwError("WebSocketProvider does not support 'any' network yet", v.errors.UNSUPPORTED_OPERATION, {
                              operation: "network:any"
                          }), super(e, t), this._pollingInterval = -1, this._wsReady = !1, ee(this, "_websocket", new Gs(this.connection.url)), ee(this, "_requests", {}), ee(this, "_subs", {}), ee(this, "_subIds", {}), ee(this, "_detectNetwork", super.detectNetwork()), this._websocket.onopen = ()=>{
                              this._wsReady = !0, Object.keys(this._requests).forEach((e)=>{
                                  this._websocket.send(this._requests[e].payload);
                              });
                          }, this._websocket.onmessage = (e)=>{
                              const t = e.data, r = JSON.parse(t);
                              if (null != r.id) {
                                  const e = String(r.id), n = this._requests[e];
                                  if (delete this._requests[e], void 0 !== r.result) n.callback(null, r.result), this.emit("debug", {
                                      action: "response",
                                      request: JSON.parse(n.payload),
                                      response: r.result,
                                      provider: this
                                  });
                                  else {
                                      let e = null;
                                      r.error ? (e = new Error(r.error.message || "unknown error"), ee(e, "code", r.error.code || null), ee(e, "response", t)) : e = new Error("unknown error"), n.callback(e, void 0), this.emit("debug", {
                                          action: "response",
                                          error: e,
                                          request: JSON.parse(n.payload),
                                          provider: this
                                      });
                                  }
                              } else if ("eth_subscription" === r.method) {
                                  const e = this._subs[r.params.subscription];
                                  e && e.processFunc(r.params.result);
                              } else console.warn("this should not happen");
                          };
                          const r = setInterval(()=>{
                              this.emit("poll");
                          }, 1e3);
                          r.unref && r.unref();
                      }
                      detectNetwork() {
                          return this._detectNetwork;
                      }
                      get pollingInterval() {
                          return 0;
                      }
                      resetEventsBlock(e) {
                          Hs.throwError("cannot reset events block on WebSocketProvider", v.errors.UNSUPPORTED_OPERATION, {
                              operation: "resetEventBlock"
                          });
                      }
                      set pollingInterval(e) {
                          Hs.throwError("cannot set polling interval on WebSocketProvider", v.errors.UNSUPPORTED_OPERATION, {
                              operation: "setPollingInterval"
                          });
                      }
                      poll() {
                          return Js(this, void 0, void 0, function*() {
                              return null;
                          });
                      }
                      set polling(e) {
                          e && Hs.throwError("cannot set polling on WebSocketProvider", v.errors.UNSUPPORTED_OPERATION, {
                              operation: "setPolling"
                          });
                      }
                      send(e, t) {
                          const r = $s++;
                          return new Promise((n, i)=>{
                              const o = JSON.stringify({
                                  method: e,
                                  params: t,
                                  id: r,
                                  jsonrpc: "2.0"
                              });
                              this.emit("debug", {
                                  action: "request",
                                  request: JSON.parse(o),
                                  provider: this
                              }), this._requests[String(r)] = {
                                  callback: function(e, t) {
                                      return e ? i(e) : n(t);
                                  },
                                  payload: o
                              }, this._wsReady && this._websocket.send(o);
                          });
                      }
                      static defaultUrl() {
                          return "ws://localhost:8546";
                      }
                      _subscribe(e, t, r) {
                          return Js(this, void 0, void 0, function*() {
                              let n = this._subIds[e];
                              null == n && (n = Promise.all(t).then((e)=>this.send("eth_subscribe", e)), this._subIds[e] = n);
                              const i = yield n;
                              this._subs[i] = {
                                  tag: e,
                                  processFunc: r
                              };
                          });
                      }
                      _startEvent(e) {
                          switch(e.type){
                              case "block":
                                  this._subscribe("block", [
                                      "newHeads"
                                  ], (e)=>{
                                      const t = H.from(e.number).toNumber();
                                      this._emitted.block = t, this.emit("block", t);
                                  });
                                  break;
                              case "pending":
                                  this._subscribe("pending", [
                                      "newPendingTransactions"
                                  ], (e)=>{
                                      this.emit("pending", e);
                                  });
                                  break;
                              case "filter":
                                  this._subscribe(e.tag, [
                                      "logs",
                                      this._getFilter(e.filter)
                                  ], (t)=>{
                                      null == t.removed && (t.removed = !1), this.emit(e.filter, this.formatter.filterLog(t));
                                  });
                                  break;
                              case "tx":
                                  {
                                      const t = (e)=>{
                                          const t = e.hash;
                                          this.getTransactionReceipt(t).then((e)=>{
                                              e && this.emit(t, e);
                                          });
                                      };
                                      t(e), this._subscribe("tx", [
                                          "newHeads"
                                      ], (e)=>{
                                          this._events.filter((e)=>"tx" === e.type).forEach(t);
                                      });
                                      break;
                                  }
                              case "debug":
                              case "poll":
                              case "willPoll":
                              case "didPoll":
                              case "error":
                                  break;
                              default:
                                  console.log("unhandled:", e);
                          }
                      }
                      _stopEvent(e) {
                          let t = e.tag;
                          if ("tx" === e.type) {
                              if (this._events.filter((e)=>"tx" === e.type).length) return;
                              t = "tx";
                          } else if (this.listenerCount(e.event)) return;
                          const r = this._subIds[t];
                          r && (delete this._subIds[t], r.then((e)=>{
                              this._subs[e] && (delete this._subs[e], this.send("eth_unsubscribe", [
                                  e
                              ]));
                          }));
                      }
                      destroy() {
                          return Js(this, void 0, void 0, function*() {
                              this._websocket.readyState === Gs.CONNECTING && (yield new Promise((e)=>{
                                  this._websocket.onopen = function() {
                                      e(!0);
                                  }, this._websocket.onerror = function() {
                                      e(!1);
                                  };
                              })), this._websocket.close(1e3);
                          });
                      }
                  }
                  const Xs = new v(ss);
                  class Qs extends Ws {
                      detectNetwork() {
                          const e = Object.create(null, {
                              detectNetwork: {
                                  get: ()=>super.detectNetwork
                              }
                          });
                          var t, r, n, i;
                          return t = this, r = void 0, i = function*() {
                              let t = this.network;
                              return null == t && (t = yield e.detectNetwork.call(this), t || Xs.throwError("no network detected", v.errors.UNKNOWN_ERROR, {}), null == this._network && (ee(this, "_network", t), this.emit("network", t, null))), t;
                          }, new (n = void 0, n = Promise)(function(e, o) {
                              function s(e) {
                                  try {
                                      l(i.next(e));
                                  } catch (e) {
                                      o(e);
                                  }
                              }
                              function a(e) {
                                  try {
                                      l(i.throw(e));
                                  } catch (e) {
                                      o(e);
                                  }
                              }
                              function l(t) {
                                  var r;
                                  t.done ? e(t.value) : (r = t.value, r instanceof n ? r : new n(function(e) {
                                      e(r);
                                  })).then(s, a);
                              }
                              l((i = i.apply(t, r || [])).next());
                          });
                      }
                  }
                  class Ys extends Qs {
                      constructor(e, t){
                          Xs.checkAbstract(new.target, Ys), e = te(new.target, "getNetwork")(e), t = te(new.target, "getApiKey")(t), super(te(new.target, "getUrl")(e, t), e), "string" == typeof t ? ee(this, "apiKey", t) : null != t && Object.keys(t).forEach((e)=>{
                              ee(this, e, t[e]);
                          });
                      }
                      _startPending() {
                          Xs.warn("WARNING: API provider does not support pending filters");
                      }
                      isCommunityResource() {
                          return !1;
                      }
                      getSigner(e) {
                          return Xs.throwError("API provider does not support signing", v.errors.UNSUPPORTED_OPERATION, {
                              operation: "getSigner"
                          });
                      }
                      listAccounts() {
                          return Promise.resolve([]);
                      }
                      static getApiKey(e) {
                          return e;
                      }
                      static getUrl(e, t) {
                          return Xs.throwError("not implemented; sub-classes must override getUrl", v.errors.NOT_IMPLEMENTED, {
                              operation: "getUrl"
                          });
                      }
                  }
                  const ea = new v(ss), ta = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
                  class ra extends Zs {
                      constructor(e, t){
                          const r = new na(e, t);
                          super(r.connection.url.replace(/^http/i, "ws").replace(".alchemyapi.", ".ws.alchemyapi."), r.network), ee(this, "apiKey", r.apiKey);
                      }
                      isCommunityResource() {
                          return this.apiKey === ta;
                      }
                  }
                  class na extends Ys {
                      static getWebSocketProvider(e, t) {
                          return new ra(e, t);
                      }
                      static getApiKey(e) {
                          return null == e ? ta : (e && "string" != typeof e && ea.throwArgumentError("invalid apiKey", "apiKey", e), e);
                      }
                      static getUrl(e, t) {
                          let r = null;
                          switch(e.name){
                              case "homestead":
                                  r = "eth-mainnet.alchemyapi.io/v2/";
                                  break;
                              case "ropsten":
                                  r = "eth-ropsten.alchemyapi.io/v2/";
                                  break;
                              case "rinkeby":
                                  r = "eth-rinkeby.alchemyapi.io/v2/";
                                  break;
                              case "goerli":
                                  r = "eth-goerli.alchemyapi.io/v2/";
                                  break;
                              case "kovan":
                                  r = "eth-kovan.alchemyapi.io/v2/";
                                  break;
                              case "matic":
                                  r = "polygon-mainnet.g.alchemy.com/v2/";
                                  break;
                              case "maticmum":
                                  r = "polygon-mumbai.g.alchemy.com/v2/";
                                  break;
                              case "arbitrum":
                                  r = "arb-mainnet.g.alchemy.com/v2/";
                                  break;
                              case "arbitrum-rinkeby":
                                  r = "arb-rinkeby.g.alchemy.com/v2/";
                                  break;
                              case "optimism":
                                  r = "opt-mainnet.g.alchemy.com/v2/";
                                  break;
                              case "optimism-kovan":
                                  r = "opt-kovan.g.alchemy.com/v2/";
                                  break;
                              default:
                                  ea.throwArgumentError("unsupported network", "network", arguments[0]);
                          }
                          return {
                              allowGzip: !0,
                              url: "https://" + r + t,
                              throttleCallback: (e, r)=>(t === ta && hs(), Promise.resolve(!0))
                          };
                      }
                      isCommunityResource() {
                          return this.apiKey === ta;
                      }
                  }
                  const ia = new v(ss);
                  class oa extends Ys {
                      static getApiKey(e) {
                          return null != e && ia.throwArgumentError("apiKey not supported for cloudflare", "apiKey", e), null;
                      }
                      static getUrl(e, t) {
                          let r = null;
                          return "homestead" === e.name ? r = "https://cloudflare-eth.com/" : ia.throwArgumentError("unsupported network", "network", arguments[0]), r;
                      }
                      perform(e, t) {
                          const r = Object.create(null, {
                              perform: {
                                  get: ()=>super.perform
                              }
                          });
                          var n, i, o, s;
                          return n = this, i = void 0, s = function*() {
                              return "getBlockNumber" === e ? (yield r.perform.call(this, "getBlock", {
                                  blockTag: "latest"
                              })).number : r.perform.call(this, e, t);
                          }, new (o = void 0, o = Promise)(function(e, t) {
                              function r(e) {
                                  try {
                                      l(s.next(e));
                                  } catch (e) {
                                      t(e);
                                  }
                              }
                              function a(e) {
                                  try {
                                      l(s.throw(e));
                                  } catch (e) {
                                      t(e);
                                  }
                              }
                              function l(t) {
                                  var n;
                                  t.done ? e(t.value) : (n = t.value, n instanceof o ? n : new o(function(e) {
                                      e(n);
                                  })).then(r, a);
                              }
                              l((s = s.apply(n, i || [])).next());
                          });
                      }
                  }
                  var sa = function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  };
                  const aa = new v(ss);
                  function la(e) {
                      const t = {};
                      for(let r in e){
                          if (null == e[r]) continue;
                          let n = e[r];
                          "type" === r && 0 === n || (n = ({
                              type: !0,
                              gasLimit: !0,
                              gasPrice: !0,
                              maxFeePerGs: !0,
                              maxPriorityFeePerGas: !0,
                              nonce: !0,
                              value: !0
                          })[r] ? M(R(n)) : "accessList" === r ? "[" + dn(n).map((e)=>`{address:"${e.address}",storageKeys:["${e.storageKeys.join('","')}"]}`).join(",") + "]" : R(n), t[r] = n);
                      }
                      return t;
                  }
                  function ua(e) {
                      if (0 == e.status && ("No records found" === e.message || "No transactions found" === e.message)) return e.result;
                      if (1 != e.status || "OK" != e.message) {
                          const t = new Error("invalid response");
                          throw t.result = JSON.stringify(e), (e.result || "").toLowerCase().indexOf("rate limit") >= 0 && (t.throttleRetry = !0), t;
                      }
                      return e.result;
                  }
                  function ca(e) {
                      if (e && 0 == e.status && "NOTOK" == e.message && (e.result || "").toLowerCase().indexOf("rate limit") >= 0) {
                          const t = new Error("throttled response");
                          throw t.result = JSON.stringify(e), t.throttleRetry = !0, t;
                      }
                      if ("2.0" != e.jsonrpc) {
                          const t = new Error("invalid response");
                          throw t.result = JSON.stringify(e), t;
                      }
                      if (e.error) {
                          const t = new Error(e.error.message || "unknown error");
                          throw e.error.code && (t.code = e.error.code), e.error.data && (t.data = e.error.data), t;
                      }
                      return e.result;
                  }
                  function da(e) {
                      if ("pending" === e) throw new Error("pending not supported");
                      return "latest" === e ? e : parseInt(e.substring(2), 16);
                  }
                  const ha = "9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB";
                  function fa(e, t, r) {
                      if ("call" === e && t.code === v.errors.SERVER_ERROR) {
                          const e = t.error;
                          if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {
                              let r = e.data;
                              if (r && (r = "0x" + r.replace(/^.*0x/i, "")), x(r)) return r;
                              aa.throwError("missing revert data in call exception", v.errors.CALL_EXCEPTION, {
                                  error: t,
                                  data: "0x"
                              });
                          }
                      }
                      let n = t.message;
                      throw t.code === v.errors.SERVER_ERROR && (t.error && "string" == typeof t.error.message ? n = t.error.message : "string" == typeof t.body ? n = t.body : "string" == typeof t.responseText && (n = t.responseText)), n = (n || "").toLowerCase(), n.match(/insufficient funds/) && aa.throwError("insufficient funds for intrinsic transaction cost", v.errors.INSUFFICIENT_FUNDS, {
                          error: t,
                          method: e,
                          transaction: r
                      }), n.match(/same hash was already imported|transaction nonce is too low|nonce too low/) && aa.throwError("nonce has already been used", v.errors.NONCE_EXPIRED, {
                          error: t,
                          method: e,
                          transaction: r
                      }), n.match(/another transaction with same nonce/) && aa.throwError("replacement fee too low", v.errors.REPLACEMENT_UNDERPRICED, {
                          error: t,
                          method: e,
                          transaction: r
                      }), n.match(/execution failed due to an exception|execution reverted/) && aa.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", v.errors.UNPREDICTABLE_GAS_LIMIT, {
                          error: t,
                          method: e,
                          transaction: r
                      }), t;
                  }
                  class pa extends Bs {
                      constructor(e, t){
                          aa.checkNew(new.target, pa), super(e), ee(this, "baseUrl", this.getBaseUrl()), ee(this, "apiKey", t || ha);
                      }
                      getBaseUrl() {
                          switch(this.network ? this.network.name : "invalid"){
                              case "homestead":
                                  return "https://api.etherscan.io";
                              case "ropsten":
                                  return "https://api-ropsten.etherscan.io";
                              case "rinkeby":
                                  return "https://api-rinkeby.etherscan.io";
                              case "kovan":
                                  return "https://api-kovan.etherscan.io";
                              case "goerli":
                                  return "https://api-goerli.etherscan.io";
                          }
                          return aa.throwArgumentError("unsupported network", "network", name);
                      }
                      getUrl(e, t) {
                          const r = Object.keys(t).reduce((e, r)=>{
                              const n = t[r];
                              return null != n && (e += `&${r}=${n}`), e;
                          }, ""), n = this.apiKey ? `&apikey=${this.apiKey}` : "";
                          return `${this.baseUrl}/api?module=${e}${r}${n}`;
                      }
                      getPostUrl() {
                          return `${this.baseUrl}/api`;
                      }
                      getPostData(e, t) {
                          return t.module = e, t.apikey = this.apiKey, t;
                      }
                      fetch(e, t, r) {
                          return sa(this, void 0, void 0, function*() {
                              const n = r ? this.getPostUrl() : this.getUrl(e, t), i = r ? this.getPostData(e, t) : null, o = "proxy" === e ? ca : ua;
                              this.emit("debug", {
                                  action: "request",
                                  request: n,
                                  provider: this
                              });
                              const s = {
                                  url: n,
                                  throttleSlotInterval: 1e3,
                                  throttleCallback: (e, t)=>(this.isCommunityResource() && hs(), Promise.resolve(!0))
                              };
                              let a = null;
                              i && (s.headers = {
                                  "content-type": "application/x-www-form-urlencoded; charset=UTF-8"
                              }, a = Object.keys(i).map((e)=>`${e}=${i[e]}`).join("&"));
                              const l = yield rs(s, a, o || ca);
                              return this.emit("debug", {
                                  action: "response",
                                  request: n,
                                  response: le(l),
                                  provider: this
                              }), l;
                          });
                      }
                      detectNetwork() {
                          return sa(this, void 0, void 0, function*() {
                              return this.network;
                          });
                      }
                      perform(e, t) {
                          const r = Object.create(null, {
                              perform: {
                                  get: ()=>super.perform
                              }
                          });
                          return sa(this, void 0, void 0, function*() {
                              switch(e){
                                  case "getBlockNumber":
                                      return this.fetch("proxy", {
                                          action: "eth_blockNumber"
                                      });
                                  case "getGasPrice":
                                      return this.fetch("proxy", {
                                          action: "eth_gasPrice"
                                      });
                                  case "getBalance":
                                      return this.fetch("account", {
                                          action: "balance",
                                          address: t.address,
                                          tag: t.blockTag
                                      });
                                  case "getTransactionCount":
                                      return this.fetch("proxy", {
                                          action: "eth_getTransactionCount",
                                          address: t.address,
                                          tag: t.blockTag
                                      });
                                  case "getCode":
                                      return this.fetch("proxy", {
                                          action: "eth_getCode",
                                          address: t.address,
                                          tag: t.blockTag
                                      });
                                  case "getStorageAt":
                                      return this.fetch("proxy", {
                                          action: "eth_getStorageAt",
                                          address: t.address,
                                          position: t.position,
                                          tag: t.blockTag
                                      });
                                  case "sendTransaction":
                                      return this.fetch("proxy", {
                                          action: "eth_sendRawTransaction",
                                          hex: t.signedTransaction
                                      }, !0).catch((e)=>fa("sendTransaction", e, t.signedTransaction));
                                  case "getBlock":
                                      if (t.blockTag) return this.fetch("proxy", {
                                          action: "eth_getBlockByNumber",
                                          tag: t.blockTag,
                                          boolean: t.includeTransactions ? "true" : "false"
                                      });
                                      throw new Error("getBlock by blockHash not implemented");
                                  case "getTransaction":
                                      return this.fetch("proxy", {
                                          action: "eth_getTransactionByHash",
                                          txhash: t.transactionHash
                                      });
                                  case "getTransactionReceipt":
                                      return this.fetch("proxy", {
                                          action: "eth_getTransactionReceipt",
                                          txhash: t.transactionHash
                                      });
                                  case "call":
                                      {
                                          if ("latest" !== t.blockTag) throw new Error("EtherscanProvider does not support blockTag for call");
                                          const e = la(t.transaction);
                                          e.module = "proxy", e.action = "eth_call";
                                          try {
                                              return yield this.fetch("proxy", e, !0);
                                          } catch (e) {
                                              return fa("call", e, t.transaction);
                                          }
                                      }
                                  case "estimateGas":
                                      {
                                          const e = la(t.transaction);
                                          e.module = "proxy", e.action = "eth_estimateGas";
                                          try {
                                              return yield this.fetch("proxy", e, !0);
                                          } catch (e) {
                                              return fa("estimateGas", e, t.transaction);
                                          }
                                      }
                                  case "getLogs":
                                      {
                                          const e = {
                                              action: "getLogs"
                                          };
                                          if (t.filter.fromBlock && (e.fromBlock = da(t.filter.fromBlock)), t.filter.toBlock && (e.toBlock = da(t.filter.toBlock)), t.filter.address && (e.address = t.filter.address), t.filter.topics && t.filter.topics.length > 0 && (t.filter.topics.length > 1 && aa.throwError("unsupported topic count", v.errors.UNSUPPORTED_OPERATION, {
                                              topics: t.filter.topics
                                          }), 1 === t.filter.topics.length)) {
                                              const r = t.filter.topics[0];
                                              "string" == typeof r && 66 === r.length || aa.throwError("unsupported topic format", v.errors.UNSUPPORTED_OPERATION, {
                                                  topic0: r
                                              }), e.topic0 = r;
                                          }
                                          const r = yield this.fetch("logs", e);
                                          let n = {};
                                          for(let e = 0; e < r.length; e++){
                                              const t = r[e];
                                              if (null == t.blockHash) {
                                                  if (null == n[t.blockNumber]) {
                                                      const e = yield this.getBlock(t.blockNumber);
                                                      e && (n[t.blockNumber] = e.hash);
                                                  }
                                                  t.blockHash = n[t.blockNumber];
                                              }
                                          }
                                          return r;
                                      }
                                  case "getEtherPrice":
                                      return "homestead" !== this.network.name ? 0 : parseFloat((yield this.fetch("stats", {
                                          action: "ethprice"
                                      })).ethusd);
                              }
                              return r.perform.call(this, e, t);
                          });
                      }
                      getHistory(e, t, r) {
                          return sa(this, void 0, void 0, function*() {
                              const n = {
                                  action: "txlist",
                                  address: yield this.resolveName(e),
                                  startblock: null == t ? 0 : t,
                                  endblock: null == r ? 99999999 : r,
                                  sort: "asc"
                              };
                              return (yield this.fetch("account", n)).map((e)=>{
                                  [
                                      "contractAddress",
                                      "to"
                                  ].forEach(function(t) {
                                      "" == e[t] && delete e[t];
                                  }), null == e.creates && null != e.contractAddress && (e.creates = e.contractAddress);
                                  const t = this.formatter.transactionResponse(e);
                                  return e.timeStamp && (t.timestamp = parseInt(e.timeStamp)), t;
                              });
                          });
                      }
                      isCommunityResource() {
                          return this.apiKey === ha;
                      }
                  }
                  function ma(e) {
                      for(let t = (e = e.slice()).length - 1; t > 0; t--){
                          const r = Math.floor(Math.random() * (t + 1)), n = e[t];
                          e[t] = e[r], e[r] = n;
                      }
                      return e;
                  }
                  var ya = function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  };
                  const ga = new v(ss);
                  function va() {
                      return (new Date).getTime();
                  }
                  function ba(e) {
                      let t = null;
                      for(let r = 0; r < e.length; r++){
                          const n = e[r];
                          if (null == n) return null;
                          t ? t.name === n.name && t.chainId === n.chainId && (t.ensAddress === n.ensAddress || null == t.ensAddress && null == n.ensAddress) || ga.throwArgumentError("provider mismatch", "networks", e) : t = n;
                      }
                      return t;
                  }
                  function wa(e, t) {
                      e = e.slice().sort();
                      const r = Math.floor(e.length / 2);
                      if (e.length % 2) return e[r];
                      const n = e[r - 1], i = e[r];
                      return null != t && Math.abs(n - i) > t ? null : (n + i) / 2;
                  }
                  function _a(e) {
                      if (null === e) return "null";
                      if ("number" == typeof e || "boolean" == typeof e) return JSON.stringify(e);
                      if ("string" == typeof e) return e;
                      if (H.isBigNumber(e)) return e.toString();
                      if (Array.isArray(e)) return JSON.stringify(e.map((e)=>_a(e)));
                      if ("object" == typeof e) {
                          const t = Object.keys(e);
                          return t.sort(), "{" + t.map((t)=>{
                              let r = e[t];
                              return r = "function" == typeof r ? "[function]" : _a(r), JSON.stringify(t) + ":" + r;
                          }).join(",") + "}";
                      }
                      throw new Error("unknown value type: " + typeof e);
                  }
                  let Sa = 1;
                  function Ea(e) {
                      let t = null, r = null, n = new Promise((n)=>{
                          t = function() {
                              r && (clearTimeout(r), r = null), n();
                          }, r = setTimeout(t, e);
                      });
                      return {
                          cancel: t,
                          getPromise: function() {
                              return n;
                          },
                          wait: (e)=>(n = n.then(e), n)
                      };
                  }
                  const ka = [
                      v.errors.CALL_EXCEPTION,
                      v.errors.INSUFFICIENT_FUNDS,
                      v.errors.NONCE_EXPIRED,
                      v.errors.REPLACEMENT_UNDERPRICED,
                      v.errors.UNPREDICTABLE_GAS_LIMIT
                  ], Aa = [
                      "address",
                      "args",
                      "errorArgs",
                      "errorSignature",
                      "method",
                      "transaction"
                  ];
                  function Pa(e, t) {
                      const r = {
                          weight: e.weight
                      };
                      return Object.defineProperty(r, "provider", {
                          get: ()=>e.provider
                      }), e.start && (r.start = e.start), t && (r.duration = t - e.start), e.done && (e.error ? r.error = e.error : r.result = e.result || null), r;
                  }
                  function Na(e, t) {
                      return ya(this, void 0, void 0, function*() {
                          const r = e.provider;
                          return null != r.blockNumber && r.blockNumber >= t || -1 === t ? r : ns(()=>new Promise((n, i)=>{
                                  setTimeout(function() {
                                      return r.blockNumber >= t ? n(r) : e.cancelled ? n(null) : n(void 0);
                                  }, 0);
                              }), {
                              oncePoll: r
                          });
                      });
                  }
                  function Ca(e, t, r, n) {
                      return ya(this, void 0, void 0, function*() {
                          let i = e.provider;
                          switch(r){
                              case "getBlockNumber":
                              case "getGasPrice":
                                  return i[r]();
                              case "getEtherPrice":
                                  if (i.getEtherPrice) return i.getEtherPrice();
                                  break;
                              case "getBalance":
                              case "getTransactionCount":
                              case "getCode":
                                  return n.blockTag && x(n.blockTag) && (i = yield Na(e, t)), i[r](n.address, n.blockTag || "latest");
                              case "getStorageAt":
                                  return n.blockTag && x(n.blockTag) && (i = yield Na(e, t)), i.getStorageAt(n.address, n.position, n.blockTag || "latest");
                              case "getBlock":
                                  return n.blockTag && x(n.blockTag) && (i = yield Na(e, t)), i[n.includeTransactions ? "getBlockWithTransactions" : "getBlock"](n.blockTag || n.blockHash);
                              case "call":
                              case "estimateGas":
                                  return n.blockTag && x(n.blockTag) && (i = yield Na(e, t)), i[r](n.transaction);
                              case "getTransaction":
                              case "getTransactionReceipt":
                                  return i[r](n.transactionHash);
                              case "getLogs":
                                  {
                                      let r = n.filter;
                                      return (r.fromBlock && x(r.fromBlock) || r.toBlock && x(r.toBlock)) && (i = yield Na(e, t)), i.getLogs(r);
                                  }
                          }
                          return ga.throwError("unknown method error", v.errors.UNKNOWN_ERROR, {
                              method: r,
                              params: n
                          });
                      });
                  }
                  class xa extends Bs {
                      constructor(e, t){
                          ga.checkNew(new.target, xa), 0 === e.length && ga.throwArgumentError("missing providers", "providers", e);
                          const r = e.map((e, t)=>{
                              if (nr.isProvider(e)) {
                                  const t = cs(e) ? 2e3 : 750, r = 1;
                                  return Object.freeze({
                                      provider: e,
                                      weight: 1,
                                      stallTimeout: t,
                                      priority: r
                                  });
                              }
                              const r = ie(e);
                              null == r.priority && (r.priority = 1), null == r.stallTimeout && (r.stallTimeout = cs(e) ? 2e3 : 750), null == r.weight && (r.weight = 1);
                              const n = r.weight;
                              return (n % 1 || n > 512 || n < 1) && ga.throwArgumentError("invalid weight; must be integer in [1, 512]", `providers[${t}].weight`, n), Object.freeze(r);
                          }), n = r.reduce((e, t)=>e + t.weight, 0);
                          null == t ? t = n / 2 : t > n && ga.throwArgumentError("quorum will always fail; larger than total weight", "quorum", t);
                          let i = ba(r.map((e)=>e.provider.network));
                          null == i && (i = new Promise((e, t)=>{
                              setTimeout(()=>{
                                  this.detectNetwork().then(e, t);
                              }, 0);
                          })), super(i), ee(this, "providerConfigs", Object.freeze(r)), ee(this, "quorum", t), this._highestBlockNumber = -1;
                      }
                      detectNetwork() {
                          return ya(this, void 0, void 0, function*() {
                              return ba((yield Promise.all(this.providerConfigs.map((e)=>e.provider.getNetwork()))));
                          });
                      }
                      perform(e, t) {
                          return ya(this, void 0, void 0, function*() {
                              if ("sendTransaction" === e) {
                                  const e = yield Promise.all(this.providerConfigs.map((e)=>e.provider.sendTransaction(t.signedTransaction).then((e)=>e.hash, (e)=>e)));
                                  for(let t = 0; t < e.length; t++){
                                      const r = e[t];
                                      if ("string" == typeof r) return r;
                                  }
                                  throw e[0];
                              }
                              -1 === this._highestBlockNumber && "getBlockNumber" !== e && (yield this.getBlockNumber());
                              const r = function(e, t, r) {
                                  let n = _a;
                                  switch(t){
                                      case "getBlockNumber":
                                          return function(t) {
                                              const r = t.map((e)=>e.result);
                                              let n = wa(t.map((e)=>e.result), 2);
                                              if (null != n) return n = Math.ceil(n), r.indexOf(n + 1) >= 0 && n++, n >= e._highestBlockNumber && (e._highestBlockNumber = n), e._highestBlockNumber;
                                          };
                                      case "getGasPrice":
                                          return function(e) {
                                              const t = e.map((e)=>e.result);
                                              return t.sort(), t[Math.floor(t.length / 2)];
                                          };
                                      case "getEtherPrice":
                                          return function(e) {
                                              return wa(e.map((e)=>e.result));
                                          };
                                      case "getBalance":
                                      case "getTransactionCount":
                                      case "getCode":
                                      case "getStorageAt":
                                      case "call":
                                      case "estimateGas":
                                      case "getLogs":
                                          break;
                                      case "getTransaction":
                                      case "getTransactionReceipt":
                                          n = function(e) {
                                              return null == e ? null : ((e = ie(e)).confirmations = -1, _a(e));
                                          };
                                          break;
                                      case "getBlock":
                                          n = r.includeTransactions ? function(e) {
                                              return null == e ? null : ((e = ie(e)).transactions = e.transactions.map((e)=>((e = ie(e)).confirmations = -1, e)), _a(e));
                                          } : function(e) {
                                              return null == e ? null : _a(e);
                                          };
                                          break;
                                      default:
                                          throw new Error("unknown method: " + t);
                                  }
                                  return function(e, t) {
                                      return function(r) {
                                          const n = {};
                                          r.forEach((t)=>{
                                              const r = e(t.result);
                                              n[r] || (n[r] = {
                                                  count: 0,
                                                  result: t.result
                                              }), n[r].count++;
                                          });
                                          const i = Object.keys(n);
                                          for(let e = 0; e < i.length; e++){
                                              const r = n[i[e]];
                                              if (r.count >= t) return r.result;
                                          }
                                      };
                                  }(n, e.quorum);
                              }(this, e, t), n = ma(this.providerConfigs.map(ie));
                              n.sort((e, t)=>e.priority - t.priority);
                              const i = this._highestBlockNumber;
                              let o = 0, s = !0;
                              for(;;){
                                  const a = va();
                                  let l = n.filter((e)=>e.runner && a - e.start < e.stallTimeout).reduce((e, t)=>e + t.weight, 0);
                                  for(; l < this.quorum && o < n.length;){
                                      const r = n[o++], s = Sa++;
                                      r.start = va(), r.staller = Ea(r.stallTimeout), r.staller.wait(()=>{
                                          r.staller = null;
                                      }), r.runner = Ca(r, i, e, t).then((n)=>{
                                          r.done = !0, r.result = n, this.listenerCount("debug") && this.emit("debug", {
                                              action: "request",
                                              rid: s,
                                              backend: Pa(r, va()),
                                              request: {
                                                  method: e,
                                                  params: le(t)
                                              },
                                              provider: this
                                          });
                                      }, (n)=>{
                                          r.done = !0, r.error = n, this.listenerCount("debug") && this.emit("debug", {
                                              action: "request",
                                              rid: s,
                                              backend: Pa(r, va()),
                                              request: {
                                                  method: e,
                                                  params: le(t)
                                              },
                                              provider: this
                                          });
                                      }), this.listenerCount("debug") && this.emit("debug", {
                                          action: "request",
                                          rid: s,
                                          backend: Pa(r, null),
                                          request: {
                                              method: e,
                                              params: le(t)
                                          },
                                          provider: this
                                      }), l += r.weight;
                                  }
                                  const u = [];
                                  n.forEach((e)=>{
                                      !e.done && e.runner && (u.push(e.runner), e.staller && u.push(e.staller.getPromise()));
                                  }), u.length && (yield Promise.race(u));
                                  const c = n.filter((e)=>e.done && null == e.error);
                                  if (c.length >= this.quorum) {
                                      const e = r(c);
                                      if (void 0 !== e) return n.forEach((e)=>{
                                          e.staller && e.staller.cancel(), e.cancelled = !0;
                                      }), e;
                                      s || (yield Ea(100).getPromise()), s = !1;
                                  }
                                  const d = n.reduce((e, t)=>{
                                      if (!t.done || null == t.error) return e;
                                      const r = t.error.code;
                                      return ka.indexOf(r) >= 0 && (e[r] || (e[r] = {
                                          error: t.error,
                                          weight: 0
                                      }), e[r].weight += t.weight), e;
                                  }, {});
                                  if (Object.keys(d).forEach((e)=>{
                                      const t = d[e];
                                      if (t.weight < this.quorum) return;
                                      n.forEach((e)=>{
                                          e.staller && e.staller.cancel(), e.cancelled = !0;
                                      });
                                      const r = t.error, i = {};
                                      Aa.forEach((e)=>{
                                          null != r[e] && (i[e] = r[e]);
                                      }), ga.throwError(r.reason || r.message, e, i);
                                  }), 0 === n.filter((e)=>!e.done).length) break;
                              }
                              return n.forEach((e)=>{
                                  e.staller && e.staller.cancel(), e.cancelled = !0;
                              }), ga.throwError("failed to meet quorum", v.errors.SERVER_ERROR, {
                                  method: e,
                                  params: t,
                                  results: n.map((e)=>Pa(e)),
                                  provider: this
                              });
                          });
                      }
                  }
                  const Ta = null, Ra = new v(ss), Oa = "84842078b09946638c03157f83405213";
                  class Ba extends Zs {
                      constructor(e, t){
                          const r = new Ia(e, t), n = r.connection;
                          n.password && Ra.throwError("INFURA WebSocket project secrets unsupported", v.errors.UNSUPPORTED_OPERATION, {
                              operation: "InfuraProvider.getWebSocketProvider()"
                          }), super(n.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/"), e), ee(this, "apiKey", r.projectId), ee(this, "projectId", r.projectId), ee(this, "projectSecret", r.projectSecret);
                      }
                      isCommunityResource() {
                          return this.projectId === Oa;
                      }
                  }
                  class Ia extends Ys {
                      static getWebSocketProvider(e, t) {
                          return new Ba(e, t);
                      }
                      static getApiKey(e) {
                          const t = {
                              apiKey: Oa,
                              projectId: Oa,
                              projectSecret: null
                          };
                          return null == e || ("string" == typeof e ? t.projectId = e : null != e.projectSecret ? (Ra.assertArgument("string" == typeof e.projectId, "projectSecret requires a projectId", "projectId", e.projectId), Ra.assertArgument("string" == typeof e.projectSecret, "invalid projectSecret", "projectSecret", "[REDACTED]"), t.projectId = e.projectId, t.projectSecret = e.projectSecret) : e.projectId && (t.projectId = e.projectId), t.apiKey = t.projectId), t;
                      }
                      static getUrl(e, t) {
                          let r = null;
                          switch(e ? e.name : "unknown"){
                              case "homestead":
                                  r = "mainnet.infura.io";
                                  break;
                              case "ropsten":
                                  r = "ropsten.infura.io";
                                  break;
                              case "rinkeby":
                                  r = "rinkeby.infura.io";
                                  break;
                              case "kovan":
                                  r = "kovan.infura.io";
                                  break;
                              case "goerli":
                                  r = "goerli.infura.io";
                                  break;
                              case "matic":
                                  r = "polygon-mainnet.infura.io";
                                  break;
                              case "maticmum":
                                  r = "polygon-mumbai.infura.io";
                                  break;
                              case "optimism":
                                  r = "optimism-mainnet.infura.io";
                                  break;
                              case "optimism-kovan":
                                  r = "optimism-kovan.infura.io";
                                  break;
                              case "arbitrum":
                                  r = "arbitrum-mainnet.infura.io";
                                  break;
                              case "arbitrum-rinkeby":
                                  r = "arbitrum-rinkeby.infura.io";
                                  break;
                              default:
                                  Ra.throwError("unsupported network", v.errors.INVALID_ARGUMENT, {
                                      argument: "network",
                                      value: e
                                  });
                          }
                          const n = {
                              allowGzip: !0,
                              url: "https://" + r + "/v3/" + t.projectId,
                              throttleCallback: (e, r)=>(t.projectId === Oa && hs(), Promise.resolve(!0))
                          };
                          return null != t.projectSecret && (n.user = "", n.password = t.projectSecret), n;
                      }
                      isCommunityResource() {
                          return this.projectId === Oa;
                      }
                  }
                  class Ma extends Ws {
                      send(e, t) {
                          const r = {
                              method: e,
                              params: t,
                              id: this._nextId++,
                              jsonrpc: "2.0"
                          };
                          null == this._pendingBatch && (this._pendingBatch = []);
                          const n = {
                              request: r,
                              resolve: null,
                              reject: null
                          }, i = new Promise((e, t)=>{
                              n.resolve = e, n.reject = t;
                          });
                          return this._pendingBatch.push(n), this._pendingBatchAggregator || (this._pendingBatchAggregator = setTimeout(()=>{
                              const e = this._pendingBatch;
                              this._pendingBatch = null, this._pendingBatchAggregator = null;
                              const t = e.map((e)=>e.request);
                              return this.emit("debug", {
                                  action: "requestBatch",
                                  request: le(t),
                                  provider: this
                              }), rs(this.connection, JSON.stringify(t)).then((r)=>{
                                  this.emit("debug", {
                                      action: "response",
                                      request: t,
                                      response: r,
                                      provider: this
                                  }), e.forEach((e, t)=>{
                                      const n = r[t];
                                      if (n.error) {
                                          const t = new Error(n.error.message);
                                          t.code = n.error.code, t.data = n.error.data, e.reject(t);
                                      } else e.resolve(n.result);
                                  });
                              }, (r)=>{
                                  this.emit("debug", {
                                      action: "response",
                                      error: r,
                                      request: t,
                                      provider: this
                                  }), e.forEach((e)=>{
                                      e.reject(r);
                                  });
                              });
                          }, 10)), i;
                      }
                  }
                  const Da = new v(ss);
                  class Ka extends Ys {
                      static getApiKey(e) {
                          return e && "string" != typeof e && Da.throwArgumentError("invalid apiKey", "apiKey", e), e || "ETHERS_JS_SHARED";
                      }
                      static getUrl(e, t) {
                          Da.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
                          let r = null;
                          switch(e.name){
                              case "homestead":
                                  r = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
                                  break;
                              case "ropsten":
                                  r = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
                                  break;
                              case "rinkeby":
                                  r = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
                                  break;
                              case "goerli":
                                  r = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
                                  break;
                              case "kovan":
                                  r = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
                                  break;
                              default:
                                  Da.throwArgumentError("unsupported network", "network", arguments[0]);
                          }
                          return r + "?apiKey=" + t;
                      }
                  }
                  const Ua = new v(ss), Fa = {
                      homestead: "6004bcd10040261633ade990",
                      ropsten: "6004bd4d0040261633ade991",
                      rinkeby: "6004bda20040261633ade994",
                      goerli: "6004bd860040261633ade992"
                  };
                  class ja extends Ys {
                      constructor(e, t){
                          if (null == t) {
                              const r = te(new.target, "getNetwork")(e);
                              if (r) {
                                  const e = Fa[r.name];
                                  e && (t = {
                                      applicationId: e,
                                      loadBalancer: !0
                                  });
                              }
                              null == t && Ua.throwError("unsupported network", v.errors.INVALID_ARGUMENT, {
                                  argument: "network",
                                  value: e
                              });
                          }
                          super(e, t);
                      }
                      static getApiKey(e) {
                          null == e && Ua.throwArgumentError("PocketProvider.getApiKey does not support null apiKey", "apiKey", e);
                          const t = {
                              applicationId: null,
                              loadBalancer: !1,
                              applicationSecretKey: null
                          };
                          return "string" == typeof e ? t.applicationId = e : null != e.applicationSecretKey ? (Ua.assertArgument("string" == typeof e.applicationId, "applicationSecretKey requires an applicationId", "applicationId", e.applicationId), Ua.assertArgument("string" == typeof e.applicationSecretKey, "invalid applicationSecretKey", "applicationSecretKey", "[REDACTED]"), t.applicationId = e.applicationId, t.applicationSecretKey = e.applicationSecretKey, t.loadBalancer = !!e.loadBalancer) : e.applicationId ? (Ua.assertArgument("string" == typeof e.applicationId, "apiKey.applicationId must be a string", "apiKey.applicationId", e.applicationId), t.applicationId = e.applicationId, t.loadBalancer = !!e.loadBalancer) : Ua.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", e), t;
                      }
                      static getUrl(e, t) {
                          let r = null;
                          switch(e ? e.name : "unknown"){
                              case "homestead":
                                  r = "eth-mainnet.gateway.pokt.network";
                                  break;
                              case "ropsten":
                                  r = "eth-ropsten.gateway.pokt.network";
                                  break;
                              case "rinkeby":
                                  r = "eth-rinkeby.gateway.pokt.network";
                                  break;
                              case "goerli":
                                  r = "eth-goerli.gateway.pokt.network";
                                  break;
                              default:
                                  Ua.throwError("unsupported network", v.errors.INVALID_ARGUMENT, {
                                      argument: "network",
                                      value: e
                                  });
                          }
                          let n = null;
                          n = t.loadBalancer ? `https://${r}/v1/lb/${t.applicationId}` : `https://${r}/v1/${t.applicationId}`;
                          const i = {
                              url: n,
                              headers: {}
                          };
                          return null != t.applicationSecretKey && (i.user = "", i.password = t.applicationSecretKey), i;
                      }
                      isCommunityResource() {
                          return this.applicationId === Fa[this.network.name];
                      }
                  }
                  const La = new v(ss);
                  let qa = 1;
                  function za(e, t) {
                      const r = "Web3LegacyFetcher";
                      return function(e, n) {
                          const i = {
                              method: e,
                              params: n,
                              id: qa++,
                              jsonrpc: "2.0"
                          };
                          return new Promise((e, n)=>{
                              this.emit("debug", {
                                  action: "request",
                                  fetcher: r,
                                  request: le(i),
                                  provider: this
                              }), t(i, (t, o)=>{
                                  if (t) return this.emit("debug", {
                                      action: "response",
                                      fetcher: r,
                                      error: t,
                                      request: i,
                                      provider: this
                                  }), n(t);
                                  if (this.emit("debug", {
                                      action: "response",
                                      fetcher: r,
                                      request: i,
                                      response: o,
                                      provider: this
                                  }), o.error) {
                                      const e = new Error(o.error.message);
                                      return e.code = o.error.code, e.data = o.error.data, n(e);
                                  }
                                  e(o.result);
                              });
                          });
                      };
                  }
                  class Va extends Ws {
                      constructor(e, t){
                          La.checkNew(new.target, Va), null == e && La.throwArgumentError("missing provider", "provider", e);
                          let r = null, n = null, i = null;
                          "function" == typeof e ? (r = "unknown:", n = e) : (r = e.host || e.path || "", !r && e.isMetaMask && (r = "metamask"), i = e, e.request ? ("" === r && (r = "eip-1193:"), n = function(e) {
                              return function(t, r) {
                                  null == r && (r = []);
                                  const n = {
                                      method: t,
                                      params: r
                                  };
                                  return this.emit("debug", {
                                      action: "request",
                                      fetcher: "Eip1193Fetcher",
                                      request: le(n),
                                      provider: this
                                  }), e.request(n).then((e)=>(this.emit("debug", {
                                          action: "response",
                                          fetcher: "Eip1193Fetcher",
                                          request: n,
                                          response: e,
                                          provider: this
                                      }), e), (e)=>{
                                      throw this.emit("debug", {
                                          action: "response",
                                          fetcher: "Eip1193Fetcher",
                                          request: n,
                                          error: e,
                                          provider: this
                                      }), e;
                                  });
                              };
                          }(e)) : e.sendAsync ? n = za(0, e.sendAsync.bind(e)) : e.send ? n = za(0, e.send.bind(e)) : La.throwArgumentError("unsupported provider", "provider", e), r || (r = "unknown:")), super(r, t), ee(this, "jsonRpcFetchFunc", n), ee(this, "provider", i);
                      }
                      send(e, t) {
                          return this.jsonRpcFetchFunc(e, t);
                      }
                  }
                  const Wa = new v(ss);
                  function Ga(e, t) {
                      if (null == e && (e = "homestead"), "string" == typeof e) {
                          const t = e.match(/^(ws|http)s?:/i);
                          if (t) switch(t[1]){
                              case "http":
                                  return new Ws(e);
                              case "ws":
                                  return new Zs(e);
                              default:
                                  Wa.throwArgumentError("unsupported URL scheme", "network", e);
                          }
                      }
                      const r = Oo(e);
                      return r && r._defaultProvider || Wa.throwError("unsupported getDefaultProvider network", v.errors.NETWORK_ERROR, {
                          operation: "getDefaultProvider",
                          network: e
                      }), r._defaultProvider({
                          FallbackProvider: xa,
                          AlchemyProvider: na,
                          CloudflareProvider: oa,
                          EtherscanProvider: pa,
                          InfuraProvider: Ia,
                          JsonRpcProvider: Ws,
                          NodesmithProvider: Ka,
                          PocketProvider: ja,
                          Web3Provider: Va,
                          IpcProvider: Ta
                      }, t);
                  }
                  const Ja = new RegExp("^bytes([0-9]+)$"), Ha = new RegExp("^(u?int)([0-9]*)$"), $a = new RegExp("^(.*)\\[([0-9]*)\\]$"), Za = new v("solidity/5.5.0");
                  function Xa(e, t, r) {
                      switch(e){
                          case "address":
                              return r ? C(t, 32) : A(t);
                          case "string":
                              return Ve(t);
                          case "bytes":
                              return A(t);
                          case "bool":
                              return t = t ? "0x01" : "0x00", r ? C(t, 32) : A(t);
                      }
                      let n = e.match(Ha);
                      if (n) {
                          let i = parseInt(n[2] || "256");
                          return (n[2] && String(i) !== n[2] || i % 8 != 0 || 0 === i || i > 256) && Za.throwArgumentError("invalid number type", "type", e), r && (i = 256), C(t = H.from(t).toTwos(i), i / 8);
                      }
                      if (n = e.match(Ja), n) {
                          const i = parseInt(n[1]);
                          return (String(i) !== n[1] || 0 === i || i > 32) && Za.throwArgumentError("invalid bytes type", "type", e), A(t).byteLength !== i && Za.throwArgumentError(`invalid value for ${e}`, "value", t), r ? A((t + "0000000000000000000000000000000000000000000000000000000000000000").substring(0, 66)) : t;
                      }
                      if (n = e.match($a), n && Array.isArray(t)) {
                          const r = n[1];
                          parseInt(n[2] || String(t.length)) != t.length && Za.throwArgumentError(`invalid array length for ${e}`, "value", t);
                          const i = [];
                          return t.forEach(function(e) {
                              i.push(Xa(r, e, !0));
                          }), P(i);
                      }
                      return Za.throwArgumentError("invalid type", "type", e);
                  }
                  function Qa(e, t) {
                      e.length != t.length && Za.throwArgumentError("wrong number of values; expected ${ types.length }", "values", t);
                      const r = [];
                      return e.forEach(function(e, n) {
                          r.push(Xa(e, t[n]));
                      }), R(P(r));
                  }
                  function Ya(e, t) {
                      return ve(Qa(e, t));
                  }
                  function el(e, t) {
                      return yi(Qa(e, t));
                  }
                  function tl(e) {
                      const t = Ve(e);
                      if (t.length > 31) throw new Error("bytes32 string must be less than 32 bytes");
                      return R(P([
                          t,
                          Eo
                      ]).slice(0, 32));
                  }
                  function rl(e) {
                      const t = A(e);
                      if (32 !== t.length) throw new Error("invalid bytes32 - not 32 bytes long");
                      if (0 !== t[31]) throw new Error("invalid bytes32 string - no null terminator");
                      let r = 31;
                      for(; 0 === t[r - 1];)r--;
                      return He(t.slice(0, r));
                  }
                  const nl = new v("units/5.5.0"), il = [
                      "wei",
                      "kwei",
                      "mwei",
                      "gwei",
                      "szabo",
                      "finney",
                      "ether"
                  ];
                  function ol(e) {
                      const t = String(e).split(".");
                      (t.length > 2 || !t[0].match(/^-?[0-9]*$/) || t[1] && !t[1].match(/^[0-9]*$/) || "." === e || "-." === e) && nl.throwArgumentError("invalid value", "value", e);
                      let r = t[0], n = "";
                      for("-" === r.substring(0, 1) && (n = "-", r = r.substring(1)); "0" === r.substring(0, 1);)r = r.substring(1);
                      "" === r && (r = "0");
                      let i = "";
                      for(2 === t.length && (i = "." + (t[1] || "0")); i.length > 2 && "0" === i[i.length - 1];)i = i.substring(0, i.length - 1);
                      const o = [];
                      for(; r.length;){
                          if (r.length <= 3) {
                              o.unshift(r);
                              break;
                          }
                          {
                              const e = r.length - 3;
                              o.unshift(r.substring(e)), r = r.substring(0, e);
                          }
                      }
                      return n + o.join(",") + i;
                  }
                  function sl(e, t) {
                      if ("string" == typeof t) {
                          const e = il.indexOf(t);
                          -1 !== e && (t = 3 * e);
                      }
                      return qn(e, null != t ? t : 18);
                  }
                  function al(e, t) {
                      if ("string" != typeof e && nl.throwArgumentError("value must be a string", "value", e), "string" == typeof t) {
                          const e = il.indexOf(t);
                          -1 !== e && (t = 3 * e);
                      }
                      return zn(e, null != t ? t : 18);
                  }
                  function ll(e) {
                      return sl(e, 18);
                  }
                  function ul(e) {
                      return al(e, 18);
                  }
                  const cl = "ethers/5.5.3", dl = new v(cl);
                  try {
                      const e = window;
                      null == e._ethers && (e._ethers = l);
                  } catch (e) {}
              },
              3715: (e, t, r)=>{
                  var n = t;
                  n.utils = r(6436), n.common = r(5772), n.sha = r(9041), n.ripemd = r(2949), n.hmac = r(2344), n.sha1 = n.sha.sha1, n.sha256 = n.sha.sha256, n.sha224 = n.sha.sha224, n.sha384 = n.sha.sha384, n.sha512 = n.sha.sha512, n.ripemd160 = n.ripemd.ripemd160;
              },
              5772: (e, t, r)=>{
                  "use strict";
                  var n = r(6436), i = r(9746);
                  function o() {
                      this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = "big", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;
                  }
                  t.BlockHash = o, o.prototype.update = function(e, t) {
                      if (e = n.toArray(e, t), this.pending ? this.pending = this.pending.concat(e) : this.pending = e, this.pendingTotal += e.length, this.pending.length >= this._delta8) {
                          var r = (e = this.pending).length % this._delta8;
                          this.pending = e.slice(e.length - r, e.length), 0 === this.pending.length && (this.pending = null), e = n.join32(e, 0, e.length - r, this.endian);
                          for(var i = 0; i < e.length; i += this._delta32)this._update(e, i, i + this._delta32);
                      }
                      return this;
                  }, o.prototype.digest = function(e) {
                      return this.update(this._pad()), i(null === this.pending), this._digest(e);
                  }, o.prototype._pad = function() {
                      var e = this.pendingTotal, t = this._delta8, r = t - (e + this.padLength) % t, n = new Array(r + this.padLength);
                      n[0] = 128;
                      for(var i = 1; i < r; i++)n[i] = 0;
                      if (e <<= 3, "big" === this.endian) {
                          for(var o = 8; o < this.padLength; o++)n[i++] = 0;
                          n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = e >>> 24 & 255, n[i++] = e >>> 16 & 255, n[i++] = e >>> 8 & 255, n[i++] = 255 & e;
                      } else for(n[i++] = 255 & e, n[i++] = e >>> 8 & 255, n[i++] = e >>> 16 & 255, n[i++] = e >>> 24 & 255, n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = 0, o = 8; o < this.padLength; o++)n[i++] = 0;
                      return n;
                  };
              },
              2344: (e, t, r)=>{
                  "use strict";
                  var n = r(6436), i = r(9746);
                  function o(e, t, r) {
                      if (!(this instanceof o)) return new o(e, t, r);
                      this.Hash = e, this.blockSize = e.blockSize / 8, this.outSize = e.outSize / 8, this.inner = null, this.outer = null, this._init(n.toArray(t, r));
                  }
                  e.exports = o, o.prototype._init = function(e) {
                      e.length > this.blockSize && (e = (new this.Hash).update(e).digest()), i(e.length <= this.blockSize);
                      for(var t = e.length; t < this.blockSize; t++)e.push(0);
                      for(t = 0; t < e.length; t++)e[t] ^= 54;
                      for(this.inner = (new this.Hash).update(e), t = 0; t < e.length; t++)e[t] ^= 106;
                      this.outer = (new this.Hash).update(e);
                  }, o.prototype.update = function(e, t) {
                      return this.inner.update(e, t), this;
                  }, o.prototype.digest = function(e) {
                      return this.outer.update(this.inner.digest()), this.outer.digest(e);
                  };
              },
              2949: (e, t, r)=>{
                  "use strict";
                  var n = r(6436), i = r(5772), o = n.rotl32, s = n.sum32, a = n.sum32_3, l = n.sum32_4, u = i.BlockHash;
                  function c() {
                      if (!(this instanceof c)) return new c;
                      u.call(this), this.h = [
                          1732584193,
                          4023233417,
                          2562383102,
                          271733878,
                          3285377520
                      ], this.endian = "little";
                  }
                  function d(e, t, r, n) {
                      return e <= 15 ? t ^ r ^ n : e <= 31 ? t & r | ~t & n : e <= 47 ? (t | ~r) ^ n : e <= 63 ? t & n | r & ~n : t ^ (r | ~n);
                  }
                  function h(e) {
                      return e <= 15 ? 0 : e <= 31 ? 1518500249 : e <= 47 ? 1859775393 : e <= 63 ? 2400959708 : 2840853838;
                  }
                  function f(e) {
                      return e <= 15 ? 1352829926 : e <= 31 ? 1548603684 : e <= 47 ? 1836072691 : e <= 63 ? 2053994217 : 0;
                  }
                  n.inherits(c, u), t.ripemd160 = c, c.blockSize = 512, c.outSize = 160, c.hmacStrength = 192, c.padLength = 64, c.prototype._update = function(e, t) {
                      for(var r = this.h[0], n = this.h[1], i = this.h[2], u = this.h[3], c = this.h[4], v = r, b = n, w = i, _ = u, S = c, E = 0; E < 80; E++){
                          var k = s(o(l(r, d(E, n, i, u), e[p[E] + t], h(E)), y[E]), c);
                          r = c, c = u, u = o(i, 10), i = n, n = k, k = s(o(l(v, d(79 - E, b, w, _), e[m[E] + t], f(E)), g[E]), S), v = S, S = _, _ = o(w, 10), w = b, b = k;
                      }
                      k = a(this.h[1], i, _), this.h[1] = a(this.h[2], u, S), this.h[2] = a(this.h[3], c, v), this.h[3] = a(this.h[4], r, b), this.h[4] = a(this.h[0], n, w), this.h[0] = k;
                  }, c.prototype._digest = function(e) {
                      return "hex" === e ? n.toHex32(this.h, "little") : n.split32(this.h, "little");
                  };
                  var p = [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15,
                      7,
                      4,
                      13,
                      1,
                      10,
                      6,
                      15,
                      3,
                      12,
                      0,
                      9,
                      5,
                      2,
                      14,
                      11,
                      8,
                      3,
                      10,
                      14,
                      4,
                      9,
                      15,
                      8,
                      1,
                      2,
                      7,
                      0,
                      6,
                      13,
                      11,
                      5,
                      12,
                      1,
                      9,
                      11,
                      10,
                      0,
                      8,
                      12,
                      4,
                      13,
                      3,
                      7,
                      15,
                      14,
                      5,
                      6,
                      2,
                      4,
                      0,
                      5,
                      9,
                      7,
                      12,
                      2,
                      10,
                      14,
                      1,
                      3,
                      8,
                      11,
                      6,
                      15,
                      13
                  ], m = [
                      5,
                      14,
                      7,
                      0,
                      9,
                      2,
                      11,
                      4,
                      13,
                      6,
                      15,
                      8,
                      1,
                      10,
                      3,
                      12,
                      6,
                      11,
                      3,
                      7,
                      0,
                      13,
                      5,
                      10,
                      14,
                      15,
                      8,
                      12,
                      4,
                      9,
                      1,
                      2,
                      15,
                      5,
                      1,
                      3,
                      7,
                      14,
                      6,
                      9,
                      11,
                      8,
                      12,
                      2,
                      10,
                      0,
                      4,
                      13,
                      8,
                      6,
                      4,
                      1,
                      3,
                      11,
                      15,
                      0,
                      5,
                      12,
                      2,
                      13,
                      9,
                      7,
                      10,
                      14,
                      12,
                      15,
                      10,
                      4,
                      1,
                      5,
                      8,
                      7,
                      6,
                      2,
                      13,
                      14,
                      0,
                      3,
                      9,
                      11
                  ], y = [
                      11,
                      14,
                      15,
                      12,
                      5,
                      8,
                      7,
                      9,
                      11,
                      13,
                      14,
                      15,
                      6,
                      7,
                      9,
                      8,
                      7,
                      6,
                      8,
                      13,
                      11,
                      9,
                      7,
                      15,
                      7,
                      12,
                      15,
                      9,
                      11,
                      7,
                      13,
                      12,
                      11,
                      13,
                      6,
                      7,
                      14,
                      9,
                      13,
                      15,
                      14,
                      8,
                      13,
                      6,
                      5,
                      12,
                      7,
                      5,
                      11,
                      12,
                      14,
                      15,
                      14,
                      15,
                      9,
                      8,
                      9,
                      14,
                      5,
                      6,
                      8,
                      6,
                      5,
                      12,
                      9,
                      15,
                      5,
                      11,
                      6,
                      8,
                      13,
                      12,
                      5,
                      12,
                      13,
                      14,
                      11,
                      8,
                      5,
                      6
                  ], g = [
                      8,
                      9,
                      9,
                      11,
                      13,
                      15,
                      15,
                      5,
                      7,
                      7,
                      8,
                      11,
                      14,
                      14,
                      12,
                      6,
                      9,
                      13,
                      15,
                      7,
                      12,
                      8,
                      9,
                      11,
                      7,
                      7,
                      12,
                      7,
                      6,
                      15,
                      13,
                      11,
                      9,
                      7,
                      15,
                      11,
                      8,
                      6,
                      6,
                      14,
                      12,
                      13,
                      5,
                      14,
                      13,
                      13,
                      7,
                      5,
                      15,
                      5,
                      8,
                      11,
                      14,
                      14,
                      6,
                      14,
                      6,
                      9,
                      12,
                      9,
                      12,
                      5,
                      15,
                      8,
                      8,
                      5,
                      12,
                      9,
                      12,
                      5,
                      14,
                      6,
                      8,
                      13,
                      6,
                      5,
                      15,
                      13,
                      11,
                      11
                  ];
              },
              9041: (e, t, r)=>{
                  "use strict";
                  t.sha1 = r(4761), t.sha224 = r(799), t.sha256 = r(9344), t.sha384 = r(772), t.sha512 = r(5900);
              },
              4761: (e, t, r)=>{
                  "use strict";
                  var n = r(6436), i = r(5772), o = r(7038), s = n.rotl32, a = n.sum32, l = n.sum32_5, u = o.ft_1, c = i.BlockHash, d = [
                      1518500249,
                      1859775393,
                      2400959708,
                      3395469782
                  ];
                  function h() {
                      if (!(this instanceof h)) return new h;
                      c.call(this), this.h = [
                          1732584193,
                          4023233417,
                          2562383102,
                          271733878,
                          3285377520
                      ], this.W = new Array(80);
                  }
                  n.inherits(h, c), e.exports = h, h.blockSize = 512, h.outSize = 160, h.hmacStrength = 80, h.padLength = 64, h.prototype._update = function(e, t) {
                      for(var r = this.W, n = 0; n < 16; n++)r[n] = e[t + n];
                      for(; n < r.length; n++)r[n] = s(r[n - 3] ^ r[n - 8] ^ r[n - 14] ^ r[n - 16], 1);
                      var i = this.h[0], o = this.h[1], c = this.h[2], h = this.h[3], f = this.h[4];
                      for(n = 0; n < r.length; n++){
                          var p = ~~(n / 20), m = l(s(i, 5), u(p, o, c, h), f, r[n], d[p]);
                          f = h, h = c, c = s(o, 30), o = i, i = m;
                      }
                      this.h[0] = a(this.h[0], i), this.h[1] = a(this.h[1], o), this.h[2] = a(this.h[2], c), this.h[3] = a(this.h[3], h), this.h[4] = a(this.h[4], f);
                  }, h.prototype._digest = function(e) {
                      return "hex" === e ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
                  };
              },
              799: (e, t, r)=>{
                  "use strict";
                  var n = r(6436), i = r(9344);
                  function o() {
                      if (!(this instanceof o)) return new o;
                      i.call(this), this.h = [
                          3238371032,
                          914150663,
                          812702999,
                          4144912697,
                          4290775857,
                          1750603025,
                          1694076839,
                          3204075428
                      ];
                  }
                  n.inherits(o, i), e.exports = o, o.blockSize = 512, o.outSize = 224, o.hmacStrength = 192, o.padLength = 64, o.prototype._digest = function(e) {
                      return "hex" === e ? n.toHex32(this.h.slice(0, 7), "big") : n.split32(this.h.slice(0, 7), "big");
                  };
              },
              9344: (e, t, r)=>{
                  "use strict";
                  var n = r(6436), i = r(5772), o = r(7038), s = r(9746), a = n.sum32, l = n.sum32_4, u = n.sum32_5, c = o.ch32, d = o.maj32, h = o.s0_256, f = o.s1_256, p = o.g0_256, m = o.g1_256, y = i.BlockHash, g = [
                      1116352408,
                      1899447441,
                      3049323471,
                      3921009573,
                      961987163,
                      1508970993,
                      2453635748,
                      2870763221,
                      3624381080,
                      310598401,
                      607225278,
                      1426881987,
                      1925078388,
                      2162078206,
                      2614888103,
                      3248222580,
                      3835390401,
                      4022224774,
                      264347078,
                      604807628,
                      770255983,
                      1249150122,
                      1555081692,
                      1996064986,
                      2554220882,
                      2821834349,
                      2952996808,
                      3210313671,
                      3336571891,
                      3584528711,
                      113926993,
                      338241895,
                      666307205,
                      773529912,
                      1294757372,
                      1396182291,
                      1695183700,
                      1986661051,
                      2177026350,
                      2456956037,
                      2730485921,
                      2820302411,
                      3259730800,
                      3345764771,
                      3516065817,
                      3600352804,
                      4094571909,
                      275423344,
                      430227734,
                      506948616,
                      659060556,
                      883997877,
                      958139571,
                      1322822218,
                      1537002063,
                      1747873779,
                      1955562222,
                      2024104815,
                      2227730452,
                      2361852424,
                      2428436474,
                      2756734187,
                      3204031479,
                      3329325298
                  ];
                  function v() {
                      if (!(this instanceof v)) return new v;
                      y.call(this), this.h = [
                          1779033703,
                          3144134277,
                          1013904242,
                          2773480762,
                          1359893119,
                          2600822924,
                          528734635,
                          1541459225
                      ], this.k = g, this.W = new Array(64);
                  }
                  n.inherits(v, y), e.exports = v, v.blockSize = 512, v.outSize = 256, v.hmacStrength = 192, v.padLength = 64, v.prototype._update = function(e, t) {
                      for(var r = this.W, n = 0; n < 16; n++)r[n] = e[t + n];
                      for(; n < r.length; n++)r[n] = l(m(r[n - 2]), r[n - 7], p(r[n - 15]), r[n - 16]);
                      var i = this.h[0], o = this.h[1], y = this.h[2], g = this.h[3], v = this.h[4], b = this.h[5], w = this.h[6], _ = this.h[7];
                      for(s(this.k.length === r.length), n = 0; n < r.length; n++){
                          var S = u(_, f(v), c(v, b, w), this.k[n], r[n]), E = a(h(i), d(i, o, y));
                          _ = w, w = b, b = v, v = a(g, S), g = y, y = o, o = i, i = a(S, E);
                      }
                      this.h[0] = a(this.h[0], i), this.h[1] = a(this.h[1], o), this.h[2] = a(this.h[2], y), this.h[3] = a(this.h[3], g), this.h[4] = a(this.h[4], v), this.h[5] = a(this.h[5], b), this.h[6] = a(this.h[6], w), this.h[7] = a(this.h[7], _);
                  }, v.prototype._digest = function(e) {
                      return "hex" === e ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
                  };
              },
              772: (e, t, r)=>{
                  "use strict";
                  var n = r(6436), i = r(5900);
                  function o() {
                      if (!(this instanceof o)) return new o;
                      i.call(this), this.h = [
                          3418070365,
                          3238371032,
                          1654270250,
                          914150663,
                          2438529370,
                          812702999,
                          355462360,
                          4144912697,
                          1731405415,
                          4290775857,
                          2394180231,
                          1750603025,
                          3675008525,
                          1694076839,
                          1203062813,
                          3204075428
                      ];
                  }
                  n.inherits(o, i), e.exports = o, o.blockSize = 1024, o.outSize = 384, o.hmacStrength = 192, o.padLength = 128, o.prototype._digest = function(e) {
                      return "hex" === e ? n.toHex32(this.h.slice(0, 12), "big") : n.split32(this.h.slice(0, 12), "big");
                  };
              },
              5900: (e, t, r)=>{
                  "use strict";
                  var n = r(6436), i = r(5772), o = r(9746), s = n.rotr64_hi, a = n.rotr64_lo, l = n.shr64_hi, u = n.shr64_lo, c = n.sum64, d = n.sum64_hi, h = n.sum64_lo, f = n.sum64_4_hi, p = n.sum64_4_lo, m = n.sum64_5_hi, y = n.sum64_5_lo, g = i.BlockHash, v = [
                      1116352408,
                      3609767458,
                      1899447441,
                      602891725,
                      3049323471,
                      3964484399,
                      3921009573,
                      2173295548,
                      961987163,
                      4081628472,
                      1508970993,
                      3053834265,
                      2453635748,
                      2937671579,
                      2870763221,
                      3664609560,
                      3624381080,
                      2734883394,
                      310598401,
                      1164996542,
                      607225278,
                      1323610764,
                      1426881987,
                      3590304994,
                      1925078388,
                      4068182383,
                      2162078206,
                      991336113,
                      2614888103,
                      633803317,
                      3248222580,
                      3479774868,
                      3835390401,
                      2666613458,
                      4022224774,
                      944711139,
                      264347078,
                      2341262773,
                      604807628,
                      2007800933,
                      770255983,
                      1495990901,
                      1249150122,
                      1856431235,
                      1555081692,
                      3175218132,
                      1996064986,
                      2198950837,
                      2554220882,
                      3999719339,
                      2821834349,
                      766784016,
                      2952996808,
                      2566594879,
                      3210313671,
                      3203337956,
                      3336571891,
                      1034457026,
                      3584528711,
                      2466948901,
                      113926993,
                      3758326383,
                      338241895,
                      168717936,
                      666307205,
                      1188179964,
                      773529912,
                      1546045734,
                      1294757372,
                      1522805485,
                      1396182291,
                      2643833823,
                      1695183700,
                      2343527390,
                      1986661051,
                      1014477480,
                      2177026350,
                      1206759142,
                      2456956037,
                      344077627,
                      2730485921,
                      1290863460,
                      2820302411,
                      3158454273,
                      3259730800,
                      3505952657,
                      3345764771,
                      106217008,
                      3516065817,
                      3606008344,
                      3600352804,
                      1432725776,
                      4094571909,
                      1467031594,
                      275423344,
                      851169720,
                      430227734,
                      3100823752,
                      506948616,
                      1363258195,
                      659060556,
                      3750685593,
                      883997877,
                      3785050280,
                      958139571,
                      3318307427,
                      1322822218,
                      3812723403,
                      1537002063,
                      2003034995,
                      1747873779,
                      3602036899,
                      1955562222,
                      1575990012,
                      2024104815,
                      1125592928,
                      2227730452,
                      2716904306,
                      2361852424,
                      442776044,
                      2428436474,
                      593698344,
                      2756734187,
                      3733110249,
                      3204031479,
                      2999351573,
                      3329325298,
                      3815920427,
                      3391569614,
                      3928383900,
                      3515267271,
                      566280711,
                      3940187606,
                      3454069534,
                      4118630271,
                      4000239992,
                      116418474,
                      1914138554,
                      174292421,
                      2731055270,
                      289380356,
                      3203993006,
                      460393269,
                      320620315,
                      685471733,
                      587496836,
                      852142971,
                      1086792851,
                      1017036298,
                      365543100,
                      1126000580,
                      2618297676,
                      1288033470,
                      3409855158,
                      1501505948,
                      4234509866,
                      1607167915,
                      987167468,
                      1816402316,
                      1246189591
                  ];
                  function b() {
                      if (!(this instanceof b)) return new b;
                      g.call(this), this.h = [
                          1779033703,
                          4089235720,
                          3144134277,
                          2227873595,
                          1013904242,
                          4271175723,
                          2773480762,
                          1595750129,
                          1359893119,
                          2917565137,
                          2600822924,
                          725511199,
                          528734635,
                          4215389547,
                          1541459225,
                          327033209
                      ], this.k = v, this.W = new Array(160);
                  }
                  function w(e, t, r, n, i) {
                      var o = e & r ^ ~e & i;
                      return o < 0 && (o += 4294967296), o;
                  }
                  function _(e, t, r, n, i, o) {
                      var s = t & n ^ ~t & o;
                      return s < 0 && (s += 4294967296), s;
                  }
                  function S(e, t, r, n, i) {
                      var o = e & r ^ e & i ^ r & i;
                      return o < 0 && (o += 4294967296), o;
                  }
                  function E(e, t, r, n, i, o) {
                      var s = t & n ^ t & o ^ n & o;
                      return s < 0 && (s += 4294967296), s;
                  }
                  function k(e, t) {
                      var r = s(e, t, 28) ^ s(t, e, 2) ^ s(t, e, 7);
                      return r < 0 && (r += 4294967296), r;
                  }
                  function A(e, t) {
                      var r = a(e, t, 28) ^ a(t, e, 2) ^ a(t, e, 7);
                      return r < 0 && (r += 4294967296), r;
                  }
                  function P(e, t) {
                      var r = a(e, t, 14) ^ a(e, t, 18) ^ a(t, e, 9);
                      return r < 0 && (r += 4294967296), r;
                  }
                  function N(e, t) {
                      var r = s(e, t, 1) ^ s(e, t, 8) ^ l(e, t, 7);
                      return r < 0 && (r += 4294967296), r;
                  }
                  function C(e, t) {
                      var r = a(e, t, 1) ^ a(e, t, 8) ^ u(e, t, 7);
                      return r < 0 && (r += 4294967296), r;
                  }
                  function x(e, t) {
                      var r = a(e, t, 19) ^ a(t, e, 29) ^ u(e, t, 6);
                      return r < 0 && (r += 4294967296), r;
                  }
                  n.inherits(b, g), e.exports = b, b.blockSize = 1024, b.outSize = 512, b.hmacStrength = 192, b.padLength = 128, b.prototype._prepareBlock = function(e, t) {
                      for(var r = this.W, n = 0; n < 32; n++)r[n] = e[t + n];
                      for(; n < r.length; n += 2){
                          var i = (y = r[n - 4], g = r[n - 3], v = void 0, (v = s(y, g, 19) ^ s(g, y, 29) ^ l(y, g, 6)) < 0 && (v += 4294967296), v), o = x(r[n - 4], r[n - 3]), a = r[n - 14], u = r[n - 13], c = N(r[n - 30], r[n - 29]), d = C(r[n - 30], r[n - 29]), h = r[n - 32], m = r[n - 31];
                          r[n] = f(i, o, a, u, c, d, h, m), r[n + 1] = p(i, o, a, u, c, d, h, m);
                      }
                      var y, g, v;
                  }, b.prototype._update = function(e, t) {
                      this._prepareBlock(e, t);
                      var r, n, i, a = this.W, l = this.h[0], u = this.h[1], f = this.h[2], p = this.h[3], g = this.h[4], v = this.h[5], b = this.h[6], N = this.h[7], C = this.h[8], x = this.h[9], T = this.h[10], R = this.h[11], O = this.h[12], B = this.h[13], I = this.h[14], M = this.h[15];
                      o(this.k.length === a.length);
                      for(var D = 0; D < a.length; D += 2){
                          var K = I, U = M, F = (i = void 0, (i = s(r = C, n = x, 14) ^ s(r, n, 18) ^ s(n, r, 9)) < 0 && (i += 4294967296), i), j = P(C, x), L = w(C, 0, T, 0, O), q = _(0, x, 0, R, 0, B), z = this.k[D], V = this.k[D + 1], W = a[D], G = a[D + 1], J = m(K, U, F, j, L, q, z, V, W, G), H = y(K, U, F, j, L, q, z, V, W, G);
                          K = k(l, u), U = A(l, u), F = S(l, 0, f, 0, g), j = E(0, u, 0, p, 0, v);
                          var $ = d(K, U, F, j), Z = h(K, U, F, j);
                          I = O, M = B, O = T, B = R, T = C, R = x, C = d(b, N, J, H), x = h(N, N, J, H), b = g, N = v, g = f, v = p, f = l, p = u, l = d(J, H, $, Z), u = h(J, H, $, Z);
                      }
                      c(this.h, 0, l, u), c(this.h, 2, f, p), c(this.h, 4, g, v), c(this.h, 6, b, N), c(this.h, 8, C, x), c(this.h, 10, T, R), c(this.h, 12, O, B), c(this.h, 14, I, M);
                  }, b.prototype._digest = function(e) {
                      return "hex" === e ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
                  };
              },
              7038: (e, t, r)=>{
                  "use strict";
                  var n = r(6436).rotr32;
                  function i(e, t, r) {
                      return e & t ^ ~e & r;
                  }
                  function o(e, t, r) {
                      return e & t ^ e & r ^ t & r;
                  }
                  function s(e, t, r) {
                      return e ^ t ^ r;
                  }
                  t.ft_1 = function(e, t, r, n) {
                      return 0 === e ? i(t, r, n) : 1 === e || 3 === e ? s(t, r, n) : 2 === e ? o(t, r, n) : void 0;
                  }, t.ch32 = i, t.maj32 = o, t.p32 = s, t.s0_256 = function(e) {
                      return n(e, 2) ^ n(e, 13) ^ n(e, 22);
                  }, t.s1_256 = function(e) {
                      return n(e, 6) ^ n(e, 11) ^ n(e, 25);
                  }, t.g0_256 = function(e) {
                      return n(e, 7) ^ n(e, 18) ^ e >>> 3;
                  }, t.g1_256 = function(e) {
                      return n(e, 17) ^ n(e, 19) ^ e >>> 10;
                  };
              },
              6436: (e, t, r)=>{
                  "use strict";
                  var n = r(9746), i = r(5717);
                  function o(e, t) {
                      return 55296 == (64512 & e.charCodeAt(t)) && !(t < 0 || t + 1 >= e.length) && 56320 == (64512 & e.charCodeAt(t + 1));
                  }
                  function s(e) {
                      return (e >>> 24 | e >>> 8 & 65280 | e << 8 & 16711680 | (255 & e) << 24) >>> 0;
                  }
                  function a(e) {
                      return 1 === e.length ? "0" + e : e;
                  }
                  function l(e) {
                      return 7 === e.length ? "0" + e : 6 === e.length ? "00" + e : 5 === e.length ? "000" + e : 4 === e.length ? "0000" + e : 3 === e.length ? "00000" + e : 2 === e.length ? "000000" + e : 1 === e.length ? "0000000" + e : e;
                  }
                  t.inherits = i, t.toArray = function(e, t) {
                      if (Array.isArray(e)) return e.slice();
                      if (!e) return [];
                      var r = [];
                      if ("string" == typeof e) {
                          if (t) {
                              if ("hex" === t) for((e = e.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e = "0" + e), i = 0; i < e.length; i += 2)r.push(parseInt(e[i] + e[i + 1], 16));
                          } else for(var n = 0, i = 0; i < e.length; i++){
                              var s = e.charCodeAt(i);
                              s < 128 ? r[n++] = s : s < 2048 ? (r[n++] = s >> 6 | 192, r[n++] = 63 & s | 128) : o(e, i) ? (s = 65536 + ((1023 & s) << 10) + (1023 & e.charCodeAt(++i)), r[n++] = s >> 18 | 240, r[n++] = s >> 12 & 63 | 128, r[n++] = s >> 6 & 63 | 128, r[n++] = 63 & s | 128) : (r[n++] = s >> 12 | 224, r[n++] = s >> 6 & 63 | 128, r[n++] = 63 & s | 128);
                          }
                      } else for(i = 0; i < e.length; i++)r[i] = 0 | e[i];
                      return r;
                  }, t.toHex = function(e) {
                      for(var t = "", r = 0; r < e.length; r++)t += a(e[r].toString(16));
                      return t;
                  }, t.htonl = s, t.toHex32 = function(e, t) {
                      for(var r = "", n = 0; n < e.length; n++){
                          var i = e[n];
                          "little" === t && (i = s(i)), r += l(i.toString(16));
                      }
                      return r;
                  }, t.zero2 = a, t.zero8 = l, t.join32 = function(e, t, r, i) {
                      var o = r - t;
                      n(o % 4 == 0);
                      for(var s = new Array(o / 4), a = 0, l = t; a < s.length; a++, l += 4){
                          var u;
                          u = "big" === i ? e[l] << 24 | e[l + 1] << 16 | e[l + 2] << 8 | e[l + 3] : e[l + 3] << 24 | e[l + 2] << 16 | e[l + 1] << 8 | e[l], s[a] = u >>> 0;
                      }
                      return s;
                  }, t.split32 = function(e, t) {
                      for(var r = new Array(4 * e.length), n = 0, i = 0; n < e.length; n++, i += 4){
                          var o = e[n];
                          "big" === t ? (r[i] = o >>> 24, r[i + 1] = o >>> 16 & 255, r[i + 2] = o >>> 8 & 255, r[i + 3] = 255 & o) : (r[i + 3] = o >>> 24, r[i + 2] = o >>> 16 & 255, r[i + 1] = o >>> 8 & 255, r[i] = 255 & o);
                      }
                      return r;
                  }, t.rotr32 = function(e, t) {
                      return e >>> t | e << 32 - t;
                  }, t.rotl32 = function(e, t) {
                      return e << t | e >>> 32 - t;
                  }, t.sum32 = function(e, t) {
                      return e + t >>> 0;
                  }, t.sum32_3 = function(e, t, r) {
                      return e + t + r >>> 0;
                  }, t.sum32_4 = function(e, t, r, n) {
                      return e + t + r + n >>> 0;
                  }, t.sum32_5 = function(e, t, r, n, i) {
                      return e + t + r + n + i >>> 0;
                  }, t.sum64 = function(e, t, r, n) {
                      var i = e[t], o = n + e[t + 1] >>> 0, s = (o < n ? 1 : 0) + r + i;
                      e[t] = s >>> 0, e[t + 1] = o;
                  }, t.sum64_hi = function(e, t, r, n) {
                      return (t + n >>> 0 < t ? 1 : 0) + e + r >>> 0;
                  }, t.sum64_lo = function(e, t, r, n) {
                      return t + n >>> 0;
                  }, t.sum64_4_hi = function(e, t, r, n, i, o, s, a) {
                      var l = 0, u = t;
                      return l += (u = u + n >>> 0) < t ? 1 : 0, l += (u = u + o >>> 0) < o ? 1 : 0, e + r + i + s + (l += (u = u + a >>> 0) < a ? 1 : 0) >>> 0;
                  }, t.sum64_4_lo = function(e, t, r, n, i, o, s, a) {
                      return t + n + o + a >>> 0;
                  }, t.sum64_5_hi = function(e, t, r, n, i, o, s, a, l, u) {
                      var c = 0, d = t;
                      return c += (d = d + n >>> 0) < t ? 1 : 0, c += (d = d + o >>> 0) < o ? 1 : 0, c += (d = d + a >>> 0) < a ? 1 : 0, e + r + i + s + l + (c += (d = d + u >>> 0) < u ? 1 : 0) >>> 0;
                  }, t.sum64_5_lo = function(e, t, r, n, i, o, s, a, l, u) {
                      return t + n + o + a + u >>> 0;
                  }, t.rotr64_hi = function(e, t, r) {
                      return (t << 32 - r | e >>> r) >>> 0;
                  }, t.rotr64_lo = function(e, t, r) {
                      return (e << 32 - r | t >>> r) >>> 0;
                  }, t.shr64_hi = function(e, t, r) {
                      return e >>> r;
                  }, t.shr64_lo = function(e, t, r) {
                      return (e << 32 - r | t >>> r) >>> 0;
                  };
              },
              5717: (e)=>{
                  "function" == typeof Object.create ? e.exports = function(e, t) {
                      t && (e.super_ = t, e.prototype = Object.create(t.prototype, {
                          constructor: {
                              value: e,
                              enumerable: !1,
                              writable: !0,
                              configurable: !0
                          }
                      }));
                  } : e.exports = function(e, t) {
                      if (t) {
                          e.super_ = t;
                          var r = function() {};
                          r.prototype = t.prototype, e.prototype = new r, e.prototype.constructor = e;
                      }
                  };
              },
              1094: (e, t, r)=>{
                  var n;
                  !function() {
                      "use strict";
                      var i = "input is invalid type", o = "object" == typeof window, s = o ? window : {};
                      s.JS_SHA3_NO_WINDOW && (o = !1);
                      var a = !o && "object" == typeof self;
                      !s.JS_SHA3_NO_NODE_JS && "object" == typeof process && process.versions && process.versions.node ? s = r.g : a && (s = self);
                      var l = !s.JS_SHA3_NO_COMMON_JS && e.exports, u = r.amdO, c = !s.JS_SHA3_NO_ARRAY_BUFFER && "undefined" != typeof ArrayBuffer, d = "0123456789abcdef".split(""), h = [
                          4,
                          1024,
                          262144,
                          67108864
                      ], f = [
                          0,
                          8,
                          16,
                          24
                      ], p = [
                          1,
                          0,
                          32898,
                          0,
                          32906,
                          2147483648,
                          2147516416,
                          2147483648,
                          32907,
                          0,
                          2147483649,
                          0,
                          2147516545,
                          2147483648,
                          32777,
                          2147483648,
                          138,
                          0,
                          136,
                          0,
                          2147516425,
                          0,
                          2147483658,
                          0,
                          2147516555,
                          0,
                          139,
                          2147483648,
                          32905,
                          2147483648,
                          32771,
                          2147483648,
                          32770,
                          2147483648,
                          128,
                          2147483648,
                          32778,
                          0,
                          2147483658,
                          2147483648,
                          2147516545,
                          2147483648,
                          32896,
                          2147483648,
                          2147483649,
                          0,
                          2147516424,
                          2147483648
                      ], m = [
                          224,
                          256,
                          384,
                          512
                      ], y = [
                          128,
                          256
                      ], g = [
                          "hex",
                          "buffer",
                          "arrayBuffer",
                          "array",
                          "digest"
                      ], v = {
                          128: 168,
                          256: 136
                      };
                      !s.JS_SHA3_NO_NODE_JS && Array.isArray || (Array.isArray = function(e) {
                          return "[object Array]" === Object.prototype.toString.call(e);
                      }), !c || !s.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW && ArrayBuffer.isView || (ArrayBuffer.isView = function(e) {
                          return "object" == typeof e && e.buffer && e.buffer.constructor === ArrayBuffer;
                      });
                      for(var b = function(e, t, r) {
                          return function(n) {
                              return new I(e, t, e).update(n)[r]();
                          };
                      }, w = function(e, t, r) {
                          return function(n, i) {
                              return new I(e, t, i).update(n)[r]();
                          };
                      }, _ = function(e, t, r) {
                          return function(t, n, i, o) {
                              return P["cshake" + e].update(t, n, i, o)[r]();
                          };
                      }, S = function(e, t, r) {
                          return function(t, n, i, o) {
                              return P["kmac" + e].update(t, n, i, o)[r]();
                          };
                      }, E = function(e, t, r, n) {
                          for(var i = 0; i < g.length; ++i){
                              var o = g[i];
                              e[o] = t(r, n, o);
                          }
                          return e;
                      }, k = function(e, t) {
                          var r = b(e, t, "hex");
                          return r.create = function() {
                              return new I(e, t, e);
                          }, r.update = function(e) {
                              return r.create().update(e);
                          }, E(r, b, e, t);
                      }, A = [
                          {
                              name: "keccak",
                              padding: [
                                  1,
                                  256,
                                  65536,
                                  16777216
                              ],
                              bits: m,
                              createMethod: k
                          },
                          {
                              name: "sha3",
                              padding: [
                                  6,
                                  1536,
                                  393216,
                                  100663296
                              ],
                              bits: m,
                              createMethod: k
                          },
                          {
                              name: "shake",
                              padding: [
                                  31,
                                  7936,
                                  2031616,
                                  520093696
                              ],
                              bits: y,
                              createMethod: function(e, t) {
                                  var r = w(e, t, "hex");
                                  return r.create = function(r) {
                                      return new I(e, t, r);
                                  }, r.update = function(e, t) {
                                      return r.create(t).update(e);
                                  }, E(r, w, e, t);
                              }
                          },
                          {
                              name: "cshake",
                              padding: h,
                              bits: y,
                              createMethod: function(e, t) {
                                  var r = v[e], n = _(e, 0, "hex");
                                  return n.create = function(n, i, o) {
                                      return i || o ? new I(e, t, n).bytepad([
                                          i,
                                          o
                                      ], r) : P["shake" + e].create(n);
                                  }, n.update = function(e, t, r, i) {
                                      return n.create(t, r, i).update(e);
                                  }, E(n, _, e, t);
                              }
                          },
                          {
                              name: "kmac",
                              padding: h,
                              bits: y,
                              createMethod: function(e, t) {
                                  var r = v[e], n = S(e, 0, "hex");
                                  return n.create = function(n, i, o) {
                                      return new M(e, t, i).bytepad([
                                          "KMAC",
                                          o
                                      ], r).bytepad([
                                          n
                                      ], r);
                                  }, n.update = function(e, t, r, i) {
                                      return n.create(e, r, i).update(t);
                                  }, E(n, S, e, t);
                              }
                          }
                      ], P = {}, N = [], C = 0; C < A.length; ++C)for(var x = A[C], T = x.bits, R = 0; R < T.length; ++R){
                          var O = x.name + "_" + T[R];
                          if (N.push(O), P[O] = x.createMethod(T[R], x.padding), "sha3" !== x.name) {
                              var B = x.name + T[R];
                              N.push(B), P[B] = P[O];
                          }
                      }
                      function I(e, t, r) {
                          this.blocks = [], this.s = [], this.padding = t, this.outputBits = r, this.reset = !0, this.finalized = !1, this.block = 0, this.start = 0, this.blockCount = 1600 - (e << 1) >> 5, this.byteCount = this.blockCount << 2, this.outputBlocks = r >> 5, this.extraBytes = (31 & r) >> 3;
                          for(var n = 0; n < 50; ++n)this.s[n] = 0;
                      }
                      function M(e, t, r) {
                          I.call(this, e, t, r);
                      }
                      I.prototype.update = function(e) {
                          if (this.finalized) throw new Error("finalize already called");
                          var t, r = typeof e;
                          if ("string" !== r) {
                              if ("object" !== r) throw new Error(i);
                              if (null === e) throw new Error(i);
                              if (c && e.constructor === ArrayBuffer) e = new Uint8Array(e);
                              else if (!(Array.isArray(e) || c && ArrayBuffer.isView(e))) throw new Error(i);
                              t = !0;
                          }
                          for(var n, o, s = this.blocks, a = this.byteCount, l = e.length, u = this.blockCount, d = 0, h = this.s; d < l;){
                              if (this.reset) for(this.reset = !1, s[0] = this.block, n = 1; n < u + 1; ++n)s[n] = 0;
                              if (t) for(n = this.start; d < l && n < a; ++d)s[n >> 2] |= e[d] << f[3 & n++];
                              else for(n = this.start; d < l && n < a; ++d)(o = e.charCodeAt(d)) < 128 ? s[n >> 2] |= o << f[3 & n++] : o < 2048 ? (s[n >> 2] |= (192 | o >> 6) << f[3 & n++], s[n >> 2] |= (128 | 63 & o) << f[3 & n++]) : o < 55296 || o >= 57344 ? (s[n >> 2] |= (224 | o >> 12) << f[3 & n++], s[n >> 2] |= (128 | o >> 6 & 63) << f[3 & n++], s[n >> 2] |= (128 | 63 & o) << f[3 & n++]) : (o = 65536 + ((1023 & o) << 10 | 1023 & e.charCodeAt(++d)), s[n >> 2] |= (240 | o >> 18) << f[3 & n++], s[n >> 2] |= (128 | o >> 12 & 63) << f[3 & n++], s[n >> 2] |= (128 | o >> 6 & 63) << f[3 & n++], s[n >> 2] |= (128 | 63 & o) << f[3 & n++]);
                              if (this.lastByteIndex = n, n >= a) {
                                  for(this.start = n - a, this.block = s[u], n = 0; n < u; ++n)h[n] ^= s[n];
                                  D(h), this.reset = !0;
                              } else this.start = n;
                          }
                          return this;
                      }, I.prototype.encode = function(e, t) {
                          var r = 255 & e, n = 1, i = [
                              r
                          ];
                          for(r = 255 & (e >>= 8); r > 0;)i.unshift(r), r = 255 & (e >>= 8), ++n;
                          return t ? i.push(n) : i.unshift(n), this.update(i), i.length;
                      }, I.prototype.encodeString = function(e) {
                          var t, r = typeof e;
                          if ("string" !== r) {
                              if ("object" !== r) throw new Error(i);
                              if (null === e) throw new Error(i);
                              if (c && e.constructor === ArrayBuffer) e = new Uint8Array(e);
                              else if (!(Array.isArray(e) || c && ArrayBuffer.isView(e))) throw new Error(i);
                              t = !0;
                          }
                          var n = 0, o = e.length;
                          if (t) n = o;
                          else for(var s = 0; s < e.length; ++s){
                              var a = e.charCodeAt(s);
                              a < 128 ? n += 1 : a < 2048 ? n += 2 : a < 55296 || a >= 57344 ? n += 3 : (a = 65536 + ((1023 & a) << 10 | 1023 & e.charCodeAt(++s)), n += 4);
                          }
                          return n += this.encode(8 * n), this.update(e), n;
                      }, I.prototype.bytepad = function(e, t) {
                          for(var r = this.encode(t), n = 0; n < e.length; ++n)r += this.encodeString(e[n]);
                          var i = t - r % t, o = [];
                          return o.length = i, this.update(o), this;
                      }, I.prototype.finalize = function() {
                          if (!this.finalized) {
                              this.finalized = !0;
                              var e = this.blocks, t = this.lastByteIndex, r = this.blockCount, n = this.s;
                              if (e[t >> 2] |= this.padding[3 & t], this.lastByteIndex === this.byteCount) for(e[0] = e[r], t = 1; t < r + 1; ++t)e[t] = 0;
                              for(e[r - 1] |= 2147483648, t = 0; t < r; ++t)n[t] ^= e[t];
                              D(n);
                          }
                      }, I.prototype.toString = I.prototype.hex = function() {
                          this.finalize();
                          for(var e, t = this.blockCount, r = this.s, n = this.outputBlocks, i = this.extraBytes, o = 0, s = 0, a = ""; s < n;){
                              for(o = 0; o < t && s < n; ++o, ++s)e = r[o], a += d[e >> 4 & 15] + d[15 & e] + d[e >> 12 & 15] + d[e >> 8 & 15] + d[e >> 20 & 15] + d[e >> 16 & 15] + d[e >> 28 & 15] + d[e >> 24 & 15];
                              s % t == 0 && (D(r), o = 0);
                          }
                          return i && (e = r[o], a += d[e >> 4 & 15] + d[15 & e], i > 1 && (a += d[e >> 12 & 15] + d[e >> 8 & 15]), i > 2 && (a += d[e >> 20 & 15] + d[e >> 16 & 15])), a;
                      }, I.prototype.arrayBuffer = function() {
                          this.finalize();
                          var e, t = this.blockCount, r = this.s, n = this.outputBlocks, i = this.extraBytes, o = 0, s = 0, a = this.outputBits >> 3;
                          e = i ? new ArrayBuffer(n + 1 << 2) : new ArrayBuffer(a);
                          for(var l = new Uint32Array(e); s < n;){
                              for(o = 0; o < t && s < n; ++o, ++s)l[s] = r[o];
                              s % t == 0 && D(r);
                          }
                          return i && (l[o] = r[o], e = e.slice(0, a)), e;
                      }, I.prototype.buffer = I.prototype.arrayBuffer, I.prototype.digest = I.prototype.array = function() {
                          this.finalize();
                          for(var e, t, r = this.blockCount, n = this.s, i = this.outputBlocks, o = this.extraBytes, s = 0, a = 0, l = []; a < i;){
                              for(s = 0; s < r && a < i; ++s, ++a)e = a << 2, t = n[s], l[e] = 255 & t, l[e + 1] = t >> 8 & 255, l[e + 2] = t >> 16 & 255, l[e + 3] = t >> 24 & 255;
                              a % r == 0 && D(n);
                          }
                          return o && (e = a << 2, t = n[s], l[e] = 255 & t, o > 1 && (l[e + 1] = t >> 8 & 255), o > 2 && (l[e + 2] = t >> 16 & 255)), l;
                      }, M.prototype = new I, M.prototype.finalize = function() {
                          return this.encode(this.outputBits, !0), I.prototype.finalize.call(this);
                      };
                      var D = function(e) {
                          var t, r, n, i, o, s, a, l, u, c, d, h, f, m, y, g, v, b, w, _, S, E, k, A, P, N, C, x, T, R, O, B, I, M, D, K, U, F, j, L, q, z, V, W, G, J, H, $, Z, X, Q, Y, ee, te, re, ne, ie, oe, se, ae, le, ue, ce;
                          for(n = 0; n < 48; n += 2)i = e[0] ^ e[10] ^ e[20] ^ e[30] ^ e[40], o = e[1] ^ e[11] ^ e[21] ^ e[31] ^ e[41], s = e[2] ^ e[12] ^ e[22] ^ e[32] ^ e[42], a = e[3] ^ e[13] ^ e[23] ^ e[33] ^ e[43], l = e[4] ^ e[14] ^ e[24] ^ e[34] ^ e[44], u = e[5] ^ e[15] ^ e[25] ^ e[35] ^ e[45], c = e[6] ^ e[16] ^ e[26] ^ e[36] ^ e[46], d = e[7] ^ e[17] ^ e[27] ^ e[37] ^ e[47], t = (h = e[8] ^ e[18] ^ e[28] ^ e[38] ^ e[48]) ^ (s << 1 | a >>> 31), r = (f = e[9] ^ e[19] ^ e[29] ^ e[39] ^ e[49]) ^ (a << 1 | s >>> 31), e[0] ^= t, e[1] ^= r, e[10] ^= t, e[11] ^= r, e[20] ^= t, e[21] ^= r, e[30] ^= t, e[31] ^= r, e[40] ^= t, e[41] ^= r, t = i ^ (l << 1 | u >>> 31), r = o ^ (u << 1 | l >>> 31), e[2] ^= t, e[3] ^= r, e[12] ^= t, e[13] ^= r, e[22] ^= t, e[23] ^= r, e[32] ^= t, e[33] ^= r, e[42] ^= t, e[43] ^= r, t = s ^ (c << 1 | d >>> 31), r = a ^ (d << 1 | c >>> 31), e[4] ^= t, e[5] ^= r, e[14] ^= t, e[15] ^= r, e[24] ^= t, e[25] ^= r, e[34] ^= t, e[35] ^= r, e[44] ^= t, e[45] ^= r, t = l ^ (h << 1 | f >>> 31), r = u ^ (f << 1 | h >>> 31), e[6] ^= t, e[7] ^= r, e[16] ^= t, e[17] ^= r, e[26] ^= t, e[27] ^= r, e[36] ^= t, e[37] ^= r, e[46] ^= t, e[47] ^= r, t = c ^ (i << 1 | o >>> 31), r = d ^ (o << 1 | i >>> 31), e[8] ^= t, e[9] ^= r, e[18] ^= t, e[19] ^= r, e[28] ^= t, e[29] ^= r, e[38] ^= t, e[39] ^= r, e[48] ^= t, e[49] ^= r, m = e[0], y = e[1], J = e[11] << 4 | e[10] >>> 28, H = e[10] << 4 | e[11] >>> 28, x = e[20] << 3 | e[21] >>> 29, T = e[21] << 3 | e[20] >>> 29, ae = e[31] << 9 | e[30] >>> 23, le = e[30] << 9 | e[31] >>> 23, z = e[40] << 18 | e[41] >>> 14, V = e[41] << 18 | e[40] >>> 14, M = e[2] << 1 | e[3] >>> 31, D = e[3] << 1 | e[2] >>> 31, g = e[13] << 12 | e[12] >>> 20, v = e[12] << 12 | e[13] >>> 20, $ = e[22] << 10 | e[23] >>> 22, Z = e[23] << 10 | e[22] >>> 22, R = e[33] << 13 | e[32] >>> 19, O = e[32] << 13 | e[33] >>> 19, ue = e[42] << 2 | e[43] >>> 30, ce = e[43] << 2 | e[42] >>> 30, te = e[5] << 30 | e[4] >>> 2, re = e[4] << 30 | e[5] >>> 2, K = e[14] << 6 | e[15] >>> 26, U = e[15] << 6 | e[14] >>> 26, b = e[25] << 11 | e[24] >>> 21, w = e[24] << 11 | e[25] >>> 21, X = e[34] << 15 | e[35] >>> 17, Q = e[35] << 15 | e[34] >>> 17, B = e[45] << 29 | e[44] >>> 3, I = e[44] << 29 | e[45] >>> 3, A = e[6] << 28 | e[7] >>> 4, P = e[7] << 28 | e[6] >>> 4, ne = e[17] << 23 | e[16] >>> 9, ie = e[16] << 23 | e[17] >>> 9, F = e[26] << 25 | e[27] >>> 7, j = e[27] << 25 | e[26] >>> 7, _ = e[36] << 21 | e[37] >>> 11, S = e[37] << 21 | e[36] >>> 11, Y = e[47] << 24 | e[46] >>> 8, ee = e[46] << 24 | e[47] >>> 8, W = e[8] << 27 | e[9] >>> 5, G = e[9] << 27 | e[8] >>> 5, N = e[18] << 20 | e[19] >>> 12, C = e[19] << 20 | e[18] >>> 12, oe = e[29] << 7 | e[28] >>> 25, se = e[28] << 7 | e[29] >>> 25, L = e[38] << 8 | e[39] >>> 24, q = e[39] << 8 | e[38] >>> 24, E = e[48] << 14 | e[49] >>> 18, k = e[49] << 14 | e[48] >>> 18, e[0] = m ^ ~g & b, e[1] = y ^ ~v & w, e[10] = A ^ ~N & x, e[11] = P ^ ~C & T, e[20] = M ^ ~K & F, e[21] = D ^ ~U & j, e[30] = W ^ ~J & $, e[31] = G ^ ~H & Z, e[40] = te ^ ~ne & oe, e[41] = re ^ ~ie & se, e[2] = g ^ ~b & _, e[3] = v ^ ~w & S, e[12] = N ^ ~x & R, e[13] = C ^ ~T & O, e[22] = K ^ ~F & L, e[23] = U ^ ~j & q, e[32] = J ^ ~$ & X, e[33] = H ^ ~Z & Q, e[42] = ne ^ ~oe & ae, e[43] = ie ^ ~se & le, e[4] = b ^ ~_ & E, e[5] = w ^ ~S & k, e[14] = x ^ ~R & B, e[15] = T ^ ~O & I, e[24] = F ^ ~L & z, e[25] = j ^ ~q & V, e[34] = $ ^ ~X & Y, e[35] = Z ^ ~Q & ee, e[44] = oe ^ ~ae & ue, e[45] = se ^ ~le & ce, e[6] = _ ^ ~E & m, e[7] = S ^ ~k & y, e[16] = R ^ ~B & A, e[17] = O ^ ~I & P, e[26] = L ^ ~z & M, e[27] = q ^ ~V & D, e[36] = X ^ ~Y & W, e[37] = Q ^ ~ee & G, e[46] = ae ^ ~ue & te, e[47] = le ^ ~ce & re, e[8] = E ^ ~m & g, e[9] = k ^ ~y & v, e[18] = B ^ ~A & N, e[19] = I ^ ~P & C, e[28] = z ^ ~M & K, e[29] = V ^ ~D & U, e[38] = Y ^ ~W & J, e[39] = ee ^ ~G & H, e[48] = ue ^ ~te & ne, e[49] = ce ^ ~re & ie, e[0] ^= p[n], e[1] ^= p[n + 1];
                      };
                      if (l) e.exports = P;
                      else {
                          for(C = 0; C < N.length; ++C)s[N[C]] = P[N[C]];
                          u && (void 0 === (n = (function() {
                              return P;
                          }).call(t, r, t, e)) || (e.exports = n));
                      }
                  }();
              },
              9746: (e)=>{
                  function t(e, t) {
                      if (!e) throw new Error(t || "Assertion failed");
                  }
                  e.exports = t, t.equal = function(e, t, r) {
                      if (e != t) throw new Error(r || "Assertion failed: " + e + " != " + t);
                  };
              },
              7635: function(e) {
                  "use strict";
                  !function(t) {
                      const r = 2147483647;
                      function n(e) {
                          const t = new Uint32Array([
                              1116352408,
                              1899447441,
                              3049323471,
                              3921009573,
                              961987163,
                              1508970993,
                              2453635748,
                              2870763221,
                              3624381080,
                              310598401,
                              607225278,
                              1426881987,
                              1925078388,
                              2162078206,
                              2614888103,
                              3248222580,
                              3835390401,
                              4022224774,
                              264347078,
                              604807628,
                              770255983,
                              1249150122,
                              1555081692,
                              1996064986,
                              2554220882,
                              2821834349,
                              2952996808,
                              3210313671,
                              3336571891,
                              3584528711,
                              113926993,
                              338241895,
                              666307205,
                              773529912,
                              1294757372,
                              1396182291,
                              1695183700,
                              1986661051,
                              2177026350,
                              2456956037,
                              2730485921,
                              2820302411,
                              3259730800,
                              3345764771,
                              3516065817,
                              3600352804,
                              4094571909,
                              275423344,
                              430227734,
                              506948616,
                              659060556,
                              883997877,
                              958139571,
                              1322822218,
                              1537002063,
                              1747873779,
                              1955562222,
                              2024104815,
                              2227730452,
                              2361852424,
                              2428436474,
                              2756734187,
                              3204031479,
                              3329325298
                          ]);
                          let r = 1779033703, n = 3144134277, i = 1013904242, o = 2773480762, s = 1359893119, a = 2600822924, l = 528734635, u = 1541459225;
                          const c = new Uint32Array(64);
                          function d(e) {
                              let d = 0, h = e.length;
                              for(; h >= 64;){
                                  let f, p, m, y, g, v = r, b = n, w = i, _ = o, S = s, E = a, k = l, A = u;
                                  for(p = 0; p < 16; p++)m = d + 4 * p, c[p] = (255 & e[m]) << 24 | (255 & e[m + 1]) << 16 | (255 & e[m + 2]) << 8 | 255 & e[m + 3];
                                  for(p = 16; p < 64; p++)f = c[p - 2], y = (f >>> 17 | f << 15) ^ (f >>> 19 | f << 13) ^ f >>> 10, f = c[p - 15], g = (f >>> 7 | f << 25) ^ (f >>> 18 | f << 14) ^ f >>> 3, c[p] = (y + c[p - 7] | 0) + (g + c[p - 16] | 0) | 0;
                                  for(p = 0; p < 64; p++)y = (((S >>> 6 | S << 26) ^ (S >>> 11 | S << 21) ^ (S >>> 25 | S << 7)) + (S & E ^ ~S & k) | 0) + (A + (t[p] + c[p] | 0) | 0) | 0, g = ((v >>> 2 | v << 30) ^ (v >>> 13 | v << 19) ^ (v >>> 22 | v << 10)) + (v & b ^ v & w ^ b & w) | 0, A = k, k = E, E = S, S = _ + y | 0, _ = w, w = b, b = v, v = y + g | 0;
                                  r = r + v | 0, n = n + b | 0, i = i + w | 0, o = o + _ | 0, s = s + S | 0, a = a + E | 0, l = l + k | 0, u = u + A | 0, d += 64, h -= 64;
                              }
                          }
                          d(e);
                          let h, f = e.length % 64, p = e.length / 536870912 | 0, m = e.length << 3, y = f < 56 ? 56 : 120, g = e.slice(e.length - f, e.length);
                          for(g.push(128), h = f + 1; h < y; h++)g.push(0);
                          return g.push(p >>> 24 & 255), g.push(p >>> 16 & 255), g.push(p >>> 8 & 255), g.push(p >>> 0 & 255), g.push(m >>> 24 & 255), g.push(m >>> 16 & 255), g.push(m >>> 8 & 255), g.push(m >>> 0 & 255), d(g), [
                              r >>> 24 & 255,
                              r >>> 16 & 255,
                              r >>> 8 & 255,
                              r >>> 0 & 255,
                              n >>> 24 & 255,
                              n >>> 16 & 255,
                              n >>> 8 & 255,
                              n >>> 0 & 255,
                              i >>> 24 & 255,
                              i >>> 16 & 255,
                              i >>> 8 & 255,
                              i >>> 0 & 255,
                              o >>> 24 & 255,
                              o >>> 16 & 255,
                              o >>> 8 & 255,
                              o >>> 0 & 255,
                              s >>> 24 & 255,
                              s >>> 16 & 255,
                              s >>> 8 & 255,
                              s >>> 0 & 255,
                              a >>> 24 & 255,
                              a >>> 16 & 255,
                              a >>> 8 & 255,
                              a >>> 0 & 255,
                              l >>> 24 & 255,
                              l >>> 16 & 255,
                              l >>> 8 & 255,
                              l >>> 0 & 255,
                              u >>> 24 & 255,
                              u >>> 16 & 255,
                              u >>> 8 & 255,
                              u >>> 0 & 255
                          ];
                      }
                      function i(e, t, r) {
                          e = e.length <= 64 ? e : n(e);
                          const i = 64 + t.length + 4, o = new Array(i), s = new Array(64);
                          let a, l = [];
                          for(a = 0; a < 64; a++)o[a] = 54;
                          for(a = 0; a < e.length; a++)o[a] ^= e[a];
                          for(a = 0; a < t.length; a++)o[64 + a] = t[a];
                          for(a = i - 4; a < i; a++)o[a] = 0;
                          for(a = 0; a < 64; a++)s[a] = 92;
                          for(a = 0; a < e.length; a++)s[a] ^= e[a];
                          function u() {
                              for(let e = i - 1; e >= i - 4; e--){
                                  if (o[e]++, o[e] <= 255) return;
                                  o[e] = 0;
                              }
                          }
                          for(; r >= 32;)u(), l = l.concat(n(s.concat(n(o)))), r -= 32;
                          return r > 0 && (u(), l = l.concat(n(s.concat(n(o))).slice(0, r))), l;
                      }
                      function o(e, t, r, n, i) {
                          let o;
                          for(u(e, 16 * (2 * r - 1), i, 0, 16), o = 0; o < 2 * r; o++)l(e, 16 * o, i, 16), a(i, n), u(i, 0, e, t + 16 * o, 16);
                          for(o = 0; o < r; o++)u(e, t + 2 * o * 16, e, 16 * o, 16);
                          for(o = 0; o < r; o++)u(e, t + 16 * (2 * o + 1), e, 16 * (o + r), 16);
                      }
                      function s(e, t) {
                          return e << t | e >>> 32 - t;
                      }
                      function a(e, t) {
                          u(e, 0, t, 0, 16);
                          for(let e = 8; e > 0; e -= 2)t[4] ^= s(t[0] + t[12], 7), t[8] ^= s(t[4] + t[0], 9), t[12] ^= s(t[8] + t[4], 13), t[0] ^= s(t[12] + t[8], 18), t[9] ^= s(t[5] + t[1], 7), t[13] ^= s(t[9] + t[5], 9), t[1] ^= s(t[13] + t[9], 13), t[5] ^= s(t[1] + t[13], 18), t[14] ^= s(t[10] + t[6], 7), t[2] ^= s(t[14] + t[10], 9), t[6] ^= s(t[2] + t[14], 13), t[10] ^= s(t[6] + t[2], 18), t[3] ^= s(t[15] + t[11], 7), t[7] ^= s(t[3] + t[15], 9), t[11] ^= s(t[7] + t[3], 13), t[15] ^= s(t[11] + t[7], 18), t[1] ^= s(t[0] + t[3], 7), t[2] ^= s(t[1] + t[0], 9), t[3] ^= s(t[2] + t[1], 13), t[0] ^= s(t[3] + t[2], 18), t[6] ^= s(t[5] + t[4], 7), t[7] ^= s(t[6] + t[5], 9), t[4] ^= s(t[7] + t[6], 13), t[5] ^= s(t[4] + t[7], 18), t[11] ^= s(t[10] + t[9], 7), t[8] ^= s(t[11] + t[10], 9), t[9] ^= s(t[8] + t[11], 13), t[10] ^= s(t[9] + t[8], 18), t[12] ^= s(t[15] + t[14], 7), t[13] ^= s(t[12] + t[15], 9), t[14] ^= s(t[13] + t[12], 13), t[15] ^= s(t[14] + t[13], 18);
                          for(let r = 0; r < 16; ++r)e[r] += t[r];
                      }
                      function l(e, t, r, n) {
                          for(let i = 0; i < n; i++)r[i] ^= e[t + i];
                      }
                      function u(e, t, r, n, i) {
                          for(; i--;)r[n++] = e[t++];
                      }
                      function c(e) {
                          if (!e || "number" != typeof e.length) return !1;
                          for(let t = 0; t < e.length; t++){
                              const r = e[t];
                              if ("number" != typeof r || r % 1 || r < 0 || r >= 256) return !1;
                          }
                          return !0;
                      }
                      function d(e, t) {
                          if ("number" != typeof e || e % 1) throw new Error("invalid " + t);
                          return e;
                      }
                      function h(e, t, n, s, a, h, f) {
                          if (n = d(n, "N"), s = d(s, "r"), a = d(a, "p"), h = d(h, "dkLen"), 0 === n || 0 != (n & n - 1)) throw new Error("N must be power of 2");
                          if (n > r / 128 / s) throw new Error("N too large");
                          if (s > r / 128 / a) throw new Error("r too large");
                          if (!c(e)) throw new Error("password must be an array or buffer");
                          if (e = Array.prototype.slice.call(e), !c(t)) throw new Error("salt must be an array or buffer");
                          t = Array.prototype.slice.call(t);
                          let p = i(e, t, 128 * a * s);
                          const m = new Uint32Array(32 * a * s);
                          for(let e = 0; e < m.length; e++){
                              const t = 4 * e;
                              m[e] = (255 & p[t + 3]) << 24 | (255 & p[t + 2]) << 16 | (255 & p[t + 1]) << 8 | (255 & p[t + 0]) << 0;
                          }
                          const y = new Uint32Array(64 * s), g = new Uint32Array(32 * s * n), v = 32 * s, b = new Uint32Array(16), w = new Uint32Array(16), _ = a * n * 2;
                          let S, E, k = 0, A = null, P = !1, N = 0, C = 0;
                          const x = f ? parseInt(1e3 / s) : 4294967295, T = "undefined" != typeof setImmediate ? setImmediate : setTimeout, R = function() {
                              if (P) return f(new Error("cancelled"), k / _);
                              let t;
                              switch(N){
                                  case 0:
                                      E = 32 * C * s, u(m, E, y, 0, v), N = 1, S = 0;
                                  case 1:
                                      t = n - S, t > x && (t = x);
                                      for(let e = 0; e < t; e++)u(y, 0, g, (S + e) * v, v), o(y, v, s, b, w);
                                      if (S += t, k += t, f) {
                                          const e = parseInt(1e3 * k / _);
                                          if (e !== A) {
                                              if (P = f(null, k / _), P) break;
                                              A = e;
                                          }
                                      }
                                      if (S < n) break;
                                      S = 0, N = 2;
                                  case 2:
                                      t = n - S, t > x && (t = x);
                                      for(let e = 0; e < t; e++){
                                          const e = y[16 * (2 * s - 1)] & n - 1;
                                          l(g, e * v, y, v), o(y, v, s, b, w);
                                      }
                                      if (S += t, k += t, f) {
                                          const e = parseInt(1e3 * k / _);
                                          if (e !== A) {
                                              if (P = f(null, k / _), P) break;
                                              A = e;
                                          }
                                      }
                                      if (S < n) break;
                                      if (u(y, 0, m, E, v), C++, C < a) {
                                          N = 0;
                                          break;
                                      }
                                      p = [];
                                      for(let e = 0; e < m.length; e++)p.push(m[e] >> 0 & 255), p.push(m[e] >> 8 & 255), p.push(m[e] >> 16 & 255), p.push(m[e] >> 24 & 255);
                                      const r = i(e, p, h);
                                      return f && f(null, 1, r), r;
                              }
                              f && T(R);
                          };
                          if (!f) for(;;){
                              const e = R();
                              if (null != e) return e;
                          }
                          R();
                      }
                      const f = {
                          scrypt: function(e, t, r, n, i, o, s) {
                              return new Promise(function(a, l) {
                                  let u = 0;
                                  s && s(0), h(e, t, r, n, i, o, function(e, t, r) {
                                      if (e) l(e);
                                      else if (r) s && 1 !== u && s(1), a(new Uint8Array(r));
                                      else if (s && t !== u) return u = t, s(t);
                                  });
                              });
                          },
                          syncScrypt: function(e, t, r, n, i, o) {
                              return new Uint8Array(h(e, t, r, n, i, o));
                          }
                      };
                      e.exports = f;
                  }();
              },
              1962: function(e, t, r) {
                  "use strict";
                  var n = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  }, i = this && this.__asyncValues || function(e) {
                      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                      var t, r = e[Symbol.asyncIterator];
                      return r ? r.call(e) : (e = "function" == typeof __values ? __values(e) : e[Symbol.iterator](), t = {}, n("next"), n("throw"), n("return"), t[Symbol.asyncIterator] = function() {
                          return this;
                      }, t);
                      function n(r) {
                          t[r] = e[r] && function(t) {
                              return new Promise(function(n, i) {
                                  !function(e, t, r, n) {
                                      Promise.resolve(n).then(function(t) {
                                          e({
                                              value: t,
                                              done: r
                                          });
                                      }, t);
                                  }(n, i, (t = e[r](t)).done, t.value);
                              });
                          };
                      }
                  }, o = this && this.__await || function(e) {
                      return this instanceof o ? (this.v = e, this) : new o(e);
                  }, s = this && this.__asyncGenerator || function(e, t, r) {
                      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                      var n, i = r.apply(e, t || []), s = [];
                      return n = {}, a("next"), a("throw"), a("return"), n[Symbol.asyncIterator] = function() {
                          return this;
                      }, n;
                      function a(e) {
                          i[e] && (n[e] = function(t) {
                              return new Promise(function(r, n) {
                                  s.push([
                                      e,
                                      t,
                                      r,
                                      n
                                  ]) > 1 || l(e, t);
                              });
                          });
                      }
                      function l(e, t) {
                          try {
                              (r = i[e](t)).value instanceof o ? Promise.resolve(r.value.v).then(u, c) : d(s[0][2], r);
                          } catch (e) {
                              d(s[0][3], e);
                          }
                          var r;
                      }
                      function u(e) {
                          l("next", e);
                      }
                      function c(e) {
                          l("throw", e);
                      }
                      function d(e, t) {
                          e(t), s.shift(), s.length && l(s[0][0], s[0][1]);
                      }
                  }, a = this && this.__importDefault || function(e) {
                      return e && e.__esModule ? e : {
                          default: e
                      };
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.GrpcStatus = t.ApiUrls = t.SortDirection = t.MessageApi = void 0;
                  const l = r(1796), u = r(5506), c = a(r(4203)), d = r(4147), h = r(5592);
                  var f;
                  t.MessageApi = l.messageApi.MessageApi, t.SortDirection = l.messageApi.SortDirection, t.ApiUrls = {
                      local: "http://localhost:5555",
                      dev: "https://dev.xmtp.network",
                      production: "https://production.xmtp.network"
                  }, (f = t.GrpcStatus || (t.GrpcStatus = {}))[f.OK = 0] = "OK", f[f.CANCELLED = 1] = "CANCELLED", f[f.UNKNOWN = 2] = "UNKNOWN", f[f.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", f[f.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", f[f.NOT_FOUND = 5] = "NOT_FOUND", f[f.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", f[f.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", f[f.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", f[f.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", f[f.ABORTED = 10] = "ABORTED", f[f.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", f[f.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", f[f.INTERNAL = 13] = "INTERNAL", f[f.UNAVAILABLE = 14] = "UNAVAILABLE", f[f.DATA_LOSS = 15] = "DATA_LOSS", f[f.UNAUTHENTICATED = 16] = "UNAUTHENTICATED";
                  const p = (e)=>!(!e || "AbortError" !== e.name && !e.message.includes("aborted")), m = (e)=>!((e)=>!(!e || 16 !== e.code))(e);
                  t.default = class {
                      constructor(e, r){
                          this.pathPrefix = e, this.maxRetries = (null == r ? void 0 : r.maxRetries) || 5, this.appVersion = null == r ? void 0 : r.appVersion, this.version = "xmtp-js/" + d.version, e === t.ApiUrls.dev && console.info(h.XMTP_DEV_WARNING);
                      }
                      _query(e) {
                          return (0, u.retry)(t.MessageApi.Query, [
                              e,
                              {
                                  pathPrefix: this.pathPrefix,
                                  mode: "cors",
                                  headers: this.headers()
                              }
                          ], this.maxRetries, 100);
                      }
                      _batchQuery(e) {
                          return (0, u.retry)(t.MessageApi.BatchQuery, [
                              e,
                              {
                                  pathPrefix: this.pathPrefix,
                                  mode: "cors",
                                  headers: this.headers()
                              }
                          ], this.maxRetries, 100);
                      }
                      _publish(e, r = 0) {
                          var i;
                          return n(this, void 0, void 0, function*() {
                              const n = yield this.getToken(), o = this.headers();
                              o.set("Authorization", `Bearer ${n}`);
                              try {
                                  return yield (0, u.retry)(t.MessageApi.Publish, [
                                      e,
                                      {
                                          pathPrefix: this.pathPrefix,
                                          mode: "cors",
                                          headers: o
                                      }
                                  ], this.maxRetries, 100, m);
                              } catch (t) {
                                  if (m(t) || r >= 1) throw t;
                                  return yield null === (i = this.authCache) || void 0 === i ? void 0 : i.refresh(), this._publish(e, r + 1);
                              }
                          });
                      }
                      _subscribe(e, r) {
                          const i = new AbortController;
                          return (()=>{
                              n(this, void 0, void 0, function*() {
                                  for(;;){
                                      const n = (new Date).getTime();
                                      try {
                                          if (yield t.MessageApi.Subscribe(e, r, {
                                              pathPrefix: this.pathPrefix,
                                              signal: i.signal,
                                              mode: "cors",
                                              headers: this.headers()
                                          }), i.signal.aborted) return;
                                          console.info("Stream connection closed. Resubscribing"), (new Date).getTime() - n < 1e3 && (yield (0, u.sleep)(1e3));
                                      } catch (e) {
                                          if (p(e) || i.signal.aborted) return;
                                          console.info("Stream connection closed. Resubscribing", e.toString()), (new Date).getTime() - n < 1e3 && (yield (0, u.sleep)(1e3));
                                      }
                                  }
                              });
                          })(), ()=>n(this, void 0, void 0, function*() {
                                  null == i || i.abort();
                              });
                      }
                      query(e, { direction: r = t.SortDirection.SORT_DIRECTION_ASCENDING , limit: o  }) {
                          var s, a;
                          return n(this, void 0, void 0, function*() {
                              const t = [];
                              try {
                                  for(var n, l = i(this.queryIteratePages(e, {
                                      direction: r,
                                      pageSize: o && o < 100 ? o : 100
                                  })); !(n = yield l.next()).done;){
                                      const e = n.value;
                                      for (const r of e)if (t.push(r), o && t.length === o) return t;
                                  }
                              } catch (e) {
                                  s = {
                                      error: e
                                  };
                              } finally{
                                  try {
                                      n && !n.done && (a = l.return) && (yield a.call(l));
                                  } finally{
                                      if (s) throw s.error;
                                  }
                              }
                              return t;
                          });
                      }
                      queryIterator(e, t) {
                          return s(this, arguments, function*() {
                              var r, n;
                              try {
                                  for(var s, a = i(this.queryIteratePages(e, t)); !(s = yield o(a.next())).done;){
                                      const e = s.value;
                                      for (const t of e)yield yield o(t);
                                  }
                              } catch (e) {
                                  r = {
                                      error: e
                                  };
                              } finally{
                                  try {
                                      s && !s.done && (n = a.return) && (yield o(n.call(a)));
                                  } finally{
                                      if (r) throw r.error;
                                  }
                              }
                          });
                      }
                      queryIteratePages({ contentTopics: e , startTime: t , endTime: r  }, { direction: n , pageSize: i = 10  }) {
                          var a, l, c;
                          return s(this, arguments, function*() {
                              if (!e || !e.length) throw new Error("Must specify content topics");
                              const s = (0, u.toNanoString)(t), d = (0, u.toNanoString)(r);
                              let h;
                              for(;;){
                                  const t = {
                                      limit: i,
                                      direction: n,
                                      cursor: h
                                  }, r = yield o(this._query({
                                      contentTopics: e,
                                      startTimeNs: s,
                                      endTimeNs: d,
                                      pagingInfo: t
                                  }));
                                  if (!(null === (a = r.envelopes) || void 0 === a ? void 0 : a.length)) return yield o(void 0);
                                  if (yield yield o(r.envelopes), !(null === (l = r.pagingInfo) || void 0 === l ? void 0 : l.cursor)) return yield o(void 0);
                                  h = null === (c = r.pagingInfo) || void 0 === c ? void 0 : c.cursor;
                              }
                          });
                      }
                      batchQuery(e) {
                          return n(this, void 0, void 0, function*() {
                              const r = [];
                              for(let n = 0; n < e.length; n += 50){
                                  const i = e.slice(n, n + 50), o = [];
                                  for (const e of i)o.push({
                                      contentTopics: e.contentTopics,
                                      startTimeNs: (0, u.toNanoString)(e.startTime),
                                      endTimeNs: (0, u.toNanoString)(e.endTime),
                                      pagingInfo: {
                                          limit: e.pageSize || 10,
                                          direction: e.direction || t.SortDirection.SORT_DIRECTION_ASCENDING
                                      }
                                  });
                                  const s = {
                                      requests: o
                                  };
                                  r.push(s);
                              }
                              const i = yield Promise.all(r.map((e)=>n(this, void 0, void 0, function*() {
                                      return this._batchQuery(e);
                                  }))), o = [];
                              for (const e of i){
                                  if (!e.responses) throw new Error("BatchQueryResponse missing responses");
                                  for (const t of e.responses)t.envelopes ? o.push(t.envelopes) : o.push([]);
                              }
                              return o;
                          });
                      }
                      publish(e) {
                          return n(this, void 0, void 0, function*() {
                              const t = [];
                              for (const { contentTopic: r , message: n , timestamp: i  } of e){
                                  if (!r.length) throw new Error("Content topic cannot be empty string");
                                  if (!n.length) throw new Error("0 length messages not allowed");
                                  const e = i || new Date;
                                  t.push({
                                      contentTopic: r,
                                      timestampNs: (0, u.toNanoString)(e),
                                      message: Uint8Array.from(n)
                                  });
                              }
                              return this._publish({
                                  envelopes: t
                              });
                          });
                      }
                      subscribe(e, t) {
                          if (!e.contentTopics.length) throw new Error("Must provide list of contentTopics to subscribe to");
                          return this._subscribe(e, t);
                      }
                      getToken() {
                          if (!this.authCache) throw new Error("AuthCache is not set on API Client");
                          return this.authCache.getToken();
                      }
                      setAuthenticator(e, t) {
                          this.authCache = new c.default(e, t);
                      }
                      headers() {
                          const e = new Headers;
                          return e.set("X-Client-Version", this.version), this.appVersion && e.set("X-App-Version", this.appVersion), e;
                      }
                  };
              },
              8901: function(e, t, r) {
                  "use strict";
                  var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {
                      void 0 === n && (n = r), Object.defineProperty(e, n, {
                          enumerable: !0,
                          get: function() {
                              return t[r];
                          }
                      });
                  } : function(e, t, r, n) {
                      void 0 === n && (n = r), e[n] = t[r];
                  }), i = this && this.__setModuleDefault || (Object.create ? function(e, t) {
                      Object.defineProperty(e, "default", {
                          enumerable: !0,
                          value: t
                      });
                  } : function(e, t) {
                      e.default = t;
                  }), o = this && this.__importStar || function(e) {
                      if (e && e.__esModule) return e;
                      var t = {};
                      if (null != e) for(var r in e)"default" !== r && Object.prototype.hasOwnProperty.call(e, r) && n(t, e, r);
                      return i(t, e), t;
                  }, s = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  }, a = this && this.__asyncValues || function(e) {
                      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                      var t, r = e[Symbol.asyncIterator];
                      return r ? r.call(e) : (e = "function" == typeof __values ? __values(e) : e[Symbol.iterator](), t = {}, n("next"), n("throw"), n("return"), t[Symbol.asyncIterator] = function() {
                          return this;
                      }, t);
                      function n(r) {
                          t[r] = e[r] && function(t) {
                              return new Promise(function(n, i) {
                                  !function(e, t, r, n) {
                                      Promise.resolve(n).then(function(t) {
                                          e({
                                              value: t,
                                              done: r
                                          });
                                      }, t);
                                  }(n, i, (t = e[r](t)).done, t.value);
                              });
                          };
                      }
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.defaultOptions = t.Compression = t.KeyStoreType = void 0;
                  const l = r(2449), u = r(5506), c = r(9982), d = r(9535), h = r(5880), f = r(6254), p = r(5783), m = r(1796), y = r(3374), g = o(r(1962)), v = r(9099), b = r(7915), w = r(98), { Compression: _  } = m.content;
                  t.Compression = _;
                  const { b64Decode: S  } = m.fetcher, E = 104857600;
                  var k;
                  function A(e) {
                      const t = {
                          keyStoreType: k.networkTopicStoreV1,
                          privateKeyOverride: void 0,
                          env: "dev",
                          apiUrl: void 0,
                          codecs: [
                              new f.TextCodec
                          ],
                          maxContentSize: E
                      };
                      return (null == e ? void 0 : e.codecs) && (e.codecs = t.codecs.concat(e.codecs)), (null == e ? void 0 : e.privateKeyOverride) && !(null == e ? void 0 : e.keyStoreType) && (e.keyStoreType = k.static), Object.assign(Object.assign({}, t), e);
                  }
                  !function(e) {
                      e[e.networkTopicStoreV1 = 0] = "networkTopicStoreV1", e[e.static = 1] = "static";
                  }(k = t.KeyStoreType || (t.KeyStoreType = {})), t.defaultOptions = A;
                  class P {
                      constructor(e, t, r){
                          this.contacts = new Set, this.knownPublicKeyBundles = new Map, this.legacyKeys = e, this.keys = l.PrivateKeyBundleV2.fromLegacyBundle(e), this.keystore = r, this.address = e.identityKey.publicKey.walletSignatureAddress(), this._conversations = new h.Conversations(this), this._codecs = new Map, this._maxContentSize = E, this.apiClient = t;
                      }
                      get conversations() {
                          return this._conversations;
                      }
                      get publicKeyBundle() {
                          return this.legacyKeys.getPublicKeyBundle();
                      }
                      static create(e, t) {
                          return s(this, void 0, void 0, function*() {
                              const r = A(t), n = function(e) {
                                  const t = e.apiUrl || g.ApiUrls[e.env];
                                  return new g.default(t, {
                                      appVersion: e.appVersion
                                  });
                              }(r), i = yield function(e, t, r) {
                                  return s(this, void 0, void 0, function*() {
                                      if (!e.privateKeyOverride && !t) throw new Error("Must provide either a Signer or specify privateKeyOverride");
                                      const n = function(e, t, r) {
                                          switch(e.keyStoreType){
                                              case k.networkTopicStoreV1:
                                                  if (!t) throw new Error("Must provide a wallet for networkTopicStore");
                                                  return function(e, t) {
                                                      return new d.EncryptedKeyStore(e, new d.PrivateTopicStore(t));
                                                  }(t, r);
                                              case k.static:
                                                  if (!e.privateKeyOverride) throw new Error("Must provide a privateKeyOverride to use static store");
                                                  return n = e.privateKeyOverride, new d.StaticKeyStore(n);
                                          }
                                          var n;
                                      }(e, t, r);
                                      return function(e, t) {
                                          return s(this, void 0, void 0, function*() {
                                              let r = yield t.loadPrivateKeyBundle();
                                              if (r) return r;
                                              if (!e) throw new Error("No wallet found");
                                              return r = yield l.PrivateKeyBundleV1.generate(e), yield t.storePrivateKeyBundle(r), r;
                                          });
                                      }(t, n);
                                  });
                              }(r, e, n), o = yield w.InMemoryKeystore.create(i);
                              n.setAuthenticator(new v.Authenticator(i.identityKey));
                              const a = new P(i, n, o);
                              return yield a.init(r), a;
                          });
                      }
                      static getKeys(e, t) {
                          return s(this, void 0, void 0, function*() {
                              return (yield P.create(e, t)).legacyKeys.encode();
                          });
                      }
                      init(e) {
                          return s(this, void 0, void 0, function*() {
                              e.codecs.forEach((e)=>{
                                  this.registerCodec(e);
                              }), this._maxContentSize = e.maxContentSize, yield this.ensureUserContactPublished(e.publishLegacyContact);
                          });
                      }
                      close() {
                          return s(this, void 0, void 0, function*() {});
                      }
                      ensureUserContactPublished(e = !1) {
                          return s(this, void 0, void 0, function*() {
                              const t = yield N(this.apiClient, this.address);
                              t && t instanceof l.SignedPublicKeyBundle && this.keys.getPublicKeyBundle().equals(t) || (this.publishUserContact(!0), e || this.publishUserContact(e));
                          });
                      }
                      publishUserContact(e = !1) {
                          return s(this, void 0, void 0, function*() {
                              const t = e ? this.legacyKeys : this.keys;
                              yield this.publishEnvelopes([
                                  {
                                      contentTopic: (0, u.buildUserContactTopic)(this.address),
                                      message: (0, y.encodeContactBundle)(t.getPublicKeyBundle())
                                  }
                              ]);
                          });
                      }
                      getUserContact(e) {
                          return s(this, void 0, void 0, function*() {
                              e = c.utils.getAddress(e);
                              const t = this.knownPublicKeyBundles.get(e);
                              if (t) return t;
                              const r = yield N(this.apiClient, e);
                              return r && this.knownPublicKeyBundles.set(e, r), r;
                          });
                      }
                      getUserContacts(e) {
                          return s(this, void 0, void 0, function*() {
                              const t = e.map((e)=>c.utils.getAddress(e)), r = new Map, n = [];
                              for (const e of t){
                                  const t = this.knownPublicKeyBundles.get(e);
                                  t ? r.set(e, t) : (r.set(e, void 0), n.push(e));
                              }
                              const i = yield C(this.apiClient, n);
                              for(let e = 0; e < i.length; e++){
                                  const t = n[e], o = i[e];
                                  r.set(t, o), o && this.knownPublicKeyBundles.set(t, o);
                              }
                              return t.map((e)=>r.get(e));
                          });
                      }
                      forgetContact(e) {
                          e = c.utils.getAddress(e), this.knownPublicKeyBundles.delete(e);
                      }
                      canMessage(e) {
                          return s(this, void 0, void 0, function*() {
                              try {
                                  return Array.isArray(e) ? (yield this.getUserContacts(e)).map((e)=>!!e) : void 0 !== (yield this.getUserContact(e));
                              } catch (e) {
                                  return !1;
                              }
                          });
                      }
                      static canMessage(e, t) {
                          return s(this, void 0, void 0, function*() {
                              const r = (null == t ? void 0 : t.apiUrl) || g.ApiUrls[(null == t ? void 0 : t.env) || "dev"];
                              if (Array.isArray(e)) {
                                  const n = e.map((e)=>c.utils.getAddress(e));
                                  return (yield C(new g.default(r, {
                                      appVersion: null == t ? void 0 : t.appVersion
                                  }), n)).map((e)=>!!e);
                              }
                              try {
                                  e = c.utils.getAddress(e);
                              } catch (e) {
                                  return !1;
                              }
                              return void 0 !== (yield N(new g.default(r, {
                                  appVersion: null == t ? void 0 : t.appVersion
                              }), e));
                          });
                      }
                      validateEnvelope(e) {
                          const t = e.message;
                          if (!e.contentTopic) throw new Error("Missing content topic");
                          if (!t || !t.length) throw new Error("Cannot publish empty message");
                      }
                      publishEnvelopes(e) {
                          return s(this, void 0, void 0, function*() {
                              for (const t of e)this.validateEnvelope(t);
                              try {
                                  yield this.apiClient.publish(e);
                              } catch (e) {
                                  console.log(e);
                              }
                          });
                      }
                      registerCodec(e) {
                          const t = e.contentType, r = `${t.authorityId}/${t.typeId}`;
                          this._codecs.set(r, e);
                      }
                      codecFor(e) {
                          const t = `${e.authorityId}/${e.typeId}`, r = this._codecs.get(t);
                          if (r && !(e.versionMajor > r.contentType.versionMajor)) return r;
                      }
                      encodeContent(e, t) {
                          return s(this, void 0, void 0, function*() {
                              const r = (null == t ? void 0 : t.contentType) || f.ContentTypeText, n = this.codecFor(r);
                              if (!n) throw new Error("unknown content type " + r);
                              const i = n.encode(e, this);
                              return (null == t ? void 0 : t.contentFallback) && (i.fallback = t.contentFallback), "number" == typeof (null == t ? void 0 : t.compression) && (i.compression = t.compression), yield (0, p.compress)(i), m.content.EncodedContent.encode(i).finish();
                          });
                      }
                      listInvitations(e) {
                          return this.listEnvelopes([
                              (0, u.buildUserInviteTopic)(this.address)
                          ], b.SealedInvitation.fromEnvelope, e);
                      }
                      listEnvelopes(e, t, r) {
                          return s(this, void 0, void 0, function*() {
                              r || (r = {});
                              const { startTime: n , endTime: i , limit: o  } = r, s = yield this.apiClient.query({
                                  contentTopics: e,
                                  startTime: n,
                                  endTime: i
                              }, {
                                  direction: r.direction || m.messageApi.SortDirection.SORT_DIRECTION_ASCENDING,
                                  limit: o
                              }), a = [];
                              for (const e of s)if (e.message) try {
                                  const r = yield t(e);
                                  a.push(r);
                              } catch (e) {
                                  console.warn("Error in listEnvelopes mapper", e);
                              }
                              return a;
                          });
                      }
                      listEnvelopesPaginated(e, t, r) {
                          return (0, u.mapPaginatedStream)(this.apiClient.queryIteratePages({
                              contentTopics: e,
                              startTime: null == r ? void 0 : r.startTime,
                              endTime: null == r ? void 0 : r.endTime
                          }, {
                              direction: null == r ? void 0 : r.direction,
                              pageSize: (null == r ? void 0 : r.pageSize) || 100
                          }), t);
                      }
                      signBytes(e) {
                          return s(this, void 0, void 0, function*() {
                              return this.keys.identityKey.sign(e);
                          });
                      }
                  }
                  function N(e, t) {
                      var r, n;
                      return s(this, void 0, void 0, function*() {
                          const i = e.queryIterator({
                              contentTopics: [
                                  (0, u.buildUserContactTopic)(t)
                              ]
                          }, {
                              pageSize: 5,
                              direction: g.SortDirection.SORT_DIRECTION_DESCENDING
                          });
                          try {
                              for(var o, s = a(i); !(o = yield s.next()).done;){
                                  const e = o.value;
                                  if (!e.message) continue;
                                  const r = (0, y.decodeContactBundle)(S(e.message.toString()));
                                  if ((yield null == r ? void 0 : r.walletSignatureAddress()) === t) return r;
                              }
                          } catch (e) {
                              r = {
                                  error: e
                              };
                          } finally{
                              try {
                                  o && !o.done && (n = s.return) && (yield n.call(s));
                              } finally{
                                  if (r) throw r.error;
                              }
                          }
                      });
                  }
                  function C(e, t) {
                      return s(this, void 0, void 0, function*() {
                          const r = t.map(u.buildUserContactTopic), n = yield e.batchQuery(r.map((e)=>({
                                  contentTopics: [
                                      e
                                  ],
                                  pageSize: 5,
                                  direction: g.SortDirection.SORT_DIRECTION_DESCENDING
                              })));
                          return Promise.all(t.map((e, t)=>s(this, void 0, void 0, function*() {
                                  const r = n[t];
                                  if (r) {
                                      for (const t of r)if (t.message) try {
                                          const r = (0, y.decodeContactBundle)(S(t.message.toString())), n = yield null == r ? void 0 : r.walletSignatureAddress();
                                          if (e === n) return r;
                                          console.info("Received contact bundle with incorrect address");
                                      } catch (e) {
                                          console.info("Invalid contact bundle", e);
                                      }
                                  }
                              })));
                      });
                  }
                  t.default = P;
              },
              5783: function(e, t, r) {
                  "use strict";
                  var n = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.writeStreamToBytes = t.readStreamFromBytes = t.compress = t.decompress = void 0;
                  const i = r(1796);
                  function o(e) {
                      if (e === i.content.Compression.COMPRESSION_GZIP) return "gzip";
                      if (e === i.content.Compression.COMPRESSION_DEFLATE) return "deflate";
                      throw new Error("unrecognized compression algorithm");
                  }
                  function s(e, t = 1024) {
                      let r = 0;
                      return new ReadableStream({
                          pull (n) {
                              if (r >= e.length) return n.close();
                              let i = r + t;
                              i = i <= e.length ? i : e.length, n.enqueue(e.subarray(r, i)), r = i;
                          }
                      });
                  }
                  function a(e, t) {
                      let r = 0;
                      return new WritableStream({
                          write (n) {
                              const i = r + n.length;
                              if (i > t) throw new Error("maximum output size exceeded");
                              for(; e.bytes.length < i;)e.bytes = l(e.bytes, t);
                              e.bytes.set(n, r), r = i;
                          },
                          close () {
                              r < e.bytes.length && (e.bytes = e.bytes.subarray(0, r));
                          }
                      });
                  }
                  function l(e, t) {
                      let r = 2 * e.length;
                      r > t && (r = t);
                      const n = new Uint8Array(r);
                      return n.set(e), n;
                  }
                  r(4215), t.decompress = function(e, t) {
                      return n(this, void 0, void 0, function*() {
                          if (void 0 === e.compression) return;
                          const r = {
                              bytes: new Uint8Array(e.content.length)
                          };
                          yield s(e.content).pipeThrough(new DecompressionStream(o(e.compression))).pipeTo(a(r, t)), e.content = r.bytes;
                      });
                  }, t.compress = function(e) {
                      return n(this, void 0, void 0, function*() {
                          if (void 0 === e.compression) return;
                          const t = {
                              bytes: new Uint8Array(e.content.length / 10)
                          };
                          yield s(e.content).pipeThrough(new CompressionStream(o(e.compression))).pipeTo(a(t, e.content.length + 1e3)), e.content = t.bytes;
                      });
                  }, t.readStreamFromBytes = s, t.writeStreamToBytes = a;
              },
              3374: (e, t, r)=>{
                  "use strict";
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.encodeContactBundle = t.decodeContactBundle = void 0;
                  const n = r(1796), i = r(2449);
                  t.decodeContactBundle = function(e) {
                      var t, r;
                      let o;
                      try {
                          o = n.contact.ContactBundle.decode(e);
                      } catch (t) {
                          const r = n.publicKey.PublicKeyBundle.decode(e);
                          o = {
                              v1: {
                                  keyBundle: new i.PublicKeyBundle(r)
                              },
                              v2: void 0
                          };
                      }
                      if (null === (t = o.v1) || void 0 === t ? void 0 : t.keyBundle) return new i.PublicKeyBundle(o.v1.keyBundle);
                      if (null === (r = o.v2) || void 0 === r ? void 0 : r.keyBundle) return new i.SignedPublicKeyBundle(o.v2.keyBundle);
                      throw new Error("unknown or invalid contact bundle");
                  }, t.encodeContactBundle = function(e) {
                      return e instanceof i.PublicKeyBundle ? n.contact.ContactBundle.encode({
                          v1: {
                              keyBundle: e
                          },
                          v2: void 0
                      }).finish() : n.contact.ContactBundle.encode({
                          v1: void 0,
                          v2: {
                              keyBundle: e
                          }
                      }).finish();
                  };
              },
              7915: function(e, t, r) {
                  "use strict";
                  var n = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  }, i = this && this.__importDefault || function(e) {
                      return e && e.__esModule ? e : {
                          default: e
                      };
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.SealedInvitation = t.SealedInvitationV1 = t.SealedInvitationHeaderV1 = t.InvitationV1 = void 0;
                  const o = i(r(1583)), s = r(8245), a = r(1796), l = i(r(7527)), u = r(2449), c = r(5506), { b64Decode: d  } = a.fetcher;
                  class h {
                      constructor({ topic: e , context: t , aes256GcmHkdfSha256: r  }){
                          if (!e || !e.length) throw new Error("Missing topic");
                          if (!r || !r.keyMaterial || !r.keyMaterial.length) throw new Error("Missing key material");
                          this.topic = e, this.context = t, this.aes256GcmHkdfSha256 = r;
                      }
                      static createRandom(e) {
                          const t = (0, c.buildDirectMessageTopicV2)(Buffer.from(u.utils.getRandomValues(new Uint8Array(32))).toString("base64").replace(/=*$/g, "").replace("/", "-")), r = u.utils.getRandomValues(new Uint8Array(32));
                          return new h({
                              topic: t,
                              aes256GcmHkdfSha256: {
                                  keyMaterial: r
                              },
                              context: e
                          });
                      }
                      toBytes() {
                          return a.invitation.InvitationV1.encode(this).finish();
                      }
                      static fromBytes(e) {
                          return new h(a.invitation.InvitationV1.decode(e));
                      }
                  }
                  t.InvitationV1 = h;
                  class f {
                      constructor({ sender: e , recipient: t , createdNs: r  }){
                          if (!e) throw new Error("Missing sender");
                          if (!t) throw new Error("Missing recipient");
                          this.sender = new s.SignedPublicKeyBundle(e), this.recipient = new s.SignedPublicKeyBundle(t), this.createdNs = r;
                      }
                      toBytes() {
                          return a.invitation.SealedInvitationHeaderV1.encode(this).finish();
                      }
                      static fromBytes(e) {
                          return new f(a.invitation.SealedInvitationHeaderV1.decode(e));
                      }
                  }
                  t.SealedInvitationHeaderV1 = f;
                  class p {
                      constructor({ headerBytes: e , ciphertext: t  }){
                          if (!e || !e.length) throw new Error("Missing header bytes");
                          if (!t) throw new Error("Missing ciphertext");
                          this.headerBytes = e, this.ciphertext = new l.default(t);
                      }
                      get header() {
                          return this._header || (this._header = f.fromBytes(this.headerBytes)), this._header;
                      }
                      getInvitation(e) {
                          return n(this, void 0, void 0, function*() {
                              if (this._invitation) return this._invitation;
                              const t = this.header;
                              let r;
                              r = e.identityKey.matches(this.header.sender.identityKey) ? yield e.sharedSecret(t.recipient, t.sender.preKey, !1) : yield e.sharedSecret(t.sender, t.recipient.preKey, !0);
                              const n = yield (0, u.decrypt)(this.ciphertext, r, this.headerBytes);
                              return this._invitation = h.fromBytes(n), this._invitation;
                          });
                      }
                      toBytes() {
                          return a.invitation.SealedInvitationV1.encode(this).finish();
                      }
                      static fromBytes(e) {
                          return new p(a.invitation.SealedInvitationV1.decode(e));
                      }
                  }
                  t.SealedInvitationV1 = p;
                  class m {
                      constructor({ v1: e  }){
                          if (!e) throw new Error("Missing v1 invitation");
                          this.v1 = new p(e);
                      }
                      toBytes() {
                          return a.invitation.SealedInvitation.encode(this).finish();
                      }
                      static fromBytes(e) {
                          return new m(a.invitation.SealedInvitation.decode(e));
                      }
                      static fromEnvelope(e) {
                          return n(this, void 0, void 0, function*() {
                              if (!e.message || !e.timestampNs) throw new Error("invalid invitation envelope");
                              const t = m.fromBytes(d(e.message)), r = o.default.fromString(e.timestampNs);
                              if (!t.v1.header.createdNs.equals(r)) throw new Error("envelope and header timestamp mistmatch");
                              return t;
                          });
                      }
                      static createV1({ sender: e , recipient: t , created: r , invitation: i  }) {
                          return n(this, void 0, void 0, function*() {
                              const n = new f({
                                  sender: e.getPublicKeyBundle(),
                                  recipient: t,
                                  createdNs: (0, c.dateToNs)(r)
                              }).toBytes(), o = yield e.sharedSecret(t, e.getCurrentPreKey().publicKey, !1), s = i.toBytes(), a = yield (0, u.encrypt)(s, o, n);
                              return new m({
                                  v1: {
                                      headerBytes: n,
                                      ciphertext: a
                                  }
                              });
                          });
                      }
                  }
                  t.SealedInvitation = m;
              },
              6044: function(e, t, r) {
                  "use strict";
                  var n = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  }, i = this && this.__importDefault || function(e) {
                      return e && e.__esModule ? e : {
                          default: e
                      };
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.decodeContent = t.DecodedMessage = t.MessageV2 = t.MessageV1 = void 0;
                  const o = r(1796), s = i(r(1583)), a = i(r(7527)), l = r(2449), u = r(9272), c = r(6314), d = r(6397), h = r(5506), f = r(5783), p = (e)=>{
                      var t, r;
                      if (null === (t = e.v1) || void 0 === t ? void 0 : t.ciphertext) return [
                          e.v1.headerBytes,
                          new a.default(e.v1.ciphertext)
                      ];
                      if (null === (r = e.v2) || void 0 === r ? void 0 : r.ciphertext) return [
                          e.v2.headerBytes,
                          new a.default(e.v2.ciphertext)
                      ];
                      throw new Error("unknown message version");
                  };
                  class m {
                      constructor(e, t, r){
                          [this.headerBytes, this.ciphertext] = p(r), this.id = e, this.bytes = t;
                      }
                      toBytes() {
                          return this.bytes;
                      }
                  }
                  class y extends m {
                      constructor(e, t, r, n, i){
                          super(e, t, r), this.conversation = void 0, this.senderAddress = i, this.header = n;
                      }
                      static create(e, t, r) {
                          return n(this, void 0, void 0, function*() {
                              if (!t.sender) throw new Error("missing message sender");
                              const n = new l.PublicKeyBundle(t.sender).walletSignatureAddress(), i = (0, u.bytesToHex)((yield (0, c.sha256)(r)));
                              return new y(i, r, e, t, n);
                          });
                      }
                      get sent() {
                          return new Date(this.header.timestamp.toNumber());
                      }
                      get recipientAddress() {
                          var e, t;
                          if (null === (t = null === (e = this.header) || void 0 === e ? void 0 : e.recipient) || void 0 === t ? void 0 : t.identityKey) return new l.PublicKey(this.header.recipient.identityKey).walletSignatureAddress();
                      }
                      static encode(e, t, r, i) {
                          return n(this, void 0, void 0, function*() {
                              const n = yield e.sharedSecret(t, e.getCurrentPreKey().publicKey, !1), a = {
                                  sender: e.getPublicKeyBundle(),
                                  recipient: t,
                                  timestamp: s.default.fromNumber(i.getTime())
                              }, u = o.message.MessageHeaderV1.encode(a).finish(), c = {
                                  v1: {
                                      headerBytes: u,
                                      ciphertext: yield (0, l.encrypt)(r, n, u)
                                  },
                                  v2: void 0
                              }, d = o.message.Message.encode(c).finish();
                              return y.create(c, a, d);
                          });
                      }
                      static fromBytes(e) {
                          const t = o.message.Message.decode(e), [r] = p(t), n = o.message.MessageHeaderV1.decode(r);
                          if (!n) throw new Error("missing message header");
                          if (!n.sender) throw new Error("missing message sender");
                          if (!n.sender.identityKey) throw new Error("missing message sender identity key");
                          if (!n.sender.preKey) throw new Error("missing message sender pre-key");
                          if (!n.recipient) throw new Error("missing message recipient");
                          if (!n.recipient.identityKey) throw new Error("missing message recipient identity-key");
                          if (!n.recipient.preKey) throw new Error("missing message recipient pre-key");
                          return y.create(t, n, e);
                      }
                      decrypt(e) {
                          var t, r;
                          return n(this, void 0, void 0, function*() {
                              const n = this.header;
                              if (!((null === (t = n.recipient) || void 0 === t ? void 0 : t.identityKey) && (null === (r = n.sender) || void 0 === r ? void 0 : r.identityKey) && n.recipient.preKey && n.sender.preKey)) throw new Error("Missing headers");
                              const i = new l.PublicKeyBundle({
                                  identityKey: new l.PublicKey(n.recipient.identityKey),
                                  preKey: new l.PublicKey(n.recipient.preKey)
                              }), o = new l.PublicKeyBundle({
                                  identityKey: new l.PublicKey(n.sender.identityKey),
                                  preKey: new l.PublicKey(n.sender.preKey)
                              });
                              let s;
                              return s = e.identityKey.matches(o.identityKey) ? yield e.sharedSecret(i, o.preKey, !1) : yield e.sharedSecret(o, i.preKey, !0), (0, l.decrypt)(this.ciphertext, s, this.headerBytes);
                          });
                      }
                  }
                  t.MessageV1 = y;
                  class g extends m {
                      constructor(e, t, r, n, i, o){
                          super(e, t, r), this.header = n, this.signed = i, this.senderAddress = o;
                      }
                      static create(e, t, r, i) {
                          return n(this, void 0, void 0, function*() {
                              const n = (0, u.bytesToHex)((yield (0, c.sha256)(i)));
                              if (!r.sender) throw new Error("missing message sender");
                              const o = yield new l.SignedPublicKeyBundle(r.sender).walletSignatureAddress();
                              return new g(n, i, e, t, r, o);
                          });
                      }
                      get sent() {
                          return (0, h.nsToDate)(this.header.createdNs);
                      }
                  }
                  t.MessageV2 = g;
                  class v {
                      constructor({ id: e , messageVersion: t , senderAddress: r , recipientAddress: n , conversation: i , contentType: o , contentTopic: s , content: a , sent: l , error: u  }){
                          this.id = e, this.messageVersion = t, this.senderAddress = r, this.recipientAddress = n, this.conversation = i, this.contentType = o, this.sent = l, this.error = u, this.content = a, this.contentTopic = s;
                      }
                      static fromV1Message(e, t, r, n, i, o) {
                          const { id: s , senderAddress: a , recipientAddress: l , sent: u  } = e;
                          if (!a) throw new Error("Sender address is required");
                          return new v({
                              id: s,
                              messageVersion: "v1",
                              senderAddress: a,
                              recipientAddress: l,
                              sent: u,
                              content: t,
                              contentType: r,
                              contentTopic: n,
                              conversation: i,
                              error: o
                          });
                      }
                      static fromV2Message(e, t, r, n, i, o) {
                          const { id: s , senderAddress: a , sent: l  } = e;
                          if (!a) throw new Error("Sender address is required");
                          return new v({
                              id: s,
                              messageVersion: "v2",
                              senderAddress: a,
                              sent: l,
                              content: t,
                              contentType: r,
                              contentTopic: n,
                              conversation: i,
                              error: o
                          });
                      }
                  }
                  t.DecodedMessage = v, t.decodeContent = function(e, t) {
                      return n(this, void 0, void 0, function*() {
                          const r = o.content.EncodedContent.decode(e);
                          if (!r.type) throw new Error("missing content type");
                          let n, i, s = new d.ContentTypeId(r.type);
                          yield (0, f.decompress)(r, 1e3);
                          const a = t.codecFor(s);
                          return a ? n = a.decode(r, t) : (i = new Error("unknown content type " + s), r.fallback && (n = r.fallback, s = d.ContentTypeFallback)), {
                              content: n,
                              contentType: s,
                              error: i
                          };
                      });
                  };
              },
              6397: (e, t)=>{
                  "use strict";
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.ContentTypeFallback = t.ContentTypeId = void 0;
                  class r {
                      constructor(e){
                          this.authorityId = e.authorityId, this.typeId = e.typeId, this.versionMajor = e.versionMajor, this.versionMinor = e.versionMinor;
                      }
                      toString() {
                          return `${this.authorityId}/${this.typeId}:${this.versionMajor}.${this.versionMinor}`;
                      }
                      sameAs(e) {
                          return this.authorityId === e.authorityId && this.typeId === e.typeId;
                      }
                  }
                  t.ContentTypeId = r, t.ContentTypeFallback = new r({
                      authorityId: "xmtp.org",
                      typeId: "fallback",
                      versionMajor: 1,
                      versionMinor: 0
                  });
              },
              220: function(e, t, r) {
                  "use strict";
                  var n = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.PreparedMessage = void 0;
                  const i = r(9272), o = r(6314);
                  t.PreparedMessage = class {
                      constructor(e, t){
                          this.messageEnvelope = e, this.onSend = t;
                      }
                      messageID() {
                          return n(this, void 0, void 0, function*() {
                              if (!this.messageEnvelope.message) throw new Error("no envelope message");
                              return (0, i.bytesToHex)((yield (0, o.sha256)(this.messageEnvelope.message)));
                          });
                      }
                      send() {
                          return n(this, void 0, void 0, function*() {
                              yield this.onSend();
                          });
                      }
                  };
              },
              4596: function(e, t) {
                  "use strict";
                  var r = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  });
                  class n {
                      constructor(e, t, r, n){
                          this.messages = [], this.resolvers = [], this.topics = t, this.client = e, this.callback = this.newMessageCallback(r, n);
                      }
                      newMessageCallback(e, t) {
                          return (n)=>r(this, void 0, void 0, function*() {
                                  if (n.message) try {
                                      const r = yield e(n);
                                      if (!r) return;
                                      if (t) {
                                          const e = t(r);
                                          e && this.resubscribeToTopics(e);
                                      }
                                      const i = this.resolvers.pop();
                                      i ? i({
                                          value: r
                                      }) : this.messages.unshift(r);
                                  } catch (e) {
                                      console.warn(e);
                                  }
                              });
                      }
                      start() {
                          return r(this, void 0, void 0, function*() {
                              if (!this.callback) throw new Error("Missing callback for stream");
                              this.unsubscribeFn = this.client.apiClient.subscribe({
                                  contentTopics: this.topics
                              }, (e)=>r(this, void 0, void 0, function*() {
                                      this.callback && (yield null == this ? void 0 : this.callback(e));
                                  }));
                          });
                      }
                      static create(e, t, i, o) {
                          return r(this, void 0, void 0, function*() {
                              const r = new n(e, t, i, o);
                              return yield r.start(), r;
                          });
                      }
                      [Symbol.asyncIterator]() {
                          return this;
                      }
                      return() {
                          return r(this, void 0, void 0, function*() {
                              return this.unsubscribeFn && (yield this.unsubscribeFn()), this.callback ? (this.callback = void 0, this.resolvers.forEach((e)=>e({
                                      value: void 0,
                                      done: !0
                                  })), {
                                  value: void 0,
                                  done: !0
                              }) : {
                                  value: void 0,
                                  done: !0
                              };
                          });
                      }
                      next() {
                          const e = this.messages.pop();
                          return e ? Promise.resolve({
                              value: e
                          }) : this.callback ? new Promise((e)=>this.resolvers.unshift(e)) : Promise.resolve({
                              value: void 0,
                              done: !0
                          });
                      }
                      resubscribeToTopics(e) {
                          return r(this, void 0, void 0, function*() {
                              if (!this.callback || !this.unsubscribeFn) throw new Error("Missing callback for stream");
                              yield this.unsubscribeFn(), this.topics = e, this.unsubscribeFn = this.client.apiClient.subscribe({
                                  contentTopics: this.topics
                              }, (e)=>r(this, void 0, void 0, function*() {
                                      this.callback && (yield null == this ? void 0 : this.callback(e));
                                  }));
                          });
                      }
                  }
                  t.default = n;
              },
              4203: function(e, t) {
                  "use strict";
                  var r = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.default = class {
                      constructor(e, t = 3590){
                          this.authenticator = e, this.maxAgeMs = 1e3 * t;
                      }
                      getToken() {
                          return r(this, void 0, void 0, function*() {
                              return (!this.token || this.token.ageMs > this.maxAgeMs) && (yield this.refresh()), this.token.toBase64();
                          });
                      }
                      refresh() {
                          return r(this, void 0, void 0, function*() {
                              this.token = yield this.authenticator.createToken();
                          });
                      }
                  };
              },
              9064: (e, t, r)=>{
                  "use strict";
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  });
                  const n = r(1796), i = r(6908);
                  class o {
                      constructor({ walletAddr: e , createdNs: t  }){
                          this.walletAddr = e, this.createdNs = t;
                      }
                      static create(e, t) {
                          return t = t || new Date, new o({
                              walletAddr: e,
                              createdNs: (0, i.dateToNs)(t)
                          });
                      }
                      static fromBytes(e) {
                          const t = n.authn.AuthData.decode(e);
                          return new o(t);
                      }
                      toBytes() {
                          return n.authn.AuthData.encode(this).finish();
                      }
                  }
                  t.default = o;
              },
              2138: function(e, t, r) {
                  "use strict";
                  var n = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  }, i = this && this.__importDefault || function(e) {
                      return e && e.__esModule ? e : {
                          default: e
                      };
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  });
                  const o = r(1094), s = r(1796), a = i(r(9064)), l = r(9272), u = i(r(8140));
                  t.default = class {
                      constructor(e){
                          if (!e.publicKey.signature) throw new Error("Provided public key is not signed");
                          this.identityKey = e;
                      }
                      createToken(e) {
                          return n(this, void 0, void 0, function*() {
                              const t = a.default.create(this.identityKey.publicKey.walletSignatureAddress(), e || new Date).toBytes(), r = (0, o.keccak256)(t), n = yield this.identityKey.sign((0, l.hexToBytes)(r));
                              return new u.default(s.authn.Token.fromPartial({
                                  identityKey: s.publicKey.PublicKey.fromPartial(this.identityKey.publicKey),
                                  authDataBytes: t,
                                  authDataSignature: s.signature.Signature.fromPartial(n)
                              }));
                          });
                      }
                  };
              },
              8140: function(e, t, r) {
                  "use strict";
                  var n = this && this.__importDefault || function(e) {
                      return e && e.__esModule ? e : {
                          default: e
                      };
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  });
                  const i = r(1796), o = n(r(9064));
                  class s {
                      constructor({ identityKey: e , authDataBytes: t , authDataSignature: r  }){
                          if (!e) throw new Error("Missing identity key in token");
                          if (!r) throw new Error("Missing authDataSignature in token");
                          this.identityKey = e, this.authDataBytes = t, this.authDataSignature = r;
                      }
                      get authData() {
                          return this._authData || (this._authData = o.default.fromBytes(this.authDataBytes)), this._authData;
                      }
                      get ageMs() {
                          return (new Date).valueOf() - this.authData.createdNs.div(1e6).toNumber();
                      }
                      toBytes() {
                          return i.authn.Token.encode(this).finish();
                      }
                      static fromBytes(e) {
                          return new s(i.authn.Token.decode(e));
                      }
                      toBase64() {
                          return Buffer.from(this.toBytes()).toString("base64");
                      }
                  }
                  t.default = s;
              },
              9099: function(e, t, r) {
                  "use strict";
                  var n = this && this.__importDefault || function(e) {
                      return e && e.__esModule ? e : {
                          default: e
                      };
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.Token = t.AuthData = t.Authenticator = void 0;
                  var i = r(2138);
                  Object.defineProperty(t, "Authenticator", {
                      enumerable: !0,
                      get: function() {
                          return n(i).default;
                      }
                  });
                  var o = r(9064);
                  Object.defineProperty(t, "AuthData", {
                      enumerable: !0,
                      get: function() {
                          return n(o).default;
                      }
                  });
                  var s = r(8140);
                  Object.defineProperty(t, "Token", {
                      enumerable: !0,
                      get: function() {
                          return n(s).default;
                      }
                  });
              },
              4196: (e, t, r)=>{
                  "use strict";
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.CompositeCodec = t.ContentTypeComposite = void 0;
                  const n = r(6397), i = r(1796);
                  t.ContentTypeComposite = new n.ContentTypeId({
                      authorityId: "xmtp.org",
                      typeId: "composite",
                      versionMajor: 1,
                      versionMinor: 0
                  }), t.CompositeCodec = class {
                      get contentType() {
                          return t.ContentTypeComposite;
                      }
                      encode(e, r) {
                          const n = this.toProto(e, r);
                          let o;
                          o = n.composite ? n.composite : {
                              parts: [
                                  n
                              ]
                          };
                          const s = i.composite.Composite.encode(o).finish();
                          return {
                              type: t.ContentTypeComposite,
                              parameters: {},
                              content: s
                          };
                      }
                      decode(e, t) {
                          return this.fromProto({
                              composite: i.composite.Composite.decode(e.content),
                              part: void 0
                          }, t);
                      }
                      toProto(e, t) {
                          if ("type" in e) {
                              const r = t.codecFor(e.type);
                              if (!r) throw new Error(`missing codec for part type ${e.type}`);
                              return {
                                  part: r.encode(e.content, t),
                                  composite: void 0
                              };
                          }
                          const r = new Array;
                          for (const n of e.parts)r.push(this.toProto(n, t));
                          return {
                              composite: {
                                  parts: r
                              },
                              part: void 0
                          };
                      }
                      fromProto(e, t) {
                          if (e.part) {
                              if (!e.part.type) throw new Error("missing part content type");
                              const r = new n.ContentTypeId(e.part.type), i = t.codecFor(r);
                              if (!i) throw new Error(`missing codec for part type ${r}`);
                              return {
                                  type: r,
                                  content: i.decode(e.part, t)
                              };
                          }
                          if (!e.composite) throw new Error("invalid composite");
                          const r = new Array;
                          for (const n of e.composite.parts)r.push(this.fromProto(n, t));
                          return {
                              parts: r
                          };
                      }
                  };
              },
              6254: (e, t, r)=>{
                  "use strict";
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.TextCodec = t.Encoding = t.ContentTypeText = void 0;
                  const n = r(6397);
                  var i;
                  t.ContentTypeText = new n.ContentTypeId({
                      authorityId: "xmtp.org",
                      typeId: "text",
                      versionMajor: 1,
                      versionMinor: 0
                  }), function(e) {
                      e.utf8 = "UTF-8";
                  }(i = t.Encoding || (t.Encoding = {})), t.TextCodec = class {
                      get contentType() {
                          return t.ContentTypeText;
                      }
                      encode(e) {
                          return {
                              type: t.ContentTypeText,
                              parameters: {
                                  encoding: i.utf8
                              },
                              content: (new TextEncoder).encode(e)
                          };
                      }
                      decode(e) {
                          const t = e.parameters.encoding;
                          if (t && t !== i.utf8) throw new Error(`unrecognized encoding ${t}`);
                          return (new TextDecoder).decode(e.content);
                      }
                  };
              },
              5592: (e, t)=>{
                  "use strict";
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.XMTP_DEV_WARNING = void 0, t.XMTP_DEV_WARNING = "\nXX    XX MM    MM TTTTTT PPPPPP   DDDDD   EEEEEEE VV     VV \n XX  XX  MMM  MMM   TT   PP   PP  DD  DD  EE      VV     VV \n  XXXX   MM MM MM   TT   PPPPPP   DD   DD EEEEE    VV   VV  \n XX  XX  MM    MM   TT   PP       DD   DD EE        VV VV   \nXX    XX MM    MM   TT   PP       DDDDDD  EEEEEEE    VVV    \n\nConnected to the XMTP 'dev' network. Use 'production' for production messages.\nhttps://github.com/xmtp/xmtp-js#xmtp-production-and-dev-network-environments\n";
              },
              3937: function(e, t, r) {
                  "use strict";
                  var n = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  }, i = this && this.__importDefault || function(e) {
                      return e && e.__esModule ? e : {
                          default: e
                      };
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.ConversationV2 = t.ConversationV1 = void 0;
                  const o = r(5506), s = r(9982), a = r(6044), l = i(r(4596)), u = r(6044), c = r(1796), d = r(2449), h = r(220), f = i(r(7527)), p = r(6314), m = r(6254), y = r(98), g = i(r(1583)), { b64Decode: v  } = c.fetcher;
                  class b {
                      constructor(e, t, r){
                          this.context = null, this.peerAddress = s.utils.getAddress(t), this.client = e, this.createdAt = r;
                      }
                      messages(e) {
                          return n(this, void 0, void 0, function*() {
                              const t = (0, o.buildDirectMessageTopic)(this.peerAddress, this.client.address), r = yield this.client.listEnvelopes([
                                  t
                              ], this.decodeEnvelope.bind(this), e);
                              return this.decryptBatch(r, t, !1);
                          });
                      }
                      decryptBatch(e, t, r = !1) {
                          var i, o, s;
                          return n(this, void 0, void 0, function*() {
                              const n = (yield this.client.keystore.decryptV1(this.buildDecryptRequest(e))).responses, a = [];
                              for(let l = 0; l < n.length; l++){
                                  const u = n[l], d = e[l];
                                  if (u.error) {
                                      if (console.warn("Error decrypting message", u.error), r) throw new y.KeystoreError(null === (i = u.error) || void 0 === i ? void 0 : i.code, null === (o = u.error) || void 0 === o ? void 0 : o.message);
                                  } else if (null === (s = u.result) || void 0 === s ? void 0 : s.decrypted) try {
                                      a.push((yield this.buildDecodedMessage(d, u.result.decrypted, t)));
                                  } catch (e) {
                                      if (console.warn("Error decoding content", e), r) throw e;
                                  }
                                  else if (console.warn("Error decrypting message", u), r) throw new y.KeystoreError(c.keystore.ErrorCode.ERROR_CODE_UNSPECIFIED, "No result returned");
                              }
                              return a;
                          });
                      }
                      buildDecryptRequest(e) {
                          return {
                              requests: e.map((e)=>{
                                  var t, r, n, i;
                                  const o = new d.PublicKeyBundle({
                                      identityKey: null === (t = e.header.sender) || void 0 === t ? void 0 : t.identityKey,
                                      preKey: null === (r = e.header.sender) || void 0 === r ? void 0 : r.preKey
                                  }), s = this.client.publicKeyBundle.equals(o);
                                  return {
                                      payload: e.ciphertext,
                                      peerKeys: s ? new d.PublicKeyBundle({
                                          identityKey: null === (n = e.header.recipient) || void 0 === n ? void 0 : n.identityKey,
                                          preKey: null === (i = e.header.recipient) || void 0 === i ? void 0 : i.preKey
                                      }) : o,
                                      headerBytes: e.headerBytes,
                                      isSender: s
                                  };
                              })
                          };
                      }
                      buildDecodedMessage(e, t, r) {
                          return n(this, void 0, void 0, function*() {
                              const { content: n , contentType: i , error: o  } = yield (0, u.decodeContent)(t, this.client);
                              return a.DecodedMessage.fromV1Message(e, n, i, r, this, o);
                          });
                      }
                      messagesPaginated(e) {
                          return this.client.listEnvelopesPaginated([
                              this.topic
                          ], this.decodeMessage.bind(this), e);
                      }
                      decodeMessage(e) {
                          return n(this, void 0, void 0, function*() {
                              if (!e.contentTopic) throw new Error("Missing content topic");
                              const t = yield this.decodeEnvelope(e), r = yield this.decryptBatch([
                                  t
                              ], e.contentTopic, !0);
                              if (!r.length) throw new Error("No results");
                              return r[0];
                          });
                      }
                      get topic() {
                          return (0, o.buildDirectMessageTopic)(this.peerAddress, this.client.address);
                      }
                      prepareMessage(e, t) {
                          return n(this, void 0, void 0, function*() {
                              let r, i = yield this.client.getUserContact(this.peerAddress);
                              if (!i) throw new Error(`recipient ${this.peerAddress} is not registered`);
                              i instanceof d.PublicKeyBundle || (i = i.toLegacyBundle()), this.client.contacts.has(this.peerAddress) ? r = [
                                  this.topic
                              ] : (r = [
                                  (0, o.buildUserIntroTopic)(this.peerAddress),
                                  (0, o.buildUserIntroTopic)(this.client.address),
                                  this.topic
                              ], this.client.contacts.add(this.peerAddress)), (null == t ? void 0 : t.contentType) || m.ContentTypeText;
                              const s = yield this.encodeMessage(e, i, t), a = {
                                  contentTopic: this.topic,
                                  message: s.toBytes(),
                                  timestamp: s.sent
                              };
                              return new h.PreparedMessage(a, ()=>n(this, void 0, void 0, function*() {
                                      yield this.client.publishEnvelopes(r.map((e)=>({
                                              contentTopic: e,
                                              message: s.toBytes(),
                                              timestamp: s.sent
                                          })));
                                  }));
                          });
                      }
                      streamMessages() {
                          return l.default.create(this.client, [
                              this.topic
                          ], (e)=>n(this, void 0, void 0, function*() {
                                  return this.decodeMessage(e);
                              }));
                      }
                      export() {
                          return {
                              version: "v1",
                              peerAddress: this.peerAddress,
                              createdAt: this.createdAt.toISOString()
                          };
                      }
                      static fromExport(e, t) {
                          return new b(e, t.peerAddress, new Date(t.createdAt));
                      }
                      decodeEnvelope({ message: e , contentTopic: t  }) {
                          return n(this, void 0, void 0, function*() {
                              const r = c.fetcher.b64Decode(e), n = yield u.MessageV1.fromBytes(r), { senderAddress: i , recipientAddress: s  } = n;
                              if (!i || !s || !t || (0, o.buildDirectMessageTopic)(i, s) !== this.topic) throw new Error("Headers do not match intended recipient");
                              return n;
                          });
                      }
                      send(e, t) {
                          return n(this, void 0, void 0, function*() {
                              let r, n = yield this.client.getUserContact(this.peerAddress);
                              if (!n) throw new Error(`recipient ${this.peerAddress} is not registered`);
                              n instanceof d.PublicKeyBundle || (n = n.toLegacyBundle()), this.client.contacts.has(this.peerAddress) ? r = [
                                  this.topic
                              ] : (r = [
                                  (0, o.buildUserIntroTopic)(this.peerAddress),
                                  (0, o.buildUserIntroTopic)(this.client.address),
                                  this.topic
                              ], this.client.contacts.add(this.peerAddress));
                              const i = (null == t ? void 0 : t.contentType) || m.ContentTypeText, s = yield this.encodeMessage(e, n, t);
                              return yield this.client.publishEnvelopes(r.map((e)=>({
                                      contentTopic: e,
                                      message: s.toBytes(),
                                      timestamp: s.sent
                                  }))), a.DecodedMessage.fromV1Message(s, e, i, r[0], this);
                          });
                      }
                      encodeMessage(e, t, r) {
                          var i;
                          return n(this, void 0, void 0, function*() {
                              const n = (null == r ? void 0 : r.timestamp) || new Date, o = yield this.client.encodeContent(e, r), s = {
                                  sender: this.client.publicKeyBundle,
                                  recipient: t,
                                  timestamp: g.default.fromNumber(n.getTime())
                              }, a = c.message.MessageHeaderV1.encode(s).finish(), l = yield this.client.keystore.encryptV1({
                                  requests: [
                                      {
                                          recipient: t,
                                          headerBytes: a,
                                          payload: o
                                      }
                                  ]
                              });
                              if (!l.responses.length) throw new Error("No response from Keystore");
                              const d = l.responses[0];
                              this.validateKeystoreResponse(d);
                              const h = {
                                  v1: {
                                      headerBytes: a,
                                      ciphertext: null === (i = d.result) || void 0 === i ? void 0 : i.encrypted
                                  },
                                  v2: void 0
                              }, f = c.message.Message.encode(h).finish();
                              return u.MessageV1.create(h, s, f);
                          });
                      }
                      validateKeystoreResponse(e) {
                          if (e.error) throw new y.KeystoreError(e.error.code, e.error.message);
                          if (!e.result) throw new y.KeystoreError(c.keystore.ErrorCode.ERROR_CODE_UNSPECIFIED, "No result from Keystore");
                      }
                      get clientAddress() {
                          return this.client.address;
                      }
                  }
                  t.ConversationV1 = b;
                  class w {
                      constructor(e, t, r, n, i, o){
                          this.topic = t, this.keyMaterial = r, this.createdAt = i, this.context = o, this.client = e, this.peerAddress = n;
                      }
                      static create(e, t, r) {
                          return n(this, void 0, void 0, function*() {
                              const n = e.keys.getPublicKeyBundle().equals(r.sender) ? r.recipient : r.sender, i = s.utils.getAddress((yield n.walletSignatureAddress()));
                              return new w(e, t.topic, t.aes256GcmHkdfSha256.keyMaterial, i, (0, o.nsToDate)(r.createdNs), t.context);
                          });
                      }
                      messages(e) {
                          return n(this, void 0, void 0, function*() {
                              return this.client.listEnvelopes([
                                  this.topic
                              ], this.decodeMessage.bind(this), e);
                          });
                      }
                      messagesPaginated(e) {
                          return this.client.listEnvelopesPaginated([
                              this.topic
                          ], this.decodeMessage.bind(this), e);
                      }
                      streamMessages() {
                          return l.default.create(this.client, [
                              this.topic
                          ], this.decodeMessage.bind(this));
                      }
                      send(e, t) {
                          return n(this, void 0, void 0, function*() {
                              const r = yield this.encodeMessage(e, t);
                              yield this.client.publishEnvelopes([
                                  {
                                      contentTopic: this.topic,
                                      message: r.toBytes(),
                                      timestamp: r.sent
                                  }
                              ]);
                              const n = (null == t ? void 0 : t.contentType) || m.ContentTypeText;
                              return a.DecodedMessage.fromV2Message(r, e, n, this.topic, this);
                          });
                      }
                      get clientAddress() {
                          return this.client.address;
                      }
                      encodeMessage(e, t) {
                          return n(this, void 0, void 0, function*() {
                              const r = yield this.client.encodeContent(e, t), n = {
                                  topic: this.topic,
                                  createdNs: (0, o.dateToNs)((null == t ? void 0 : t.timestamp) || new Date)
                              }, i = c.message.MessageHeaderV2.encode(n).finish(), s = yield (0, p.sha256)(_(i, r)), a = {
                                  payload: r,
                                  sender: this.client.keys.getPublicKeyBundle(),
                                  signature: yield this.client.keys.getCurrentPreKey().sign(s)
                              }, l = c.content.SignedContent.encode(a).finish(), h = {
                                  v1: void 0,
                                  v2: {
                                      headerBytes: i,
                                      ciphertext: yield (0, d.encrypt)(l, this.keyMaterial, i)
                                  }
                              }, f = c.message.Message.encode(h).finish();
                              return u.MessageV2.create(h, n, a, f);
                          });
                      }
                      decodeMessage(e) {
                          var t, r, i, o, s;
                          return n(this, void 0, void 0, function*() {
                              if (!e.message || !e.contentTopic) throw new Error("empty envelope");
                              const n = v(e.message.toString()), l = c.message.Message.decode(n);
                              if (!l.v2) throw new Error("unknown message version");
                              const h = l.v2, m = c.message.MessageHeaderV2.decode(h.headerBytes);
                              if (m.topic !== this.topic) throw new Error("topic mismatch");
                              if (!h.ciphertext) throw new Error("missing ciphertext");
                              const y = yield (0, d.decrypt)(new f.default(h.ciphertext), this.keyMaterial, h.headerBytes), g = c.content.SignedContent.decode(y);
                              if (!(null === (t = g.sender) || void 0 === t ? void 0 : t.identityKey) || !(null === (r = g.sender) || void 0 === r ? void 0 : r.preKey) || !g.signature) throw new Error("incomplete signed content");
                              const b = null === (i = g.sender) || void 0 === i ? void 0 : i.preKey;
                              if (!b || !b.signature || !b.keyBytes) throw new Error("missing pre-key or pre-key signature");
                              const w = null === (o = g.sender) || void 0 === o ? void 0 : o.identityKey;
                              if (!w) throw new Error("missing identity key in bundle");
                              if (!(yield new d.SignedPublicKey(w).verifyKey(new d.SignedPublicKey(b)))) throw new Error("pre key not signed by identity key");
                              const S = yield (0, p.sha256)(_(h.headerBytes, g.payload));
                              if (!new d.SignedPublicKey(null === (s = g.sender) || void 0 === s ? void 0 : s.preKey).verify(new d.Signature(g.signature), S)) throw new Error("invalid signature");
                              const E = yield u.MessageV2.create(l, m, g, n), { content: k , contentType: A , error: P  } = yield (0, u.decodeContent)(g.payload, this.client);
                              return a.DecodedMessage.fromV2Message(E, k, A, e.contentTopic, this, P);
                          });
                      }
                      prepareMessage(e, t) {
                          return n(this, void 0, void 0, function*() {
                              const r = yield this.encodeMessage(e, t), i = {
                                  contentTopic: this.topic,
                                  message: r.toBytes(),
                                  timestamp: r.sent
                              };
                              return new h.PreparedMessage(i, ()=>n(this, void 0, void 0, function*() {
                                      yield this.client.publishEnvelopes([
                                          {
                                              contentTopic: this.topic,
                                              message: r.toBytes(),
                                              timestamp: r.sent
                                          }
                                      ]);
                                  }));
                          });
                      }
                      export() {
                          return {
                              version: "v2",
                              topic: this.topic,
                              keyMaterial: Buffer.from(this.keyMaterial).toString("base64"),
                              peerAddress: this.peerAddress,
                              createdAt: this.createdAt.toISOString(),
                              context: this.context
                          };
                      }
                      static fromExport(e, t) {
                          return new w(e, t.topic, Buffer.from(t.keyMaterial, "base64"), t.peerAddress, new Date(t.createdAt), t.context);
                      }
                  }
                  function _(e, t) {
                      const r = new Uint8Array(e.length + t.length);
                      return r.set(e), r.set(t, e.length), r;
                  }
                  t.ConversationV2 = w;
              },
              1851: function(e, t, r) {
                  "use strict";
                  var n = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  }, i = this && this.__asyncValues || function(e) {
                      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                      var t, r = e[Symbol.asyncIterator];
                      return r ? r.call(e) : (e = "function" == typeof __values ? __values(e) : e[Symbol.iterator](), t = {}, n("next"), n("throw"), n("return"), t[Symbol.asyncIterator] = function() {
                          return this;
                      }, t);
                      function n(r) {
                          t[r] = e[r] && function(t) {
                              return new Promise(function(n, i) {
                                  !function(e, t, r, n) {
                                      Promise.resolve(n).then(function(t) {
                                          e({
                                              value: t,
                                              done: r
                                          });
                                      }, t);
                                  }(n, i, (t = e[r](t)).done, t.value);
                              });
                          };
                      }
                  }, o = this && this.__await || function(e) {
                      return this instanceof o ? (this.v = e, this) : new o(e);
                  }, s = this && this.__asyncGenerator || function(e, t, r) {
                      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                      var n, i = r.apply(e, t || []), s = [];
                      return n = {}, a("next"), a("throw"), a("return"), n[Symbol.asyncIterator] = function() {
                          return this;
                      }, n;
                      function a(e) {
                          i[e] && (n[e] = function(t) {
                              return new Promise(function(r, n) {
                                  s.push([
                                      e,
                                      t,
                                      r,
                                      n
                                  ]) > 1 || l(e, t);
                              });
                          });
                      }
                      function l(e, t) {
                          try {
                              (r = i[e](t)).value instanceof o ? Promise.resolve(r.value.v).then(u, c) : d(s[0][2], r);
                          } catch (e) {
                              d(s[0][3], e);
                          }
                          var r;
                      }
                      function u(e) {
                          l("next", e);
                      }
                      function c(e) {
                          l("throw", e);
                      }
                      function d(e, t) {
                          e(t), s.shift(), s.length && l(s[0][0], s[0][1]);
                      }
                  }, a = this && this.__importDefault || function(e) {
                      return e && e.__esModule ? e : {
                          default: e
                      };
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.ConversationCache = void 0;
                  const l = r(8125), u = r(8245), c = r(3937), d = r(6044), h = a(r(4596)), f = r(5506), p = r(7915), m = r(2449), y = r(1796), g = r(1962), { b64Decode: v  } = y.fetcher, b = (e)=>Boolean(e.recipientAddress && e.senderAddress);
                  class w {
                      constructor(){
                          this.conversations = [], this.mutex = new l.Mutex, this.seenTopics = new Set;
                      }
                      load(e) {
                          return n(this, void 0, void 0, function*() {
                              const t = yield this.mutex.acquire();
                              try {
                                  const r = yield e({
                                      latestSeen: this.latestSeen,
                                      existing: this.conversations
                                  });
                                  for (const e of r)this.seenTopics.has(e.topic) || (this.seenTopics.add(e.topic), this.conversations.push(e), (!this.latestSeen || e.createdAt > this.latestSeen) && (this.latestSeen = e.createdAt));
                              } finally{
                                  t();
                              }
                              return [
                                  ...this.conversations
                              ];
                          });
                      }
                  }
                  t.ConversationCache = w, t.default = class {
                      constructor(e){
                          this.client = e, this.v1Cache = new w, this.v2Cache = new w;
                      }
                      list() {
                          return n(this, void 0, void 0, function*() {
                              const [e, t] = yield Promise.all([
                                  this.listV1Conversations(),
                                  this.listV2Conversations()
                              ]), r = e.concat(t);
                              return r.sort((e, t)=>e.createdAt.getTime() - t.createdAt.getTime()), r;
                          });
                      }
                      listV1Conversations() {
                          return n(this, void 0, void 0, function*() {
                              return this.v1Cache.load(({ latestSeen: e  })=>n(this, void 0, void 0, function*() {
                                      const t = yield this.getIntroductionPeers({
                                          startTime: e ? new Date(+e - 1e4) : void 0,
                                          direction: g.SortDirection.SORT_DIRECTION_ASCENDING
                                      });
                                      return Array.from(t).map(([e, t])=>new c.ConversationV1(this.client, e, t));
                                  }));
                          });
                      }
                      listV2Conversations() {
                          return n(this, void 0, void 0, function*() {
                              return this.v2Cache.load(({ latestSeen: e  })=>n(this, void 0, void 0, function*() {
                                      return this.v2ConversationLoader(e);
                                  }));
                          });
                      }
                      v2ConversationLoader(e) {
                          return n(this, void 0, void 0, function*() {
                              const t = [], r = yield this.client.listInvitations({
                                  startTime: e ? new Date(+e - 1e4) : void 0,
                                  direction: g.SortDirection.SORT_DIRECTION_ASCENDING
                              });
                              for (const e of r)try {
                                  const r = yield e.v1.getInvitation(this.client.keys);
                                  t.push((yield c.ConversationV2.create(this.client, r, e.v1.header)));
                              } catch (e) {
                                  console.warn("Error decrypting invitation", e);
                              }
                              return t;
                          });
                      }
                      stream() {
                          return n(this, void 0, void 0, function*() {
                              const e = new Set, t = (0, f.buildUserIntroTopic)(this.client.address), r = (0, f.buildUserInviteTopic)(this.client.address);
                              return h.default.create(this.client, [
                                  r,
                                  t
                              ], ((i)=>n(this, void 0, void 0, function*() {
                                      if (i.contentTopic === t) {
                                          const t = v(i.message), r = yield d.MessageV1.fromBytes(t);
                                          yield r.decrypt(this.client.legacyKeys);
                                          const n = this.getPeerAddress(r);
                                          if (!((t)=>!e.has(t) && (e.add(t), !0))(n)) return;
                                          return new c.ConversationV1(this.client, n, r.sent);
                                      }
                                      if (i.contentTopic === r) {
                                          const e = yield p.SealedInvitation.fromEnvelope(i), t = yield e.v1.getInvitation(this.client.keys);
                                          return yield c.ConversationV2.create(this.client, t, e.v1.header);
                                      }
                                      throw new Error("unrecognized invite topic");
                                  })).bind(this));
                          });
                      }
                      streamAllMessages() {
                          return n(this, void 0, void 0, function*() {
                              const e = (0, f.buildUserIntroTopic)(this.client.address), t = (0, f.buildUserInviteTopic)(this.client.address), r = new Set([
                                  e,
                                  t
                              ]), a = new Map;
                              for (const e of yield this.list())r.add(e.topic), a.set(e.topic, e);
                              const l = (e, t)=>!r.has(e) && (a.set(e, t), r.add(e), !0), u = yield h.default.create(this.client, Array.from(r.values()), (r)=>n(this, void 0, void 0, function*() {
                                      const n = r.contentTopic;
                                      if (!n) return null;
                                      if (n === e) {
                                          const e = v(r.message), t = yield d.MessageV1.fromBytes(e);
                                          if (!b(t)) return null;
                                          yield t.decrypt(this.client.legacyKeys);
                                          const n = t.senderAddress === this.client.address ? t.recipientAddress : t.senderAddress;
                                          return new c.ConversationV1(this.client, n, t.sent).decodeMessage(r);
                                      }
                                      if (n === t) {
                                          const e = yield p.SealedInvitation.fromEnvelope(r), t = yield e.v1.getInvitation(this.client.keys);
                                          return c.ConversationV2.create(this.client, t, e.v1.header);
                                      }
                                      const i = a.get(n);
                                      if (i instanceof c.ConversationV1) return i.decodeMessage(r);
                                      if (i instanceof c.ConversationV2) return i.decodeMessage(r);
                                      throw console.log("Unknown topic"), new Error("Unknown topic");
                                  }), (t)=>{
                                  if (t instanceof d.DecodedMessage && t.contentTopic === e) {
                                      const e = new c.ConversationV1(this.client, t.recipientAddress === this.client.address ? t.senderAddress : t.recipientAddress, t.sent);
                                      return l(e.topic, e) ? Array.from(r.values()) : void 0;
                                  }
                                  if (t instanceof c.ConversationV2) return l(t.topic, t) ? Array.from(r.values()) : void 0;
                              });
                              return function() {
                                  return s(this, arguments, function*() {
                                      var e, t;
                                      try {
                                          for(var r, n = i(u); !(r = yield o(n.next())).done;){
                                              const e = r.value;
                                              if (e instanceof d.DecodedMessage && (yield yield o(e)), e instanceof c.ConversationV2) for (const t of yield o(e.messages()))yield yield o(t);
                                          }
                                      } catch (t) {
                                          e = {
                                              error: t
                                          };
                                      } finally{
                                          try {
                                              r && !r.done && (t = n.return) && (yield o(t.call(n)));
                                          } finally{
                                              if (e) throw e.error;
                                          }
                                      }
                                  });
                              }();
                          });
                      }
                      getIntroductionPeers(e) {
                          return n(this, void 0, void 0, function*() {
                              const t = yield this.client.listEnvelopes([
                                  (0, f.buildUserIntroTopic)(this.client.address)
                              ], (e)=>n(this, void 0, void 0, function*() {
                                      const t = yield d.MessageV1.fromBytes(v(e.message));
                                      return yield t.decrypt(this.client.legacyKeys), t;
                                  }), e), r = new Map;
                              for (const e of t){
                                  if (!b(e)) continue;
                                  const t = this.getPeerAddress(e);
                                  if (t) {
                                      const n = r.get(t);
                                      (!n || n > e.sent) && r.set(t, e.sent);
                                  }
                              }
                              return r;
                          });
                      }
                      newConversation(e, t) {
                          return n(this, void 0, void 0, function*() {
                              let r = yield this.client.getUserContact(e);
                              if (!r) throw new Error(`Recipient ${e} is not on the XMTP network`);
                              if (r instanceof m.PublicKeyBundle && !(null == t ? void 0 : t.conversationId)) return new c.ConversationV1(this.client, e, new Date);
                              if (!(null == t ? void 0 : t.conversationId)) {
                                  const t = (yield this.listV1Conversations()).find((t)=>t.peerAddress === e);
                                  if (t) {
                                      if (!this.client.keys.getPublicKeyBundle().isFromLegacyBundle()) throw new Error("cannot resume pre-existing V1 conversation; client keys not compatible");
                                      if (!(r instanceof m.PublicKeyBundle || r.isFromLegacyBundle())) throw new Error("cannot resume pre-existing V1 conversation; peer keys not compatible");
                                      return t;
                                  }
                              }
                              r instanceof m.PublicKeyBundle && (r = u.SignedPublicKeyBundle.fromLegacyBundle(r));
                              const i = (r)=>{
                                  var n, i, o;
                                  return r.peerAddress === e && (i = t, o = null !== (n = r.context) && void 0 !== n ? n : void 0, (null == i ? void 0 : i.conversationId) === (null == o ? void 0 : o.conversationId));
                              };
                              let o;
                              if (yield this.v2Cache.load(({ latestSeen: e , existing: s  })=>n(this, void 0, void 0, function*() {
                                      const n = s.find(i);
                                      if (n) return o = n, [];
                                      const a = yield this.v2ConversationLoader(e), l = a.find(i);
                                      if (l) return o = l, a;
                                      const u = p.InvitationV1.createRandom(t), d = yield this.sendInvitation(r, u, new Date);
                                      return o = yield c.ConversationV2.create(this.client, u, d.v1.header), [
                                          o
                                      ];
                                  })), !o) throw new Error("Failed to create conversation");
                              return o;
                          });
                      }
                      export() {
                          return n(this, void 0, void 0, function*() {
                              return (yield this.list()).map((e)=>e.export());
                          });
                      }
                      import(e) {
                          return n(this, void 0, void 0, function*() {
                              const t = [], r = [];
                              let i = 0;
                              for (const n of e)try {
                                  "v1" === n.version ? t.push(c.ConversationV1.fromExport(this.client, n)) : "v2" === n.version && r.push(c.ConversationV2.fromExport(this.client, n));
                              } catch (e) {
                                  console.log("Failed to import conversation", e), i += 1;
                              }
                              return yield Promise.all([
                                  this.v1Cache.load(()=>n(this, void 0, void 0, function*() {
                                          return t;
                                      })),
                                  this.v2Cache.load(()=>n(this, void 0, void 0, function*() {
                                          return r;
                                      }))
                              ]), i;
                          });
                      }
                      sendInvitation(e, t, r) {
                          return n(this, void 0, void 0, function*() {
                              const n = yield p.SealedInvitation.createV1({
                                  sender: this.client.keys,
                                  recipient: e,
                                  created: r,
                                  invitation: t
                              }), i = yield e.walletSignatureAddress();
                              return this.client.publishEnvelopes([
                                  {
                                      contentTopic: (0, f.buildUserInviteTopic)(i),
                                      message: n.toBytes(),
                                      timestamp: r
                                  },
                                  {
                                      contentTopic: (0, f.buildUserInviteTopic)(this.client.address),
                                      message: n.toBytes(),
                                      timestamp: r
                                  }
                              ]), n;
                          });
                      }
                      getPeerAddress(e) {
                          return e.recipientAddress === this.client.address ? e.senderAddress : e.recipientAddress;
                      }
                  };
              },
              5880: function(e, t, r) {
                  "use strict";
                  var n = this && this.__importDefault || function(e) {
                      return e && e.__esModule ? e : {
                          default: e
                      };
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.ConversationV2 = t.ConversationV1 = t.Conversations = void 0;
                  var i = r(1851);
                  Object.defineProperty(t, "Conversations", {
                      enumerable: !0,
                      get: function() {
                          return n(i).default;
                      }
                  });
                  var o = r(3937);
                  Object.defineProperty(t, "ConversationV1", {
                      enumerable: !0,
                      get: function() {
                          return o.ConversationV1;
                      }
                  }), Object.defineProperty(t, "ConversationV2", {
                      enumerable: !0,
                      get: function() {
                          return o.ConversationV2;
                      }
                  });
              },
              7527: (e, t, r)=>{
                  "use strict";
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.AESGCMTagLength = t.AESGCMNonceSize = t.KDFSaltSize = t.AESKeySize = void 0;
                  const n = r(1796);
                  t.AESKeySize = 32, t.KDFSaltSize = 32, t.AESGCMNonceSize = 12, t.AESGCMTagLength = 16;
                  class i {
                      constructor(e){
                          if (!e.aes256GcmHkdfSha256) throw new Error("invalid ciphertext");
                          if (e.aes256GcmHkdfSha256.payload.length < t.AESGCMTagLength) throw new Error(`invalid ciphertext ciphertext length: ${e.aes256GcmHkdfSha256.payload.length}`);
                          if (e.aes256GcmHkdfSha256.hkdfSalt.length !== t.KDFSaltSize) throw new Error(`invalid ciphertext salt length: ${e.aes256GcmHkdfSha256.hkdfSalt.length}`);
                          if (e.aes256GcmHkdfSha256.gcmNonce.length !== t.AESGCMNonceSize) throw new Error(`invalid ciphertext nonce length: ${e.aes256GcmHkdfSha256.gcmNonce.length}`);
                          this.aes256GcmHkdfSha256 = e.aes256GcmHkdfSha256;
                      }
                      toBytes() {
                          return n.ciphertext.Ciphertext.encode(this).finish();
                      }
                      static fromBytes(e) {
                          return new i(n.ciphertext.Ciphertext.decode(e));
                      }
                  }
                  t.default = i;
              },
              270: function(e, t, r) {
                  "use strict";
                  var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {
                      void 0 === n && (n = r), Object.defineProperty(e, n, {
                          enumerable: !0,
                          get: function() {
                              return t[r];
                          }
                      });
                  } : function(e, t, r, n) {
                      void 0 === n && (n = r), e[n] = t[r];
                  }), i = this && this.__setModuleDefault || (Object.create ? function(e, t) {
                      Object.defineProperty(e, "default", {
                          enumerable: !0,
                          value: t
                      });
                  } : function(e, t) {
                      e.default = t;
                  }), o = this && this.__importStar || function(e) {
                      if (e && e.__esModule) return e;
                      var t = {};
                      if (null != e) for(var r in e)"default" !== r && Object.prototype.hasOwnProperty.call(e, r) && n(t, e, r);
                      return i(t, e), t;
                  }, s = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  }, a = this && this.__importDefault || function(e) {
                      return e && e.__esModule ? e : {
                          default: e
                      };
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.PrivateKey = t.SignedPrivateKey = void 0;
                  const l = r(1796), u = o(r(9656)), c = a(r(1583)), d = o(r(6002)), h = r(2940), f = r(6314), p = r(9272);
                  function m(e) {
                      if (32 !== e.bytes.length) throw new Error(`invalid private key length: ${e.bytes.length}`);
                  }
                  class y {
                      constructor(e){
                          if (!e.secp256k1) throw new Error("invalid private key");
                          if (m(e.secp256k1), this.secp256k1 = e.secp256k1, this.createdNs = e.createdNs, !e.publicKey) throw new Error("missing public key");
                          this.publicKey = new h.SignedPublicKey(e.publicKey);
                      }
                      static generate(e) {
                          return s(this, void 0, void 0, function*() {
                              const t = {
                                  bytes: u.utils.randomPrivateKey()
                              }, r = c.default.fromNumber((new Date).getTime()).mul(1e6), n = new h.UnsignedPublicKey({
                                  secp256k1Uncompressed: {
                                      bytes: u.getPublicKey(t.bytes)
                                  },
                                  createdNs: r
                              }), i = yield e.signKey(n);
                              return new y({
                                  secp256k1: t,
                                  createdNs: r,
                                  publicKey: i
                              });
                          });
                      }
                      generated() {
                          return new Date(this.createdNs.div(1e6).toNumber());
                      }
                      sign(e) {
                          return s(this, void 0, void 0, function*() {
                              const [t, r] = yield u.sign(e, this.secp256k1.bytes, {
                                  recovered: !0,
                                  der: !1
                              });
                              return new d.default({
                                  ecdsaCompact: {
                                      bytes: t,
                                      recovery: r
                                  }
                              });
                          });
                      }
                      signKey(e) {
                          return s(this, void 0, void 0, function*() {
                              const t = e.toBytes(), r = yield (0, f.sha256)(t), n = yield this.sign(r);
                              return new h.SignedPublicKey({
                                  keyBytes: t,
                                  signature: n
                              });
                          });
                      }
                      static signerKey(e, t) {
                          return s(this, void 0, void 0, function*() {
                              const r = yield (0, f.sha256)(e.bytesToSign());
                              return (0, d.ecdsaSignerKey)(r, t);
                          });
                      }
                      sharedSecret(e) {
                          return u.getSharedSecret(this.secp256k1.bytes, e.secp256k1Uncompressed.bytes, !1);
                      }
                      encrypt(e, t, r) {
                          const n = this.sharedSecret(t);
                          return (0, f.encrypt)(e, n, r);
                      }
                      decrypt(e, t, r) {
                          const n = this.sharedSecret(t);
                          return (0, f.decrypt)(e, n, r);
                      }
                      matches(e) {
                          return this.publicKey.equals(e);
                      }
                      equals(e) {
                          return (0, p.equalBytes)(this.secp256k1.bytes, e.secp256k1.bytes) && this.publicKey.equals(e.publicKey);
                      }
                      toBytes() {
                          return l.privateKey.SignedPrivateKey.encode(this).finish();
                      }
                      static fromBytes(e) {
                          return new y(l.privateKey.SignedPrivateKey.decode(e));
                      }
                      static fromLegacyKey(e, t) {
                          return new y({
                              createdNs: e.timestamp.mul(1e6),
                              secp256k1: e.secp256k1,
                              publicKey: h.SignedPublicKey.fromLegacyKey(e.publicKey, t)
                          });
                      }
                  }
                  t.SignedPrivateKey = y;
                  class g {
                      constructor(e){
                          if (!e.secp256k1) throw new Error("invalid private key");
                          if (m(e.secp256k1), this.timestamp = e.timestamp, this.secp256k1 = e.secp256k1, !e.publicKey) throw new Error("missing public key");
                          this.publicKey = new h.PublicKey(e.publicKey);
                      }
                      static generate() {
                          const e = {
                              bytes: u.utils.randomPrivateKey()
                          }, t = c.default.fromNumber((new Date).getTime());
                          return new g({
                              secp256k1: e,
                              timestamp: t,
                              publicKey: new h.PublicKey({
                                  secp256k1Uncompressed: {
                                      bytes: u.getPublicKey(e.bytes)
                                  },
                                  timestamp: t
                              })
                          });
                      }
                      generated() {
                          return new Date(this.timestamp.toNumber());
                      }
                      sign(e) {
                          return s(this, void 0, void 0, function*() {
                              const [t, r] = yield u.sign(e, this.secp256k1.bytes, {
                                  recovered: !0,
                                  der: !1
                              });
                              return new d.default({
                                  ecdsaCompact: {
                                      bytes: t,
                                      recovery: r
                                  }
                              });
                          });
                      }
                      signKey(e) {
                          return s(this, void 0, void 0, function*() {
                              const t = yield (0, f.sha256)(e.bytesToSign());
                              return e.signature = yield this.sign(t), e;
                          });
                      }
                      sharedSecret(e) {
                          return u.getSharedSecret(this.secp256k1.bytes, e.secp256k1Uncompressed.bytes, !1);
                      }
                      encrypt(e, t, r) {
                          const n = this.sharedSecret(t);
                          return (0, f.encrypt)(e, n, r);
                      }
                      decrypt(e, t, r) {
                          const n = this.sharedSecret(t);
                          return (0, f.decrypt)(e, n, r);
                      }
                      matches(e) {
                          return this.publicKey.equals(e);
                      }
                      toBytes() {
                          return l.privateKey.PrivateKey.encode(this).finish();
                      }
                      static fromBytes(e) {
                          return new g(l.privateKey.PrivateKey.decode(e));
                      }
                  }
                  t.PrivateKey = g;
              },
              741: function(e, t, r) {
                  "use strict";
                  var n = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.decodePrivateKeyBundle = t.PrivateKeyBundleV1 = t.PrivateKeyBundleV2 = void 0;
                  const i = r(1796), o = r(270), s = r(6002), a = r(8245), l = r(4728);
                  class u {
                      constructor(e){
                          if (this.version = 2, !e.identityKey) throw new Error("missing identity key");
                          this.identityKey = new o.SignedPrivateKey(e.identityKey), this.preKeys = (e.preKeys || []).map((e)=>new o.SignedPrivateKey(e));
                      }
                      static generate(e) {
                          return n(this, void 0, void 0, function*() {
                              const t = yield o.SignedPrivateKey.generate(new s.WalletSigner(e)), r = new u({
                                  identityKey: t,
                                  preKeys: []
                              });
                              return yield r.addPreKey(), r;
                          });
                      }
                      getCurrentPreKey() {
                          return this.preKeys[0];
                      }
                      findPreKey(e) {
                          const t = this.preKeys.find((t)=>t.matches(e));
                          if (!t) throw new l.NoMatchingPreKeyError(e);
                          return t;
                      }
                      addPreKey() {
                          return n(this, void 0, void 0, function*() {
                              this._publicKeyBundle = void 0;
                              const e = yield o.SignedPrivateKey.generate(this.identityKey);
                              this.preKeys.unshift(e);
                          });
                      }
                      getPublicKeyBundle() {
                          return this._publicKeyBundle || (this._publicKeyBundle = new a.SignedPublicKeyBundle({
                              identityKey: this.identityKey.publicKey,
                              preKey: this.getCurrentPreKey().publicKey
                          })), this._publicKeyBundle;
                      }
                      sharedSecret(e, t, r) {
                          return n(this, void 0, void 0, function*() {
                              if (!e.identityKey || !e.preKey) throw new Error("invalid peer key bundle");
                              if (!(yield e.identityKey.verifyKey(e.preKey))) throw new Error("peer preKey signature invalid");
                              if (!this.identityKey) throw new Error("missing identity key");
                              let n, i, o;
                              r ? (o = this.findPreKey(t), n = o.sharedSecret(e.identityKey), i = this.identityKey.sharedSecret(e.preKey)) : (o = this.findPreKey(t), n = this.identityKey.sharedSecret(e.preKey), i = o.sharedSecret(e.identityKey));
                              const s = o.sharedSecret(e.preKey), a = new Uint8Array(n.length + i.length + s.length);
                              return a.set(n, 0), a.set(i, n.length), a.set(s, n.length + i.length), a;
                          });
                      }
                      encode() {
                          return i.privateKey.PrivateKeyBundle.encode({
                              v1: void 0,
                              v2: this
                          }).finish();
                      }
                      equals(e) {
                          if (this.preKeys.length !== e.preKeys.length) return !1;
                          for(let t = 0; t < this.preKeys.length; t++)if (!this.preKeys[t].equals(e.preKeys[t])) return !1;
                          return this.identityKey.equals(e.identityKey);
                      }
                      static fromLegacyBundle(e) {
                          return new u({
                              identityKey: o.SignedPrivateKey.fromLegacyKey(e.identityKey, !0),
                              preKeys: e.preKeys.map((e)=>o.SignedPrivateKey.fromLegacyKey(e))
                          });
                      }
                  }
                  t.PrivateKeyBundleV2 = u;
                  class c {
                      constructor(e){
                          if (this.version = 1, !e.identityKey) throw new Error("missing identity key");
                          this.identityKey = new o.PrivateKey(e.identityKey), this.preKeys = (e.preKeys || []).map((e)=>new o.PrivateKey(e));
                      }
                      static generate(e) {
                          return n(this, void 0, void 0, function*() {
                              const t = o.PrivateKey.generate();
                              e && (yield t.publicKey.signWithWallet(e));
                              const r = new c({
                                  identityKey: t,
                                  preKeys: []
                              });
                              return yield r.addPreKey(), r;
                          });
                      }
                      getCurrentPreKey() {
                          return this.preKeys[0];
                      }
                      findPreKey(e) {
                          const t = this.preKeys.find((t)=>t.matches(e));
                          if (!t) throw new l.NoMatchingPreKeyError(e);
                          return t;
                      }
                      addPreKey() {
                          return n(this, void 0, void 0, function*() {
                              this._publicKeyBundle = void 0;
                              const e = o.PrivateKey.generate();
                              yield this.identityKey.signKey(e.publicKey), this.preKeys.unshift(e);
                          });
                      }
                      getPublicKeyBundle() {
                          return this._publicKeyBundle || (this._publicKeyBundle = new a.PublicKeyBundle({
                              identityKey: this.identityKey.publicKey,
                              preKey: this.getCurrentPreKey().publicKey
                          })), this._publicKeyBundle;
                      }
                      sharedSecret(e, t, r) {
                          return n(this, void 0, void 0, function*() {
                              if (!e.identityKey || !e.preKey) throw new Error("invalid peer key bundle");
                              if (!(yield e.identityKey.verifyKey(e.preKey))) throw new Error("peer preKey signature invalid");
                              if (!this.identityKey) throw new Error("missing identity key");
                              let n, i, o;
                              r ? (o = this.findPreKey(t), n = o.sharedSecret(e.identityKey), i = this.identityKey.sharedSecret(e.preKey)) : (o = this.findPreKey(t), n = this.identityKey.sharedSecret(e.preKey), i = o.sharedSecret(e.identityKey));
                              const s = o.sharedSecret(e.preKey), a = new Uint8Array(n.length + i.length + s.length);
                              return a.set(n, 0), a.set(i, n.length), a.set(s, n.length + i.length), a;
                          });
                      }
                      encode() {
                          return i.privateKey.PrivateKeyBundle.encode({
                              v1: this,
                              v2: void 0
                          }).finish();
                      }
                  }
                  t.PrivateKeyBundleV1 = c, t.decodePrivateKeyBundle = function(e) {
                      const t = i.privateKey.PrivateKeyBundle.decode(e);
                      if (t.v1) return new c(t.v1);
                      if (t.v2) return new u(t.v2);
                      throw new Error("unknown private key bundle version");
                  };
              },
              2940: function(e, t, r) {
                  "use strict";
                  var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {
                      void 0 === n && (n = r), Object.defineProperty(e, n, {
                          enumerable: !0,
                          get: function() {
                              return t[r];
                          }
                      });
                  } : function(e, t, r, n) {
                      void 0 === n && (n = r), e[n] = t[r];
                  }), i = this && this.__setModuleDefault || (Object.create ? function(e, t) {
                      Object.defineProperty(e, "default", {
                          enumerable: !0,
                          value: t
                      });
                  } : function(e, t) {
                      e.default = t;
                  }), o = this && this.__importStar || function(e) {
                      if (e && e.__esModule) return e;
                      var t = {};
                      if (null != e) for(var r in e)"default" !== r && Object.prototype.hasOwnProperty.call(e, r) && n(t, e, r);
                      return i(t, e), t;
                  }, s = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  }, a = this && this.__importDefault || function(e) {
                      return e && e.__esModule ? e : {
                          default: e
                      };
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.PublicKey = t.SignedPublicKey = t.UnsignedPublicKey = void 0;
                  const l = r(1796), u = o(r(9656)), c = a(r(1583)), d = o(r(6002)), h = r(9272), f = r(9982), p = r(6314), m = new c.default(Math.pow(10, 9)).mul(Math.pow(10, 9));
                  class y {
                      constructor(e){
                          if (!(null == e ? void 0 : e.secp256k1Uncompressed)) throw new Error("invalid public key");
                          !function(e) {
                              if (65 !== e.bytes.length) throw new Error(`invalid public key length: ${e.bytes.length}`);
                              if (4 !== e.bytes[0]) throw new Error(`unrecognized public key prefix: ${e.bytes[0]}`);
                          }(e.secp256k1Uncompressed), this.secp256k1Uncompressed = e.secp256k1Uncompressed, this.createdNs = e.createdNs.toUnsigned();
                      }
                      generated() {
                          return new Date(this.timestamp.toNumber());
                      }
                      isFromLegacyKey() {
                          return this.createdNs.lessThan(m);
                      }
                      get timestamp() {
                          return (this.isFromLegacyKey() ? this.createdNs : this.createdNs.div(1e6)).toUnsigned();
                      }
                      verify(e, t) {
                          return !!e.ecdsaCompact && u.verify(e.ecdsaCompact.bytes, t, this.secp256k1Uncompressed.bytes);
                      }
                      verifyKey(e) {
                          return s(this, void 0, void 0, function*() {
                              if (!e.signature) return !1;
                              const t = yield (0, p.sha256)(e.bytesToSign());
                              return this.verify(e.signature, t);
                          });
                      }
                      equals(e) {
                          return (0, h.equalBytes)(this.secp256k1Uncompressed.bytes, e.secp256k1Uncompressed.bytes);
                      }
                      getEthereumAddress() {
                          return f.utils.computeAddress(this.secp256k1Uncompressed.bytes);
                      }
                      toBytes() {
                          return l.publicKey.UnsignedPublicKey.encode(this).finish();
                      }
                      static fromBytes(e) {
                          return new y(l.publicKey.UnsignedPublicKey.decode(e));
                      }
                  }
                  t.UnsignedPublicKey = y;
                  class g extends y {
                      constructor(e){
                          if (!e.keyBytes) throw new Error("missing key bytes");
                          if (super(l.publicKey.UnsignedPublicKey.decode(e.keyBytes)), this.keyBytes = e.keyBytes, !e.signature) throw new Error("missing key signature");
                          this.signature = new d.default(e.signature);
                      }
                      get unsignedKey() {
                          return new y({
                              createdNs: this.createdNs,
                              secp256k1Uncompressed: this.secp256k1Uncompressed
                          });
                      }
                      signerKey() {
                          return this.signature.signerKey(this);
                      }
                      walletSignatureAddress() {
                          return s(this, void 0, void 0, function*() {
                              if (!this.signature.walletEcdsaCompact) throw new Error("key was not signed by a wallet");
                              const e = yield this.signerKey();
                              if (!e) throw new Error("key signature not valid");
                              return e.getEthereumAddress();
                          });
                      }
                      equals(e) {
                          return this.unsignedKey.equals(e.unsignedKey) && this.signature.equals(e.signature);
                      }
                      bytesToSign() {
                          return this.keyBytes;
                      }
                      toBytes() {
                          return l.publicKey.SignedPublicKey.encode(this).finish();
                      }
                      static fromBytes(e) {
                          return new g(l.publicKey.SignedPublicKey.decode(e));
                      }
                      toLegacyKey() {
                          if (!this.isFromLegacyKey()) throw new Error("cannot be converted to legacy key");
                          let e = this.signature;
                          return e.walletEcdsaCompact && (e = new d.default({
                              ecdsaCompact: e.walletEcdsaCompact
                          })), new v({
                              timestamp: this.timestamp,
                              secp256k1Uncompressed: this.secp256k1Uncompressed,
                              signature: e
                          });
                      }
                      static fromLegacyKey(e, t) {
                          if (!e.signature) throw new Error("key is not signed");
                          let r = e.signature;
                          return t && (r = new d.default({
                              walletEcdsaCompact: r.ecdsaCompact
                          })), new g({
                              keyBytes: e.bytesToSign(),
                              signature: r
                          });
                      }
                  }
                  t.SignedPublicKey = g;
                  class v extends y {
                      constructor(e){
                          super({
                              createdNs: e.timestamp.mul(1e6),
                              secp256k1Uncompressed: e.secp256k1Uncompressed
                          }), e.signature && (this.signature = new d.default(e.signature));
                      }
                      get timestamp() {
                          return this.createdNs.div(1e6);
                      }
                      bytesToSign() {
                          return l.publicKey.PublicKey.encode({
                              timestamp: this.timestamp,
                              secp256k1Uncompressed: this.secp256k1Uncompressed
                          }).finish();
                      }
                      signWithWallet(e) {
                          return s(this, void 0, void 0, function*() {
                              const t = yield e.signMessage(d.WalletSigner.identitySigRequestText(this.bytesToSign())), r = f.utils.splitSignature(t), n = (0, h.hexToBytes)(r.r), i = (0, h.hexToBytes)(r.s), o = new Uint8Array(64);
                              o.set(n), o.set(i, n.length), this.signature = new d.default({
                                  ecdsaCompact: {
                                      bytes: o,
                                      recovery: r.recoveryParam
                                  }
                              });
                          });
                      }
                      walletSignatureAddress() {
                          if (!this.signature) throw new Error("key is not signed");
                          const e = (0, h.hexToBytes)(f.utils.hashMessage(d.WalletSigner.identitySigRequestText(this.bytesToSign()))), t = this.signature.getPublicKey(e);
                          if (!t) throw new Error("key signature is malformed");
                          return t.getEthereumAddress();
                      }
                      toBytes() {
                          return l.publicKey.PublicKey.encode(this).finish();
                      }
                      static fromBytes(e) {
                          return new v(l.publicKey.PublicKey.decode(e));
                      }
                  }
                  t.PublicKey = v;
              },
              8245: (e, t, r)=>{
                  "use strict";
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.PublicKeyBundle = t.SignedPublicKeyBundle = void 0;
                  const n = r(1796), i = r(2940);
                  class o {
                      constructor(e){
                          if (!e.identityKey) throw new Error("missing identity key");
                          if (!e.preKey) throw new Error("missing pre-key");
                          this.identityKey = new i.SignedPublicKey(e.identityKey), this.preKey = new i.SignedPublicKey(e.preKey);
                      }
                      walletSignatureAddress() {
                          return this.identityKey.walletSignatureAddress();
                      }
                      equals(e) {
                          return this.identityKey.equals(e.identityKey) && this.preKey.equals(e.preKey);
                      }
                      toBytes() {
                          return n.publicKey.SignedPublicKeyBundle.encode(this).finish();
                      }
                      isFromLegacyBundle() {
                          return this.identityKey.isFromLegacyKey() && this.preKey.isFromLegacyKey();
                      }
                      toLegacyBundle() {
                          return new s({
                              identityKey: this.identityKey.toLegacyKey(),
                              preKey: this.preKey.toLegacyKey()
                          });
                      }
                      static fromBytes(e) {
                          const t = n.publicKey.SignedPublicKeyBundle.decode(e);
                          return new o(t);
                      }
                      static fromLegacyBundle(e) {
                          return new o({
                              identityKey: i.SignedPublicKey.fromLegacyKey(e.identityKey, !0),
                              preKey: i.SignedPublicKey.fromLegacyKey(e.preKey)
                          });
                      }
                  }
                  t.SignedPublicKeyBundle = o;
                  class s {
                      constructor(e){
                          if (!e.identityKey) throw new Error("missing identity key");
                          if (!e.preKey) throw new Error("missing pre-key");
                          this.identityKey = new i.PublicKey(e.identityKey), this.preKey = new i.PublicKey(e.preKey);
                      }
                      equals(e) {
                          return this.identityKey.equals(e.identityKey) && this.preKey.equals(e.preKey);
                      }
                      walletSignatureAddress() {
                          return this.identityKey.walletSignatureAddress();
                      }
                      toBytes() {
                          return n.publicKey.PublicKeyBundle.encode(this).finish();
                      }
                      static fromBytes(e) {
                          const t = n.publicKey.PublicKeyBundle.decode(e);
                          return new s(t);
                      }
                  }
                  t.PublicKeyBundle = s;
              },
              6002: function(e, t, r) {
                  "use strict";
                  var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {
                      void 0 === n && (n = r), Object.defineProperty(e, n, {
                          enumerable: !0,
                          get: function() {
                              return t[r];
                          }
                      });
                  } : function(e, t, r, n) {
                      void 0 === n && (n = r), e[n] = t[r];
                  }), i = this && this.__setModuleDefault || (Object.create ? function(e, t) {
                      Object.defineProperty(e, "default", {
                          enumerable: !0,
                          value: t
                      });
                  } : function(e, t) {
                      e.default = t;
                  }), o = this && this.__importStar || function(e) {
                      if (e && e.__esModule) return e;
                      var t = {};
                      if (null != e) for(var r in e)"default" !== r && Object.prototype.hasOwnProperty.call(e, r) && n(t, e, r);
                      return i(t, e), t;
                  }, s = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  }, a = this && this.__importDefault || function(e) {
                      return e && e.__esModule ? e : {
                          default: e
                      };
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.WalletSigner = t.ecdsaSignerKey = void 0;
                  const l = r(1796), u = a(r(1583)), c = o(r(9656)), d = r(2940), h = r(270), f = r(9982), p = r(9272);
                  function m(e) {
                      if (64 !== e.bytes.length) throw new Error(`invalid signature length: ${e.bytes.length}`);
                      if (0 !== e.recovery && 1 !== e.recovery) throw new Error(`invalid recovery bit: ${e.recovery}`);
                  }
                  function y(e, t) {
                      return e.recovery === t.recovery && (0, p.equalBytes)(e.bytes, t.bytes);
                  }
                  function g(e, t) {
                      const r = c.recoverPublicKey(e, t.bytes, t.recovery);
                      return r ? new d.UnsignedPublicKey({
                          secp256k1Uncompressed: {
                              bytes: r
                          },
                          createdNs: u.default.fromNumber(0)
                      }) : void 0;
                  }
                  t.ecdsaSignerKey = g;
                  class v {
                      constructor(e){
                          if (e.ecdsaCompact) m(e.ecdsaCompact), this.ecdsaCompact = e.ecdsaCompact;
                          else {
                              if (!e.walletEcdsaCompact) throw new Error("invalid signature");
                              m(e.walletEcdsaCompact), this.walletEcdsaCompact = e.walletEcdsaCompact;
                          }
                      }
                      signerKey(e) {
                          return s(this, void 0, void 0, function*() {
                              return this.ecdsaCompact ? h.SignedPrivateKey.signerKey(e, this.ecdsaCompact) : this.walletEcdsaCompact ? b.signerKey(e, this.walletEcdsaCompact) : void 0;
                          });
                      }
                      getPublicKey(e) {
                          if (!this.ecdsaCompact) throw new Error("invalid signature");
                          const t = c.recoverPublicKey(e, this.ecdsaCompact.bytes, this.ecdsaCompact.recovery);
                          return t ? new d.PublicKey({
                              secp256k1Uncompressed: {
                                  bytes: t
                              },
                              timestamp: u.default.fromNumber(0)
                          }) : void 0;
                      }
                      equals(e) {
                          return this.ecdsaCompact && e.ecdsaCompact ? y(this.ecdsaCompact, e.ecdsaCompact) : !(!this.walletEcdsaCompact || !e.walletEcdsaCompact) && y(this.walletEcdsaCompact, e.walletEcdsaCompact);
                      }
                      toBytes() {
                          return l.signature.Signature.encode(this).finish();
                      }
                      static fromBytes(e) {
                          return new v(l.signature.Signature.decode(e));
                      }
                  }
                  t.default = v;
                  class b {
                      constructor(e){
                          this.wallet = e;
                      }
                      static identitySigRequestText(e) {
                          return `XMTP : Create Identity\n${(0, p.bytesToHex)(e)}\n\nFor more info: https://xmtp.org/signatures/`;
                      }
                      static signerKey(e, t) {
                          return g((0, p.hexToBytes)(f.utils.hashMessage(this.identitySigRequestText(e.bytesToSign()))), t);
                      }
                      signKey(e) {
                          return s(this, void 0, void 0, function*() {
                              const t = e.toBytes(), r = yield this.wallet.signMessage(b.identitySigRequestText(t)), n = f.utils.splitSignature(r), i = (0, p.hexToBytes)(n.r), o = (0, p.hexToBytes)(n.s), s = new Uint8Array(64);
                              s.set(i), s.set(o, i.length);
                              const a = new v({
                                  walletEcdsaCompact: {
                                      bytes: s,
                                      recovery: n.recoveryParam
                                  }
                              });
                              return new d.SignedPublicKey({
                                  keyBytes: t,
                                  signature: a
                              });
                          });
                      }
                  }
                  t.WalletSigner = b;
              },
              6314: function(e, t, r) {
                  "use strict";
                  var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {
                      void 0 === n && (n = r), Object.defineProperty(e, n, {
                          enumerable: !0,
                          get: function() {
                              return t[r];
                          }
                      });
                  } : function(e, t, r, n) {
                      void 0 === n && (n = r), e[n] = t[r];
                  }), i = this && this.__setModuleDefault || (Object.create ? function(e, t) {
                      Object.defineProperty(e, "default", {
                          enumerable: !0,
                          value: t
                      });
                  } : function(e, t) {
                      e.default = t;
                  }), o = this && this.__importStar || function(e) {
                      if (e && e.__esModule) return e;
                      var t = {};
                      if (null != e) for(var r in e)"default" !== r && Object.prototype.hasOwnProperty.call(e, r) && n(t, e, r);
                      return i(t, e), t;
                  }, s = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.decrypt = t.encrypt = t.sha256 = t.crypto = void 0;
                  const a = o(r(7527));
                  t.crypto = "undefined" != typeof window ? window.crypto : r(2114).webcrypto;
                  const l = new ArrayBuffer(0);
                  function u(e, t) {
                      const r = {
                          name: "AES-GCM",
                          iv: e
                      };
                      return t && (r.additionalData = t), r;
                  }
                  function c(e, r) {
                      return s(this, void 0, void 0, function*() {
                          const n = yield t.crypto.subtle.importKey("raw", e, "HKDF", !1, [
                              "deriveKey"
                          ]);
                          return t.crypto.subtle.deriveKey({
                              name: "HKDF",
                              hash: "SHA-256",
                              salt: r,
                              info: l
                          }, n, {
                              name: "AES-GCM",
                              length: 256
                          }, !1, [
                              "encrypt",
                              "decrypt"
                          ]);
                      });
                  }
                  t.sha256 = function(e) {
                      return s(this, void 0, void 0, function*() {
                          return new Uint8Array((yield t.crypto.subtle.digest("SHA-256", e)));
                      });
                  }, t.encrypt = function(e, r, n) {
                      return s(this, void 0, void 0, function*() {
                          const i = t.crypto.getRandomValues(new Uint8Array(a.KDFSaltSize)), o = t.crypto.getRandomValues(new Uint8Array(a.AESGCMNonceSize)), s = yield c(r, i), l = yield t.crypto.subtle.encrypt(u(o, n), s, e);
                          return new a.default({
                              aes256GcmHkdfSha256: {
                                  payload: new Uint8Array(l),
                                  hkdfSalt: i,
                                  gcmNonce: o
                              }
                          });
                      });
                  }, t.decrypt = function(e, r, n) {
                      return s(this, void 0, void 0, function*() {
                          if (!e.aes256GcmHkdfSha256) throw new Error("invalid payload ciphertext");
                          const i = yield c(r, e.aes256GcmHkdfSha256.hkdfSalt), o = yield t.crypto.subtle.decrypt(u(e.aes256GcmHkdfSha256.gcmNonce, n), i, e.aes256GcmHkdfSha256.payload);
                          return new Uint8Array(o);
                      });
                  };
              },
              4728: (e, t, r)=>{
                  "use strict";
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.NoMatchingPreKeyError = void 0;
                  const n = r(9272);
                  class i extends Error {
                      constructor(e){
                          super(`no pre-key matches: ${(0, n.bytesToHex)(e.secp256k1Uncompressed.bytes)}`);
                      }
                  }
                  t.NoMatchingPreKeyError = i;
              },
              2449: function(e, t, r) {
                  "use strict";
                  var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {
                      void 0 === n && (n = r), Object.defineProperty(e, n, {
                          enumerable: !0,
                          get: function() {
                              return t[r];
                          }
                      });
                  } : function(e, t, r, n) {
                      void 0 === n && (n = r), e[n] = t[r];
                  }), i = this && this.__setModuleDefault || (Object.create ? function(e, t) {
                      Object.defineProperty(e, "default", {
                          enumerable: !0,
                          value: t
                      });
                  } : function(e, t) {
                      e.default = t;
                  }), o = this && this.__importStar || function(e) {
                      if (e && e.__esModule) return e;
                      var t = {};
                      if (null != e) for(var r in e)"default" !== r && Object.prototype.hasOwnProperty.call(e, r) && n(t, e, r);
                      return i(t, e), t;
                  }, s = this && this.__importDefault || function(e) {
                      return e && e.__esModule ? e : {
                          default: e
                      };
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.WalletSigner = t.Signature = t.PrivateKeyBundleV2 = t.PrivateKeyBundleV1 = t.decodePrivateKeyBundle = t.SignedPrivateKey = t.PrivateKey = t.PublicKeyBundle = t.PublicKey = t.SignedPublicKeyBundle = t.SignedPublicKey = t.UnsignedPublicKey = t.Ciphertext = t.decrypt = t.encrypt = t.utils = void 0;
                  const a = r(8245);
                  Object.defineProperty(t, "PublicKeyBundle", {
                      enumerable: !0,
                      get: function() {
                          return a.PublicKeyBundle;
                      }
                  }), Object.defineProperty(t, "SignedPublicKeyBundle", {
                      enumerable: !0,
                      get: function() {
                          return a.SignedPublicKeyBundle;
                      }
                  });
                  const l = r(270);
                  Object.defineProperty(t, "SignedPrivateKey", {
                      enumerable: !0,
                      get: function() {
                          return l.SignedPrivateKey;
                      }
                  }), Object.defineProperty(t, "PrivateKey", {
                      enumerable: !0,
                      get: function() {
                          return l.PrivateKey;
                      }
                  });
                  const u = r(741);
                  Object.defineProperty(t, "PrivateKeyBundleV1", {
                      enumerable: !0,
                      get: function() {
                          return u.PrivateKeyBundleV1;
                      }
                  }), Object.defineProperty(t, "PrivateKeyBundleV2", {
                      enumerable: !0,
                      get: function() {
                          return u.PrivateKeyBundleV2;
                      }
                  }), Object.defineProperty(t, "decodePrivateKeyBundle", {
                      enumerable: !0,
                      get: function() {
                          return u.decodePrivateKeyBundle;
                      }
                  });
                  const c = r(2940);
                  Object.defineProperty(t, "UnsignedPublicKey", {
                      enumerable: !0,
                      get: function() {
                          return c.UnsignedPublicKey;
                      }
                  }), Object.defineProperty(t, "SignedPublicKey", {
                      enumerable: !0,
                      get: function() {
                          return c.SignedPublicKey;
                      }
                  }), Object.defineProperty(t, "PublicKey", {
                      enumerable: !0,
                      get: function() {
                          return c.PublicKey;
                      }
                  });
                  const d = o(r(6002));
                  t.Signature = d.default, Object.defineProperty(t, "WalletSigner", {
                      enumerable: !0,
                      get: function() {
                          return d.WalletSigner;
                      }
                  });
                  const h = o(r(9272));
                  t.utils = h;
                  const f = r(6314);
                  Object.defineProperty(t, "encrypt", {
                      enumerable: !0,
                      get: function() {
                          return f.encrypt;
                      }
                  }), Object.defineProperty(t, "decrypt", {
                      enumerable: !0,
                      get: function() {
                          return f.decrypt;
                      }
                  });
                  const p = s(r(7527));
                  t.Ciphertext = p.default;
              },
              9272: function(e, t, r) {
                  "use strict";
                  var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {
                      void 0 === n && (n = r), Object.defineProperty(e, n, {
                          enumerable: !0,
                          get: function() {
                              return t[r];
                          }
                      });
                  } : function(e, t, r, n) {
                      void 0 === n && (n = r), e[n] = t[r];
                  }), i = this && this.__setModuleDefault || (Object.create ? function(e, t) {
                      Object.defineProperty(e, "default", {
                          enumerable: !0,
                          value: t
                      });
                  } : function(e, t) {
                      e.default = t;
                  }), o = this && this.__importStar || function(e) {
                      if (e && e.__esModule) return e;
                      var t = {};
                      if (null != e) for(var r in e)"default" !== r && Object.prototype.hasOwnProperty.call(e, r) && n(t, e, r);
                      return i(t, e), t;
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.equalBytes = t.hexToBytes = t.bytesToHex = t.getRandomValues = void 0;
                  const s = o(r(9656)), a = r(6314);
                  t.getRandomValues = function(e) {
                      return a.crypto.getRandomValues(e);
                  }, t.bytesToHex = s.utils.bytesToHex, t.hexToBytes = function(e) {
                      e.startsWith("0x") && (e = e.slice(2));
                      const t = new Uint8Array(e.length / 2);
                      for(let r = 0; r < t.length; r++){
                          const n = 2 * r;
                          t[r] = Number.parseInt(e.slice(n, n + 2), 16);
                      }
                      return t;
                  }, t.equalBytes = function(e, t) {
                      if (e.length !== t.length) return !1;
                      for(let r = 0; r < e.length; r++)if (e[r] !== t[r]) return !1;
                      return !0;
                  };
              },
              4432: function(e, t, r) {
                  "use strict";
                  var n = this && this.__importDefault || function(e) {
                      return e && e.__esModule ? e : {
                          default: e
                      };
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.buildDirectMessageTopicV2 = t.buildDirectMessageTopic = t.mapPaginatedStream = t.toNanoString = t.fromNanoString = t.dateToNs = t.nsToDate = t.SortDirection = t.ApiUrls = t.ContentTypeComposite = t.CompositeCodec = t.ContentTypeText = t.TextCodec = t.ContentTypeFallback = t.ContentTypeId = t.Conversations = t.Compression = t.KeyStoreType = t.Client = t.Stream = t.getRandomValues = t.decrypt = t.encrypt = t.Signature = t.PrivateKey = t.SignedPublicKeyBundle = t.SignedPublicKey = t.PublicKeyBundle = t.PublicKey = t.Ciphertext = t.decodeContent = t.DecodedMessage = void 0;
                  var i = r(6044);
                  Object.defineProperty(t, "DecodedMessage", {
                      enumerable: !0,
                      get: function() {
                          return i.DecodedMessage;
                      }
                  }), Object.defineProperty(t, "decodeContent", {
                      enumerable: !0,
                      get: function() {
                          return i.decodeContent;
                      }
                  });
                  var o = r(2449);
                  Object.defineProperty(t, "Ciphertext", {
                      enumerable: !0,
                      get: function() {
                          return o.Ciphertext;
                      }
                  }), Object.defineProperty(t, "PublicKey", {
                      enumerable: !0,
                      get: function() {
                          return o.PublicKey;
                      }
                  }), Object.defineProperty(t, "PublicKeyBundle", {
                      enumerable: !0,
                      get: function() {
                          return o.PublicKeyBundle;
                      }
                  }), Object.defineProperty(t, "SignedPublicKey", {
                      enumerable: !0,
                      get: function() {
                          return o.SignedPublicKey;
                      }
                  }), Object.defineProperty(t, "SignedPublicKeyBundle", {
                      enumerable: !0,
                      get: function() {
                          return o.SignedPublicKeyBundle;
                      }
                  }), Object.defineProperty(t, "PrivateKey", {
                      enumerable: !0,
                      get: function() {
                          return o.PrivateKey;
                      }
                  }), Object.defineProperty(t, "Signature", {
                      enumerable: !0,
                      get: function() {
                          return o.Signature;
                      }
                  }), Object.defineProperty(t, "encrypt", {
                      enumerable: !0,
                      get: function() {
                          return o.encrypt;
                      }
                  }), Object.defineProperty(t, "decrypt", {
                      enumerable: !0,
                      get: function() {
                          return o.decrypt;
                      }
                  });
                  var s = r(9272);
                  Object.defineProperty(t, "getRandomValues", {
                      enumerable: !0,
                      get: function() {
                          return s.getRandomValues;
                      }
                  });
                  var a = r(4596);
                  Object.defineProperty(t, "Stream", {
                      enumerable: !0,
                      get: function() {
                          return n(a).default;
                      }
                  });
                  var l = r(8901);
                  Object.defineProperty(t, "Client", {
                      enumerable: !0,
                      get: function() {
                          return n(l).default;
                      }
                  }), Object.defineProperty(t, "KeyStoreType", {
                      enumerable: !0,
                      get: function() {
                          return l.KeyStoreType;
                      }
                  }), Object.defineProperty(t, "Compression", {
                      enumerable: !0,
                      get: function() {
                          return l.Compression;
                      }
                  });
                  var u = r(5880);
                  Object.defineProperty(t, "Conversations", {
                      enumerable: !0,
                      get: function() {
                          return u.Conversations;
                      }
                  });
                  var c = r(6397);
                  Object.defineProperty(t, "ContentTypeId", {
                      enumerable: !0,
                      get: function() {
                          return c.ContentTypeId;
                      }
                  }), Object.defineProperty(t, "ContentTypeFallback", {
                      enumerable: !0,
                      get: function() {
                          return c.ContentTypeFallback;
                      }
                  });
                  var d = r(6254);
                  Object.defineProperty(t, "TextCodec", {
                      enumerable: !0,
                      get: function() {
                          return d.TextCodec;
                      }
                  }), Object.defineProperty(t, "ContentTypeText", {
                      enumerable: !0,
                      get: function() {
                          return d.ContentTypeText;
                      }
                  });
                  var h = r(4196);
                  Object.defineProperty(t, "CompositeCodec", {
                      enumerable: !0,
                      get: function() {
                          return h.CompositeCodec;
                      }
                  }), Object.defineProperty(t, "ContentTypeComposite", {
                      enumerable: !0,
                      get: function() {
                          return h.ContentTypeComposite;
                      }
                  });
                  var f = r(1962);
                  Object.defineProperty(t, "ApiUrls", {
                      enumerable: !0,
                      get: function() {
                          return f.ApiUrls;
                      }
                  }), Object.defineProperty(t, "SortDirection", {
                      enumerable: !0,
                      get: function() {
                          return f.SortDirection;
                      }
                  });
                  var p = r(5506);
                  Object.defineProperty(t, "nsToDate", {
                      enumerable: !0,
                      get: function() {
                          return p.nsToDate;
                      }
                  }), Object.defineProperty(t, "dateToNs", {
                      enumerable: !0,
                      get: function() {
                          return p.dateToNs;
                      }
                  }), Object.defineProperty(t, "fromNanoString", {
                      enumerable: !0,
                      get: function() {
                          return p.fromNanoString;
                      }
                  }), Object.defineProperty(t, "toNanoString", {
                      enumerable: !0,
                      get: function() {
                          return p.toNanoString;
                      }
                  }), Object.defineProperty(t, "mapPaginatedStream", {
                      enumerable: !0,
                      get: function() {
                          return p.mapPaginatedStream;
                      }
                  });
                  var m = r(5506);
                  Object.defineProperty(t, "buildDirectMessageTopic", {
                      enumerable: !0,
                      get: function() {
                          return m.buildDirectMessageTopic;
                      }
                  }), Object.defineProperty(t, "buildDirectMessageTopicV2", {
                      enumerable: !0,
                      get: function() {
                          return m.buildDirectMessageTopicV2;
                      }
                  });
              },
              6284: function(e, t, r) {
                  "use strict";
                  var n = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  }, i = this && this.__importDefault || function(e) {
                      return e && e.__esModule ? e : {
                          default: e
                      };
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  });
                  const o = r(1796), s = r(741), a = r(7915), l = r(5417), u = r(6320), c = r(4162), d = r(5506), h = i(r(5657)), { ErrorCode: f  } = o.keystore;
                  class p {
                      constructor(e, t){
                          this.v1Keys = e, this.v2Keys = s.PrivateKeyBundleV2.fromLegacyBundle(e), this.inviteStore = t;
                      }
                      static create(e, t) {
                          return n(this, void 0, void 0, function*() {
                              return new p(e, (yield h.default.create(t)));
                          });
                      }
                      decryptV1(e) {
                          return n(this, void 0, void 0, function*() {
                              const t = yield (0, c.mapAndConvertErrors)(e.requests, (e)=>n(this, void 0, void 0, function*() {
                                      if (!(0, c.validateObject)(e, [
                                          "payload",
                                          "peerKeys"
                                      ], [
                                          "headerBytes"
                                      ])) throw new u.KeystoreError(f.ERROR_CODE_INVALID_INPUT, "invalid");
                                      const { payload: t , peerKeys: r , headerBytes: n , isSender: i  } = e;
                                      return {
                                          decrypted: yield (0, l.decryptV1)(this.v1Keys, (0, c.toPublicKeyBundle)(r), t, n, i)
                                      };
                                  }), o.keystore.ErrorCode.ERROR_CODE_UNSPECIFIED);
                              return o.keystore.DecryptResponse.fromPartial({
                                  responses: t
                              });
                          });
                      }
                      decryptV2(e) {
                          return n(this, void 0, void 0, function*() {
                              const t = yield (0, c.mapAndConvertErrors)(e.requests, (e)=>n(this, void 0, void 0, function*() {
                                      if (!(0, c.validateObject)(e, [
                                          "payload"
                                      ], [
                                          "headerBytes"
                                      ])) throw new u.KeystoreError(o.keystore.ErrorCode.ERROR_CODE_INVALID_INPUT, "missing required field");
                                      const { payload: t , headerBytes: r , contentTopic: n  } = e, i = this.inviteStore.lookup(n);
                                      if (!i) throw new u.KeystoreError(o.keystore.ErrorCode.ERROR_CODE_NO_MATCHING_PREKEY, "no topic key");
                                      return {
                                          decrypted: yield (0, l.decryptV2)(t, (0, c.getKeyMaterial)(i.invitation), r)
                                      };
                                  }), f.ERROR_CODE_UNSPECIFIED);
                              return o.keystore.DecryptResponse.fromPartial({
                                  responses: t
                              });
                          });
                      }
                      encryptV1(e) {
                          return n(this, void 0, void 0, function*() {
                              const t = yield (0, c.mapAndConvertErrors)(e.requests, (e)=>n(this, void 0, void 0, function*() {
                                      if (!(0, c.validateObject)(e, [
                                          "payload",
                                          "recipient"
                                      ], [
                                          "headerBytes"
                                      ])) throw new u.KeystoreError(f.ERROR_CODE_INVALID_INPUT, "missing required field");
                                      const { recipient: t , payload: r , headerBytes: n  } = e;
                                      return {
                                          encrypted: yield (0, l.encryptV1)(this.v1Keys, (0, c.toPublicKeyBundle)(t), r, n)
                                      };
                                  }), f.ERROR_CODE_UNSPECIFIED);
                              return o.keystore.EncryptResponse.fromPartial({
                                  responses: t
                              });
                          });
                      }
                      encryptV2(e) {
                          return n(this, void 0, void 0, function*() {
                              const t = yield (0, c.mapAndConvertErrors)(e.requests, (e)=>n(this, void 0, void 0, function*() {
                                      if (!(0, c.validateObject)(e, [
                                          "payload"
                                      ], [
                                          "headerBytes"
                                      ])) throw new u.KeystoreError(f.ERROR_CODE_INVALID_INPUT, "missing required field");
                                      const { payload: t , headerBytes: r , contentTopic: n  } = e, i = this.inviteStore.lookup(n);
                                      if (!i) throw new u.KeystoreError(f.ERROR_CODE_NO_MATCHING_PREKEY, "no topic key");
                                      return {
                                          encrypted: yield (0, l.encryptV2)(t, (0, c.getKeyMaterial)(i.invitation), r)
                                      };
                                  }), f.ERROR_CODE_INVALID_INPUT);
                              return o.keystore.EncryptResponse.fromPartial({
                                  responses: t
                              });
                          });
                      }
                      saveInvites(e) {
                          return n(this, void 0, void 0, function*() {
                              const t = [], r = yield (0, c.mapAndConvertErrors)(e.requests, ({ payload: e , timestampNs: r  })=>n(this, void 0, void 0, function*() {
                                      const n = a.SealedInvitation.fromBytes(e);
                                      if (!n.v1.header.createdNs.equals(r)) throw new Error("envelope and header timestamp mismatch");
                                      const i = {
                                          invitation: yield n.v1.getInvitation(this.v2Keys),
                                          createdNs: n.v1.header.createdNs
                                      };
                                      return t.push(i), {
                                          conversation: (0, c.topicDataToConversationReference)(i)
                                      };
                                  }), f.ERROR_CODE_INVALID_INPUT);
                              return yield this.inviteStore.add(t), o.keystore.SaveInvitesResponse.fromPartial({
                                  responses: r
                              });
                          });
                      }
                      createInvite(e) {
                          return n(this, void 0, void 0, function*() {
                              try {
                                  if (!(0, c.validateObject)(e, [
                                      "recipient"
                                  ], [])) throw new u.KeystoreError(f.ERROR_CODE_INVALID_INPUT, "missing recipient");
                                  const t = a.InvitationV1.createRandom(e.context), r = (0, d.nsToDate)(e.createdNs), n = yield a.SealedInvitation.createV1({
                                      sender: this.v2Keys,
                                      recipient: (0, c.toSignedPublicKeyBundle)(e.recipient),
                                      created: r,
                                      invitation: t
                                  }), i = {
                                      invitation: t,
                                      createdNs: e.createdNs
                                  };
                                  return yield this.inviteStore.add([
                                      i
                                  ]), o.keystore.CreateInviteResponse.fromPartial({
                                      conversation: (0, c.topicDataToConversationReference)(i),
                                      payload: n.toBytes()
                                  });
                              } catch (e) {
                                  throw (0, c.convertError)(e, f.ERROR_CODE_INVALID_INPUT);
                              }
                          });
                      }
                      getV2Conversations() {
                          return n(this, void 0, void 0, function*() {
                              const e = this.inviteStore.topics.map((e)=>(0, c.topicDataToConversationReference)(e));
                              return e.sort((e, t)=>e.createdNs.sub(t.createdNs).toNumber()), e;
                          });
                      }
                      getPublicKeyBundle() {
                          return n(this, void 0, void 0, function*() {
                              return this.v2Keys.getPublicKeyBundle();
                          });
                      }
                      getAccountAddress() {
                          return n(this, void 0, void 0, function*() {
                              return this.v2Keys.getPublicKeyBundle().walletSignatureAddress();
                          });
                      }
                  }
                  t.default = p;
              },
              5657: function(e, t, r) {
                  "use strict";
                  var n = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  });
                  const i = r(1796), o = r(8125), s = r(4162), a = "invitations:v1";
                  class l {
                      constructor(e, t = new Map){
                          this.persistence = e, this.mutex = new o.Mutex, this.topicMap = t;
                      }
                      static create(e) {
                          return n(this, void 0, void 0, function*() {
                              if (e) {
                                  const t = yield e.getItem(a);
                                  if (t) try {
                                      const r = (0, s.typeSafeTopicMap)(i.keystore.TopicMap.decode(t));
                                      return new l(e, new Map(Object.entries(r)));
                                  } catch (e) {
                                      console.warn(`Error loading invites from store: ${e}`);
                                  }
                              }
                              return new l(e);
                          });
                      }
                      add(e) {
                          return n(this, void 0, void 0, function*() {
                              yield this.mutex.runExclusive(()=>n(this, void 0, void 0, function*() {
                                      let t = !1;
                                      for (const r of e)this.topicMap.has(r.invitation.topic) || (this.topicMap.set(r.invitation.topic, r), t = !0);
                                      t && this.persistence && (yield this.persistence.setItem(a, this.toBytes()));
                                  }));
                          });
                      }
                      get topics() {
                          return [
                              ...this.topicMap.values()
                          ];
                      }
                      lookup(e) {
                          return this.topicMap.get(e);
                      }
                      toBytes() {
                          return i.keystore.TopicMap.encode({
                              topics: Object.fromEntries(this.topicMap)
                          }).finish();
                      }
                  }
                  t.default = l;
              },
              5417: function(e, t, r) {
                  "use strict";
                  var n = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.encryptV2 = t.decryptV2 = t.encryptV1 = t.decryptV1 = void 0;
                  const i = r(2449);
                  t.decryptV1 = (e, t, r, o, s)=>n(void 0, void 0, void 0, function*() {
                          const n = yield e.sharedSecret(t, e.getCurrentPreKey().publicKey, !s);
                          return (0, i.decrypt)(r, n, o);
                      }), t.encryptV1 = (e, t, r, o)=>n(void 0, void 0, void 0, function*() {
                          const n = yield e.sharedSecret(t, e.getCurrentPreKey().publicKey, !1);
                          return (0, i.encrypt)(r, n, o);
                      }), t.decryptV2 = (e, t, r)=>(0, i.decrypt)(e, t, r), t.encryptV2 = (e, t, r)=>(0, i.encrypt)(e, t, r);
              },
              6320: (e, t)=>{
                  "use strict";
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.KeystoreError = void 0;
                  class r extends Error {
                      constructor(e, t){
                          super(t), this.code = e;
                      }
                  }
                  t.KeystoreError = r;
              },
              98: function(e, t, r) {
                  "use strict";
                  var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {
                      void 0 === n && (n = r), Object.defineProperty(e, n, {
                          enumerable: !0,
                          get: function() {
                              return t[r];
                          }
                      });
                  } : function(e, t, r, n) {
                      void 0 === n && (n = r), e[n] = t[r];
                  }), i = this && this.__exportStar || function(e, t) {
                      for(var r in e)"default" === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                  }, o = this && this.__importDefault || function(e) {
                      return e && e.__esModule ? e : {
                          default: e
                      };
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.InviteStore = t.InMemoryKeystore = void 0;
                  var s = r(6284);
                  Object.defineProperty(t, "InMemoryKeystore", {
                      enumerable: !0,
                      get: function() {
                          return o(s).default;
                      }
                  });
                  var a = r(5657);
                  Object.defineProperty(t, "InviteStore", {
                      enumerable: !0,
                      get: function() {
                          return o(a).default;
                      }
                  }), i(r(5417), t), i(r(6320), t), i(r(9270), t);
              },
              9270: (e, t)=>{
                  "use strict";
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  });
              },
              4162: function(e, t, r) {
                  "use strict";
                  var n = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.typeSafeTopicMap = t.isCompleteTopicData = t.topicDataToConversationReference = t.getKeyMaterial = t.validateObject = t.toSignedPublicKeyBundle = t.toPublicKeyBundle = t.mapAndConvertErrors = t.wrapResult = t.convertError = void 0;
                  const i = r(1796), o = r(2449), s = r(6320);
                  t.convertError = (e, t)=>e instanceof s.KeystoreError ? e : new s.KeystoreError(t, e.message), t.wrapResult = (e)=>({
                          result: e
                      }), t.mapAndConvertErrors = (e, r, i)=>Promise.all(e.map((e)=>n(void 0, void 0, void 0, function*() {
                              try {
                                  return (0, t.wrapResult)((yield r(e)));
                              } catch (e) {
                                  return {
                                      error: (0, t.convertError)(e, i)
                                  };
                              }
                          }))), t.toPublicKeyBundle = (e)=>e instanceof o.PublicKeyBundle ? e : new o.PublicKeyBundle(e), t.toSignedPublicKeyBundle = (e)=>e instanceof o.SignedPublicKeyBundle ? e : new o.SignedPublicKeyBundle(e), t.validateObject = (e, t, r)=>{
                      for (const r of t)if (!e[r]) throw new s.KeystoreError(i.keystore.ErrorCode.ERROR_CODE_INVALID_INPUT, `Missing field ${String(r)}`);
                      for (const t of r){
                          const r = e[t];
                          if (!r || !(null == r ? void 0 : r.length)) throw new s.KeystoreError(i.keystore.ErrorCode.ERROR_CODE_INVALID_INPUT, `Missing field ${String(t)}`);
                      }
                      return !0;
                  }, t.getKeyMaterial = (e)=>{
                      var t;
                      if (!(null === (t = null == e ? void 0 : e.aes256GcmHkdfSha256) || void 0 === t ? void 0 : t.keyMaterial)) throw new s.KeystoreError(i.keystore.ErrorCode.ERROR_CODE_INVALID_INPUT, "Missing key material");
                      return e.aes256GcmHkdfSha256.keyMaterial;
                  }, t.topicDataToConversationReference = ({ invitation: e , createdNs: t  })=>({
                          context: e.context,
                          topic: e.topic,
                          createdNs: t
                      }), t.isCompleteTopicData = (e)=>!!e.invitation, t.typeSafeTopicMap = (e)=>{
                      const r = {};
                      for (const [n, i] of Object.entries(e.topics))(0, t.isCompleteTopicData)(i) ? r[n] = i : console.warn("Invitation missing from topic data");
                      return r;
                  };
              },
              4215: (e, t, r)=>{
                  "use strict";
                  r(3052);
              },
              7261: function(e, t, r) {
                  "use strict";
                  var n = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  }, i = this && this.__importDefault || function(e) {
                      return e && e.__esModule ? e : {
                          default: e
                      };
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.storageSigRequestText = void 0;
                  const o = r(9982), s = r(2449), a = r(9099), l = r(9272), u = i(r(7527)), c = r(1796), d = "key_bundle";
                  function h(e) {
                      try {
                          return [
                              (0, s.decodePrivateKeyBundle)(e),
                              !1
                          ];
                      } catch (t) {
                          const r = c.privateKey.PrivateKeyBundleV1.decode(e);
                          return [
                              new s.PrivateKeyBundleV1(r),
                              !0
                          ];
                      }
                  }
                  function f(e) {
                      return `XMTP : Enable Identity\n${(0, l.bytesToHex)(e)}\n\nFor more info: https://xmtp.org/signatures/`;
                  }
                  t.default = class {
                      constructor(e, t){
                          this.signer = e, this.store = t;
                      }
                      getStorageAddress(e) {
                          return n(this, void 0, void 0, function*() {
                              let t = yield this.signer.getAddress();
                              return t = o.utils.getAddress(t), `${t}/${e}`;
                          });
                      }
                      loadPrivateKeyBundle() {
                          return n(this, void 0, void 0, function*() {
                              const e = yield this.store.get((yield this.getStorageAddress(d)));
                              if (!e) return null;
                              const [t, r] = yield this.fromEncryptedBytes(this.signer, Uint8Array.from(e));
                              return r && (yield this.storePrivateKeyBundle(t)), t;
                          });
                      }
                      storePrivateKeyBundle(e) {
                          return n(this, void 0, void 0, function*() {
                              const t = yield this.getStorageAddress(d), r = yield this.toEncryptedBytes(e, this.signer);
                              "function" == typeof this.store.setAuthenticator && this.store.setAuthenticator(new a.Authenticator(e.identityKey)), yield this.store.set(t, Buffer.from(r));
                          });
                      }
                      toEncryptedBytes(e, t) {
                          return n(this, void 0, void 0, function*() {
                              const r = e.encode(), n = (0, l.getRandomValues)(new Uint8Array(32)), i = f(n), a = yield t.getAddress();
                              let u = yield t.signMessage(i), d = o.utils.verifyMessage(i, u);
                              if (d !== a && (u = yield t.signMessage(i), console.log("invalid signature, retrying"), d = o.utils.verifyMessage(i, u), d !== a)) throw new Error("invalid signature");
                              const h = (0, l.hexToBytes)(u), p = yield (0, s.encrypt)(r, h);
                              return c.privateKey.EncryptedPrivateKeyBundle.encode({
                                  v1: {
                                      walletPreKey: n,
                                      ciphertext: p
                                  }
                              }).finish();
                          });
                      }
                      fromEncryptedBytes(e, t) {
                          var r;
                          return n(this, void 0, void 0, function*() {
                              const [n, i] = function(e) {
                                  try {
                                      const t = c.privateKey.EncryptedPrivateKeyBundle.decode(e);
                                      if (t.v1) return [
                                          t.v1,
                                          !1
                                      ];
                                  } catch (t) {
                                      return [
                                          c.privateKey.EncryptedPrivateKeyBundleV1.decode(e),
                                          !0
                                      ];
                                  }
                                  throw new Error("unrecognized encrypted private key bundle version");
                              }(t);
                              if (!n.walletPreKey) throw new Error("missing wallet pre-key");
                              if (!(null === (r = n.ciphertext) || void 0 === r ? void 0 : r.aes256GcmHkdfSha256)) throw new Error("missing bundle ciphertext");
                              const o = (0, l.hexToBytes)((yield e.signMessage(f(n.walletPreKey))));
                              try {
                                  const e = new u.default(n.ciphertext), t = yield (0, s.decrypt)(e, o), [r, a] = h(t);
                                  return [
                                      r,
                                      i || a
                                  ];
                              } catch (e) {
                                  if (65 !== o.length) throw new Error("Expected 65 bytes before trying a different recovery byte");
                                  const t = o[o.length - 1];
                                  let r = o.slice(0, o.length - 1);
                                  r = t < 27 ? new Uint8Array([
                                      ...r,
                                      t + 27
                                  ]) : new Uint8Array([
                                      ...r,
                                      t - 27
                                  ]);
                                  const a = new u.default(n.ciphertext), l = yield (0, s.decrypt)(a, r), [c, d] = h(l);
                                  return [
                                      c,
                                      i || d
                                  ];
                              }
                          });
                      }
                  }, t.storageSigRequestText = f;
              },
              9185: function(e, t, r) {
                  "use strict";
                  var n = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  }, i = this && this.__asyncValues || function(e) {
                      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                      var t, r = e[Symbol.asyncIterator];
                      return r ? r.call(e) : (e = "function" == typeof __values ? __values(e) : e[Symbol.iterator](), t = {}, n("next"), n("throw"), n("return"), t[Symbol.asyncIterator] = function() {
                          return this;
                      }, t);
                      function n(r) {
                          t[r] = e[r] && function(t) {
                              return new Promise(function(n, i) {
                                  !function(e, t, r, n) {
                                      Promise.resolve(n).then(function(t) {
                                          e({
                                              value: t,
                                              done: r
                                          });
                                      }, t);
                                  }(n, i, (t = e[r](t)).done, t.value);
                              });
                          };
                      }
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  });
                  const o = r(1796), s = r(5161), a = o.fetcher.b64Decode;
                  t.default = class {
                      constructor(e){
                          this.client = e;
                      }
                      get(e) {
                          var t, r;
                          return n(this, void 0, void 0, function*() {
                              try {
                                  for(var n, s = i(this.client.queryIterator({
                                      contentTopics: [
                                          this.buildTopic(e)
                                      ]
                                  }, {
                                      pageSize: 10,
                                      direction: o.messageApi.SortDirection.SORT_DIRECTION_DESCENDING
                                  })); !(n = yield s.next()).done;){
                                      const e = n.value;
                                      if (e.message) try {
                                          const t = a(e.message.toString());
                                          return Buffer.from(t);
                                      } catch (e) {
                                          console.log(e);
                                      }
                                  }
                              } catch (e) {
                                  t = {
                                      error: e
                                  };
                              } finally{
                                  try {
                                      n && !n.done && (r = s.return) && (yield r.call(s));
                                  } finally{
                                      if (t) throw t.error;
                                  }
                              }
                              return null;
                          });
                      }
                      set(e, t) {
                          return n(this, void 0, void 0, function*() {
                              const r = Uint8Array.from(t);
                              yield this.client.publish([
                                  {
                                      contentTopic: this.buildTopic(e),
                                      message: r
                                  }
                              ]);
                          });
                      }
                      setAuthenticator(e) {
                          this.client.setAuthenticator(e);
                      }
                      buildTopic(e) {
                          return (0, s.buildUserPrivateStoreTopic)(e);
                      }
                  };
              },
              8173: function(e, t, r) {
                  "use strict";
                  var n = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  });
                  const i = r(741);
                  t.default = class {
                      constructor(e){
                          this.value = e;
                      }
                      loadPrivateKeyBundle() {
                          return n(this, void 0, void 0, function*() {
                              return (0, i.decodePrivateKeyBundle)(this.value);
                          });
                      }
                      storePrivateKeyBundle() {
                          return n(this, void 0, void 0, function*() {
                              throw new Error("Store is not possible with StaticStore");
                          });
                      }
                  };
              },
              9535: function(e, t, r) {
                  "use strict";
                  var n = this && this.__importDefault || function(e) {
                      return e && e.__esModule ? e : {
                          default: e
                      };
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.StaticKeyStore = t.PrivateTopicStore = t.storageSigRequestText = t.EncryptedKeyStore = void 0;
                  var i = r(7261);
                  Object.defineProperty(t, "EncryptedKeyStore", {
                      enumerable: !0,
                      get: function() {
                          return n(i).default;
                      }
                  }), Object.defineProperty(t, "storageSigRequestText", {
                      enumerable: !0,
                      get: function() {
                          return i.storageSigRequestText;
                      }
                  });
                  var o = r(9185);
                  Object.defineProperty(t, "PrivateTopicStore", {
                      enumerable: !0,
                      get: function() {
                          return n(o).default;
                      }
                  });
                  var s = r(8173);
                  Object.defineProperty(t, "StaticKeyStore", {
                      enumerable: !0,
                      get: function() {
                          return n(s).default;
                      }
                  });
              },
              8206: function(e, t) {
                  "use strict";
                  var r = this && this.__awaiter || function(e, t, r, n) {
                      return new (r || (r = Promise))(function(i, o) {
                          function s(e) {
                              try {
                                  l(n.next(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function a(e) {
                              try {
                                  l(n.throw(e));
                              } catch (e) {
                                  o(e);
                              }
                          }
                          function l(e) {
                              var t;
                              e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function(e) {
                                  e(t);
                              })).then(s, a);
                          }
                          l((n = n.apply(e, t || [])).next());
                      });
                  }, n = this && this.__asyncValues || function(e) {
                      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                      var t, r = e[Symbol.asyncIterator];
                      return r ? r.call(e) : (e = "function" == typeof __values ? __values(e) : e[Symbol.iterator](), t = {}, n("next"), n("throw"), n("return"), t[Symbol.asyncIterator] = function() {
                          return this;
                      }, t);
                      function n(r) {
                          t[r] = e[r] && function(t) {
                              return new Promise(function(n, i) {
                                  !function(e, t, r, n) {
                                      Promise.resolve(n).then(function(t) {
                                          e({
                                              value: t,
                                              done: r
                                          });
                                      }, t);
                                  }(n, i, (t = e[r](t)).done, t.value);
                              });
                          };
                      }
                  }, i = this && this.__await || function(e) {
                      return this instanceof i ? (this.v = e, this) : new i(e);
                  }, o = this && this.__asyncGenerator || function(e, t, r) {
                      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                      var n, o = r.apply(e, t || []), s = [];
                      return n = {}, a("next"), a("throw"), a("return"), n[Symbol.asyncIterator] = function() {
                          return this;
                      }, n;
                      function a(e) {
                          o[e] && (n[e] = function(t) {
                              return new Promise(function(r, n) {
                                  s.push([
                                      e,
                                      t,
                                      r,
                                      n
                                  ]) > 1 || l(e, t);
                              });
                          });
                      }
                      function l(e, t) {
                          try {
                              (r = o[e](t)).value instanceof i ? Promise.resolve(r.value.v).then(u, c) : d(s[0][2], r);
                          } catch (e) {
                              d(s[0][3], e);
                          }
                          var r;
                      }
                      function u(e) {
                          l("next", e);
                      }
                      function c(e) {
                          l("throw", e);
                      }
                      function d(e, t) {
                          e(t), s.shift(), s.length && l(s[0][0], s[0][1]);
                      }
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.mapPaginatedStream = t.retry = t.promiseWithTimeout = t.sleep = void 0, t.sleep = (e)=>new Promise((t)=>setTimeout(t, e)), t.promiseWithTimeout = (e, t, r)=>{
                      let n;
                      const i = new Promise((t, i)=>{
                          n = setTimeout(()=>i(new Error(r)), e);
                      });
                      return Promise.race([
                          t(),
                          i
                      ]).then((e)=>(clearTimeout(n), e));
                  };
                  const s = (e)=>!!e;
                  t.retry = function e(n, i, o, a, l = s, u = 1) {
                      return r(this, void 0, void 0, function*() {
                          const r = "number" == typeof u ? u : 1;
                          try {
                              return yield n(...i);
                          } catch (s) {
                              if (!l(s) || r > o) throw s;
                              return yield (0, t.sleep)(a), e(n, i, o, a, l, r + 1);
                          }
                      });
                  }, t.mapPaginatedStream = function(e, t) {
                      return o(this, arguments, function*() {
                          var r, o;
                          try {
                              for(var s, a = n(e); !(s = yield i(a.next())).done;){
                                  const e = s.value, r = yield i(Promise.allSettled(e.map(t))), n = [];
                                  for (const e of r)"fulfilled" === e.status ? n.push(e.value) : console.warn("Failed to process envelope due to reason: ", e.reason);
                                  yield yield i(n);
                              }
                          } catch (e) {
                              r = {
                                  error: e
                              };
                          } finally{
                              try {
                                  s && !s.done && (o = a.return) && (yield i(o.call(a)));
                              } finally{
                                  if (r) throw r.error;
                              }
                          }
                      });
                  };
              },
              6908: function(e, t, r) {
                  "use strict";
                  var n = this && this.__importDefault || function(e) {
                      return e && e.__esModule ? e : {
                          default: e
                      };
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.fromNanoString = t.toNanoString = t.nsToDate = t.dateToNs = void 0;
                  const i = n(r(1583));
                  function o(e) {
                      return i.default.fromNumber(e.valueOf()).multiply(1e6);
                  }
                  function s(e) {
                      return new Date(e.divide(1e6).toNumber());
                  }
                  t.dateToNs = o, t.nsToDate = s, t.toNanoString = (e)=>e && o(e).toString(), t.fromNanoString = (e)=>{
                      if (e) return s(i.default.fromString(e));
                  };
              },
              5506: function(e, t, r) {
                  "use strict";
                  var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {
                      void 0 === n && (n = r), Object.defineProperty(e, n, {
                          enumerable: !0,
                          get: function() {
                              return t[r];
                          }
                      });
                  } : function(e, t, r, n) {
                      void 0 === n && (n = r), e[n] = t[r];
                  }), i = this && this.__exportStar || function(e, t) {
                      for(var r in e)"default" === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
                  };
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), i(r(5161), t), i(r(8206), t), i(r(6908), t);
              },
              5161: (e, t, r)=>{
                  "use strict";
                  Object.defineProperty(t, "__esModule", {
                      value: !0
                  }), t.buildUserPrivateStoreTopic = t.buildUserInviteTopic = t.buildUserIntroTopic = t.buildUserContactTopic = t.buildDirectMessageTopicV2 = t.buildDirectMessageTopic = t.buildContentTopic = void 0;
                  const n = r(9982);
                  t.buildContentTopic = (e)=>`/xmtp/0/${e}/proto`, t.buildDirectMessageTopic = (e, r)=>{
                      const i = [
                          n.utils.getAddress(e),
                          n.utils.getAddress(r)
                      ];
                      return i.sort(), (0, t.buildContentTopic)(`dm-${i.join("-")}`);
                  }, t.buildDirectMessageTopicV2 = (e)=>(0, t.buildContentTopic)(`m-${e}`), t.buildUserContactTopic = (e)=>(0, t.buildContentTopic)(`contact-${n.utils.getAddress(e)}`), t.buildUserIntroTopic = (e)=>(0, t.buildContentTopic)(`intro-${n.utils.getAddress(e)}`), t.buildUserInviteTopic = (e)=>(0, t.buildContentTopic)(`invite-${n.utils.getAddress(e)}`), t.buildUserPrivateStoreTopic = (e)=>(0, t.buildContentTopic)(`privatestore-${e}`);
              },
              9159: ()=>{},
              6601: ()=>{},
              2114: ()=>{},
              1583: (e, t)=>{
                  var r, n = function(e) {
                      "use strict";
                      Object.defineProperty(e, "__esModule", {
                          value: !0
                      }), e.default = void 0;
                      var t = null;
                      try {
                          t = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
                              0,
                              97,
                              115,
                              109,
                              1,
                              0,
                              0,
                              0,
                              1,
                              13,
                              2,
                              96,
                              0,
                              1,
                              127,
                              96,
                              4,
                              127,
                              127,
                              127,
                              127,
                              1,
                              127,
                              3,
                              7,
                              6,
                              0,
                              1,
                              1,
                              1,
                              1,
                              1,
                              6,
                              6,
                              1,
                              127,
                              1,
                              65,
                              0,
                              11,
                              7,
                              50,
                              6,
                              3,
                              109,
                              117,
                              108,
                              0,
                              1,
                              5,
                              100,
                              105,
                              118,
                              95,
                              115,
                              0,
                              2,
                              5,
                              100,
                              105,
                              118,
                              95,
                              117,
                              0,
                              3,
                              5,
                              114,
                              101,
                              109,
                              95,
                              115,
                              0,
                              4,
                              5,
                              114,
                              101,
                              109,
                              95,
                              117,
                              0,
                              5,
                              8,
                              103,
                              101,
                              116,
                              95,
                              104,
                              105,
                              103,
                              104,
                              0,
                              0,
                              10,
                              191,
                              1,
                              6,
                              4,
                              0,
                              35,
                              0,
                              11,
                              36,
                              1,
                              1,
                              126,
                              32,
                              0,
                              173,
                              32,
                              1,
                              173,
                              66,
                              32,
                              134,
                              132,
                              32,
                              2,
                              173,
                              32,
                              3,
                              173,
                              66,
                              32,
                              134,
                              132,
                              126,
                              34,
                              4,
                              66,
                              32,
                              135,
                              167,
                              36,
                              0,
                              32,
                              4,
                              167,
                              11,
                              36,
                              1,
                              1,
                              126,
                              32,
                              0,
                              173,
                              32,
                              1,
                              173,
                              66,
                              32,
                              134,
                              132,
                              32,
                              2,
                              173,
                              32,
                              3,
                              173,
                              66,
                              32,
                              134,
                              132,
                              127,
                              34,
                              4,
                              66,
                              32,
                              135,
                              167,
                              36,
                              0,
                              32,
                              4,
                              167,
                              11,
                              36,
                              1,
                              1,
                              126,
                              32,
                              0,
                              173,
                              32,
                              1,
                              173,
                              66,
                              32,
                              134,
                              132,
                              32,
                              2,
                              173,
                              32,
                              3,
                              173,
                              66,
                              32,
                              134,
                              132,
                              128,
                              34,
                              4,
                              66,
                              32,
                              135,
                              167,
                              36,
                              0,
                              32,
                              4,
                              167,
                              11,
                              36,
                              1,
                              1,
                              126,
                              32,
                              0,
                              173,
                              32,
                              1,
                              173,
                              66,
                              32,
                              134,
                              132,
                              32,
                              2,
                              173,
                              32,
                              3,
                              173,
                              66,
                              32,
                              134,
                              132,
                              129,
                              34,
                              4,
                              66,
                              32,
                              135,
                              167,
                              36,
                              0,
                              32,
                              4,
                              167,
                              11,
                              36,
                              1,
                              1,
                              126,
                              32,
                              0,
                              173,
                              32,
                              1,
                              173,
                              66,
                              32,
                              134,
                              132,
                              32,
                              2,
                              173,
                              32,
                              3,
                              173,
                              66,
                              32,
                              134,
                              132,
                              130,
                              34,
                              4,
                              66,
                              32,
                              135,
                              167,
                              36,
                              0,
                              32,
                              4,
                              167,
                              11
                          ])), {}).exports;
                      } catch (e) {}
                      function r(e, t, r) {
                          this.low = 0 | e, this.high = 0 | t, this.unsigned = !!r;
                      }
                      function n(e) {
                          return !0 === (e && e.__isLong__);
                      }
                      function i(e) {
                          var t = Math.clz32(e & -e);
                          return e ? 31 - t : t;
                      }
                      r.prototype.__isLong__, Object.defineProperty(r.prototype, "__isLong__", {
                          value: !0
                      }), r.isLong = n;
                      var o = {}, s = {};
                      function a(e, t) {
                          var r, n, i;
                          return t ? (i = 0 <= (e >>>= 0) && e < 256) && (n = s[e]) ? n : (r = u(e, 0, !0), i && (s[e] = r), r) : (i = -128 <= (e |= 0) && e < 128) && (n = o[e]) ? n : (r = u(e, e < 0 ? -1 : 0, !1), i && (o[e] = r), r);
                      }
                      function l(e, t) {
                          if (isNaN(e)) return t ? v : g;
                          if (t) {
                              if (e < 0) return v;
                              if (e >= p) return E;
                          } else {
                              if (e <= -m) return k;
                              if (e + 1 >= m) return S;
                          }
                          return e < 0 ? l(-e, t).neg() : u(e % f | 0, e / f | 0, t);
                      }
                      function u(e, t, n) {
                          return new r(e, t, n);
                      }
                      r.fromInt = a, r.fromNumber = l, r.fromBits = u;
                      var c = Math.pow;
                      function d(e, t, r) {
                          if (0 === e.length) throw Error("empty string");
                          if ("number" == typeof t ? (r = t, t = !1) : t = !!t, "NaN" === e || "Infinity" === e || "+Infinity" === e || "-Infinity" === e) return t ? v : g;
                          if ((r = r || 10) < 2 || 36 < r) throw RangeError("radix");
                          var n;
                          if ((n = e.indexOf("-")) > 0) throw Error("interior hyphen");
                          if (0 === n) return d(e.substring(1), t, r).neg();
                          for(var i = l(c(r, 8)), o = g, s = 0; s < e.length; s += 8){
                              var a = Math.min(8, e.length - s), u = parseInt(e.substring(s, s + a), r);
                              if (a < 8) {
                                  var h = l(c(r, a));
                                  o = o.mul(h).add(l(u));
                              } else o = (o = o.mul(i)).add(l(u));
                          }
                          return o.unsigned = t, o;
                      }
                      function h(e, t) {
                          return "number" == typeof e ? l(e, t) : "string" == typeof e ? d(e, t) : u(e.low, e.high, "boolean" == typeof t ? t : e.unsigned);
                      }
                      r.fromString = d, r.fromValue = h;
                      var f = 4294967296, p = f * f, m = p / 2, y = a(16777216), g = a(0);
                      r.ZERO = g;
                      var v = a(0, !0);
                      r.UZERO = v;
                      var b = a(1);
                      r.ONE = b;
                      var w = a(1, !0);
                      r.UONE = w;
                      var _ = a(-1);
                      r.NEG_ONE = _;
                      var S = u(-1, 2147483647, !1);
                      r.MAX_VALUE = S;
                      var E = u(-1, -1, !0);
                      r.MAX_UNSIGNED_VALUE = E;
                      var k = u(0, -2147483648, !1);
                      r.MIN_VALUE = k;
                      var A = r.prototype;
                      A.toInt = function() {
                          return this.unsigned ? this.low >>> 0 : this.low;
                      }, A.toNumber = function() {
                          return this.unsigned ? (this.high >>> 0) * f + (this.low >>> 0) : this.high * f + (this.low >>> 0);
                      }, A.toString = function(e) {
                          if ((e = e || 10) < 2 || 36 < e) throw RangeError("radix");
                          if (this.isZero()) return "0";
                          if (this.isNegative()) {
                              if (this.eq(k)) {
                                  var t = l(e), r = this.div(t), n = r.mul(t).sub(this);
                                  return r.toString(e) + n.toInt().toString(e);
                              }
                              return "-" + this.neg().toString(e);
                          }
                          for(var i = l(c(e, 6), this.unsigned), o = this, s = "";;){
                              var a = o.div(i), u = (o.sub(a.mul(i)).toInt() >>> 0).toString(e);
                              if ((o = a).isZero()) return u + s;
                              for(; u.length < 6;)u = "0" + u;
                              s = "" + u + s;
                          }
                      }, A.getHighBits = function() {
                          return this.high;
                      }, A.getHighBitsUnsigned = function() {
                          return this.high >>> 0;
                      }, A.getLowBits = function() {
                          return this.low;
                      }, A.getLowBitsUnsigned = function() {
                          return this.low >>> 0;
                      }, A.getNumBitsAbs = function() {
                          if (this.isNegative()) return this.eq(k) ? 64 : this.neg().getNumBitsAbs();
                          for(var e = 0 != this.high ? this.high : this.low, t = 31; t > 0 && 0 == (e & 1 << t); t--);
                          return 0 != this.high ? t + 33 : t + 1;
                      }, A.isZero = function() {
                          return 0 === this.high && 0 === this.low;
                      }, A.eqz = A.isZero, A.isNegative = function() {
                          return !this.unsigned && this.high < 0;
                      }, A.isPositive = function() {
                          return this.unsigned || this.high >= 0;
                      }, A.isOdd = function() {
                          return 1 == (1 & this.low);
                      }, A.isEven = function() {
                          return 0 == (1 & this.low);
                      }, A.equals = function(e) {
                          return n(e) || (e = h(e)), (this.unsigned === e.unsigned || this.high >>> 31 != 1 || e.high >>> 31 != 1) && this.high === e.high && this.low === e.low;
                      }, A.eq = A.equals, A.notEquals = function(e) {
                          return !this.eq(e);
                      }, A.neq = A.notEquals, A.ne = A.notEquals, A.lessThan = function(e) {
                          return this.comp(e) < 0;
                      }, A.lt = A.lessThan, A.lessThanOrEqual = function(e) {
                          return this.comp(e) <= 0;
                      }, A.lte = A.lessThanOrEqual, A.le = A.lessThanOrEqual, A.greaterThan = function(e) {
                          return this.comp(e) > 0;
                      }, A.gt = A.greaterThan, A.greaterThanOrEqual = function(e) {
                          return this.comp(e) >= 0;
                      }, A.gte = A.greaterThanOrEqual, A.ge = A.greaterThanOrEqual, A.compare = function(e) {
                          if (n(e) || (e = h(e)), this.eq(e)) return 0;
                          var t = this.isNegative(), r = e.isNegative();
                          return t && !r ? -1 : !t && r ? 1 : this.unsigned ? e.high >>> 0 > this.high >>> 0 || e.high === this.high && e.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(e).isNegative() ? -1 : 1;
                      }, A.comp = A.compare, A.negate = function() {
                          return !this.unsigned && this.eq(k) ? k : this.not().add(b);
                      }, A.neg = A.negate, A.add = function(e) {
                          n(e) || (e = h(e));
                          var t = this.high >>> 16, r = 65535 & this.high, i = this.low >>> 16, o = 65535 & this.low, s = e.high >>> 16, a = 65535 & e.high, l = e.low >>> 16, c = 0, d = 0, f = 0, p = 0;
                          return f += (p += o + (65535 & e.low)) >>> 16, d += (f += i + l) >>> 16, c += (d += r + a) >>> 16, c += t + s, u((f &= 65535) << 16 | (p &= 65535), (c &= 65535) << 16 | (d &= 65535), this.unsigned);
                      }, A.subtract = function(e) {
                          return n(e) || (e = h(e)), this.add(e.neg());
                      }, A.sub = A.subtract, A.multiply = function(e) {
                          if (this.isZero()) return this;
                          if (n(e) || (e = h(e)), t) return u(t.mul(this.low, this.high, e.low, e.high), t.get_high(), this.unsigned);
                          if (e.isZero()) return this.unsigned ? v : g;
                          if (this.eq(k)) return e.isOdd() ? k : g;
                          if (e.eq(k)) return this.isOdd() ? k : g;
                          if (this.isNegative()) return e.isNegative() ? this.neg().mul(e.neg()) : this.neg().mul(e).neg();
                          if (e.isNegative()) return this.mul(e.neg()).neg();
                          if (this.lt(y) && e.lt(y)) return l(this.toNumber() * e.toNumber(), this.unsigned);
                          var r = this.high >>> 16, i = 65535 & this.high, o = this.low >>> 16, s = 65535 & this.low, a = e.high >>> 16, c = 65535 & e.high, d = e.low >>> 16, f = 65535 & e.low, p = 0, m = 0, b = 0, w = 0;
                          return b += (w += s * f) >>> 16, m += (b += o * f) >>> 16, b &= 65535, m += (b += s * d) >>> 16, p += (m += i * f) >>> 16, m &= 65535, p += (m += o * d) >>> 16, m &= 65535, p += (m += s * c) >>> 16, p += r * f + i * d + o * c + s * a, u((b &= 65535) << 16 | (w &= 65535), (p &= 65535) << 16 | (m &= 65535), this.unsigned);
                      }, A.mul = A.multiply, A.divide = function(e) {
                          if (n(e) || (e = h(e)), e.isZero()) throw Error("division by zero");
                          var r, i, o;
                          if (t) return this.unsigned || -2147483648 !== this.high || -1 !== e.low || -1 !== e.high ? u((this.unsigned ? t.div_u : t.div_s)(this.low, this.high, e.low, e.high), t.get_high(), this.unsigned) : this;
                          if (this.isZero()) return this.unsigned ? v : g;
                          if (this.unsigned) {
                              if (e.unsigned || (e = e.toUnsigned()), e.gt(this)) return v;
                              if (e.gt(this.shru(1))) return w;
                              o = v;
                          } else {
                              if (this.eq(k)) return e.eq(b) || e.eq(_) ? k : e.eq(k) ? b : (r = this.shr(1).div(e).shl(1)).eq(g) ? e.isNegative() ? b : _ : (i = this.sub(e.mul(r)), o = r.add(i.div(e)));
                              if (e.eq(k)) return this.unsigned ? v : g;
                              if (this.isNegative()) return e.isNegative() ? this.neg().div(e.neg()) : this.neg().div(e).neg();
                              if (e.isNegative()) return this.div(e.neg()).neg();
                              o = g;
                          }
                          for(i = this; i.gte(e);){
                              r = Math.max(1, Math.floor(i.toNumber() / e.toNumber()));
                              for(var s = Math.ceil(Math.log(r) / Math.LN2), a = s <= 48 ? 1 : c(2, s - 48), d = l(r), f = d.mul(e); f.isNegative() || f.gt(i);)f = (d = l(r -= a, this.unsigned)).mul(e);
                              d.isZero() && (d = b), o = o.add(d), i = i.sub(f);
                          }
                          return o;
                      }, A.div = A.divide, A.modulo = function(e) {
                          return n(e) || (e = h(e)), t ? u((this.unsigned ? t.rem_u : t.rem_s)(this.low, this.high, e.low, e.high), t.get_high(), this.unsigned) : this.sub(this.div(e).mul(e));
                      }, A.mod = A.modulo, A.rem = A.modulo, A.not = function() {
                          return u(~this.low, ~this.high, this.unsigned);
                      }, A.countLeadingZeros = function() {
                          return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;
                      }, A.clz = A.countLeadingZeros, A.countTrailingZeros = function() {
                          return this.low ? i(this.low) : i(this.high) + 32;
                      }, A.ctz = A.countTrailingZeros, A.and = function(e) {
                          return n(e) || (e = h(e)), u(this.low & e.low, this.high & e.high, this.unsigned);
                      }, A.or = function(e) {
                          return n(e) || (e = h(e)), u(this.low | e.low, this.high | e.high, this.unsigned);
                      }, A.xor = function(e) {
                          return n(e) || (e = h(e)), u(this.low ^ e.low, this.high ^ e.high, this.unsigned);
                      }, A.shiftLeft = function(e) {
                          return n(e) && (e = e.toInt()), 0 == (e &= 63) ? this : e < 32 ? u(this.low << e, this.high << e | this.low >>> 32 - e, this.unsigned) : u(0, this.low << e - 32, this.unsigned);
                      }, A.shl = A.shiftLeft, A.shiftRight = function(e) {
                          return n(e) && (e = e.toInt()), 0 == (e &= 63) ? this : e < 32 ? u(this.low >>> e | this.high << 32 - e, this.high >> e, this.unsigned) : u(this.high >> e - 32, this.high >= 0 ? 0 : -1, this.unsigned);
                      }, A.shr = A.shiftRight, A.shiftRightUnsigned = function(e) {
                          return n(e) && (e = e.toInt()), 0 == (e &= 63) ? this : e < 32 ? u(this.low >>> e | this.high << 32 - e, this.high >>> e, this.unsigned) : u(32 === e ? this.high : this.high >>> e - 32, 0, this.unsigned);
                      }, A.shru = A.shiftRightUnsigned, A.shr_u = A.shiftRightUnsigned, A.rotateLeft = function(e) {
                          var t;
                          return n(e) && (e = e.toInt()), 0 == (e &= 63) ? this : 32 === e ? u(this.high, this.low, this.unsigned) : e < 32 ? (t = 32 - e, u(this.low << e | this.high >>> t, this.high << e | this.low >>> t, this.unsigned)) : (t = 32 - (e -= 32), u(this.high << e | this.low >>> t, this.low << e | this.high >>> t, this.unsigned));
                      }, A.rotl = A.rotateLeft, A.rotateRight = function(e) {
                          var t;
                          return n(e) && (e = e.toInt()), 0 == (e &= 63) ? this : 32 === e ? u(this.high, this.low, this.unsigned) : e < 32 ? (t = 32 - e, u(this.high << t | this.low >>> e, this.low << t | this.high >>> e, this.unsigned)) : (t = 32 - (e -= 32), u(this.low << t | this.high >>> e, this.high << t | this.low >>> e, this.unsigned));
                      }, A.rotr = A.rotateRight, A.toSigned = function() {
                          return this.unsigned ? u(this.low, this.high, !1) : this;
                      }, A.toUnsigned = function() {
                          return this.unsigned ? this : u(this.low, this.high, !0);
                      }, A.toBytes = function(e) {
                          return e ? this.toBytesLE() : this.toBytesBE();
                      }, A.toBytesLE = function() {
                          var e = this.high, t = this.low;
                          return [
                              255 & t,
                              t >>> 8 & 255,
                              t >>> 16 & 255,
                              t >>> 24,
                              255 & e,
                              e >>> 8 & 255,
                              e >>> 16 & 255,
                              e >>> 24
                          ];
                      }, A.toBytesBE = function() {
                          var e = this.high, t = this.low;
                          return [
                              e >>> 24,
                              e >>> 16 & 255,
                              e >>> 8 & 255,
                              255 & e,
                              t >>> 24,
                              t >>> 16 & 255,
                              t >>> 8 & 255,
                              255 & t
                          ];
                      }, r.fromBytes = function(e, t, n) {
                          return n ? r.fromBytesLE(e, t) : r.fromBytesBE(e, t);
                      }, r.fromBytesLE = function(e, t) {
                          return new r(e[0] | e[1] << 8 | e[2] << 16 | e[3] << 24, e[4] | e[5] << 8 | e[6] << 16 | e[7] << 24, t);
                      }, r.fromBytesBE = function(e, t) {
                          return new r(e[4] << 24 | e[5] << 16 | e[6] << 8 | e[7], e[0] << 24 | e[1] << 16 | e[2] << 8 | e[3], t);
                      };
                      var P = r;
                      return e.default = P, "default" in e ? e.default : e;
                  }({});
                  void 0 === (r = (function() {
                      return n;
                  }).apply(t, [])) || (e.exports = r);
              },
              4147: (e)=>{
                  "use strict";
                  e.exports = JSON.parse('{"name":"@xmtp/xmtp-js","version":"7.14.1","description":"XMTP client SDK for interacting with XMTP networks.","main":"dist/cjs/src/index.js","module":"dist/esm/src/index.js","umd:main":"dist/umd/index.js","browser":"dist/umd/index.js","types":"dist/types/src/index.d.ts","scripts":{"prebench":"npm run build:cjs","bench":"node dist/cjs/bench/index.js","build":"npm run build:cjs && npm run build:esm && npm run build:umd && npm run build:types","build:cjs":"node tools/cleanup cjs && tsc -p config/tsconfig.cjs.json","build:esm":"node tools/cleanup esm && tsc -p config/tsconfig.esm.json","build:umd":"node tools/cleanup umd && webpack --config config/webpack.config.js","build:types":"node tools/cleanup types && tsc -p config/tsconfig.types.json","build:docs":"rm -rf docs && mkdir -p tmp && cp README.md tmp/ && sed -i.bak \'/badge.svg/d\' tmp/README.md && typedoc --excludePrivate --readme tmp/README.md src/index.ts","clean":"node tools/cleanup && npm run clean:proto","clean:proto":"rm -rf src/proto/*.ts","package":"npm pack","prepublishOnly":"npm run build","test:setup":"./dev/up","test:teardown":"./dev/down","test":"npm run test:node","test:node":"jest --no-cache --env=\'node\' --testTimeout=30000","test:jsdom":"jest --no-cache --env=\'./jest.jsdom.env.js\' --testTimeout=30000","test:cov":"jest --coverage --no-cache --runInBand","lint":"prettier --check . && eslint .","autolint":"prettier --write . && eslint --fix .","semantic-release":"semantic-release"},"publishConfig":{"access":"public"},"files":["dist"],"keywords":["xmtp","messaging","web3","sdk","js","javascript","node","nodejs"],"author":"XMTP Labs <eng@xmtp.com>","license":"MIT","homepage":"https://github.com/xmtp/xmtp-js","repository":{"type":"git","url":"https:git@github.com:xmtp/xmtp-js.git"},"bugs":{"url":"https://github.com/xmtp/xmtp-js/issues"},"release":{"branches":["main",{"name":"beta","prerelease":true}]},"dependencies":{"@noble/secp256k1":"^1.5.2","@stardazed/streams-polyfill":"^2.4.0","@xmtp/proto":"^3.15.0","async-mutex":"^0.4.0","eccrypto":"^1.1.6","ethers":"^5.5.3","long":"^5.2.0"},"devDependencies":{"@commitlint/cli":"^16.1.0","@commitlint/config-conventional":"^16.0.0","@types/benchmark":"^2.1.2","@types/bl":"^5.0.2","@types/callback-to-async-iterator":"^1.1.4","@types/eccrypto":"^1.1.3","@types/jest":"^27.0.1","@typescript-eslint/eslint-plugin":"^5.38.0","@typescript-eslint/parser":"^5.38.0","benny":"^3.7.1","dd-trace":"^2.12.2","eslint":"^8.0.1","eslint-config-prettier":"^8.3.0","eslint-config-standard":"^17.0.0","eslint-plugin-import":"^2.26.0","eslint-plugin-jsdoc":"^37.9.1","eslint-plugin-node":"^11.1.0","eslint-plugin-prettier":"^4.0.0","eslint-plugin-promise":"^6.0.1","husky":"^7.0.4","jest":"^27.2.0","prettier":"^2.4.0","semantic-release":"^19.0.2","ts-jest":"^27.0.5","ts-loader":"^9.2.5","typedoc":"^0.22.11","typescript":"^4.4.3","webpack":"^5.52.1","webpack-cli":"^4.8.0"}}');
              }
          }, __webpack_module_cache__ = {};
          function __webpack_require__(e) {
              var t = __webpack_module_cache__[e];
              if (void 0 !== t) return t.exports;
              var r = __webpack_module_cache__[e] = {
                  id: e,
                  loaded: !1,
                  exports: {}
              };
              return __webpack_modules__[e].call(r.exports, r, r.exports, __webpack_require__), r.loaded = !0, r.exports;
          }
          __webpack_require__.amdO = {}, __webpack_require__.n = (e)=>{
              var t = e && e.__esModule ? ()=>e.default : ()=>e;
              return __webpack_require__.d(t, {
                  a: t
              }), t;
          }, __webpack_require__.d = (e, t)=>{
              for(var r in t)__webpack_require__.o(t, r) && !__webpack_require__.o(e, r) && Object.defineProperty(e, r, {
                  enumerable: !0,
                  get: t[r]
              });
          }, __webpack_require__.g = function() {
              if ("object" == typeof globalThis) return globalThis;
              try {
                  return this || new Function("return this")();
              } catch (e) {
                  if ("object" == typeof window) return window;
              }
          }(), __webpack_require__.o = (e, t)=>Object.prototype.hasOwnProperty.call(e, t), __webpack_require__.r = (e)=>{
              "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
                  value: "Module"
              }), Object.defineProperty(e, "__esModule", {
                  value: !0
              });
          }, __webpack_require__.nmd = (e)=>(e.paths = [], e.children || (e.children = []), e);
          var __webpack_exports__ = __webpack_require__(4432);
          return __webpack_exports__;
      })();
  });
  
  },{"32064c8a22df57b8":"d5jf4","af17ac17e10eb3cb":"fCgem"}],"d5jf4":[function(require,module,exports) {
  // shim for using process in browser
  var process = module.exports = {};
  // cached from whatever global is present so that test runners that stub it
  // don't break things.  But we need to wrap it in a try catch in case it is
  // wrapped in strict mode code which doesn't define any globals.  It's inside a
  // function because try/catches deoptimize in certain engines.
  var cachedSetTimeout;
  var cachedClearTimeout;
  function defaultSetTimout() {
      throw new Error("setTimeout has not been defined");
  }
  function defaultClearTimeout() {
      throw new Error("clearTimeout has not been defined");
  }
  (function() {
      try {
          if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
          else cachedSetTimeout = defaultSetTimout;
      } catch (e) {
          cachedSetTimeout = defaultSetTimout;
      }
      try {
          if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
          else cachedClearTimeout = defaultClearTimeout;
      } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
      }
  })();
  function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
      return setTimeout(fun, 0);
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
      } catch (e) {
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
          } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
          }
      }
  }
  function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
      return clearTimeout(marker);
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
      } catch (e) {
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
          } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
          }
      }
  }
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;
  function cleanUpNextTick() {
      if (!draining || !currentQueue) return;
      draining = false;
      if (currentQueue.length) queue = currentQueue.concat(queue);
      else queueIndex = -1;
      if (queue.length) drainQueue();
  }
  function drainQueue() {
      if (draining) return;
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;
      var len = queue.length;
      while(len){
          currentQueue = queue;
          queue = [];
          while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
  }
  process.nextTick = function(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) runTimeout(drainQueue);
  };
  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function() {
      this.fun.apply(null, this.array);
  };
  process.title = "browser";
  process.browser = true;
  process.env = {};
  process.argv = [];
  process.version = ""; // empty string to avoid regexp issues
  process.versions = {};
  function noop() {}
  process.on = noop;
  process.addListener = noop;
  process.once = noop;
  process.off = noop;
  process.removeListener = noop;
  process.removeAllListeners = noop;
  process.emit = noop;
  process.prependListener = noop;
  process.prependOnceListener = noop;
  process.listeners = function(name) {
      return [];
  };
  process.binding = function(name) {
      throw new Error("process.binding is not supported");
  };
  process.cwd = function() {
      return "/";
  };
  process.chdir = function(dir) {
      throw new Error("process.chdir is not supported");
  };
  process.umask = function() {
      return 0;
  };
  
  },{}],"fCgem":[function(require,module,exports) {
  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */ /* eslint-disable no-proto */ "use strict";
  var base64 = require("e0e04e79368febfc");
  var ieee754 = require("63582f99a2e3f190");
  var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
   ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
   : null;
  exports.Buffer = Buffer;
  exports.SlowBuffer = SlowBuffer;
  exports.INSPECT_MAX_BYTES = 50;
  var K_MAX_LENGTH = 0x7fffffff;
  exports.kMaxLength = K_MAX_LENGTH;
  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Print warning and recommend using `buffer` v4.x which has an Object
   *               implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * We report that the browser does not support typed arrays if the are not subclassable
   * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
   * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
   * for __proto__ and has a buggy typed array implementation.
   */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
  if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
  function typedArraySupport() {
      // Can typed array instances can be augmented?
      try {
          var arr = new Uint8Array(1);
          var proto = {
              foo: function() {
                  return 42;
              }
          };
          Object.setPrototypeOf(proto, Uint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
      } catch (e) {
          return false;
      }
  }
  Object.defineProperty(Buffer.prototype, "parent", {
      enumerable: true,
      get: function() {
          if (!Buffer.isBuffer(this)) return undefined;
          return this.buffer;
      }
  });
  Object.defineProperty(Buffer.prototype, "offset", {
      enumerable: true,
      get: function() {
          if (!Buffer.isBuffer(this)) return undefined;
          return this.byteOffset;
      }
  });
  function createBuffer(length) {
      if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
      // Return an augmented `Uint8Array` instance
      var buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer.prototype);
      return buf;
  }
  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */ function Buffer(arg, encodingOrOffset, length) {
      // Common case.
      if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
          return allocUnsafe(arg);
      }
      return from(arg, encodingOrOffset, length);
  }
  Buffer.poolSize = 8192 // not used by this implementation
  ;
  function from(value, encodingOrOffset, length) {
      if (typeof value === "string") return fromString(value, encodingOrOffset);
      if (ArrayBuffer.isView(value)) return fromArrayView(value);
      if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
      if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
      if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
      var valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
      var b = fromObject(value);
      if (b) return b;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
  }
  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/ Buffer.from = function(value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length);
  };
  // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
  // https://github.com/feross/buffer/pull/148
  Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
  Object.setPrototypeOf(Buffer, Uint8Array);
  function assertSize(size) {
      if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
      else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
  }
  function alloc(size, fill, encoding) {
      assertSize(size);
      if (size <= 0) return createBuffer(size);
      if (fill !== undefined) // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpreted as a start offset.
      return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
      return createBuffer(size);
  }
  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/ Buffer.alloc = function(size, fill, encoding) {
      return alloc(size, fill, encoding);
  };
  function allocUnsafe(size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0);
  }
  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */ Buffer.allocUnsafe = function(size) {
      return allocUnsafe(size);
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */ Buffer.allocUnsafeSlow = function(size) {
      return allocUnsafe(size);
  };
  function fromString(string, encoding) {
      if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
      if (!Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
      var length = byteLength(string, encoding) | 0;
      var buf = createBuffer(length);
      var actual = buf.write(string, encoding);
      if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      buf = buf.slice(0, actual);
      return buf;
  }
  function fromArrayLike(array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      var buf = createBuffer(length);
      for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
      return buf;
  }
  function fromArrayView(arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
          var copy = new Uint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
      }
      return fromArrayLike(arrayView);
  }
  function fromArrayBuffer(array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
      if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
      var buf;
      if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
      else if (length === undefined) buf = new Uint8Array(array, byteOffset);
      else buf = new Uint8Array(array, byteOffset, length);
      // Return an augmented `Uint8Array` instance
      Object.setPrototypeOf(buf, Buffer.prototype);
      return buf;
  }
  function fromObject(obj) {
      if (Buffer.isBuffer(obj)) {
          var len = checked(obj.length) | 0;
          var buf = createBuffer(len);
          if (buf.length === 0) return buf;
          obj.copy(buf, 0, 0, len);
          return buf;
      }
      if (obj.length !== undefined) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
          return fromArrayLike(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
  }
  function checked(length) {
      // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      return length | 0;
  }
  function SlowBuffer(length) {
      if (+length != length) length = 0;
      return Buffer.alloc(+length);
  }
  Buffer.isBuffer = function isBuffer(b) {
      return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
      ;
  };
  Buffer.compare = function compare(a, b) {
      if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
      if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
      if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
      if (a === b) return 0;
      var x = a.length;
      var y = b.length;
      for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
      }
      if (x < y) return -1;
      if (y < x) return 1;
      return 0;
  };
  Buffer.isEncoding = function isEncoding(encoding) {
      switch(String(encoding).toLowerCase()){
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
              return true;
          default:
              return false;
      }
  };
  Buffer.concat = function concat(list, length) {
      if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
      if (list.length === 0) return Buffer.alloc(0);
      var i;
      if (length === undefined) {
          length = 0;
          for(i = 0; i < list.length; ++i)length += list[i].length;
      }
      var buffer = Buffer.allocUnsafe(length);
      var pos = 0;
      for(i = 0; i < list.length; ++i){
          var buf = list[i];
          if (isInstance(buf, Uint8Array)) {
              if (pos + buf.length > buffer.length) Buffer.from(buf).copy(buffer, pos);
              else Uint8Array.prototype.set.call(buffer, buf, pos);
          } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
          else buf.copy(buffer, pos);
          pos += buf.length;
      }
      return buffer;
  };
  function byteLength(string, encoding) {
      if (Buffer.isBuffer(string)) return string.length;
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
      if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
      var len = string.length;
      var mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len === 0) return 0;
      // Use a for loop to avoid recursion
      var loweredCase = false;
      for(;;)switch(encoding){
          case "ascii":
          case "latin1":
          case "binary":
              return len;
          case "utf8":
          case "utf-8":
              return utf8ToBytes(string).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
              return len * 2;
          case "hex":
              return len >>> 1;
          case "base64":
              return base64ToBytes(string).length;
          default:
              if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
              ;
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
      }
  }
  Buffer.byteLength = byteLength;
  function slowToString(encoding, start, end) {
      var loweredCase = false;
      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.
      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) start = 0;
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) return "";
      if (end === undefined || end > this.length) end = this.length;
      if (end <= 0) return "";
      // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0;
      start >>>= 0;
      if (end <= start) return "";
      if (!encoding) encoding = "utf8";
      while(true)switch(encoding){
          case "hex":
              return hexSlice(this, start, end);
          case "utf8":
          case "utf-8":
              return utf8Slice(this, start, end);
          case "ascii":
              return asciiSlice(this, start, end);
          case "latin1":
          case "binary":
              return latin1Slice(this, start, end);
          case "base64":
              return base64Slice(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
              return utf16leSlice(this, start, end);
          default:
              if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
      }
  }
  // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
  // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
  // reliably in a browserify context because there could be multiple different
  // copies of the 'buffer' package in use. This method works even for Buffer
  // instances that were created from another copy of the `buffer` package.
  // See: https://github.com/feross/buffer/issues/154
  Buffer.prototype._isBuffer = true;
  function swap(b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
  }
  Buffer.prototype.swap16 = function swap16() {
      var len = this.length;
      if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
      for(var i = 0; i < len; i += 2)swap(this, i, i + 1);
      return this;
  };
  Buffer.prototype.swap32 = function swap32() {
      var len = this.length;
      if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
      for(var i = 0; i < len; i += 4){
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
      }
      return this;
  };
  Buffer.prototype.swap64 = function swap64() {
      var len = this.length;
      if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
      for(var i = 0; i < len; i += 8){
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
      }
      return this;
  };
  Buffer.prototype.toString = function toString() {
      var length = this.length;
      if (length === 0) return "";
      if (arguments.length === 0) return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
  };
  Buffer.prototype.toLocaleString = Buffer.prototype.toString;
  Buffer.prototype.equals = function equals(b) {
      if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
      if (this === b) return true;
      return Buffer.compare(this, b) === 0;
  };
  Buffer.prototype.inspect = function inspect() {
      var str = "";
      var max = exports.INSPECT_MAX_BYTES;
      str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max) str += " ... ";
      return "<Buffer " + str + ">";
  };
  if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
  Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
      if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
      if (start === undefined) start = 0;
      if (end === undefined) end = target ? target.length : 0;
      if (thisStart === undefined) thisStart = 0;
      if (thisEnd === undefined) thisEnd = this.length;
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
      if (thisStart >= thisEnd && start >= end) return 0;
      if (thisStart >= thisEnd) return -1;
      if (start >= end) return 1;
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target) return 0;
      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);
      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);
      for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break;
      }
      if (x < y) return -1;
      if (y < x) return 1;
      return 0;
  };
  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1;
      // Normalize byteOffset
      if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
      } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
      else if (byteOffset < -2147483648) byteOffset = -2147483648;
      byteOffset = +byteOffset // Coerce to Number.
      ;
      if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : buffer.length - 1;
      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
          if (dir) return -1;
          else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
          if (dir) byteOffset = 0;
          else return -1;
      }
      // Normalize val
      if (typeof val === "string") val = Buffer.from(val, encoding);
      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (Buffer.isBuffer(val)) {
          // Special case: looking for empty string/buffer always fails
          if (val.length === 0) return -1;
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
          val = val & 0xFF // Search for a byte value [0-255]
          ;
          if (typeof Uint8Array.prototype.indexOf === "function") {
              if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
              else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          }
          return arrayIndexOf(buffer, [
              val
          ], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
  }
  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;
      if (encoding !== undefined) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
              if (arr.length < 2 || val.length < 2) return -1;
              indexSize = 2;
              arrLength /= 2;
              valLength /= 2;
              byteOffset /= 2;
          }
      }
      function read(buf, i) {
          if (indexSize === 1) return buf[i];
          else return buf.readUInt16BE(i * indexSize);
      }
      var i;
      if (dir) {
          var foundIndex = -1;
          for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1) foundIndex = i;
              if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
          } else {
              if (foundIndex !== -1) i -= i - foundIndex;
              foundIndex = -1;
          }
      } else {
          if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
          for(i = byteOffset; i >= 0; i--){
              var found = true;
              for(var j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                  found = false;
                  break;
              }
              if (found) return i;
          }
      }
      return -1;
  }
  Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
  };
  Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
  };
  Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
  };
  function hexWrite(buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) length = remaining;
      else {
          length = Number(length);
          if (length > remaining) length = remaining;
      }
      var strLen = string.length;
      if (length > strLen / 2) length = strLen / 2;
      for(var i = 0; i < length; ++i){
          var parsed = parseInt(string.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed)) return i;
          buf[offset + i] = parsed;
      }
      return i;
  }
  function utf8Write(buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
  }
  function asciiWrite(buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length);
  }
  function base64Write(buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length);
  }
  function ucs2Write(buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
  }
  Buffer.prototype.write = function write(string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
              length = length >>> 0;
              if (encoding === undefined) encoding = "utf8";
          } else {
              encoding = length;
              length = undefined;
          }
      } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
      var remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;
      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
      if (!encoding) encoding = "utf8";
      var loweredCase = false;
      for(;;)switch(encoding){
          case "hex":
              return hexWrite(this, string, offset, length);
          case "utf8":
          case "utf-8":
              return utf8Write(this, string, offset, length);
          case "ascii":
          case "latin1":
          case "binary":
              return asciiWrite(this, string, offset, length);
          case "base64":
              // Warning: maxLength not taken into account in base64Write
              return base64Write(this, string, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
              return ucs2Write(this, string, offset, length);
          default:
              if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
      }
  };
  Buffer.prototype.toJSON = function toJSON() {
      return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
      };
  };
  function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
      else return base64.fromByteArray(buf.slice(start, end));
  }
  function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];
      var i = start;
      while(i < end){
          var firstByte = buf[i];
          var codePoint = null;
          var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
          if (i + bytesPerSequence <= end) {
              var secondByte, thirdByte, fourthByte, tempCodePoint;
              switch(bytesPerSequence){
                  case 1:
                      if (firstByte < 0x80) codePoint = firstByte;
                      break;
                  case 2:
                      secondByte = buf[i + 1];
                      if ((secondByte & 0xC0) === 0x80) {
                          tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                          if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                      }
                      break;
                  case 3:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                          tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                          if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                      }
                      break;
                  case 4:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      fourthByte = buf[i + 3];
                      if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                          tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                          if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                      }
              }
          }
          if (codePoint === null) {
              // we did not generate a valid codePoint so insert a
              // replacement char (U+FFFD) and advance only 1 byte
              codePoint = 0xFFFD;
              bytesPerSequence = 1;
          } else if (codePoint > 0xFFFF) {
              // encode to utf16 (surrogate pair dance)
              codePoint -= 0x10000;
              res.push(codePoint >>> 10 & 0x3FF | 0xD800);
              codePoint = 0xDC00 | codePoint & 0x3FF;
          }
          res.push(codePoint);
          i += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
  }
  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000;
  function decodeCodePointsArray(codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      ;
      // Decode in chunks to avoid "call stack size exceeded".
      var res = "";
      var i = 0;
      while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
      return res;
  }
  function asciiSlice(buf, start, end) {
      var ret = "";
      end = Math.min(buf.length, end);
      for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
      return ret;
  }
  function latin1Slice(buf, start, end) {
      var ret = "";
      end = Math.min(buf.length, end);
      for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
      return ret;
  }
  function hexSlice(buf, start, end) {
      var len = buf.length;
      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;
      var out = "";
      for(var i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
      return out;
  }
  function utf16leSlice(buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = "";
      // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
      for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      return res;
  }
  Buffer.prototype.slice = function slice(start, end) {
      var len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;
      if (start < 0) {
          start += len;
          if (start < 0) start = 0;
      } else if (start > len) start = len;
      if (end < 0) {
          end += len;
          if (end < 0) end = 0;
      } else if (end > len) end = len;
      if (end < start) end = start;
      var newBuf = this.subarray(start, end);
      // Return an augmented `Uint8Array` instance
      Object.setPrototypeOf(newBuf, Buffer.prototype);
      return newBuf;
  };
  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */ function checkOffset(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
      if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
  }
  Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);
      var val = this[offset];
      var mul = 1;
      var i = 0;
      while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
      return val;
  };
  Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);
      var val = this[offset + --byteLength];
      var mul = 1;
      while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
      return val;
  };
  Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset];
  };
  Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
  };
  Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
  };
  Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
  };
  Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
  };
  Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);
      var val = this[offset];
      var mul = 1;
      var i = 0;
      while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
      mul *= 0x80;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength);
      return val;
  };
  Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);
      var i = byteLength;
      var mul = 1;
      var val = this[offset + --i];
      while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
      mul *= 0x80;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength);
      return val;
  };
  Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 0x80)) return this[offset];
      return (0xff - this[offset] + 1) * -1;
  };
  Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | this[offset + 1] << 8;
      return val & 0x8000 ? val | 0xFFFF0000 : val;
  };
  Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | this[offset] << 8;
      return val & 0x8000 ? val | 0xFFFF0000 : val;
  };
  Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
  };
  Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
  };
  Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4);
  };
  Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4);
  };
  Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8);
  };
  Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8);
  };
  function checkInt(buf, value, offset, ext, max, min) {
      if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length) throw new RangeError("Index out of range");
  }
  Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1;
          checkInt(this, value, offset, byteLength, maxBytes, 0);
      }
      var mul = 1;
      var i = 0;
      this[offset] = value & 0xFF;
      while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
      return offset + byteLength;
  };
  Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1;
          checkInt(this, value, offset, byteLength, maxBytes, 0);
      }
      var i = byteLength - 1;
      var mul = 1;
      this[offset + i] = value & 0xFF;
      while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
      return offset + byteLength;
  };
  Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
      this[offset] = value & 0xff;
      return offset + 1;
  };
  Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      this[offset] = value & 0xff;
      this[offset + 1] = value >>> 8;
      return offset + 2;
  };
  Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 0xff;
      return offset + 2;
  };
  Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 0xff;
      return offset + 4;
  };
  Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 0xff;
      return offset + 4;
  };
  Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1);
          checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }
      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 0xFF;
      while(++i < byteLength && (mul *= 0x100)){
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
          this[offset + i] = (value / mul >> 0) - sub & 0xFF;
      }
      return offset + byteLength;
  };
  Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1);
          checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }
      var i = byteLength - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 0xFF;
      while(--i >= 0 && (mul *= 0x100)){
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
          this[offset + i] = (value / mul >> 0) - sub & 0xFF;
      }
      return offset + byteLength;
  };
  Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
      if (value < 0) value = 0xff + value + 1;
      this[offset] = value & 0xff;
      return offset + 1;
  };
  Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
      this[offset] = value & 0xff;
      this[offset + 1] = value >>> 8;
      return offset + 2;
  };
  Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 0xff;
      return offset + 2;
  };
  Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
      this[offset] = value & 0xff;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
      return offset + 4;
  };
  Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
      if (value < 0) value = 0xffffffff + value + 1;
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 0xff;
      return offset + 4;
  };
  function checkIEEE754(buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError("Index out of range");
      if (offset < 0) throw new RangeError("Index out of range");
  }
  function writeFloat(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
      ieee754.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
  }
  Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
  };
  Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
  };
  function writeDouble(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
      ieee754.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
  }
  Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
  };
  Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
  };
  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy(target, targetStart, start, end) {
      if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;
      // Copy 0 bytes; we're done
      if (end === start) return 0;
      if (target.length === 0 || this.length === 0) return 0;
      // Fatal error conditions
      if (targetStart < 0) throw new RangeError("targetStart out of bounds");
      if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
      if (end < 0) throw new RangeError("sourceEnd out of bounds");
      // Are we oob?
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) end = target.length - targetStart + start;
      var len = end - start;
      if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
      this.copyWithin(targetStart, start, end);
      else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
      return len;
  };
  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer.prototype.fill = function fill(val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === "string") {
          if (typeof start === "string") {
              encoding = start;
              start = 0;
              end = this.length;
          } else if (typeof end === "string") {
              encoding = end;
              end = this.length;
          }
          if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
          if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
          if (val.length === 1) {
              var code = val.charCodeAt(0);
              if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
              val = code;
          }
      } else if (typeof val === "number") val = val & 255;
      else if (typeof val === "boolean") val = Number(val);
      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
      if (end <= start) return this;
      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;
      if (!val) val = 0;
      var i;
      if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
      else {
          var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
          var len = bytes.length;
          if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
      }
      return this;
  };
  // HELPER FUNCTIONS
  // ================
  var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
  function base64clean(str) {
      // Node takes equal signs as end of the Base64 encoding
      str = str.split("=")[0];
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = str.trim().replace(INVALID_BASE64_RE, "");
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return "";
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while(str.length % 4 !== 0)str = str + "=";
      return str;
  }
  function utf8ToBytes(string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];
      for(var i = 0; i < length; ++i){
          codePoint = string.charCodeAt(i);
          // is surrogate component
          if (codePoint > 0xD7FF && codePoint < 0xE000) {
              // last char was a lead
              if (!leadSurrogate) {
                  // no lead yet
                  if (codePoint > 0xDBFF) {
                      // unexpected trail
                      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                      continue;
                  } else if (i + 1 === length) {
                      // unpaired lead
                      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                      continue;
                  }
                  // valid lead
                  leadSurrogate = codePoint;
                  continue;
              }
              // 2 leads in a row
              if (codePoint < 0xDC00) {
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                  leadSurrogate = codePoint;
                  continue;
              }
              // valid surrogate pair
              codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
          } else if (leadSurrogate) // valid bmp char, but last char was a lead
          {
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          }
          leadSurrogate = null;
          // encode utf8
          if (codePoint < 0x80) {
              if ((units -= 1) < 0) break;
              bytes.push(codePoint);
          } else if (codePoint < 0x800) {
              if ((units -= 2) < 0) break;
              bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
          } else if (codePoint < 0x10000) {
              if ((units -= 3) < 0) break;
              bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
          } else if (codePoint < 0x110000) {
              if ((units -= 4) < 0) break;
              bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
          } else throw new Error("Invalid code point");
      }
      return bytes;
  }
  function asciiToBytes(str) {
      var byteArray = [];
      for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
      return byteArray;
  }
  function utf16leToBytes(str, units) {
      var c, hi, lo;
      var byteArray = [];
      for(var i = 0; i < str.length; ++i){
          if ((units -= 2) < 0) break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
      }
      return byteArray;
  }
  function base64ToBytes(str) {
      return base64.toByteArray(base64clean(str));
  }
  function blitBuffer(src, dst, offset, length) {
      for(var i = 0; i < length; ++i){
          if (i + offset >= dst.length || i >= src.length) break;
          dst[i + offset] = src[i];
      }
      return i;
  }
  // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
  // the `instanceof` check but they should be treated as of that type.
  // See: https://github.com/feross/buffer/issues/166
  function isInstance(obj, type) {
      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
  }
  function numberIsNaN(obj) {
      // For IE11 support
      return obj !== obj // eslint-disable-line no-self-compare
      ;
  }
  // Create lookup table for `toString('hex')`
  // See: https://github.com/feross/buffer/issues/219
  var hexSliceLookupTable = function() {
      var alphabet = "0123456789abcdef";
      var table = new Array(256);
      for(var i = 0; i < 16; ++i){
          var i16 = i * 16;
          for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
      }
      return table;
  }();
  
  },{"e0e04e79368febfc":"eIiSV","63582f99a2e3f190":"cO95r"}],"eIiSV":[function(require,module,exports) {
  "use strict";
  exports.byteLength = byteLength;
  exports.toByteArray = toByteArray;
  exports.fromByteArray = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
  var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for(var i = 0, len = code.length; i < len; ++i){
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
  }
  // Support decoding URL-safe base64 strings, as Node.js does.
  // See: https://en.wikipedia.org/wiki/Base64#URL_applications
  revLookup["-".charCodeAt(0)] = 62;
  revLookup["_".charCodeAt(0)] = 63;
  function getLens(b64) {
      var len = b64.length;
      if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
      // Trim off extra bytes after placeholder bytes are found
      // See: https://github.com/beatgammit/base64-js/issues/42
      var validLen = b64.indexOf("=");
      if (validLen === -1) validLen = len;
      var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
      return [
          validLen,
          placeHoldersLen
      ];
  }
  // base64 is 4/3 + up to two characters of the original data
  function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      // if there are placeholders, only get up to the last complete 4 chars
      var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i;
      for(i = 0; i < len; i += 4){
          tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
          arr[curByte++] = tmp >> 16 & 0xFF;
          arr[curByte++] = tmp >> 8 & 0xFF;
          arr[curByte++] = tmp & 0xFF;
      }
      if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
          arr[curByte++] = tmp & 0xFF;
      }
      if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 0xFF;
          arr[curByte++] = tmp & 0xFF;
      }
      return arr;
  }
  function tripletToBase64(num) {
      return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
  }
  function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for(var i = start; i < end; i += 3){
          tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
          output.push(tripletToBase64(tmp));
      }
      return output.join("");
  }
  function fromByteArray(uint8) {
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
      ;
      var parts = [];
      var maxChunkLength = 16383 // must be multiple of 3
      ;
      // go through the array every three bytes, we'll deal with trailing stuff later
      for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
          tmp = uint8[len - 1];
          parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
      } else if (extraBytes === 2) {
          tmp = (uint8[len - 2] << 8) + uint8[len - 1];
          parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
      }
      return parts.join("");
  }
  
  },{}],"cO95r":[function(require,module,exports) {
  /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
      if (e === 0) e = 1 - eBias;
      else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
      else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
  };
  exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
      } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
              e--;
              c *= 2;
          }
          if (e + eBias >= 1) value += rt / c;
          else value += rt * Math.pow(2, 1 - eBias);
          if (value * c >= 2) {
              e++;
              c /= 2;
          }
          if (e + eBias >= eMax) {
              m = 0;
              e = eMax;
          } else if (e + eBias >= 1) {
              m = (value * c - 1) * Math.pow(2, mLen);
              e = e + eBias;
          } else {
              m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
              e = 0;
          }
      }
      for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
      e = e << mLen | m;
      eLen += mLen;
      for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
      buffer[offset + i - d] |= s * 128;
  };
  
  },{}],"jZ5V0":[function(require,module,exports) {
  (function() {
      var crypt = require("dd4336a096dc5023"), utf8 = require("c150593127019d24").utf8, isBuffer = require("7545b36c66458380"), bin = require("c150593127019d24").bin, // The core
      md5 = function(message, options) {
          // Convert to byte array
          if (message.constructor == String) {
              if (options && options.encoding === "binary") message = bin.stringToBytes(message);
              else message = utf8.stringToBytes(message);
          } else if (isBuffer(message)) message = Array.prototype.slice.call(message, 0);
          else if (!Array.isArray(message) && message.constructor !== Uint8Array) message = message.toString();
          // else, assume byte array already
          var m = crypt.bytesToWords(message), l = message.length * 8, a = 1732584193, b = -271733879, c = -1732584194, d = 271733878;
          // Swap endian
          for(var i = 0; i < m.length; i++)m[i] = (m[i] << 8 | m[i] >>> 24) & 0x00FF00FF | (m[i] << 24 | m[i] >>> 8) & 0xFF00FF00;
          // Padding
          m[l >>> 5] |= 0x80 << l % 32;
          m[(l + 64 >>> 9 << 4) + 14] = l;
          // Method shortcuts
          var FF = md5._ff, GG = md5._gg, HH = md5._hh, II = md5._ii;
          for(var i = 0; i < m.length; i += 16){
              var aa = a, bb = b, cc = c, dd = d;
              a = FF(a, b, c, d, m[i + 0], 7, -680876936);
              d = FF(d, a, b, c, m[i + 1], 12, -389564586);
              c = FF(c, d, a, b, m[i + 2], 17, 606105819);
              b = FF(b, c, d, a, m[i + 3], 22, -1044525330);
              a = FF(a, b, c, d, m[i + 4], 7, -176418897);
              d = FF(d, a, b, c, m[i + 5], 12, 1200080426);
              c = FF(c, d, a, b, m[i + 6], 17, -1473231341);
              b = FF(b, c, d, a, m[i + 7], 22, -45705983);
              a = FF(a, b, c, d, m[i + 8], 7, 1770035416);
              d = FF(d, a, b, c, m[i + 9], 12, -1958414417);
              c = FF(c, d, a, b, m[i + 10], 17, -42063);
              b = FF(b, c, d, a, m[i + 11], 22, -1990404162);
              a = FF(a, b, c, d, m[i + 12], 7, 1804603682);
              d = FF(d, a, b, c, m[i + 13], 12, -40341101);
              c = FF(c, d, a, b, m[i + 14], 17, -1502002290);
              b = FF(b, c, d, a, m[i + 15], 22, 1236535329);
              a = GG(a, b, c, d, m[i + 1], 5, -165796510);
              d = GG(d, a, b, c, m[i + 6], 9, -1069501632);
              c = GG(c, d, a, b, m[i + 11], 14, 643717713);
              b = GG(b, c, d, a, m[i + 0], 20, -373897302);
              a = GG(a, b, c, d, m[i + 5], 5, -701558691);
              d = GG(d, a, b, c, m[i + 10], 9, 38016083);
              c = GG(c, d, a, b, m[i + 15], 14, -660478335);
              b = GG(b, c, d, a, m[i + 4], 20, -405537848);
              a = GG(a, b, c, d, m[i + 9], 5, 568446438);
              d = GG(d, a, b, c, m[i + 14], 9, -1019803690);
              c = GG(c, d, a, b, m[i + 3], 14, -187363961);
              b = GG(b, c, d, a, m[i + 8], 20, 1163531501);
              a = GG(a, b, c, d, m[i + 13], 5, -1444681467);
              d = GG(d, a, b, c, m[i + 2], 9, -51403784);
              c = GG(c, d, a, b, m[i + 7], 14, 1735328473);
              b = GG(b, c, d, a, m[i + 12], 20, -1926607734);
              a = HH(a, b, c, d, m[i + 5], 4, -378558);
              d = HH(d, a, b, c, m[i + 8], 11, -2022574463);
              c = HH(c, d, a, b, m[i + 11], 16, 1839030562);
              b = HH(b, c, d, a, m[i + 14], 23, -35309556);
              a = HH(a, b, c, d, m[i + 1], 4, -1530992060);
              d = HH(d, a, b, c, m[i + 4], 11, 1272893353);
              c = HH(c, d, a, b, m[i + 7], 16, -155497632);
              b = HH(b, c, d, a, m[i + 10], 23, -1094730640);
              a = HH(a, b, c, d, m[i + 13], 4, 681279174);
              d = HH(d, a, b, c, m[i + 0], 11, -358537222);
              c = HH(c, d, a, b, m[i + 3], 16, -722521979);
              b = HH(b, c, d, a, m[i + 6], 23, 76029189);
              a = HH(a, b, c, d, m[i + 9], 4, -640364487);
              d = HH(d, a, b, c, m[i + 12], 11, -421815835);
              c = HH(c, d, a, b, m[i + 15], 16, 530742520);
              b = HH(b, c, d, a, m[i + 2], 23, -995338651);
              a = II(a, b, c, d, m[i + 0], 6, -198630844);
              d = II(d, a, b, c, m[i + 7], 10, 1126891415);
              c = II(c, d, a, b, m[i + 14], 15, -1416354905);
              b = II(b, c, d, a, m[i + 5], 21, -57434055);
              a = II(a, b, c, d, m[i + 12], 6, 1700485571);
              d = II(d, a, b, c, m[i + 3], 10, -1894986606);
              c = II(c, d, a, b, m[i + 10], 15, -1051523);
              b = II(b, c, d, a, m[i + 1], 21, -2054922799);
              a = II(a, b, c, d, m[i + 8], 6, 1873313359);
              d = II(d, a, b, c, m[i + 15], 10, -30611744);
              c = II(c, d, a, b, m[i + 6], 15, -1560198380);
              b = II(b, c, d, a, m[i + 13], 21, 1309151649);
              a = II(a, b, c, d, m[i + 4], 6, -145523070);
              d = II(d, a, b, c, m[i + 11], 10, -1120210379);
              c = II(c, d, a, b, m[i + 2], 15, 718787259);
              b = II(b, c, d, a, m[i + 9], 21, -343485551);
              a = a + aa >>> 0;
              b = b + bb >>> 0;
              c = c + cc >>> 0;
              d = d + dd >>> 0;
          }
          return crypt.endian([
              a,
              b,
              c,
              d
          ]);
      };
      // Auxiliary functions
      md5._ff = function(a, b, c, d, x, s, t) {
          var n = a + (b & c | ~b & d) + (x >>> 0) + t;
          return (n << s | n >>> 32 - s) + b;
      };
      md5._gg = function(a, b, c, d, x, s, t) {
          var n = a + (b & d | c & ~d) + (x >>> 0) + t;
          return (n << s | n >>> 32 - s) + b;
      };
      md5._hh = function(a, b, c, d, x, s, t) {
          var n = a + (b ^ c ^ d) + (x >>> 0) + t;
          return (n << s | n >>> 32 - s) + b;
      };
      md5._ii = function(a, b, c, d, x, s, t) {
          var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
          return (n << s | n >>> 32 - s) + b;
      };
      // Package private blocksize
      md5._blocksize = 16;
      md5._digestsize = 16;
      module.exports = function(message, options) {
          if (message === undefined || message === null) throw new Error("Illegal argument " + message);
          var digestbytes = crypt.wordsToBytes(md5(message, options));
          return options && options.asBytes ? digestbytes : options && options.asString ? bin.bytesToString(digestbytes) : crypt.bytesToHex(digestbytes);
      };
  })();
  
  },{"dd4336a096dc5023":"fdR42","c150593127019d24":"bvGEx","7545b36c66458380":"9JmUB"}],"fdR42":[function(require,module,exports) {
  (function() {
      var base64map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", crypt = {
          // Bit-wise rotation left
          rotl: function(n, b) {
              return n << b | n >>> 32 - b;
          },
          // Bit-wise rotation right
          rotr: function(n, b) {
              return n << 32 - b | n >>> b;
          },
          // Swap big-endian to little-endian and vice versa
          endian: function(n) {
              // If number given, swap endian
              if (n.constructor == Number) return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;
              // Else, assume array and swap all items
              for(var i = 0; i < n.length; i++)n[i] = crypt.endian(n[i]);
              return n;
          },
          // Generate an array of any length of random bytes
          randomBytes: function(n) {
              for(var bytes = []; n > 0; n--)bytes.push(Math.floor(Math.random() * 256));
              return bytes;
          },
          // Convert a byte array to big-endian 32-bit words
          bytesToWords: function(bytes) {
              for(var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)words[b >>> 5] |= bytes[i] << 24 - b % 32;
              return words;
          },
          // Convert big-endian 32-bit words to a byte array
          wordsToBytes: function(words) {
              for(var bytes = [], b = 0; b < words.length * 32; b += 8)bytes.push(words[b >>> 5] >>> 24 - b % 32 & 0xFF);
              return bytes;
          },
          // Convert a byte array to a hex string
          bytesToHex: function(bytes) {
              for(var hex = [], i = 0; i < bytes.length; i++){
                  hex.push((bytes[i] >>> 4).toString(16));
                  hex.push((bytes[i] & 0xF).toString(16));
              }
              return hex.join("");
          },
          // Convert a hex string to a byte array
          hexToBytes: function(hex) {
              for(var bytes = [], c = 0; c < hex.length; c += 2)bytes.push(parseInt(hex.substr(c, 2), 16));
              return bytes;
          },
          // Convert a byte array to a base-64 string
          bytesToBase64: function(bytes) {
              for(var base64 = [], i = 0; i < bytes.length; i += 3){
                  var triplet = bytes[i] << 16 | bytes[i + 1] << 8 | bytes[i + 2];
                  for(var j = 0; j < 4; j++)if (i * 8 + j * 6 <= bytes.length * 8) base64.push(base64map.charAt(triplet >>> 6 * (3 - j) & 0x3F));
                  else base64.push("=");
              }
              return base64.join("");
          },
          // Convert a base-64 string to a byte array
          base64ToBytes: function(base64) {
              // Remove non-base-64 characters
              base64 = base64.replace(/[^A-Z0-9+\/]/ig, "");
              for(var bytes = [], i = 0, imod4 = 0; i < base64.length; imod4 = ++i % 4){
                  if (imod4 == 0) continue;
                  bytes.push((base64map.indexOf(base64.charAt(i - 1)) & Math.pow(2, -2 * imod4 + 8) - 1) << imod4 * 2 | base64map.indexOf(base64.charAt(i)) >>> 6 - imod4 * 2);
              }
              return bytes;
          }
      };
      module.exports = crypt;
  })();
  
  },{}],"bvGEx":[function(require,module,exports) {
  var charenc = {
      // UTF-8 encoding
      utf8: {
          // Convert a string to a byte array
          stringToBytes: function(str) {
              return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
          },
          // Convert a byte array to a string
          bytesToString: function(bytes) {
              return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
          }
      },
      // Binary encoding
      bin: {
          // Convert a string to a byte array
          stringToBytes: function(str) {
              for(var bytes = [], i = 0; i < str.length; i++)bytes.push(str.charCodeAt(i) & 0xFF);
              return bytes;
          },
          // Convert a byte array to a string
          bytesToString: function(bytes) {
              for(var str = [], i = 0; i < bytes.length; i++)str.push(String.fromCharCode(bytes[i]));
              return str.join("");
          }
      }
  };
  module.exports = charenc;
  
  },{}],"9JmUB":[function(require,module,exports) {
  /*!
   * Determine if an object is a Buffer
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */ // The _isBuffer check is for Safari 5-7 support, because it's missing
  // Object.prototype.constructor. Remove this eventually
  module.exports = function(obj) {
      return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
  };
  function isBuffer(obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
  }
  // For Node v0.10 support. Remove this eventually.
  function isSlowBuffer(obj) {
      return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isBuffer(obj.slice(0, 0));
  }
  
  },{}],"bErvj":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  ////////////////////////
  // Exports
  parcelHelpers.export(exports, "Provider", ()=>// Abstract Providers (or Abstract-ish)
      (0, _abstractProvider.Provider));
  parcelHelpers.export(exports, "BaseProvider", ()=>(0, _baseProvider.BaseProvider));
  parcelHelpers.export(exports, "Resolver", ()=>(0, _baseProvider.Resolver));
  parcelHelpers.export(exports, "UrlJsonRpcProvider", ()=>(0, _urlJsonRpcProvider.UrlJsonRpcProvider));
  parcelHelpers.export(exports, "FallbackProvider", ()=>///////////////////////
      // Concrete Providers
      (0, _fallbackProvider.FallbackProvider));
  parcelHelpers.export(exports, "AlchemyProvider", ()=>(0, _alchemyProvider.AlchemyProvider));
  parcelHelpers.export(exports, "AlchemyWebSocketProvider", ()=>(0, _alchemyProvider.AlchemyWebSocketProvider));
  parcelHelpers.export(exports, "AnkrProvider", ()=>(0, _ankrProvider.AnkrProvider));
  parcelHelpers.export(exports, "CloudflareProvider", ()=>(0, _cloudflareProvider.CloudflareProvider));
  parcelHelpers.export(exports, "EtherscanProvider", ()=>(0, _etherscanProvider.EtherscanProvider));
  parcelHelpers.export(exports, "InfuraProvider", ()=>(0, _infuraProvider.InfuraProvider));
  parcelHelpers.export(exports, "InfuraWebSocketProvider", ()=>(0, _infuraProvider.InfuraWebSocketProvider));
  parcelHelpers.export(exports, "JsonRpcProvider", ()=>(0, _jsonRpcProvider.JsonRpcProvider));
  parcelHelpers.export(exports, "JsonRpcBatchProvider", ()=>(0, _jsonRpcBatchProvider.JsonRpcBatchProvider));
  parcelHelpers.export(exports, "NodesmithProvider", ()=>(0, _nodesmithProvider.NodesmithProvider));
  parcelHelpers.export(exports, "PocketProvider", ()=>(0, _pocketProvider.PocketProvider));
  parcelHelpers.export(exports, "StaticJsonRpcProvider", ()=>(0, _urlJsonRpcProvider.StaticJsonRpcProvider));
  parcelHelpers.export(exports, "Web3Provider", ()=>(0, _web3Provider.Web3Provider));
  parcelHelpers.export(exports, "WebSocketProvider", ()=>(0, _websocketProvider.WebSocketProvider));
  parcelHelpers.export(exports, "IpcProvider", ()=>(0, _ipcProvider.IpcProvider));
  parcelHelpers.export(exports, "JsonRpcSigner", ()=>///////////////////////
      // Signer
      (0, _jsonRpcProvider.JsonRpcSigner));
  parcelHelpers.export(exports, "getDefaultProvider", ()=>///////////////////////
      // Functions
      getDefaultProvider);
  parcelHelpers.export(exports, "getNetwork", ()=>(0, _networks.getNetwork));
  parcelHelpers.export(exports, "isCommunityResource", ()=>(0, _formatter.isCommunityResource));
  parcelHelpers.export(exports, "isCommunityResourcable", ()=>(0, _formatter.isCommunityResourcable));
  parcelHelpers.export(exports, "showThrottleMessage", ()=>(0, _formatter.showThrottleMessage));
  parcelHelpers.export(exports, "Formatter", ()=>///////////////////////
      // Objects
      (0, _formatter.Formatter));
  var _abstractProvider = require("@ethersproject/abstract-provider");
  var _networks = require("@ethersproject/networks");
  var _baseProvider = require("./base-provider");
  var _alchemyProvider = require("./alchemy-provider");
  var _ankrProvider = require("./ankr-provider");
  var _cloudflareProvider = require("./cloudflare-provider");
  var _etherscanProvider = require("./etherscan-provider");
  var _fallbackProvider = require("./fallback-provider");
  var _ipcProvider = require("./ipc-provider");
  var _infuraProvider = require("./infura-provider");
  var _jsonRpcProvider = require("./json-rpc-provider");
  var _jsonRpcBatchProvider = require("./json-rpc-batch-provider");
  var _nodesmithProvider = require("./nodesmith-provider");
  var _pocketProvider = require("./pocket-provider");
  var _urlJsonRpcProvider = require("./url-json-rpc-provider");
  var _web3Provider = require("./web3-provider");
  var _websocketProvider = require("./websocket-provider");
  var _formatter = require("./formatter");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  "use strict";
  const logger = new (0, _logger.Logger)((0, _version.version));
  ////////////////////////
  // Helper Functions
  function getDefaultProvider(network, options) {
      if (network == null) network = "homestead";
      // If passed a URL, figure out the right type of provider based on the scheme
      if (typeof network === "string") {
          // @TODO: Add support for IpcProvider; maybe if it ends in ".ipc"?
          // Handle http and ws (and their secure variants)
          const match = network.match(/^(ws|http)s?:/i);
          if (match) switch(match[1].toLowerCase()){
              case "http":
              case "https":
                  return new (0, _jsonRpcProvider.JsonRpcProvider)(network);
              case "ws":
              case "wss":
                  return new (0, _websocketProvider.WebSocketProvider)(network);
              default:
                  logger.throwArgumentError("unsupported URL scheme", "network", network);
          }
      }
      const n = (0, _networks.getNetwork)(network);
      if (!n || !n._defaultProvider) logger.throwError("unsupported getDefaultProvider network", (0, _logger.Logger).errors.NETWORK_ERROR, {
          operation: "getDefaultProvider",
          network: network
      });
      return n._defaultProvider({
          FallbackProvider: (0, _fallbackProvider.FallbackProvider),
          AlchemyProvider: (0, _alchemyProvider.AlchemyProvider),
          AnkrProvider: (0, _ankrProvider.AnkrProvider),
          CloudflareProvider: (0, _cloudflareProvider.CloudflareProvider),
          EtherscanProvider: (0, _etherscanProvider.EtherscanProvider),
          InfuraProvider: (0, _infuraProvider.InfuraProvider),
          JsonRpcProvider: (0, _jsonRpcProvider.JsonRpcProvider),
          NodesmithProvider: (0, _nodesmithProvider.NodesmithProvider),
          PocketProvider: (0, _pocketProvider.PocketProvider),
          Web3Provider: (0, _web3Provider.Web3Provider),
          IpcProvider: (0, _ipcProvider.IpcProvider)
      }, options);
  }
  
  },{"@ethersproject/abstract-provider":"g1jr1","@ethersproject/networks":"6JNhW","./base-provider":"7OFAa","./alchemy-provider":"jD4Nf","./ankr-provider":"cKap1","./cloudflare-provider":"9VKg2","./etherscan-provider":"arYKc","./fallback-provider":"2wNFK","./ipc-provider":"6WQjk","./infura-provider":"iqlOM","./json-rpc-provider":"1sWtk","./json-rpc-batch-provider":"hGNo4","./nodesmith-provider":"8l5lW","./pocket-provider":"3a8Ys","./url-json-rpc-provider":"9CTqA","./web3-provider":"cIjQb","./websocket-provider":"9KF9f","./formatter":"ZfOHh","@ethersproject/logger":"hLvB2","./_version":"6PYAk","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"g1jr1":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  //export type CallTransactionable = {
  //    call(transaction: TransactionRequest): Promise<TransactionResponse>;
  //};
  parcelHelpers.export(exports, "ForkEvent", ()=>ForkEvent);
  parcelHelpers.export(exports, "BlockForkEvent", ()=>BlockForkEvent);
  parcelHelpers.export(exports, "TransactionForkEvent", ()=>TransactionForkEvent);
  parcelHelpers.export(exports, "TransactionOrderForkEvent", ()=>TransactionOrderForkEvent);
  ///////////////////////////////
  // Exported Abstracts
  parcelHelpers.export(exports, "Provider", ()=>Provider);
  var _bignumber = require("@ethersproject/bignumber");
  var _bytes = require("@ethersproject/bytes");
  var _properties = require("@ethersproject/properties");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  "use strict";
  var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
          });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
              try {
                  step(generator.next(value));
              } catch (e) {
                  reject(e);
              }
          }
          function rejected(value) {
              try {
                  step(generator["throw"](value));
              } catch (e) {
                  reject(e);
              }
          }
          function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const logger = new (0, _logger.Logger)((0, _version.version));
  class ForkEvent extends (0, _properties.Description) {
      static isForkEvent(value) {
          return !!(value && value._isForkEvent);
      }
  }
  class BlockForkEvent extends ForkEvent {
      constructor(blockHash, expiry){
          if (!(0, _bytes.isHexString)(blockHash, 32)) logger.throwArgumentError("invalid blockHash", "blockHash", blockHash);
          super({
              _isForkEvent: true,
              _isBlockForkEvent: true,
              expiry: expiry || 0,
              blockHash: blockHash
          });
      }
  }
  class TransactionForkEvent extends ForkEvent {
      constructor(hash, expiry){
          if (!(0, _bytes.isHexString)(hash, 32)) logger.throwArgumentError("invalid transaction hash", "hash", hash);
          super({
              _isForkEvent: true,
              _isTransactionForkEvent: true,
              expiry: expiry || 0,
              hash: hash
          });
      }
  }
  class TransactionOrderForkEvent extends ForkEvent {
      constructor(beforeHash, afterHash, expiry){
          if (!(0, _bytes.isHexString)(beforeHash, 32)) logger.throwArgumentError("invalid transaction hash", "beforeHash", beforeHash);
          if (!(0, _bytes.isHexString)(afterHash, 32)) logger.throwArgumentError("invalid transaction hash", "afterHash", afterHash);
          super({
              _isForkEvent: true,
              _isTransactionOrderForkEvent: true,
              expiry: expiry || 0,
              beforeHash: beforeHash,
              afterHash: afterHash
          });
      }
  }
  class Provider {
      constructor(){
          logger.checkAbstract(new.target, Provider);
          (0, _properties.defineReadOnly)(this, "_isProvider", true);
      }
      getFeeData() {
          return __awaiter(this, void 0, void 0, function*() {
              const { block , gasPrice  } = yield (0, _properties.resolveProperties)({
                  block: this.getBlock("latest"),
                  gasPrice: this.getGasPrice().catch((error)=>{
                      // @TODO: Why is this now failing on Calaveras?
                      //console.log(error);
                      return null;
                  })
              });
              let lastBaseFeePerGas = null, maxFeePerGas = null, maxPriorityFeePerGas = null;
              if (block && block.baseFeePerGas) {
                  // We may want to compute this more accurately in the future,
                  // using the formula "check if the base fee is correct".
                  // See: https://eips.ethereum.org/EIPS/eip-1559
                  lastBaseFeePerGas = block.baseFeePerGas;
                  maxPriorityFeePerGas = (0, _bignumber.BigNumber).from("1500000000");
                  maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
              }
              return {
                  lastBaseFeePerGas,
                  maxFeePerGas,
                  maxPriorityFeePerGas,
                  gasPrice
              };
          });
      }
      // Alias for "on"
      addListener(eventName, listener) {
          return this.on(eventName, listener);
      }
      // Alias for "off"
      removeListener(eventName, listener) {
          return this.off(eventName, listener);
      }
      static isProvider(value) {
          return !!(value && value._isProvider);
      }
  }
  
  },{"@ethersproject/bignumber":"ckYYW","@ethersproject/bytes":"htrqZ","@ethersproject/properties":"h3GJb","@ethersproject/logger":"hLvB2","./_version":"7ahSC","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"ckYYW":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "BigNumber", ()=>(0, _bignumber.BigNumber));
  parcelHelpers.export(exports, "formatFixed", ()=>(0, _fixednumber.formatFixed));
  parcelHelpers.export(exports, "FixedFormat", ()=>(0, _fixednumber.FixedFormat));
  parcelHelpers.export(exports, "FixedNumber", ()=>(0, _fixednumber.FixedNumber));
  parcelHelpers.export(exports, "parseFixed", ()=>(0, _fixednumber.parseFixed));
  // Internal methods used by address
  parcelHelpers.export(exports, "_base16To36", ()=>(0, _bignumber._base16To36));
  parcelHelpers.export(exports, "_base36To16", ()=>(0, _bignumber._base36To16));
  var _bignumber = require("./bignumber");
  var _fixednumber = require("./fixednumber");
  
  },{"./bignumber":"eCYd8","./fixednumber":"4kqiW","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"eCYd8":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "isBigNumberish", ()=>isBigNumberish);
  parcelHelpers.export(exports, "BigNumber", ()=>BigNumber);
  // value should have no prefix
  parcelHelpers.export(exports, "_base36To16", ()=>_base36To16);
  // value should have no prefix
  parcelHelpers.export(exports, "_base16To36", ()=>_base16To36);
  /**
   *  BigNumber
   *
   *  A wrapper around the BN.js object. We use the BN.js library
   *  because it is used by elliptic, so it is required regardless.
   *
   */ var _bnJs = require("bn.js");
  var _bnJsDefault = parcelHelpers.interopDefault(_bnJs);
  var _bytes = require("@ethersproject/bytes");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  "use strict";
  var BN = (0, _bnJsDefault.default).BN;
  const logger = new (0, _logger.Logger)((0, _version.version));
  const _constructorGuard = {};
  const MAX_SAFE = 0x1fffffffffffff;
  function isBigNumberish(value) {
      return value != null && (BigNumber.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || (0, _bytes.isHexString)(value) || typeof value === "bigint" || (0, _bytes.isBytes)(value));
  }
  // Only warn about passing 10 into radix once
  let _warnedToStringRadix = false;
  class BigNumber {
      constructor(constructorGuard, hex){
          if (constructorGuard !== _constructorGuard) logger.throwError("cannot call constructor directly; use BigNumber.from", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
              operation: "new (BigNumber)"
          });
          this._hex = hex;
          this._isBigNumber = true;
          Object.freeze(this);
      }
      fromTwos(value) {
          return toBigNumber(toBN(this).fromTwos(value));
      }
      toTwos(value) {
          return toBigNumber(toBN(this).toTwos(value));
      }
      abs() {
          if (this._hex[0] === "-") return BigNumber.from(this._hex.substring(1));
          return this;
      }
      add(other) {
          return toBigNumber(toBN(this).add(toBN(other)));
      }
      sub(other) {
          return toBigNumber(toBN(this).sub(toBN(other)));
      }
      div(other) {
          const o = BigNumber.from(other);
          if (o.isZero()) throwFault("division-by-zero", "div");
          return toBigNumber(toBN(this).div(toBN(other)));
      }
      mul(other) {
          return toBigNumber(toBN(this).mul(toBN(other)));
      }
      mod(other) {
          const value = toBN(other);
          if (value.isNeg()) throwFault("division-by-zero", "mod");
          return toBigNumber(toBN(this).umod(value));
      }
      pow(other) {
          const value = toBN(other);
          if (value.isNeg()) throwFault("negative-power", "pow");
          return toBigNumber(toBN(this).pow(value));
      }
      and(other) {
          const value = toBN(other);
          if (this.isNegative() || value.isNeg()) throwFault("unbound-bitwise-result", "and");
          return toBigNumber(toBN(this).and(value));
      }
      or(other) {
          const value = toBN(other);
          if (this.isNegative() || value.isNeg()) throwFault("unbound-bitwise-result", "or");
          return toBigNumber(toBN(this).or(value));
      }
      xor(other) {
          const value = toBN(other);
          if (this.isNegative() || value.isNeg()) throwFault("unbound-bitwise-result", "xor");
          return toBigNumber(toBN(this).xor(value));
      }
      mask(value) {
          if (this.isNegative() || value < 0) throwFault("negative-width", "mask");
          return toBigNumber(toBN(this).maskn(value));
      }
      shl(value) {
          if (this.isNegative() || value < 0) throwFault("negative-width", "shl");
          return toBigNumber(toBN(this).shln(value));
      }
      shr(value) {
          if (this.isNegative() || value < 0) throwFault("negative-width", "shr");
          return toBigNumber(toBN(this).shrn(value));
      }
      eq(other) {
          return toBN(this).eq(toBN(other));
      }
      lt(other) {
          return toBN(this).lt(toBN(other));
      }
      lte(other) {
          return toBN(this).lte(toBN(other));
      }
      gt(other) {
          return toBN(this).gt(toBN(other));
      }
      gte(other) {
          return toBN(this).gte(toBN(other));
      }
      isNegative() {
          return this._hex[0] === "-";
      }
      isZero() {
          return toBN(this).isZero();
      }
      toNumber() {
          try {
              return toBN(this).toNumber();
          } catch (error) {
              throwFault("overflow", "toNumber", this.toString());
          }
          return null;
      }
      toBigInt() {
          try {
              return BigInt(this.toString());
          } catch (e) {}
          return logger.throwError("this platform does not support BigInt", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
              value: this.toString()
          });
      }
      toString() {
          // Lots of people expect this, which we do not support, so check (See: #889)
          if (arguments.length > 0) {
              if (arguments[0] === 10) {
                  if (!_warnedToStringRadix) {
                      _warnedToStringRadix = true;
                      logger.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
                  }
              } else if (arguments[0] === 16) logger.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", (0, _logger.Logger).errors.UNEXPECTED_ARGUMENT, {});
              else logger.throwError("BigNumber.toString does not accept parameters", (0, _logger.Logger).errors.UNEXPECTED_ARGUMENT, {});
          }
          return toBN(this).toString(10);
      }
      toHexString() {
          return this._hex;
      }
      toJSON(key) {
          return {
              type: "BigNumber",
              hex: this.toHexString()
          };
      }
      static from(value) {
          if (value instanceof BigNumber) return value;
          if (typeof value === "string") {
              if (value.match(/^-?0x[0-9a-f]+$/i)) return new BigNumber(_constructorGuard, toHex(value));
              if (value.match(/^-?[0-9]+$/)) return new BigNumber(_constructorGuard, toHex(new BN(value)));
              return logger.throwArgumentError("invalid BigNumber string", "value", value);
          }
          if (typeof value === "number") {
              if (value % 1) throwFault("underflow", "BigNumber.from", value);
              if (value >= MAX_SAFE || value <= -MAX_SAFE) throwFault("overflow", "BigNumber.from", value);
              return BigNumber.from(String(value));
          }
          const anyValue = value;
          if (typeof anyValue === "bigint") return BigNumber.from(anyValue.toString());
          if ((0, _bytes.isBytes)(anyValue)) return BigNumber.from((0, _bytes.hexlify)(anyValue));
          if (anyValue) {
              // Hexable interface (takes priority)
              if (anyValue.toHexString) {
                  const hex = anyValue.toHexString();
                  if (typeof hex === "string") return BigNumber.from(hex);
              } else {
                  // For now, handle legacy JSON-ified values (goes away in v6)
                  let hex = anyValue._hex;
                  // New-form JSON
                  if (hex == null && anyValue.type === "BigNumber") hex = anyValue.hex;
                  if (typeof hex === "string") {
                      if ((0, _bytes.isHexString)(hex) || hex[0] === "-" && (0, _bytes.isHexString)(hex.substring(1))) return BigNumber.from(hex);
                  }
              }
          }
          return logger.throwArgumentError("invalid BigNumber value", "value", value);
      }
      static isBigNumber(value) {
          return !!(value && value._isBigNumber);
      }
  }
  // Normalize the hex string
  function toHex(value) {
      // For BN, call on the hex string
      if (typeof value !== "string") return toHex(value.toString(16));
      // If negative, prepend the negative sign to the normalized positive value
      if (value[0] === "-") {
          // Strip off the negative sign
          value = value.substring(1);
          // Cannot have multiple negative signs (e.g. "--0x04")
          if (value[0] === "-") logger.throwArgumentError("invalid hex", "value", value);
          // Call toHex on the positive component
          value = toHex(value);
          // Do not allow "-0x00"
          if (value === "0x00") return value;
          // Negate the value
          return "-" + value;
      }
      // Add a "0x" prefix if missing
      if (value.substring(0, 2) !== "0x") value = "0x" + value;
      // Normalize zero
      if (value === "0x") return "0x00";
      // Make the string even length
      if (value.length % 2) value = "0x0" + value.substring(2);
      // Trim to smallest even-length string
      while(value.length > 4 && value.substring(0, 4) === "0x00")value = "0x" + value.substring(4);
      return value;
  }
  function toBigNumber(value) {
      return BigNumber.from(toHex(value));
  }
  function toBN(value) {
      const hex = BigNumber.from(value).toHexString();
      if (hex[0] === "-") return new BN("-" + hex.substring(3), 16);
      return new BN(hex.substring(2), 16);
  }
  function throwFault(fault, operation, value) {
      const params = {
          fault: fault,
          operation: operation
      };
      if (value != null) params.value = value;
      return logger.throwError(fault, (0, _logger.Logger).errors.NUMERIC_FAULT, params);
  }
  function _base36To16(value) {
      return new BN(value, 36).toString(16);
  }
  function _base16To36(value) {
      return new BN(value, 16).toString(36);
  }
  
  },{"bn.js":"MwVs0","@ethersproject/bytes":"htrqZ","@ethersproject/logger":"hLvB2","./_version":"gN5k0","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"MwVs0":[function(require,module,exports) {
  (function(module1, exports) {
      "use strict";
      // Utils
      function assert(val, msg) {
          if (!val) throw new Error(msg || "Assertion failed");
      }
      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
      }
      // BN
      function BN(number, base, endian) {
          if (BN.isBN(number)) return number;
          this.negative = 0;
          this.words = null;
          this.length = 0;
          // Reduction context
          this.red = null;
          if (number !== null) {
              if (base === "le" || base === "be") {
                  endian = base;
                  base = 10;
              }
              this._init(number || 0, base || 10, endian || "be");
          }
      }
      if (typeof module1 === "object") module1.exports = BN;
      else exports.BN = BN;
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer;
      try {
          if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
          else Buffer = require("8c023fe531a44dfc").Buffer;
      } catch (e) {}
      BN.isBN = function isBN(num) {
          if (num instanceof BN) return true;
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max(left, right) {
          if (left.cmp(right) > 0) return left;
          return right;
      };
      BN.min = function min(left, right) {
          if (left.cmp(right) < 0) return left;
          return right;
      };
      BN.prototype._init = function init(number, base, endian) {
          if (typeof number === "number") return this._initNumber(number, base, endian);
          if (typeof number === "object") return this._initArray(number, base, endian);
          if (base === "hex") base = 16;
          assert(base === (base | 0) && base >= 2 && base <= 36);
          number = number.toString().replace(/\s+/g, "");
          var start = 0;
          if (number[0] === "-") {
              start++;
              this.negative = 1;
          }
          if (start < number.length) {
              if (base === 16) this._parseHex(number, start, endian);
              else {
                  this._parseBase(number, base, start);
                  if (endian === "le") this._initArray(this.toArray(), base, endian);
              }
          }
      };
      BN.prototype._initNumber = function _initNumber(number, base, endian) {
          if (number < 0) {
              this.negative = 1;
              number = -number;
          }
          if (number < 0x4000000) {
              this.words = [
                  number & 0x3ffffff
              ];
              this.length = 1;
          } else if (number < 0x10000000000000) {
              this.words = [
                  number & 0x3ffffff,
                  number / 0x4000000 & 0x3ffffff
              ];
              this.length = 2;
          } else {
              assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
              this.words = [
                  number & 0x3ffffff,
                  number / 0x4000000 & 0x3ffffff,
                  1
              ];
              this.length = 3;
          }
          if (endian !== "le") return;
          // Reverse the bytes
          this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initArray = function _initArray(number, base, endian) {
          // Perhaps a Uint8Array
          assert(typeof number.length === "number");
          if (number.length <= 0) {
              this.words = [
                  0
              ];
              this.length = 1;
              return this;
          }
          this.length = Math.ceil(number.length / 3);
          this.words = new Array(this.length);
          for(var i = 0; i < this.length; i++)this.words[i] = 0;
          var j, w;
          var off = 0;
          if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
              w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
              this.words[j] |= w << off & 0x3ffffff;
              this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
              off += 24;
              if (off >= 26) {
                  off -= 26;
                  j++;
              }
          }
          else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
              w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
              this.words[j] |= w << off & 0x3ffffff;
              this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
              off += 24;
              if (off >= 26) {
                  off -= 26;
                  j++;
              }
          }
          return this._strip();
      };
      function parseHex4Bits(string, index) {
          var c = string.charCodeAt(index);
          // '0' - '9'
          if (c >= 48 && c <= 57) return c - 48;
          else if (c >= 65 && c <= 70) return c - 55;
          else if (c >= 97 && c <= 102) return c - 87;
          else assert(false, "Invalid character in " + string);
      }
      function parseHexByte(string, lowerBound, index) {
          var r = parseHex4Bits(string, index);
          if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
          return r;
      }
      BN.prototype._parseHex = function _parseHex(number, start, endian) {
          // Create possibly bigger array to ensure that it fits the number
          this.length = Math.ceil((number.length - start) / 6);
          this.words = new Array(this.length);
          for(var i = 0; i < this.length; i++)this.words[i] = 0;
          // 24-bits chunks
          var off = 0;
          var j = 0;
          var w;
          if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
              w = parseHexByte(number, start, i) << off;
              this.words[j] |= w & 0x3ffffff;
              if (off >= 18) {
                  off -= 18;
                  j += 1;
                  this.words[j] |= w >>> 26;
              } else off += 8;
          }
          else {
              var parseLength = number.length - start;
              for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                  w = parseHexByte(number, start, i) << off;
                  this.words[j] |= w & 0x3ffffff;
                  if (off >= 18) {
                      off -= 18;
                      j += 1;
                      this.words[j] |= w >>> 26;
                  } else off += 8;
              }
          }
          this._strip();
      };
      function parseBase(str, start, end, mul) {
          var r = 0;
          var b = 0;
          var len = Math.min(str.length, end);
          for(var i = start; i < len; i++){
              var c = str.charCodeAt(i) - 48;
              r *= mul;
              // 'a'
              if (c >= 49) b = c - 49 + 0xa;
              else if (c >= 17) b = c - 17 + 0xa;
              else b = c;
              assert(c >= 0 && b < mul, "Invalid character");
              r += b;
          }
          return r;
      }
      BN.prototype._parseBase = function _parseBase(number, base, start) {
          // Initialize as zero
          this.words = [
              0
          ];
          this.length = 1;
          // Find length of limb in base
          for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
          limbLen--;
          limbPow = limbPow / base | 0;
          var total = number.length - start;
          var mod = total % limbLen;
          var end = Math.min(total, total - mod) + start;
          var word = 0;
          for(var i = start; i < end; i += limbLen){
              word = parseBase(number, i, i + limbLen, base);
              this.imuln(limbPow);
              if (this.words[0] + word < 0x4000000) this.words[0] += word;
              else this._iaddn(word);
          }
          if (mod !== 0) {
              var pow = 1;
              word = parseBase(number, i, number.length, base);
              for(i = 0; i < mod; i++)pow *= base;
              this.imuln(pow);
              if (this.words[0] + word < 0x4000000) this.words[0] += word;
              else this._iaddn(word);
          }
          this._strip();
      };
      BN.prototype.copy = function copy(dest) {
          dest.words = new Array(this.length);
          for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
      };
      function move(dest, src) {
          dest.words = src.words;
          dest.length = src.length;
          dest.negative = src.negative;
          dest.red = src.red;
      }
      BN.prototype._move = function _move(dest) {
          move(dest, this);
      };
      BN.prototype.clone = function clone() {
          var r = new BN(null);
          this.copy(r);
          return r;
      };
      BN.prototype._expand = function _expand(size) {
          while(this.length < size)this.words[this.length++] = 0;
          return this;
      };
      // Remove leading `0` from `this`
      BN.prototype._strip = function strip() {
          while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
          return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
          // -0 = 0
          if (this.length === 1 && this.words[0] === 0) this.negative = 0;
          return this;
      };
      // Check Symbol.for because not everywhere where Symbol defined
      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") try {
          BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
      } catch (e) {
          BN.prototype.inspect = inspect;
      }
      else BN.prototype.inspect = inspect;
      function inspect() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      /*
  
    var zeros = [];
    var groupSizes = [];
    var groupBases = [];
  
    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }
  
    */ var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
      ];
      var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
      ];
      var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          10000000,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64000000,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          24300000,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
      ];
      BN.prototype.toString = function toString(base, padding) {
          base = base || 10;
          padding = padding | 0 || 1;
          var out;
          if (base === 16 || base === "hex") {
              out = "";
              var off = 0;
              var carry = 0;
              for(var i = 0; i < this.length; i++){
                  var w = this.words[i];
                  var word = ((w << off | carry) & 0xffffff).toString(16);
                  carry = w >>> 24 - off & 0xffffff;
                  off += 2;
                  if (off >= 26) {
                      off -= 26;
                      i--;
                  }
                  if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                  else out = word + out;
              }
              if (carry !== 0) out = carry.toString(16) + out;
              while(out.length % padding !== 0)out = "0" + out;
              if (this.negative !== 0) out = "-" + out;
              return out;
          }
          if (base === (base | 0) && base >= 2 && base <= 36) {
              // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
              var groupSize = groupSizes[base];
              // var groupBase = Math.pow(base, groupSize);
              var groupBase = groupBases[base];
              out = "";
              var c = this.clone();
              c.negative = 0;
              while(!c.isZero()){
                  var r = c.modrn(groupBase).toString(base);
                  c = c.idivn(groupBase);
                  if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                  else out = r + out;
              }
              if (this.isZero()) out = "0" + out;
              while(out.length % padding !== 0)out = "0" + out;
              if (this.negative !== 0) out = "-" + out;
              return out;
          }
          assert(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) ret += this.words[1] * 0x4000000;
          else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + this.words[1] * 0x4000000;
          else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
          return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
          return this.toString(16, 2);
      };
      if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer, endian, length);
      };
      BN.prototype.toArray = function toArray(endian, length) {
          return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate(ArrayType, size) {
          if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
          return new ArrayType(size);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
          this._strip();
          var byteLength = this.byteLength();
          var reqLength = length || Math.max(1, byteLength);
          assert(byteLength <= reqLength, "byte array longer than desired length");
          assert(reqLength > 0, "Requested array length <= 0");
          var res = allocate(ArrayType, reqLength);
          var postfix = endian === "le" ? "LE" : "BE";
          this["_toArrayLike" + postfix](res, byteLength);
          return res;
      };
      BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
          var position = 0;
          var carry = 0;
          for(var i = 0, shift = 0; i < this.length; i++){
              var word = this.words[i] << shift | carry;
              res[position++] = word & 0xff;
              if (position < res.length) res[position++] = word >> 8 & 0xff;
              if (position < res.length) res[position++] = word >> 16 & 0xff;
              if (shift === 6) {
                  if (position < res.length) res[position++] = word >> 24 & 0xff;
                  carry = 0;
                  shift = 0;
              } else {
                  carry = word >>> 24;
                  shift += 2;
              }
          }
          if (position < res.length) {
              res[position++] = carry;
              while(position < res.length)res[position++] = 0;
          }
      };
      BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
          var position = res.length - 1;
          var carry = 0;
          for(var i = 0, shift = 0; i < this.length; i++){
              var word = this.words[i] << shift | carry;
              res[position--] = word & 0xff;
              if (position >= 0) res[position--] = word >> 8 & 0xff;
              if (position >= 0) res[position--] = word >> 16 & 0xff;
              if (shift === 6) {
                  if (position >= 0) res[position--] = word >> 24 & 0xff;
                  carry = 0;
                  shift = 0;
              } else {
                  carry = word >>> 24;
                  shift += 2;
              }
          }
          if (position >= 0) {
              res[position--] = carry;
              while(position >= 0)res[position--] = 0;
          }
      };
      if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
      };
      else BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
              r += 13;
              t >>>= 13;
          }
          if (t >= 0x40) {
              r += 7;
              t >>>= 7;
          }
          if (t >= 0x8) {
              r += 4;
              t >>>= 4;
          }
          if (t >= 0x02) {
              r += 2;
              t >>>= 2;
          }
          return r + t;
      };
      BN.prototype._zeroBits = function _zeroBits(w) {
          // Short-cut
          if (w === 0) return 26;
          var t = w;
          var r = 0;
          if ((t & 0x1fff) === 0) {
              r += 13;
              t >>>= 13;
          }
          if ((t & 0x7f) === 0) {
              r += 7;
              t >>>= 7;
          }
          if ((t & 0xf) === 0) {
              r += 4;
              t >>>= 4;
          }
          if ((t & 0x3) === 0) {
              r += 2;
              t >>>= 2;
          }
          if ((t & 0x1) === 0) r++;
          return r;
      };
      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength() {
          var w = this.words[this.length - 1];
          var hi = this._countBits(w);
          return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
          var w = new Array(num.bitLength());
          for(var bit = 0; bit < w.length; bit++){
              var off = bit / 26 | 0;
              var wbit = bit % 26;
              w[bit] = num.words[off] >>> wbit & 0x01;
          }
          return w;
      }
      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits() {
          if (this.isZero()) return 0;
          var r = 0;
          for(var i = 0; i < this.length; i++){
              var b = this._zeroBits(this.words[i]);
              r += b;
              if (b !== 26) break;
          }
          return r;
      };
      BN.prototype.byteLength = function byteLength() {
          return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
          return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
          return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
      };
      // Return negative clone of `this`
      BN.prototype.neg = function neg() {
          return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
          if (!this.isZero()) this.negative ^= 1;
          return this;
      };
      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor(num) {
          while(this.length < num.length)this.words[this.length++] = 0;
          for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
          return this._strip();
      };
      BN.prototype.ior = function ior(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuor(num);
      };
      // Or `num` with `this`
      BN.prototype.or = function or(num) {
          if (this.length > num.length) return this.clone().ior(num);
          return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
          if (this.length > num.length) return this.clone().iuor(num);
          return num.clone().iuor(this);
      };
      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand(num) {
          // b = min-length(num, this)
          var b;
          if (this.length > num.length) b = num;
          else b = this;
          for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
          this.length = b.length;
          return this._strip();
      };
      BN.prototype.iand = function iand(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuand(num);
      };
      // And `num` with `this`
      BN.prototype.and = function and(num) {
          if (this.length > num.length) return this.clone().iand(num);
          return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
          if (this.length > num.length) return this.clone().iuand(num);
          return num.clone().iuand(this);
      };
      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor(num) {
          // a.length > b.length
          var a;
          var b;
          if (this.length > num.length) {
              a = this;
              b = num;
          } else {
              a = num;
              b = this;
          }
          for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
          if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
          this.length = a.length;
          return this._strip();
      };
      BN.prototype.ixor = function ixor(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuxor(num);
      };
      // Xor `num` with `this`
      BN.prototype.xor = function xor(num) {
          if (this.length > num.length) return this.clone().ixor(num);
          return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
          if (this.length > num.length) return this.clone().iuxor(num);
          return num.clone().iuxor(this);
      };
      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn(width) {
          assert(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          // Extend the buffer with leading zeroes
          this._expand(bytesNeeded);
          if (bitsLeft > 0) bytesNeeded--;
          // Handle complete words
          for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
          // Handle the residue
          if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
          // And remove leading zeroes
          return this._strip();
      };
      BN.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
      };
      // Set `bit` of `this`
      BN.prototype.setn = function setn(bit, val) {
          assert(typeof bit === "number" && bit >= 0);
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off + 1);
          if (val) this.words[off] = this.words[off] | 1 << wbit;
          else this.words[off] = this.words[off] & ~(1 << wbit);
          return this._strip();
      };
      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd(num) {
          var r;
          // negative + positive
          if (this.negative !== 0 && num.negative === 0) {
              this.negative = 0;
              r = this.isub(num);
              this.negative ^= 1;
              return this._normSign();
          // positive + negative
          } else if (this.negative === 0 && num.negative !== 0) {
              num.negative = 0;
              r = this.isub(num);
              num.negative = 1;
              return r._normSign();
          }
          // a.length > b.length
          var a, b;
          if (this.length > num.length) {
              a = this;
              b = num;
          } else {
              a = num;
              b = this;
          }
          var carry = 0;
          for(var i = 0; i < b.length; i++){
              r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
              this.words[i] = r & 0x3ffffff;
              carry = r >>> 26;
          }
          for(; carry !== 0 && i < a.length; i++){
              r = (a.words[i] | 0) + carry;
              this.words[i] = r & 0x3ffffff;
              carry = r >>> 26;
          }
          this.length = a.length;
          if (carry !== 0) {
              this.words[this.length] = carry;
              this.length++;
          // Copy the rest of the words
          } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
          return this;
      };
      // Add `num` to `this`
      BN.prototype.add = function add(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
              num.negative = 0;
              res = this.sub(num);
              num.negative ^= 1;
              return res;
          } else if (num.negative === 0 && this.negative !== 0) {
              this.negative = 0;
              res = num.sub(this);
              this.negative = 1;
              return res;
          }
          if (this.length > num.length) return this.clone().iadd(num);
          return num.clone().iadd(this);
      };
      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub(num) {
          // this - (-num) = this + num
          if (num.negative !== 0) {
              num.negative = 0;
              var r = this.iadd(num);
              num.negative = 1;
              return r._normSign();
          // -this - num = -(this + num)
          } else if (this.negative !== 0) {
              this.negative = 0;
              this.iadd(num);
              this.negative = 1;
              return this._normSign();
          }
          // At this point both numbers are positive
          var cmp = this.cmp(num);
          // Optimization - zeroify
          if (cmp === 0) {
              this.negative = 0;
              this.length = 1;
              this.words[0] = 0;
              return this;
          }
          // a > b
          var a, b;
          if (cmp > 0) {
              a = this;
              b = num;
          } else {
              a = num;
              b = this;
          }
          var carry = 0;
          for(var i = 0; i < b.length; i++){
              r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
              carry = r >> 26;
              this.words[i] = r & 0x3ffffff;
          }
          for(; carry !== 0 && i < a.length; i++){
              r = (a.words[i] | 0) + carry;
              carry = r >> 26;
              this.words[i] = r & 0x3ffffff;
          }
          // Copy rest of the words
          if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
          this.length = Math.max(this.length, i);
          if (a !== this) this.negative = 1;
          return this._strip();
      };
      // Subtract `num` from `this`
      BN.prototype.sub = function sub(num) {
          return this.clone().isub(num);
      };
      function smallMulTo(self, num, out) {
          out.negative = num.negative ^ self.negative;
          var len = self.length + num.length | 0;
          out.length = len;
          len = len - 1 | 0;
          // Peel one iteration (compiler can't do it, because of code complexity)
          var a = self.words[0] | 0;
          var b = num.words[0] | 0;
          var r = a * b;
          var lo = r & 0x3ffffff;
          var carry = r / 0x4000000 | 0;
          out.words[0] = lo;
          for(var k = 1; k < len; k++){
              // Sum all words with the same `i + j = k` and accumulate `ncarry`,
              // note that ncarry could be >= 0x3ffffff
              var ncarry = carry >>> 26;
              var rword = carry & 0x3ffffff;
              var maxJ = Math.min(k, num.length - 1);
              for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                  var i = k - j | 0;
                  a = self.words[i] | 0;
                  b = num.words[j] | 0;
                  r = a * b + rword;
                  ncarry += r / 0x4000000 | 0;
                  rword = r & 0x3ffffff;
              }
              out.words[k] = rword | 0;
              carry = ncarry | 0;
          }
          if (carry !== 0) out.words[k] = carry | 0;
          else out.length--;
          return out._strip();
      }
      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo(self, num, out) {
          var a = self.words;
          var b = num.words;
          var o = out.words;
          var c = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a[0] | 0;
          var al0 = a0 & 0x1fff;
          var ah0 = a0 >>> 13;
          var a1 = a[1] | 0;
          var al1 = a1 & 0x1fff;
          var ah1 = a1 >>> 13;
          var a2 = a[2] | 0;
          var al2 = a2 & 0x1fff;
          var ah2 = a2 >>> 13;
          var a3 = a[3] | 0;
          var al3 = a3 & 0x1fff;
          var ah3 = a3 >>> 13;
          var a4 = a[4] | 0;
          var al4 = a4 & 0x1fff;
          var ah4 = a4 >>> 13;
          var a5 = a[5] | 0;
          var al5 = a5 & 0x1fff;
          var ah5 = a5 >>> 13;
          var a6 = a[6] | 0;
          var al6 = a6 & 0x1fff;
          var ah6 = a6 >>> 13;
          var a7 = a[7] | 0;
          var al7 = a7 & 0x1fff;
          var ah7 = a7 >>> 13;
          var a8 = a[8] | 0;
          var al8 = a8 & 0x1fff;
          var ah8 = a8 >>> 13;
          var a9 = a[9] | 0;
          var al9 = a9 & 0x1fff;
          var ah9 = a9 >>> 13;
          var b0 = b[0] | 0;
          var bl0 = b0 & 0x1fff;
          var bh0 = b0 >>> 13;
          var b1 = b[1] | 0;
          var bl1 = b1 & 0x1fff;
          var bh1 = b1 >>> 13;
          var b2 = b[2] | 0;
          var bl2 = b2 & 0x1fff;
          var bh2 = b2 >>> 13;
          var b3 = b[3] | 0;
          var bl3 = b3 & 0x1fff;
          var bh3 = b3 >>> 13;
          var b4 = b[4] | 0;
          var bl4 = b4 & 0x1fff;
          var bh4 = b4 >>> 13;
          var b5 = b[5] | 0;
          var bl5 = b5 & 0x1fff;
          var bh5 = b5 >>> 13;
          var b6 = b[6] | 0;
          var bl6 = b6 & 0x1fff;
          var bh6 = b6 >>> 13;
          var b7 = b[7] | 0;
          var bl7 = b7 & 0x1fff;
          var bh7 = b7 >>> 13;
          var b8 = b[8] | 0;
          var bl8 = b8 & 0x1fff;
          var bh8 = b8 >>> 13;
          var b9 = b[9] | 0;
          var bl9 = b9 & 0x1fff;
          var bh9 = b9 >>> 13;
          out.negative = self.negative ^ num.negative;
          out.length = 19;
          /* k = 0 */ lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
          w0 &= 0x3ffffff;
          /* k = 1 */ lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi = Math.imul(ah1, bh0);
          lo = lo + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi = hi + Math.imul(ah0, bh1) | 0;
          var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 0x3ffffff;
          /* k = 2 */ lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi = Math.imul(ah2, bh0);
          lo = lo + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi = hi + Math.imul(ah1, bh1) | 0;
          lo = lo + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi = hi + Math.imul(ah0, bh2) | 0;
          var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
          w2 &= 0x3ffffff;
          /* k = 3 */ lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi = Math.imul(ah3, bh0);
          lo = lo + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi = hi + Math.imul(ah2, bh1) | 0;
          lo = lo + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi = hi + Math.imul(ah1, bh2) | 0;
          lo = lo + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi = hi + Math.imul(ah0, bh3) | 0;
          var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 0x3ffffff;
          /* k = 4 */ lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi = Math.imul(ah4, bh0);
          lo = lo + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi = hi + Math.imul(ah3, bh1) | 0;
          lo = lo + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi = hi + Math.imul(ah2, bh2) | 0;
          lo = lo + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi = hi + Math.imul(ah1, bh3) | 0;
          lo = lo + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi = hi + Math.imul(ah0, bh4) | 0;
          var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 0x3ffffff;
          /* k = 5 */ lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi = Math.imul(ah5, bh0);
          lo = lo + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi = hi + Math.imul(ah4, bh1) | 0;
          lo = lo + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi = hi + Math.imul(ah3, bh2) | 0;
          lo = lo + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi = hi + Math.imul(ah2, bh3) | 0;
          lo = lo + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi = hi + Math.imul(ah1, bh4) | 0;
          lo = lo + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi = hi + Math.imul(ah0, bh5) | 0;
          var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 0x3ffffff;
          /* k = 6 */ lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi = Math.imul(ah6, bh0);
          lo = lo + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi = hi + Math.imul(ah5, bh1) | 0;
          lo = lo + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi = hi + Math.imul(ah4, bh2) | 0;
          lo = lo + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi = hi + Math.imul(ah3, bh3) | 0;
          lo = lo + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi = hi + Math.imul(ah2, bh4) | 0;
          lo = lo + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi = hi + Math.imul(ah1, bh5) | 0;
          lo = lo + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi = hi + Math.imul(ah0, bh6) | 0;
          var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 0x3ffffff;
          /* k = 7 */ lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi = Math.imul(ah7, bh0);
          lo = lo + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi = hi + Math.imul(ah6, bh1) | 0;
          lo = lo + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi = hi + Math.imul(ah5, bh2) | 0;
          lo = lo + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi = hi + Math.imul(ah4, bh3) | 0;
          lo = lo + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi = hi + Math.imul(ah3, bh4) | 0;
          lo = lo + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi = hi + Math.imul(ah2, bh5) | 0;
          lo = lo + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi = hi + Math.imul(ah1, bh6) | 0;
          lo = lo + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi = hi + Math.imul(ah0, bh7) | 0;
          var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 0x3ffffff;
          /* k = 8 */ lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi = Math.imul(ah8, bh0);
          lo = lo + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi = hi + Math.imul(ah7, bh1) | 0;
          lo = lo + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi = hi + Math.imul(ah6, bh2) | 0;
          lo = lo + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi = hi + Math.imul(ah5, bh3) | 0;
          lo = lo + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi = hi + Math.imul(ah4, bh4) | 0;
          lo = lo + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi = hi + Math.imul(ah3, bh5) | 0;
          lo = lo + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi = hi + Math.imul(ah2, bh6) | 0;
          lo = lo + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi = hi + Math.imul(ah1, bh7) | 0;
          lo = lo + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi = hi + Math.imul(ah0, bh8) | 0;
          var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 0x3ffffff;
          /* k = 9 */ lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi = Math.imul(ah9, bh0);
          lo = lo + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi = hi + Math.imul(ah8, bh1) | 0;
          lo = lo + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi = hi + Math.imul(ah7, bh2) | 0;
          lo = lo + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi = hi + Math.imul(ah6, bh3) | 0;
          lo = lo + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi = hi + Math.imul(ah5, bh4) | 0;
          lo = lo + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi = hi + Math.imul(ah4, bh5) | 0;
          lo = lo + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi = hi + Math.imul(ah3, bh6) | 0;
          lo = lo + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi = hi + Math.imul(ah2, bh7) | 0;
          lo = lo + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi = hi + Math.imul(ah1, bh8) | 0;
          lo = lo + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi = hi + Math.imul(ah0, bh9) | 0;
          var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 0x3ffffff;
          /* k = 10 */ lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi = Math.imul(ah9, bh1);
          lo = lo + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi = hi + Math.imul(ah8, bh2) | 0;
          lo = lo + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi = hi + Math.imul(ah7, bh3) | 0;
          lo = lo + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi = hi + Math.imul(ah6, bh4) | 0;
          lo = lo + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi = hi + Math.imul(ah5, bh5) | 0;
          lo = lo + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi = hi + Math.imul(ah4, bh6) | 0;
          lo = lo + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi = hi + Math.imul(ah3, bh7) | 0;
          lo = lo + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi = hi + Math.imul(ah2, bh8) | 0;
          lo = lo + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi = hi + Math.imul(ah1, bh9) | 0;
          var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 0x3ffffff;
          /* k = 11 */ lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi = Math.imul(ah9, bh2);
          lo = lo + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi = hi + Math.imul(ah8, bh3) | 0;
          lo = lo + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi = hi + Math.imul(ah7, bh4) | 0;
          lo = lo + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi = hi + Math.imul(ah6, bh5) | 0;
          lo = lo + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi = hi + Math.imul(ah5, bh6) | 0;
          lo = lo + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi = hi + Math.imul(ah4, bh7) | 0;
          lo = lo + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi = hi + Math.imul(ah3, bh8) | 0;
          lo = lo + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi = hi + Math.imul(ah2, bh9) | 0;
          var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 0x3ffffff;
          /* k = 12 */ lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi = Math.imul(ah9, bh3);
          lo = lo + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi = hi + Math.imul(ah8, bh4) | 0;
          lo = lo + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi = hi + Math.imul(ah7, bh5) | 0;
          lo = lo + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi = hi + Math.imul(ah6, bh6) | 0;
          lo = lo + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi = hi + Math.imul(ah5, bh7) | 0;
          lo = lo + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi = hi + Math.imul(ah4, bh8) | 0;
          lo = lo + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi = hi + Math.imul(ah3, bh9) | 0;
          var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 0x3ffffff;
          /* k = 13 */ lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi = Math.imul(ah9, bh4);
          lo = lo + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi = hi + Math.imul(ah8, bh5) | 0;
          lo = lo + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi = hi + Math.imul(ah7, bh6) | 0;
          lo = lo + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi = hi + Math.imul(ah6, bh7) | 0;
          lo = lo + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi = hi + Math.imul(ah5, bh8) | 0;
          lo = lo + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi = hi + Math.imul(ah4, bh9) | 0;
          var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 0x3ffffff;
          /* k = 14 */ lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi = Math.imul(ah9, bh5);
          lo = lo + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi = hi + Math.imul(ah8, bh6) | 0;
          lo = lo + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi = hi + Math.imul(ah7, bh7) | 0;
          lo = lo + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi = hi + Math.imul(ah6, bh8) | 0;
          lo = lo + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi = hi + Math.imul(ah5, bh9) | 0;
          var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 0x3ffffff;
          /* k = 15 */ lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi = Math.imul(ah9, bh6);
          lo = lo + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi = hi + Math.imul(ah8, bh7) | 0;
          lo = lo + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi = hi + Math.imul(ah7, bh8) | 0;
          lo = lo + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi = hi + Math.imul(ah6, bh9) | 0;
          var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 0x3ffffff;
          /* k = 16 */ lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi = Math.imul(ah9, bh7);
          lo = lo + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi = hi + Math.imul(ah8, bh8) | 0;
          lo = lo + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi = hi + Math.imul(ah7, bh9) | 0;
          var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 0x3ffffff;
          /* k = 17 */ lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi = Math.imul(ah9, bh8);
          lo = lo + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi = hi + Math.imul(ah8, bh9) | 0;
          var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 0x3ffffff;
          /* k = 18 */ lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 0x3ffffff;
          o[0] = w0;
          o[1] = w1;
          o[2] = w2;
          o[3] = w3;
          o[4] = w4;
          o[5] = w5;
          o[6] = w6;
          o[7] = w7;
          o[8] = w8;
          o[9] = w9;
          o[10] = w10;
          o[11] = w11;
          o[12] = w12;
          o[13] = w13;
          o[14] = w14;
          o[15] = w15;
          o[16] = w16;
          o[17] = w17;
          o[18] = w18;
          if (c !== 0) {
              o[19] = c;
              out.length++;
          }
          return out;
      };
      // Polyfill comb
      if (!Math.imul) comb10MulTo = smallMulTo;
      function bigMulTo(self, num, out) {
          out.negative = num.negative ^ self.negative;
          out.length = self.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for(var k = 0; k < out.length - 1; k++){
              // Sum all words with the same `i + j = k` and accumulate `ncarry`,
              // note that ncarry could be >= 0x3ffffff
              var ncarry = hncarry;
              hncarry = 0;
              var rword = carry & 0x3ffffff;
              var maxJ = Math.min(k, num.length - 1);
              for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                  var i = k - j;
                  var a = self.words[i] | 0;
                  var b = num.words[j] | 0;
                  var r = a * b;
                  var lo = r & 0x3ffffff;
                  ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                  lo = lo + rword | 0;
                  rword = lo & 0x3ffffff;
                  ncarry = ncarry + (lo >>> 26) | 0;
                  hncarry += ncarry >>> 26;
                  ncarry &= 0x3ffffff;
              }
              out.words[k] = rword;
              carry = ncarry;
              ncarry = hncarry;
          }
          if (carry !== 0) out.words[k] = carry;
          else out.length--;
          return out._strip();
      }
      function jumboMulTo(self, num, out) {
          // Temporary disable, see https://github.com/indutny/bn.js/issues/211
          // var fftm = new FFTM();
          // return fftm.mulp(self, num, out);
          return bigMulTo(self, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len = this.length + num.length;
          if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
          else if (len < 63) res = smallMulTo(this, num, out);
          else if (len < 1024) res = bigMulTo(this, num, out);
          else res = jumboMulTo(this, num, out);
          return res;
      };
      // Cooley-Tukey algorithm for FFT
      // slightly revisited to rely on looping instead of recursion
      function FFTM(x, y) {
          this.x = x;
          this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
          var t = new Array(N);
          var l = BN.prototype._countBits(N) - 1;
          for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
          return t;
      };
      // Returns binary-reversed representation of `x`
      FFTM.prototype.revBin = function revBin(x, l, N) {
          if (x === 0 || x === N - 1) return x;
          var rb = 0;
          for(var i = 0; i < l; i++){
              rb |= (x & 1) << l - i - 1;
              x >>= 1;
          }
          return rb;
      };
      // Performs "tweedling" phase, therefore 'emulating'
      // behaviour of the recursive algorithm
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
          for(var i = 0; i < N; i++){
              rtws[i] = rws[rbt[i]];
              itws[i] = iws[rbt[i]];
          }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
          this.permute(rbt, rws, iws, rtws, itws, N);
          for(var s = 1; s < N; s <<= 1){
              var l = s << 1;
              var rtwdf = Math.cos(2 * Math.PI / l);
              var itwdf = Math.sin(2 * Math.PI / l);
              for(var p = 0; p < N; p += l){
                  var rtwdf_ = rtwdf;
                  var itwdf_ = itwdf;
                  for(var j = 0; j < s; j++){
                      var re = rtws[p + j];
                      var ie = itws[p + j];
                      var ro = rtws[p + j + s];
                      var io = itws[p + j + s];
                      var rx = rtwdf_ * ro - itwdf_ * io;
                      io = rtwdf_ * io + itwdf_ * ro;
                      ro = rx;
                      rtws[p + j] = re + ro;
                      itws[p + j] = ie + io;
                      rtws[p + j + s] = re - ro;
                      itws[p + j + s] = ie - io;
                      /* jshint maxdepth : false */ if (j !== l) {
                          rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                          itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                          rtwdf_ = rx;
                      }
                  }
              }
          }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
          var N = Math.max(m, n) | 1;
          var odd = N & 1;
          var i = 0;
          for(N = N / 2 | 0; N; N = N >>> 1)i++;
          return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
          if (N <= 1) return;
          for(var i = 0; i < N / 2; i++){
              var t = rws[i];
              rws[i] = rws[N - i - 1];
              rws[N - i - 1] = t;
              t = iws[i];
              iws[i] = -iws[N - i - 1];
              iws[N - i - 1] = -t;
          }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
          var carry = 0;
          for(var i = 0; i < N / 2; i++){
              var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
              ws[i] = w & 0x3ffffff;
              if (w < 0x4000000) carry = 0;
              else carry = w / 0x4000000 | 0;
          }
          return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
          var carry = 0;
          for(var i = 0; i < len; i++){
              carry = carry + (ws[i] | 0);
              rws[2 * i] = carry & 0x1fff;
              carry = carry >>> 13;
              rws[2 * i + 1] = carry & 0x1fff;
              carry = carry >>> 13;
          }
          // Pad with zeroes
          for(i = 2 * len; i < N; ++i)rws[i] = 0;
          assert(carry === 0);
          assert((carry & -8192) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
          var ph = new Array(N);
          for(var i = 0; i < N; i++)ph[i] = 0;
          return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
          var N = 2 * this.guessLen13b(x.length, y.length);
          var rbt = this.makeRBT(N);
          var _ = this.stub(N);
          var rws = new Array(N);
          var rwst = new Array(N);
          var iwst = new Array(N);
          var nrws = new Array(N);
          var nrwst = new Array(N);
          var niwst = new Array(N);
          var rmws = out.words;
          rmws.length = N;
          this.convert13b(x.words, x.length, rws, N);
          this.convert13b(y.words, y.length, nrws, N);
          this.transform(rws, _, rwst, iwst, N, rbt);
          this.transform(nrws, _, nrwst, niwst, N, rbt);
          for(var i = 0; i < N; i++){
              var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
              iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
              rwst[i] = rx;
          }
          this.conjugate(rwst, iwst, N);
          this.transform(rwst, iwst, rmws, _, N, rbt);
          this.conjugate(rmws, _, N);
          this.normalize13b(rmws, N);
          out.negative = x.negative ^ y.negative;
          out.length = x.length + y.length;
          return out._strip();
      };
      // Multiply `this` by `num`
      BN.prototype.mul = function mul(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
      };
      // Multiply employing FFT
      BN.prototype.mulf = function mulf(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
      };
      // In-place Multiplication
      BN.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;
          assert(typeof num === "number");
          assert(num < 0x4000000);
          // Carry
          var carry = 0;
          for(var i = 0; i < this.length; i++){
              var w = (this.words[i] | 0) * num;
              var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
              carry >>= 26;
              carry += w / 0x4000000 | 0;
              // NOTE: lo is 27bit maximum
              carry += lo >>> 26;
              this.words[i] = lo & 0x3ffffff;
          }
          if (carry !== 0) {
              this.words[i] = carry;
              this.length++;
          }
          return isNegNum ? this.ineg() : this;
      };
      BN.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
      };
      // `this` * `this`
      BN.prototype.sqr = function sqr() {
          return this.mul(this);
      };
      // `this` * `this` in-place
      BN.prototype.isqr = function isqr() {
          return this.imul(this.clone());
      };
      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow(num) {
          var w = toBitArray(num);
          if (w.length === 0) return new BN(1);
          // Skip leading zeroes
          var res = this;
          for(var i = 0; i < w.length; i++, res = res.sqr()){
              if (w[i] !== 0) break;
          }
          if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
              if (w[i] === 0) continue;
              res = res.mul(q);
          }
          return res;
      };
      // Shift-left in-place
      BN.prototype.iushln = function iushln(bits) {
          assert(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
          var i;
          if (r !== 0) {
              var carry = 0;
              for(i = 0; i < this.length; i++){
                  var newCarry = this.words[i] & carryMask;
                  var c = (this.words[i] | 0) - newCarry << r;
                  this.words[i] = c | carry;
                  carry = newCarry >>> 26 - r;
              }
              if (carry) {
                  this.words[i] = carry;
                  this.length++;
              }
          }
          if (s !== 0) {
              for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
              for(i = 0; i < s; i++)this.words[i] = 0;
              this.length += s;
          }
          return this._strip();
      };
      BN.prototype.ishln = function ishln(bits) {
          // TODO(indutny): implement me
          assert(this.negative === 0);
          return this.iushln(bits);
      };
      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert(typeof bits === "number" && bits >= 0);
          var h;
          if (hint) h = (hint - hint % 26) / 26;
          else h = 0;
          var r = bits % 26;
          var s = Math.min((bits - r) / 26, this.length);
          var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
          var maskedWords = extended;
          h -= s;
          h = Math.max(0, h);
          // Extended mode, copy masked part
          if (maskedWords) {
              for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
              maskedWords.length = s;
          }
          if (s === 0) ;
          else if (this.length > s) {
              this.length -= s;
              for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
          } else {
              this.words[0] = 0;
              this.length = 1;
          }
          var carry = 0;
          for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
              var word = this.words[i] | 0;
              this.words[i] = carry << 26 - r | word >>> r;
              carry = word & mask;
          }
          // Push carried bits as a mask
          if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
          if (this.length === 0) {
              this.words[0] = 0;
              this.length = 1;
          }
          return this._strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
          // TODO(indutny): implement me
          assert(this.negative === 0);
          return this.iushrn(bits, hint, extended);
      };
      // Shift-left
      BN.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
      };
      // Shift-right
      BN.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
      };
      // Test if n bit is set
      BN.prototype.testn = function testn(bit) {
          assert(typeof bit === "number" && bit >= 0);
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          // Fast case: bit is much higher than all existing words
          if (this.length <= s) return false;
          // Check bit and return
          var w = this.words[s];
          return !!(w & q);
      };
      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn(bits) {
          assert(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          assert(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s) return this;
          if (r !== 0) s++;
          this.length = Math.min(s, this.length);
          if (r !== 0) {
              var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
              this.words[this.length - 1] &= mask;
          }
          return this._strip();
      };
      // Return only lowers bits of number
      BN.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
      };
      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn(num) {
          assert(typeof num === "number");
          assert(num < 0x4000000);
          if (num < 0) return this.isubn(-num);
          // Possible sign change
          if (this.negative !== 0) {
              if (this.length === 1 && (this.words[0] | 0) <= num) {
                  this.words[0] = num - (this.words[0] | 0);
                  this.negative = 0;
                  return this;
              }
              this.negative = 0;
              this.isubn(num);
              this.negative = 1;
              return this;
          }
          // Add without checks
          return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          // Carry
          for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
              this.words[i] -= 0x4000000;
              if (i === this.length - 1) this.words[i + 1] = 1;
              else this.words[i + 1]++;
          }
          this.length = Math.max(this.length, i + 1);
          return this;
      };
      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn(num) {
          assert(typeof num === "number");
          assert(num < 0x4000000);
          if (num < 0) return this.iaddn(-num);
          if (this.negative !== 0) {
              this.negative = 0;
              this.iaddn(num);
              this.negative = 1;
              return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
              this.words[0] = -this.words[0];
              this.negative = 1;
          } else // Carry
          for(var i = 0; i < this.length && this.words[i] < 0; i++){
              this.words[i] += 0x4000000;
              this.words[i + 1] -= 1;
          }
          return this._strip();
      };
      BN.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
      };
      BN.prototype.abs = function abs() {
          return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len = num.length + shift;
          var i;
          this._expand(len);
          var w;
          var carry = 0;
          for(i = 0; i < num.length; i++){
              w = (this.words[i + shift] | 0) + carry;
              var right = (num.words[i] | 0) * mul;
              w -= right & 0x3ffffff;
              carry = (w >> 26) - (right / 0x4000000 | 0);
              this.words[i + shift] = w & 0x3ffffff;
          }
          for(; i < this.length - shift; i++){
              w = (this.words[i + shift] | 0) + carry;
              carry = w >> 26;
              this.words[i + shift] = w & 0x3ffffff;
          }
          if (carry === 0) return this._strip();
          // Subtraction overflow
          assert(carry === -1);
          carry = 0;
          for(i = 0; i < this.length; i++){
              w = -(this.words[i] | 0) + carry;
              carry = w >> 26;
              this.words[i] = w & 0x3ffffff;
          }
          this.negative = 1;
          return this._strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a = this.clone();
          var b = num;
          // Normalize
          var bhi = b.words[b.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
              b = b.ushln(shift);
              a.iushln(shift);
              bhi = b.words[b.length - 1] | 0;
          }
          // Initialize quotient
          var m = a.length - b.length;
          var q;
          if (mode !== "mod") {
              q = new BN(null);
              q.length = m + 1;
              q.words = new Array(q.length);
              for(var i = 0; i < q.length; i++)q.words[i] = 0;
          }
          var diff = a.clone()._ishlnsubmul(b, 1, m);
          if (diff.negative === 0) {
              a = diff;
              if (q) q.words[m] = 1;
          }
          for(var j = m - 1; j >= 0; j--){
              var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
              // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
              // (0x7ffffff)
              qj = Math.min(qj / bhi | 0, 0x3ffffff);
              a._ishlnsubmul(b, qj, j);
              while(a.negative !== 0){
                  qj--;
                  a.negative = 0;
                  a._ishlnsubmul(b, 1, j);
                  if (!a.isZero()) a.negative ^= 1;
              }
              if (q) q.words[j] = qj;
          }
          if (q) q._strip();
          a._strip();
          // Denormalize
          if (mode !== "div" && shift !== 0) a.iushrn(shift);
          return {
              div: q || null,
              mod: a
          };
      };
      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod(num, mode, positive) {
          assert(!num.isZero());
          if (this.isZero()) return {
              div: new BN(0),
              mod: new BN(0)
          };
          var div, mod, res;
          if (this.negative !== 0 && num.negative === 0) {
              res = this.neg().divmod(num, mode);
              if (mode !== "mod") div = res.div.neg();
              if (mode !== "div") {
                  mod = res.mod.neg();
                  if (positive && mod.negative !== 0) mod.iadd(num);
              }
              return {
                  div: div,
                  mod: mod
              };
          }
          if (this.negative === 0 && num.negative !== 0) {
              res = this.divmod(num.neg(), mode);
              if (mode !== "mod") div = res.div.neg();
              return {
                  div: div,
                  mod: res.mod
              };
          }
          if ((this.negative & num.negative) !== 0) {
              res = this.neg().divmod(num.neg(), mode);
              if (mode !== "div") {
                  mod = res.mod.neg();
                  if (positive && mod.negative !== 0) mod.isub(num);
              }
              return {
                  div: res.div,
                  mod: mod
              };
          }
          // Both numbers are positive at this point
          // Strip both numbers to approximate shift value
          if (num.length > this.length || this.cmp(num) < 0) return {
              div: new BN(0),
              mod: this
          };
          // Very short reduction
          if (num.length === 1) {
              if (mode === "div") return {
                  div: this.divn(num.words[0]),
                  mod: null
              };
              if (mode === "mod") return {
                  div: null,
                  mod: new BN(this.modrn(num.words[0]))
              };
              return {
                  div: this.divn(num.words[0]),
                  mod: new BN(this.modrn(num.words[0]))
              };
          }
          return this._wordDiv(num, mode);
      };
      // Find `this` / `num`
      BN.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
      };
      // Find `this` % `num`
      BN.prototype.mod = function mod(num) {
          return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
      };
      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          // Fast case - exact division
          if (dm.mod.isZero()) return dm.div;
          var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r2 = num.andln(1);
          var cmp = mod.cmp(half);
          // Round down
          if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
          // Round up
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modrn = function modrn(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;
          assert(num <= 0x3ffffff);
          var p = 67108864 % num;
          var acc = 0;
          for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
          return isNegNum ? -acc : acc;
      };
      // WARNING: DEPRECATED
      BN.prototype.modn = function modn(num) {
          return this.modrn(num);
      };
      // In-place division by number
      BN.prototype.idivn = function idivn(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;
          assert(num <= 0x3ffffff);
          var carry = 0;
          for(var i = this.length - 1; i >= 0; i--){
              var w = (this.words[i] | 0) + carry * 0x4000000;
              this.words[i] = w / num | 0;
              carry = w % num;
          }
          this._strip();
          return isNegNum ? this.ineg() : this;
      };
      BN.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p) {
          assert(p.negative === 0);
          assert(!p.isZero());
          var x = this;
          var y = p.clone();
          if (x.negative !== 0) x = x.umod(p);
          else x = x.clone();
          // A * x + B * y = x
          var A = new BN(1);
          var B = new BN(0);
          // C * x + D * y = y
          var C = new BN(0);
          var D = new BN(1);
          var g = 0;
          while(x.isEven() && y.isEven()){
              x.iushrn(1);
              y.iushrn(1);
              ++g;
          }
          var yp = y.clone();
          var xp = x.clone();
          while(!x.isZero()){
              for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
              if (i > 0) {
                  x.iushrn(i);
                  while(i-- > 0){
                      if (A.isOdd() || B.isOdd()) {
                          A.iadd(yp);
                          B.isub(xp);
                      }
                      A.iushrn(1);
                      B.iushrn(1);
                  }
              }
              for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
              if (j > 0) {
                  y.iushrn(j);
                  while(j-- > 0){
                      if (C.isOdd() || D.isOdd()) {
                          C.iadd(yp);
                          D.isub(xp);
                      }
                      C.iushrn(1);
                      D.iushrn(1);
                  }
              }
              if (x.cmp(y) >= 0) {
                  x.isub(y);
                  A.isub(C);
                  B.isub(D);
              } else {
                  y.isub(x);
                  C.isub(A);
                  D.isub(B);
              }
          }
          return {
              a: C,
              b: D,
              gcd: y.iushln(g)
          };
      };
      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp(p) {
          assert(p.negative === 0);
          assert(!p.isZero());
          var a = this;
          var b = p.clone();
          if (a.negative !== 0) a = a.umod(p);
          else a = a.clone();
          var x1 = new BN(1);
          var x2 = new BN(0);
          var delta = b.clone();
          while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
              for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
              if (i > 0) {
                  a.iushrn(i);
                  while(i-- > 0){
                      if (x1.isOdd()) x1.iadd(delta);
                      x1.iushrn(1);
                  }
              }
              for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
              if (j > 0) {
                  b.iushrn(j);
                  while(j-- > 0){
                      if (x2.isOdd()) x2.iadd(delta);
                      x2.iushrn(1);
                  }
              }
              if (a.cmp(b) >= 0) {
                  a.isub(b);
                  x1.isub(x2);
              } else {
                  b.isub(a);
                  x2.isub(x1);
              }
          }
          var res;
          if (a.cmpn(1) === 0) res = x1;
          else res = x2;
          if (res.cmpn(0) < 0) res.iadd(p);
          return res;
      };
      BN.prototype.gcd = function gcd(num) {
          if (this.isZero()) return num.abs();
          if (num.isZero()) return this.abs();
          var a = this.clone();
          var b = num.clone();
          a.negative = 0;
          b.negative = 0;
          // Remove common factor of two
          for(var shift = 0; a.isEven() && b.isEven(); shift++){
              a.iushrn(1);
              b.iushrn(1);
          }
          do {
              while(a.isEven())a.iushrn(1);
              while(b.isEven())b.iushrn(1);
              var r = a.cmp(b);
              if (r < 0) {
                  // Swap `a` and `b` to make `a` always bigger than `b`
                  var t = a;
                  a = b;
                  b = t;
              } else if (r === 0 || b.cmpn(1) === 0) break;
              a.isub(b);
          }while (true);
          return b.iushln(shift);
      };
      // Invert number in the field F(num)
      BN.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
          return (this.words[0] & 1) === 1;
      };
      // And first word and num
      BN.prototype.andln = function andln(num) {
          return this.words[0] & num;
      };
      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn(bit) {
          assert(typeof bit === "number");
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          // Fast case: bit is much higher than all existing words
          if (this.length <= s) {
              this._expand(s + 1);
              this.words[s] |= q;
              return this;
          }
          // Add bit and propagate, if needed
          var carry = q;
          for(var i = s; carry !== 0 && i < this.length; i++){
              var w = this.words[i] | 0;
              w += carry;
              carry = w >>> 26;
              w &= 0x3ffffff;
              this.words[i] = w;
          }
          if (carry !== 0) {
              this.words[i] = carry;
              this.length++;
          }
          return this;
      };
      BN.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative) return -1;
          if (this.negative === 0 && negative) return 1;
          this._strip();
          var res;
          if (this.length > 1) res = 1;
          else {
              if (negative) num = -num;
              assert(num <= 0x3ffffff, "Number is too big");
              var w = this.words[0] | 0;
              res = w === num ? 0 : w < num ? -1 : 1;
          }
          if (this.negative !== 0) return -res | 0;
          return res;
      };
      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp(num) {
          if (this.negative !== 0 && num.negative === 0) return -1;
          if (this.negative === 0 && num.negative !== 0) return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0) return -res | 0;
          return res;
      };
      // Unsigned comparison
      BN.prototype.ucmp = function ucmp(num) {
          // At this point both numbers have the same sign
          if (this.length > num.length) return 1;
          if (this.length < num.length) return -1;
          var res = 0;
          for(var i = this.length - 1; i >= 0; i--){
              var a = this.words[i] | 0;
              var b = num.words[i] | 0;
              if (a === b) continue;
              if (a < b) res = -1;
              else if (a > b) res = 1;
              break;
          }
          return res;
      };
      BN.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt(num) {
          return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
          return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt(num) {
          return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
          return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
          return this.cmp(num) === 0;
      };
      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red(num) {
          return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
          assert(!this.red, "Already a number in reduction context");
          assert(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
          assert(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
          assert(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
          assert(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
          assert(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
          assert(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
          assert(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
          assert(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
          assert(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
          assert(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
          assert(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
          assert(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
      };
      // Square root over p
      BN.prototype.redSqrt = function redSqrt() {
          assert(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
          assert(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
      };
      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg() {
          assert(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
          assert(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
      };
      // Prime numbers with efficient reduction
      var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
      };
      // Pseudo-Mersenne prime
      function MPrime(name, p) {
          // P = 2 ^ N - K
          this.name = name;
          this.p = new BN(p, 16);
          this.n = this.p.bitLength();
          this.k = new BN(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
          // Assumes that `num` is less than `P^2`
          // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
          var r = num;
          var rlen;
          do {
              this.split(r, this.tmp);
              r = this.imulK(r);
              r = r.iadd(this.tmp);
              rlen = r.bitLength();
          }while (rlen > this.n);
          var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
          if (cmp === 0) {
              r.words[0] = 0;
              r.length = 1;
          } else if (cmp > 0) r.isub(this.p);
          else if (r.strip !== undefined) // r is a BN v4 instance
          r.strip();
          else // r is a BN v5 instance
          r._strip();
          return r;
      };
      MPrime.prototype.split = function split(input, out) {
          input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
      };
      function K256() {
          MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
          // 256 = 9 * 26 + 22
          var mask = 0x3fffff;
          var outLen = Math.min(input.length, 9);
          for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
          output.length = outLen;
          if (input.length <= 9) {
              input.words[0] = 0;
              input.length = 1;
              return;
          }
          // Shift by 9 limbs
          var prev = input.words[9];
          output.words[output.length++] = prev & mask;
          for(i = 10; i < input.length; i++){
              var next = input.words[i] | 0;
              input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
              prev = next;
          }
          prev >>>= 22;
          input.words[i - 10] = prev;
          if (prev === 0 && input.length > 10) input.length -= 10;
          else input.length -= 9;
      };
      K256.prototype.imulK = function imulK(num) {
          // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
          var lo = 0;
          for(var i = 0; i < num.length; i++){
              var w = num.words[i] | 0;
              lo += w * 0x3d1;
              num.words[i] = lo & 0x3ffffff;
              lo = w * 0x40 + (lo / 0x4000000 | 0);
          }
          // Fast length reduction
          if (num.words[num.length - 1] === 0) {
              num.length--;
              if (num.words[num.length - 1] === 0) num.length--;
          }
          return num;
      };
      function P224() {
          MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      inherits(P224, MPrime);
      function P192() {
          MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      inherits(P192, MPrime);
      function P25519() {
          // 2 ^ 255 - 19
          MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
          // K = 0x13
          var carry = 0;
          for(var i = 0; i < num.length; i++){
              var hi = (num.words[i] | 0) * 0x13 + carry;
              var lo = hi & 0x3ffffff;
              hi >>>= 26;
              num.words[i] = lo;
              carry = hi;
          }
          if (carry !== 0) num.words[num.length++] = carry;
          return num;
      };
      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime(name) {
          // Cached version of prime
          if (primes[name]) return primes[name];
          var prime;
          if (name === "k256") prime = new K256();
          else if (name === "p224") prime = new P224();
          else if (name === "p192") prime = new P192();
          else if (name === "p25519") prime = new P25519();
          else throw new Error("Unknown prime " + name);
          primes[name] = prime;
          return prime;
      };
      //
      // Base reduction engine
      //
      function Red(m) {
          if (typeof m === "string") {
              var prime = BN._prime(m);
              this.m = prime.p;
              this.prime = prime;
          } else {
              assert(m.gtn(1), "modulus must be greater than 1");
              this.m = m;
              this.prime = null;
          }
      }
      Red.prototype._verify1 = function _verify1(a) {
          assert(a.negative === 0, "red works only with positives");
          assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
          assert((a.negative | b.negative) === 0, "red works only with positives");
          assert(a.red && a.red === b.red, "red works only with red numbers");
      };
      Red.prototype.imod = function imod(a) {
          if (this.prime) return this.prime.ireduce(a)._forceRed(this);
          move(a, a.umod(this.m)._forceRed(this));
          return a;
      };
      Red.prototype.neg = function neg(a) {
          if (a.isZero()) return a.clone();
          return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
          this._verify2(a, b);
          var res = a.add(b);
          if (res.cmp(this.m) >= 0) res.isub(this.m);
          return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
          this._verify2(a, b);
          var res = a.iadd(b);
          if (res.cmp(this.m) >= 0) res.isub(this.m);
          return res;
      };
      Red.prototype.sub = function sub(a, b) {
          this._verify2(a, b);
          var res = a.sub(b);
          if (res.cmpn(0) < 0) res.iadd(this.m);
          return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
          this._verify2(a, b);
          var res = a.isub(b);
          if (res.cmpn(0) < 0) res.iadd(this.m);
          return res;
      };
      Red.prototype.shl = function shl(a, num) {
          this._verify1(a);
          return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
          this._verify2(a, b);
          return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
          this._verify2(a, b);
          return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
          return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
          return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
          if (a.isZero()) return a.clone();
          var mod3 = this.m.andln(3);
          assert(mod3 % 2 === 1);
          // Fast case
          if (mod3 === 3) {
              var pow = this.m.add(new BN(1)).iushrn(2);
              return this.pow(a, pow);
          }
          // Tonelli-Shanks algorithm (Totally unoptimized and slow)
          //
          // Find Q and S, that Q * 2 ^ S = (P - 1)
          var q = this.m.subn(1);
          var s = 0;
          while(!q.isZero() && q.andln(1) === 0){
              s++;
              q.iushrn(1);
          }
          assert(!q.isZero());
          var one = new BN(1).toRed(this);
          var nOne = one.redNeg();
          // Find quadratic non-residue
          // NOTE: Max is such because of generalized Riemann hypothesis.
          var lpow = this.m.subn(1).iushrn(1);
          var z = this.m.bitLength();
          z = new BN(2 * z * z).toRed(this);
          while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
          var c = this.pow(z, q);
          var r = this.pow(a, q.addn(1).iushrn(1));
          var t = this.pow(a, q);
          var m = s;
          while(t.cmp(one) !== 0){
              var tmp = t;
              for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
              assert(i < m);
              var b = this.pow(c, new BN(1).iushln(m - i - 1));
              r = r.redMul(b);
              c = b.redSqr();
              t = t.redMul(c);
              m = i;
          }
          return r;
      };
      Red.prototype.invm = function invm(a) {
          var inv = a._invmp(this.m);
          if (inv.negative !== 0) {
              inv.negative = 0;
              return this.imod(inv).redNeg();
          } else return this.imod(inv);
      };
      Red.prototype.pow = function pow(a, num) {
          if (num.isZero()) return new BN(1).toRed(this);
          if (num.cmpn(1) === 0) return a.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN(1).toRed(this);
          wnd[1] = a;
          for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) start = 26;
          for(i = num.length - 1; i >= 0; i--){
              var word = num.words[i];
              for(var j = start - 1; j >= 0; j--){
                  var bit = word >> j & 1;
                  if (res !== wnd[0]) res = this.sqr(res);
                  if (bit === 0 && current === 0) {
                      currentLen = 0;
                      continue;
                  }
                  current <<= 1;
                  current |= bit;
                  currentLen++;
                  if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                  res = this.mul(res, wnd[current]);
                  currentLen = 0;
                  current = 0;
              }
              start = 26;
          }
          return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
          var r = num.umod(this.m);
          return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
      };
      //
      // Montgomery method engine
      //
      BN.mont = function mont(num) {
          return new Mont(num);
      };
      function Mont(m) {
          Red.call(this, m);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
          this.r = new BN(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
          var r = this.imod(num.mul(this.rinv));
          r.red = null;
          return r;
      };
      Mont.prototype.imul = function imul(a, b) {
          if (a.isZero() || b.isZero()) {
              a.words[0] = 0;
              a.length = 1;
              return a;
          }
          var t = a.imul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) res = u.isub(this.m);
          else if (u.cmpn(0) < 0) res = u.iadd(this.m);
          return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
          if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
          var t = a.mul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) res = u.isub(this.m);
          else if (u.cmpn(0) < 0) res = u.iadd(this.m);
          return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
          // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
          var res = this.imod(a._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
      };
  })(module, this);
  
  },{"8c023fe531a44dfc":"16z3F"}],"16z3F":[function(require,module,exports) {
  "use strict";
  
  },{}],"htrqZ":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "isBytesLike", ()=>isBytesLike);
  parcelHelpers.export(exports, "isBytes", ()=>isBytes);
  parcelHelpers.export(exports, "arrayify", ()=>arrayify);
  parcelHelpers.export(exports, "concat", ()=>concat);
  parcelHelpers.export(exports, "stripZeros", ()=>stripZeros);
  parcelHelpers.export(exports, "zeroPad", ()=>zeroPad);
  parcelHelpers.export(exports, "isHexString", ()=>isHexString);
  parcelHelpers.export(exports, "hexlify", ()=>hexlify);
  /*
  function unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {
      if (typeof(value) === "string" && value.length % 2 && value.substring(0, 2) === "0x") {
          return "0x0" + value.substring(2);
      }
      return value;
  }
  */ parcelHelpers.export(exports, "hexDataLength", ()=>hexDataLength);
  parcelHelpers.export(exports, "hexDataSlice", ()=>hexDataSlice);
  parcelHelpers.export(exports, "hexConcat", ()=>hexConcat);
  parcelHelpers.export(exports, "hexValue", ()=>hexValue);
  parcelHelpers.export(exports, "hexStripZeros", ()=>hexStripZeros);
  parcelHelpers.export(exports, "hexZeroPad", ()=>hexZeroPad);
  parcelHelpers.export(exports, "splitSignature", ()=>splitSignature);
  parcelHelpers.export(exports, "joinSignature", ()=>joinSignature);
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  "use strict";
  const logger = new (0, _logger.Logger)((0, _version.version));
  ///////////////////////////////
  function isHexable(value) {
      return !!value.toHexString;
  }
  function addSlice(array) {
      if (array.slice) return array;
      array.slice = function() {
          const args = Array.prototype.slice.call(arguments);
          return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
      };
      return array;
  }
  function isBytesLike(value) {
      return isHexString(value) && !(value.length % 2) || isBytes(value);
  }
  function isInteger(value) {
      return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes(value) {
      if (value == null) return false;
      if (value.constructor === Uint8Array) return true;
      if (typeof value === "string") return false;
      if (!isInteger(value.length) || value.length < 0) return false;
      for(let i = 0; i < value.length; i++){
          const v = value[i];
          if (!isInteger(v) || v < 0 || v >= 256) return false;
      }
      return true;
  }
  function arrayify(value, options) {
      if (!options) options = {};
      if (typeof value === "number") {
          logger.checkSafeUint53(value, "invalid arrayify value");
          const result = [];
          while(value){
              result.unshift(value & 0xff);
              value = parseInt(String(value / 256));
          }
          if (result.length === 0) result.push(0);
          return addSlice(new Uint8Array(result));
      }
      if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") value = "0x" + value;
      if (isHexable(value)) value = value.toHexString();
      if (isHexString(value)) {
          let hex = value.substring(2);
          if (hex.length % 2) {
              if (options.hexPad === "left") hex = "0" + hex;
              else if (options.hexPad === "right") hex += "0";
              else logger.throwArgumentError("hex data is odd-length", "value", value);
          }
          const result = [];
          for(let i = 0; i < hex.length; i += 2)result.push(parseInt(hex.substring(i, i + 2), 16));
          return addSlice(new Uint8Array(result));
      }
      if (isBytes(value)) return addSlice(new Uint8Array(value));
      return logger.throwArgumentError("invalid arrayify value", "value", value);
  }
  function concat(items) {
      const objects = items.map((item)=>arrayify(item));
      const length = objects.reduce((accum, item)=>accum + item.length, 0);
      const result = new Uint8Array(length);
      objects.reduce((offset, object)=>{
          result.set(object, offset);
          return offset + object.length;
      }, 0);
      return addSlice(result);
  }
  function stripZeros(value) {
      let result = arrayify(value);
      if (result.length === 0) return result;
      // Find the first non-zero entry
      let start = 0;
      while(start < result.length && result[start] === 0)start++;
      // If we started with zeros, strip them
      if (start) result = result.slice(start);
      return result;
  }
  function zeroPad(value, length) {
      value = arrayify(value);
      if (value.length > length) logger.throwArgumentError("value out of range", "value", arguments[0]);
      const result = new Uint8Array(length);
      result.set(value, length - value.length);
      return addSlice(result);
  }
  function isHexString(value, length) {
      if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) return false;
      if (length && value.length !== 2 + 2 * length) return false;
      return true;
  }
  const HexCharacters = "0123456789abcdef";
  function hexlify(value, options) {
      if (!options) options = {};
      if (typeof value === "number") {
          logger.checkSafeUint53(value, "invalid hexlify value");
          let hex = "";
          while(value){
              hex = HexCharacters[value & 0xf] + hex;
              value = Math.floor(value / 16);
          }
          if (hex.length) {
              if (hex.length % 2) hex = "0" + hex;
              return "0x" + hex;
          }
          return "0x00";
      }
      if (typeof value === "bigint") {
          value = value.toString(16);
          if (value.length % 2) return "0x0" + value;
          return "0x" + value;
      }
      if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") value = "0x" + value;
      if (isHexable(value)) return value.toHexString();
      if (isHexString(value)) {
          if (value.length % 2) {
              if (options.hexPad === "left") value = "0x0" + value.substring(2);
              else if (options.hexPad === "right") value += "0";
              else logger.throwArgumentError("hex data is odd-length", "value", value);
          }
          return value.toLowerCase();
      }
      if (isBytes(value)) {
          let result = "0x";
          for(let i = 0; i < value.length; i++){
              let v = value[i];
              result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
          }
          return result;
      }
      return logger.throwArgumentError("invalid hexlify value", "value", value);
  }
  function hexDataLength(data) {
      if (typeof data !== "string") data = hexlify(data);
      else if (!isHexString(data) || data.length % 2) return null;
      return (data.length - 2) / 2;
  }
  function hexDataSlice(data, offset, endOffset) {
      if (typeof data !== "string") data = hexlify(data);
      else if (!isHexString(data) || data.length % 2) logger.throwArgumentError("invalid hexData", "value", data);
      offset = 2 + 2 * offset;
      if (endOffset != null) return "0x" + data.substring(offset, 2 + 2 * endOffset);
      return "0x" + data.substring(offset);
  }
  function hexConcat(items) {
      let result = "0x";
      items.forEach((item)=>{
          result += hexlify(item).substring(2);
      });
      return result;
  }
  function hexValue(value) {
      const trimmed = hexStripZeros(hexlify(value, {
          hexPad: "left"
      }));
      if (trimmed === "0x") return "0x0";
      return trimmed;
  }
  function hexStripZeros(value) {
      if (typeof value !== "string") value = hexlify(value);
      if (!isHexString(value)) logger.throwArgumentError("invalid hex string", "value", value);
      value = value.substring(2);
      let offset = 0;
      while(offset < value.length && value[offset] === "0")offset++;
      return "0x" + value.substring(offset);
  }
  function hexZeroPad(value, length) {
      if (typeof value !== "string") value = hexlify(value);
      else if (!isHexString(value)) logger.throwArgumentError("invalid hex string", "value", value);
      if (value.length > 2 * length + 2) logger.throwArgumentError("value out of range", "value", arguments[1]);
      while(value.length < 2 * length + 2)value = "0x0" + value.substring(2);
      return value;
  }
  function splitSignature(signature) {
      const result = {
          r: "0x",
          s: "0x",
          _vs: "0x",
          recoveryParam: 0,
          v: 0,
          yParityAndS: "0x",
          compact: "0x"
      };
      if (isBytesLike(signature)) {
          let bytes = arrayify(signature);
          // Get the r, s and v
          if (bytes.length === 64) {
              // EIP-2098; pull the v from the top bit of s and clear it
              result.v = 27 + (bytes[32] >> 7);
              bytes[32] &= 0x7f;
              result.r = hexlify(bytes.slice(0, 32));
              result.s = hexlify(bytes.slice(32, 64));
          } else if (bytes.length === 65) {
              result.r = hexlify(bytes.slice(0, 32));
              result.s = hexlify(bytes.slice(32, 64));
              result.v = bytes[64];
          } else logger.throwArgumentError("invalid signature string", "signature", signature);
          // Allow a recid to be used as the v
          if (result.v < 27) {
              if (result.v === 0 || result.v === 1) result.v += 27;
              else logger.throwArgumentError("signature invalid v byte", "signature", signature);
          }
          // Compute recoveryParam from v
          result.recoveryParam = 1 - result.v % 2;
          // Compute _vs from recoveryParam and s
          if (result.recoveryParam) bytes[32] |= 0x80;
          result._vs = hexlify(bytes.slice(32, 64));
      } else {
          result.r = signature.r;
          result.s = signature.s;
          result.v = signature.v;
          result.recoveryParam = signature.recoveryParam;
          result._vs = signature._vs;
          // If the _vs is available, use it to populate missing s, v and recoveryParam
          // and verify non-missing s, v and recoveryParam
          if (result._vs != null) {
              const vs = zeroPad(arrayify(result._vs), 32);
              result._vs = hexlify(vs);
              // Set or check the recid
              const recoveryParam = vs[0] >= 128 ? 1 : 0;
              if (result.recoveryParam == null) result.recoveryParam = recoveryParam;
              else if (result.recoveryParam !== recoveryParam) logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
              // Set or check the s
              vs[0] &= 0x7f;
              const s = hexlify(vs);
              if (result.s == null) result.s = s;
              else if (result.s !== s) logger.throwArgumentError("signature v mismatch _vs", "signature", signature);
          }
          // Use recid and v to populate each other
          if (result.recoveryParam == null) {
              if (result.v == null) logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
              else if (result.v === 0 || result.v === 1) result.recoveryParam = result.v;
              else result.recoveryParam = 1 - result.v % 2;
          } else if (result.v == null) result.v = 27 + result.recoveryParam;
          else {
              const recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;
              if (result.recoveryParam !== recId) logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
          }
          if (result.r == null || !isHexString(result.r)) logger.throwArgumentError("signature missing or invalid r", "signature", signature);
          else result.r = hexZeroPad(result.r, 32);
          if (result.s == null || !isHexString(result.s)) logger.throwArgumentError("signature missing or invalid s", "signature", signature);
          else result.s = hexZeroPad(result.s, 32);
          const vs = arrayify(result.s);
          if (vs[0] >= 128) logger.throwArgumentError("signature s out of range", "signature", signature);
          if (result.recoveryParam) vs[0] |= 0x80;
          const _vs = hexlify(vs);
          if (result._vs) {
              if (!isHexString(result._vs)) logger.throwArgumentError("signature invalid _vs", "signature", signature);
              result._vs = hexZeroPad(result._vs, 32);
          }
          // Set or check the _vs
          if (result._vs == null) result._vs = _vs;
          else if (result._vs !== _vs) logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
      }
      result.yParityAndS = result._vs;
      result.compact = result.r + result.yParityAndS.substring(2);
      return result;
  }
  function joinSignature(signature) {
      signature = splitSignature(signature);
      return hexlify(concat([
          signature.r,
          signature.s,
          signature.recoveryParam ? "0x1c" : "0x1b"
      ]));
  }
  
  },{"@ethersproject/logger":"hLvB2","./_version":"4BMks","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"hLvB2":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "LogLevel", ()=>LogLevel);
  parcelHelpers.export(exports, "ErrorCode", ()=>ErrorCode);
  parcelHelpers.export(exports, "Logger", ()=>Logger);
  var _version = require("./_version");
  "use strict";
  let _permanentCensorErrors = false;
  let _censorErrors = false;
  const LogLevels = {
      debug: 1,
      "default": 2,
      info: 2,
      warning: 3,
      error: 4,
      off: 5
  };
  let _logLevel = LogLevels["default"];
  let _globalLogger = null;
  function _checkNormalize() {
      try {
          const missing = [];
          // Make sure all forms of normalization are supported
          [
              "NFD",
              "NFC",
              "NFKD",
              "NFKC"
          ].forEach((form)=>{
              try {
                  if ("test".normalize(form) !== "test") throw new Error("bad normalize");
              } catch (error) {
                  missing.push(form);
              }
          });
          if (missing.length) throw new Error("missing " + missing.join(", "));
          if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) throw new Error("broken implementation");
      } catch (error) {
          return error.message;
      }
      return null;
  }
  const _normalizeError = _checkNormalize();
  var LogLevel;
  (function(LogLevel) {
      LogLevel["DEBUG"] = "DEBUG";
      LogLevel["INFO"] = "INFO";
      LogLevel["WARNING"] = "WARNING";
      LogLevel["ERROR"] = "ERROR";
      LogLevel["OFF"] = "OFF";
  })(LogLevel || (LogLevel = {}));
  var ErrorCode;
  (function(ErrorCode) {
      ///////////////////
      // Generic Errors
      // Unknown Error
      ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
      // Not Implemented
      ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
      // Unsupported Operation
      //   - operation
      ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
      // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
      //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
      ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
      // Some sort of bad response from the server
      ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
      // Timeout
      ErrorCode["TIMEOUT"] = "TIMEOUT";
      ///////////////////
      // Operational  Errors
      // Buffer Overrun
      ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
      // Numeric Fault
      //   - operation: the operation being executed
      //   - fault: the reason this faulted
      ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
      ///////////////////
      // Argument Errors
      // Missing new operator to an object
      //  - name: The name of the class
      ErrorCode["MISSING_NEW"] = "MISSING_NEW";
      // Invalid argument (e.g. value is incompatible with type) to a function:
      //   - argument: The argument name that was invalid
      //   - value: The value of the argument
      ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
      // Missing argument to a function:
      //   - count: The number of arguments received
      //   - expectedCount: The number of arguments expected
      ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
      // Too many arguments
      //   - count: The number of arguments received
      //   - expectedCount: The number of arguments expected
      ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
      ///////////////////
      // Blockchain Errors
      // Call exception
      //  - transaction: the transaction
      //  - address?: the contract address
      //  - args?: The arguments passed into the function
      //  - method?: The Solidity method signature
      //  - errorSignature?: The EIP848 error signature
      //  - errorArgs?: The EIP848 error parameters
      //  - reason: The reason (only for EIP848 "Error(string)")
      ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
      // Insufficient funds (< value + gasLimit * gasPrice)
      //   - transaction: the transaction attempted
      ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
      // Nonce has already been used
      //   - transaction: the transaction attempted
      ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
      // The replacement fee for the transaction is too low
      //   - transaction: the transaction attempted
      ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
      // The gas limit could not be estimated
      //   - transaction: the transaction passed to estimateGas
      ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
      // The transaction was replaced by one with a higher gas price
      //   - reason: "cancelled", "replaced" or "repriced"
      //   - cancelled: true if reason == "cancelled" or reason == "replaced")
      //   - hash: original transaction hash
      //   - replacement: the full TransactionsResponse for the replacement
      //   - receipt: the receipt of the replacement
      ErrorCode["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      ///////////////////
      // Interaction Errors
      // The user rejected the action, such as signing a message or sending
      // a transaction
      ErrorCode["ACTION_REJECTED"] = "ACTION_REJECTED";
  })(ErrorCode || (ErrorCode = {}));
  const HEX = "0123456789abcdef";
  class Logger {
      constructor(version){
          Object.defineProperty(this, "version", {
              enumerable: true,
              value: version,
              writable: false
          });
      }
      _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels[level] == null) this.throwArgumentError("invalid log level name", "logLevel", logLevel);
          if (_logLevel > LogLevels[level]) return;
          console.log.apply(console, args);
      }
      debug(...args) {
          this._log(Logger.levels.DEBUG, args);
      }
      info(...args) {
          this._log(Logger.levels.INFO, args);
      }
      warn(...args) {
          this._log(Logger.levels.WARNING, args);
      }
      makeError(message, code, params) {
          // Errors are being censored
          if (_censorErrors) return this.makeError("censored error", code, {});
          if (!code) code = Logger.errors.UNKNOWN_ERROR;
          if (!params) params = {};
          const messageDetails = [];
          Object.keys(params).forEach((key)=>{
              const value = params[key];
              try {
                  if (value instanceof Uint8Array) {
                      let hex = "";
                      for(let i = 0; i < value.length; i++){
                          hex += HEX[value[i] >> 4];
                          hex += HEX[value[i] & 0x0f];
                      }
                      messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
                  } else messageDetails.push(key + "=" + JSON.stringify(value));
              } catch (error) {
                  messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
              }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          let url = "";
          switch(code){
              case ErrorCode.NUMERIC_FAULT:
                  {
                      url = "NUMERIC_FAULT";
                      const fault = message;
                      switch(fault){
                          case "overflow":
                          case "underflow":
                          case "division-by-zero":
                              url += "-" + fault;
                              break;
                          case "negative-power":
                          case "negative-width":
                              url += "-unsupported";
                              break;
                          case "unbound-bitwise-result":
                              url += "-unbound-result";
                              break;
                      }
                      break;
                  }
              case ErrorCode.CALL_EXCEPTION:
              case ErrorCode.INSUFFICIENT_FUNDS:
              case ErrorCode.MISSING_NEW:
              case ErrorCode.NONCE_EXPIRED:
              case ErrorCode.REPLACEMENT_UNDERPRICED:
              case ErrorCode.TRANSACTION_REPLACED:
              case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
                  url = code;
                  break;
          }
          if (url) message += " [ See: https://links.ethers.org/v5-errors-" + url + " ]";
          if (messageDetails.length) message += " (" + messageDetails.join(", ") + ")";
          // @TODO: Any??
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function(key) {
              error[key] = params[key];
          });
          return error;
      }
      throwError(message, code, params) {
          throw this.makeError(message, code, params);
      }
      throwArgumentError(message, name, value) {
          return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
              argument: name,
              value: value
          });
      }
      assert(condition, message, code, params) {
          if (!!condition) return;
          this.throwError(message, code, params);
      }
      assertArgument(condition, message, name, value) {
          if (!!condition) return;
          this.throwArgumentError(message, name, value);
      }
      checkNormalize(message) {
          if (message == null) message = "platform missing String.prototype.normalize";
          if (_normalizeError) this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "String.prototype.normalize",
              form: _normalizeError
          });
      }
      checkSafeUint53(value, message) {
          if (typeof value !== "number") return;
          if (message == null) message = "value not safe";
          if (value < 0 || value >= 0x1fffffffffffff) this.throwError(message, Logger.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value: value
          });
          if (value % 1) this.throwError(message, Logger.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value: value
          });
      }
      checkArgumentCount(count, expectedCount, message) {
          if (message) message = ": " + message;
          else message = "";
          if (count < expectedCount) this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
              count: count,
              expectedCount: expectedCount
          });
          if (count > expectedCount) this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
              count: count,
              expectedCount: expectedCount
          });
      }
      checkNew(target, kind) {
          if (target === Object || target == null) this.throwError("missing new", Logger.errors.MISSING_NEW, {
              name: kind.name
          });
      }
      checkAbstract(target, kind) {
          if (target === kind) this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, {
              name: target.name,
              operation: "new"
          });
          else if (target === Object || target == null) this.throwError("missing new", Logger.errors.MISSING_NEW, {
              name: kind.name
          });
      }
      static globalLogger() {
          if (!_globalLogger) _globalLogger = new Logger((0, _version.version));
          return _globalLogger;
      }
      static setCensorship(censorship, permanent) {
          if (!censorship && permanent) this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "setCensorship"
          });
          if (_permanentCensorErrors) {
              if (!censorship) return;
              this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "setCensorship"
              });
          }
          _censorErrors = !!censorship;
          _permanentCensorErrors = !!permanent;
      }
      static setLogLevel(logLevel) {
          const level = LogLevels[logLevel.toLowerCase()];
          if (level == null) {
              Logger.globalLogger().warn("invalid log level - " + logLevel);
              return;
          }
          _logLevel = level;
      }
      static from(version) {
          return new Logger(version);
      }
  }
  Logger.errors = ErrorCode;
  Logger.levels = LogLevel;
  
  },{"./_version":"7HqMB","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"7HqMB":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "version", ()=>version);
  const version = "logger/5.7.0";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"4BMks":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "version", ()=>version);
  const version = "bytes/5.7.0";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"gN5k0":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "version", ()=>version);
  const version = "bignumber/5.7.0";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"4kqiW":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "formatFixed", ()=>formatFixed);
  parcelHelpers.export(exports, "parseFixed", ()=>parseFixed);
  parcelHelpers.export(exports, "FixedFormat", ()=>FixedFormat);
  parcelHelpers.export(exports, "FixedNumber", ()=>FixedNumber);
  var _bytes = require("@ethersproject/bytes");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  var _bignumber = require("./bignumber");
  "use strict";
  const logger = new (0, _logger.Logger)((0, _version.version));
  const _constructorGuard = {};
  const Zero = (0, _bignumber.BigNumber).from(0);
  const NegativeOne = (0, _bignumber.BigNumber).from(-1);
  function throwFault(message, fault, operation, value) {
      const params = {
          fault: fault,
          operation: operation
      };
      if (value !== undefined) params.value = value;
      return logger.throwError(message, (0, _logger.Logger).errors.NUMERIC_FAULT, params);
  }
  // Constant to pull zeros from for multipliers
  let zeros = "0";
  while(zeros.length < 256)zeros += zeros;
  // Returns a string "1" followed by decimal "0"s
  function getMultiplier(decimals) {
      if (typeof decimals !== "number") try {
          decimals = (0, _bignumber.BigNumber).from(decimals).toNumber();
      } catch (e) {}
      if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) return "1" + zeros.substring(0, decimals);
      return logger.throwArgumentError("invalid decimal size", "decimals", decimals);
  }
  function formatFixed(value, decimals) {
      if (decimals == null) decimals = 0;
      const multiplier = getMultiplier(decimals);
      // Make sure wei is a big number (convert as necessary)
      value = (0, _bignumber.BigNumber).from(value);
      const negative = value.lt(Zero);
      if (negative) value = value.mul(NegativeOne);
      let fraction = value.mod(multiplier).toString();
      while(fraction.length < multiplier.length - 1)fraction = "0" + fraction;
      // Strip training 0
      fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
      const whole = value.div(multiplier).toString();
      if (multiplier.length === 1) value = whole;
      else value = whole + "." + fraction;
      if (negative) value = "-" + value;
      return value;
  }
  function parseFixed(value, decimals) {
      if (decimals == null) decimals = 0;
      const multiplier = getMultiplier(decimals);
      if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) logger.throwArgumentError("invalid decimal value", "value", value);
      // Is it negative?
      const negative = value.substring(0, 1) === "-";
      if (negative) value = value.substring(1);
      if (value === ".") logger.throwArgumentError("missing value", "value", value);
      // Split it into a whole and fractional part
      const comps = value.split(".");
      if (comps.length > 2) logger.throwArgumentError("too many decimal points", "value", value);
      let whole = comps[0], fraction = comps[1];
      if (!whole) whole = "0";
      if (!fraction) fraction = "0";
      // Trim trailing zeros
      while(fraction[fraction.length - 1] === "0")fraction = fraction.substring(0, fraction.length - 1);
      // Check the fraction doesn't exceed our decimals size
      if (fraction.length > multiplier.length - 1) throwFault("fractional component exceeds decimals", "underflow", "parseFixed");
      // If decimals is 0, we have an empty string for fraction
      if (fraction === "") fraction = "0";
      // Fully pad the string with zeros to get to wei
      while(fraction.length < multiplier.length - 1)fraction += "0";
      const wholeValue = (0, _bignumber.BigNumber).from(whole);
      const fractionValue = (0, _bignumber.BigNumber).from(fraction);
      let wei = wholeValue.mul(multiplier).add(fractionValue);
      if (negative) wei = wei.mul(NegativeOne);
      return wei;
  }
  class FixedFormat {
      constructor(constructorGuard, signed, width, decimals){
          if (constructorGuard !== _constructorGuard) logger.throwError("cannot use FixedFormat constructor; use FixedFormat.from", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
              operation: "new FixedFormat"
          });
          this.signed = signed;
          this.width = width;
          this.decimals = decimals;
          this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
          this._multiplier = getMultiplier(decimals);
          Object.freeze(this);
      }
      static from(value) {
          if (value instanceof FixedFormat) return value;
          if (typeof value === "number") value = `fixed128x${value}`;
          let signed = true;
          let width = 128;
          let decimals = 18;
          if (typeof value === "string") {
              if (value === "fixed") ;
              else if (value === "ufixed") signed = false;
              else {
                  const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
                  if (!match) logger.throwArgumentError("invalid fixed format", "format", value);
                  signed = match[1] !== "u";
                  width = parseInt(match[2]);
                  decimals = parseInt(match[3]);
              }
          } else if (value) {
              const check = (key, type, defaultValue)=>{
                  if (value[key] == null) return defaultValue;
                  if (typeof value[key] !== type) logger.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
                  return value[key];
              };
              signed = check("signed", "boolean", signed);
              width = check("width", "number", width);
              decimals = check("decimals", "number", decimals);
          }
          if (width % 8) logger.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
          if (decimals > 80) logger.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
          return new FixedFormat(_constructorGuard, signed, width, decimals);
      }
  }
  class FixedNumber {
      constructor(constructorGuard, hex, value, format){
          if (constructorGuard !== _constructorGuard) logger.throwError("cannot use FixedNumber constructor; use FixedNumber.from", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
              operation: "new FixedFormat"
          });
          this.format = format;
          this._hex = hex;
          this._value = value;
          this._isFixedNumber = true;
          Object.freeze(this);
      }
      _checkFormat(other) {
          if (this.format.name !== other.format.name) logger.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
      }
      addUnsafe(other) {
          this._checkFormat(other);
          const a = parseFixed(this._value, this.format.decimals);
          const b = parseFixed(other._value, other.format.decimals);
          return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
      }
      subUnsafe(other) {
          this._checkFormat(other);
          const a = parseFixed(this._value, this.format.decimals);
          const b = parseFixed(other._value, other.format.decimals);
          return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
      }
      mulUnsafe(other) {
          this._checkFormat(other);
          const a = parseFixed(this._value, this.format.decimals);
          const b = parseFixed(other._value, other.format.decimals);
          return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
      }
      divUnsafe(other) {
          this._checkFormat(other);
          const a = parseFixed(this._value, this.format.decimals);
          const b = parseFixed(other._value, other.format.decimals);
          return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
      }
      floor() {
          const comps = this.toString().split(".");
          if (comps.length === 1) comps.push("0");
          let result = FixedNumber.from(comps[0], this.format);
          const hasFraction = !comps[1].match(/^(0*)$/);
          if (this.isNegative() && hasFraction) result = result.subUnsafe(ONE.toFormat(result.format));
          return result;
      }
      ceiling() {
          const comps = this.toString().split(".");
          if (comps.length === 1) comps.push("0");
          let result = FixedNumber.from(comps[0], this.format);
          const hasFraction = !comps[1].match(/^(0*)$/);
          if (!this.isNegative() && hasFraction) result = result.addUnsafe(ONE.toFormat(result.format));
          return result;
      }
      // @TODO: Support other rounding algorithms
      round(decimals) {
          if (decimals == null) decimals = 0;
          // If we are already in range, we're done
          const comps = this.toString().split(".");
          if (comps.length === 1) comps.push("0");
          if (decimals < 0 || decimals > 80 || decimals % 1) logger.throwArgumentError("invalid decimal count", "decimals", decimals);
          if (comps[1].length <= decimals) return this;
          const factor = FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
          const bump = BUMP.toFormat(this.format);
          return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
      }
      isZero() {
          return this._value === "0.0" || this._value === "0";
      }
      isNegative() {
          return this._value[0] === "-";
      }
      toString() {
          return this._value;
      }
      toHexString(width) {
          if (width == null) return this._hex;
          if (width % 8) logger.throwArgumentError("invalid byte width", "width", width);
          const hex = (0, _bignumber.BigNumber).from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
          return (0, _bytes.hexZeroPad)(hex, width / 8);
      }
      toUnsafeFloat() {
          return parseFloat(this.toString());
      }
      toFormat(format) {
          return FixedNumber.fromString(this._value, format);
      }
      static fromValue(value, decimals, format) {
          // If decimals looks more like a format, and there is no format, shift the parameters
          if (format == null && decimals != null && !(0, _bignumber.isBigNumberish)(decimals)) {
              format = decimals;
              decimals = null;
          }
          if (decimals == null) decimals = 0;
          if (format == null) format = "fixed";
          return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
      }
      static fromString(value, format) {
          if (format == null) format = "fixed";
          const fixedFormat = FixedFormat.from(format);
          const numeric = parseFixed(value, fixedFormat.decimals);
          if (!fixedFormat.signed && numeric.lt(Zero)) throwFault("unsigned value cannot be negative", "overflow", "value", value);
          let hex = null;
          if (fixedFormat.signed) hex = numeric.toTwos(fixedFormat.width).toHexString();
          else {
              hex = numeric.toHexString();
              hex = (0, _bytes.hexZeroPad)(hex, fixedFormat.width / 8);
          }
          const decimal = formatFixed(numeric, fixedFormat.decimals);
          return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);
      }
      static fromBytes(value, format) {
          if (format == null) format = "fixed";
          const fixedFormat = FixedFormat.from(format);
          if ((0, _bytes.arrayify)(value).length > fixedFormat.width / 8) throw new Error("overflow");
          let numeric = (0, _bignumber.BigNumber).from(value);
          if (fixedFormat.signed) numeric = numeric.fromTwos(fixedFormat.width);
          const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
          const decimal = formatFixed(numeric, fixedFormat.decimals);
          return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);
      }
      static from(value, format) {
          if (typeof value === "string") return FixedNumber.fromString(value, format);
          if ((0, _bytes.isBytes)(value)) return FixedNumber.fromBytes(value, format);
          try {
              return FixedNumber.fromValue(value, 0, format);
          } catch (error) {
              // Allow NUMERIC_FAULT to bubble up
              if (error.code !== (0, _logger.Logger).errors.INVALID_ARGUMENT) throw error;
          }
          return logger.throwArgumentError("invalid FixedNumber value", "value", value);
      }
      static isFixedNumber(value) {
          return !!(value && value._isFixedNumber);
      }
  }
  const ONE = FixedNumber.from(1);
  const BUMP = FixedNumber.from("0.5");
  
  },{"@ethersproject/bytes":"htrqZ","@ethersproject/logger":"hLvB2","./_version":"gN5k0","./bignumber":"eCYd8","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"h3GJb":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "defineReadOnly", ()=>defineReadOnly);
  // Crawl up the constructor chain to find a static method
  parcelHelpers.export(exports, "getStatic", ()=>getStatic);
  parcelHelpers.export(exports, "resolveProperties", ()=>resolveProperties);
  parcelHelpers.export(exports, "checkProperties", ()=>checkProperties);
  parcelHelpers.export(exports, "shallowCopy", ()=>shallowCopy);
  parcelHelpers.export(exports, "deepCopy", ()=>deepCopy);
  parcelHelpers.export(exports, "Description", ()=>Description);
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  "use strict";
  var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
          });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
              try {
                  step(generator.next(value));
              } catch (e) {
                  reject(e);
              }
          }
          function rejected(value) {
              try {
                  step(generator["throw"](value));
              } catch (e) {
                  reject(e);
              }
          }
          function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const logger = new (0, _logger.Logger)((0, _version.version));
  function defineReadOnly(object, name, value) {
      Object.defineProperty(object, name, {
          enumerable: true,
          value: value,
          writable: false
      });
  }
  function getStatic(ctor, key) {
      for(let i = 0; i < 32; i++){
          if (ctor[key]) return ctor[key];
          if (!ctor.prototype || typeof ctor.prototype !== "object") break;
          ctor = Object.getPrototypeOf(ctor.prototype).constructor;
      }
      return null;
  }
  function resolveProperties(object) {
      return __awaiter(this, void 0, void 0, function*() {
          const promises = Object.keys(object).map((key)=>{
              const value = object[key];
              return Promise.resolve(value).then((v)=>({
                      key: key,
                      value: v
                  }));
          });
          const results = yield Promise.all(promises);
          return results.reduce((accum, result)=>{
              accum[result.key] = result.value;
              return accum;
          }, {});
      });
  }
  function checkProperties(object, properties) {
      if (!object || typeof object !== "object") logger.throwArgumentError("invalid object", "object", object);
      Object.keys(object).forEach((key)=>{
          if (!properties[key]) logger.throwArgumentError("invalid object key - " + key, "transaction:" + key, object);
      });
  }
  function shallowCopy(object) {
      const result = {};
      for(const key in object)result[key] = object[key];
      return result;
  }
  const opaque = {
      bigint: true,
      boolean: true,
      "function": true,
      number: true,
      string: true
  };
  function _isFrozen(object) {
      // Opaque objects are not mutable, so safe to copy by assignment
      if (object === undefined || object === null || opaque[typeof object]) return true;
      if (Array.isArray(object) || typeof object === "object") {
          if (!Object.isFrozen(object)) return false;
          const keys = Object.keys(object);
          for(let i = 0; i < keys.length; i++){
              let value = null;
              try {
                  value = object[keys[i]];
              } catch (error) {
                  continue;
              }
              if (!_isFrozen(value)) return false;
          }
          return true;
      }
      return logger.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
  }
  // Returns a new copy of object, such that no properties may be replaced.
  // New properties may be added only to objects.
  function _deepCopy(object) {
      if (_isFrozen(object)) return object;
      // Arrays are mutable, so we need to create a copy
      if (Array.isArray(object)) return Object.freeze(object.map((item)=>deepCopy(item)));
      if (typeof object === "object") {
          const result = {};
          for(const key in object){
              const value = object[key];
              if (value === undefined) continue;
              defineReadOnly(result, key, deepCopy(value));
          }
          return result;
      }
      return logger.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
  }
  function deepCopy(object) {
      return _deepCopy(object);
  }
  class Description {
      constructor(info){
          for(const key in info)this[key] = deepCopy(info[key]);
      }
  }
  
  },{"@ethersproject/logger":"hLvB2","./_version":"5xVnM","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"5xVnM":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "version", ()=>version);
  const version = "properties/5.7.0";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"7ahSC":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "version", ()=>version);
  const version = "abstract-provider/5.7.0";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"6JNhW":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  getNetwork
   *
   *  Converts a named common networks or chain ID (network ID) to a Network
   *  and verifies a network is a valid Network..
   */ parcelHelpers.export(exports, "getNetwork", ()=>getNetwork);
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  "use strict";
  const logger = new (0, _logger.Logger)((0, _version.version));
  function isRenetworkable(value) {
      return value && typeof value.renetwork === "function";
  }
  function ethDefaultProvider(network) {
      const func = function(providers, options) {
          if (options == null) options = {};
          const providerList = [];
          if (providers.InfuraProvider && options.infura !== "-") try {
              providerList.push(new providers.InfuraProvider(network, options.infura));
          } catch (error) {}
          if (providers.EtherscanProvider && options.etherscan !== "-") try {
              providerList.push(new providers.EtherscanProvider(network, options.etherscan));
          } catch (error) {}
          if (providers.AlchemyProvider && options.alchemy !== "-") try {
              providerList.push(new providers.AlchemyProvider(network, options.alchemy));
          } catch (error) {}
          if (providers.PocketProvider && options.pocket !== "-") {
              // These networks are currently faulty on Pocket as their
              // network does not handle the Berlin hardfork, which is
              // live on these ones.
              // @TODO: This goes away once Pocket has upgraded their nodes
              const skip = [
                  "goerli",
                  "ropsten",
                  "rinkeby",
                  "sepolia"
              ];
              try {
                  const provider = new providers.PocketProvider(network, options.pocket);
                  if (provider.network && skip.indexOf(provider.network.name) === -1) providerList.push(provider);
              } catch (error) {}
          }
          if (providers.CloudflareProvider && options.cloudflare !== "-") try {
              providerList.push(new providers.CloudflareProvider(network));
          } catch (error) {}
          if (providers.AnkrProvider && options.ankr !== "-") try {
              const skip = [
                  "ropsten"
              ];
              const provider = new providers.AnkrProvider(network, options.ankr);
              if (provider.network && skip.indexOf(provider.network.name) === -1) providerList.push(provider);
          } catch (error) {}
          if (providerList.length === 0) return null;
          if (providers.FallbackProvider) {
              let quorum = 1;
              if (options.quorum != null) quorum = options.quorum;
              else if (network === "homestead") quorum = 2;
              return new providers.FallbackProvider(providerList, quorum);
          }
          return providerList[0];
      };
      func.renetwork = function(network) {
          return ethDefaultProvider(network);
      };
      return func;
  }
  function etcDefaultProvider(url, network) {
      const func = function(providers, options) {
          if (providers.JsonRpcProvider) return new providers.JsonRpcProvider(url, network);
          return null;
      };
      func.renetwork = function(network) {
          return etcDefaultProvider(url, network);
      };
      return func;
  }
  const homestead = {
      chainId: 1,
      ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
      name: "homestead",
      _defaultProvider: ethDefaultProvider("homestead")
  };
  const ropsten = {
      chainId: 3,
      ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
      name: "ropsten",
      _defaultProvider: ethDefaultProvider("ropsten")
  };
  const classicMordor = {
      chainId: 63,
      name: "classicMordor",
      _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
  };
  // See: https://chainlist.org
  const networks = {
      unspecified: {
          chainId: 0,
          name: "unspecified"
      },
      homestead: homestead,
      mainnet: homestead,
      morden: {
          chainId: 2,
          name: "morden"
      },
      ropsten: ropsten,
      testnet: ropsten,
      rinkeby: {
          chainId: 4,
          ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
          name: "rinkeby",
          _defaultProvider: ethDefaultProvider("rinkeby")
      },
      kovan: {
          chainId: 42,
          name: "kovan",
          _defaultProvider: ethDefaultProvider("kovan")
      },
      goerli: {
          chainId: 5,
          ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
          name: "goerli",
          _defaultProvider: ethDefaultProvider("goerli")
      },
      kintsugi: {
          chainId: 1337702,
          name: "kintsugi"
      },
      sepolia: {
          chainId: 11155111,
          name: "sepolia",
          _defaultProvider: ethDefaultProvider("sepolia")
      },
      // ETC (See: #351)
      classic: {
          chainId: 61,
          name: "classic",
          _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/etc", "classic")
      },
      classicMorden: {
          chainId: 62,
          name: "classicMorden"
      },
      classicMordor: classicMordor,
      classicTestnet: classicMordor,
      classicKotti: {
          chainId: 6,
          name: "classicKotti",
          _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/kotti", "classicKotti")
      },
      xdai: {
          chainId: 100,
          name: "xdai"
      },
      matic: {
          chainId: 137,
          name: "matic",
          _defaultProvider: ethDefaultProvider("matic")
      },
      maticmum: {
          chainId: 80001,
          name: "maticmum"
      },
      optimism: {
          chainId: 10,
          name: "optimism",
          _defaultProvider: ethDefaultProvider("optimism")
      },
      "optimism-kovan": {
          chainId: 69,
          name: "optimism-kovan"
      },
      "optimism-goerli": {
          chainId: 420,
          name: "optimism-goerli"
      },
      arbitrum: {
          chainId: 42161,
          name: "arbitrum"
      },
      "arbitrum-rinkeby": {
          chainId: 421611,
          name: "arbitrum-rinkeby"
      },
      "arbitrum-goerli": {
          chainId: 421613,
          name: "arbitrum-goerli"
      },
      bnb: {
          chainId: 56,
          name: "bnb"
      },
      bnbt: {
          chainId: 97,
          name: "bnbt"
      }
  };
  function getNetwork(network) {
      // No network (null)
      if (network == null) return null;
      if (typeof network === "number") {
          for(const name in networks){
              const standard = networks[name];
              if (standard.chainId === network) return {
                  name: standard.name,
                  chainId: standard.chainId,
                  ensAddress: standard.ensAddress || null,
                  _defaultProvider: standard._defaultProvider || null
              };
          }
          return {
              chainId: network,
              name: "unknown"
          };
      }
      if (typeof network === "string") {
          const standard = networks[network];
          if (standard == null) return null;
          return {
              name: standard.name,
              chainId: standard.chainId,
              ensAddress: standard.ensAddress,
              _defaultProvider: standard._defaultProvider || null
          };
      }
      const standard = networks[network.name];
      // Not a standard network; check that it is a valid network in general
      if (!standard) {
          if (typeof network.chainId !== "number") logger.throwArgumentError("invalid network chainId", "network", network);
          return network;
      }
      // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)
      if (network.chainId !== 0 && network.chainId !== standard.chainId) logger.throwArgumentError("network chainId mismatch", "network", network);
      // @TODO: In the next major version add an attach function to a defaultProvider
      // class and move the _defaultProvider internal to this file (extend Network)
      let defaultProvider = network._defaultProvider || null;
      if (defaultProvider == null && standard._defaultProvider) {
          if (isRenetworkable(standard._defaultProvider)) defaultProvider = standard._defaultProvider.renetwork(network);
          else defaultProvider = standard._defaultProvider;
      }
      // Standard Network (allow overriding the ENS address)
      return {
          name: network.name,
          chainId: standard.chainId,
          ensAddress: network.ensAddress || standard.ensAddress || null,
          _defaultProvider: defaultProvider
      };
  }
  
  },{"@ethersproject/logger":"hLvB2","./_version":"9eROf","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"9eROf":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "version", ()=>version);
  const version = "networks/5.7.1";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"7OFAa":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "Event", ()=>Event);
  parcelHelpers.export(exports, "Resolver", ()=>Resolver);
  parcelHelpers.export(exports, "BaseProvider", ()=>BaseProvider);
  var _abstractProvider = require("@ethersproject/abstract-provider");
  var _base64 = require("@ethersproject/base64");
  var _basex = require("@ethersproject/basex");
  var _bignumber = require("@ethersproject/bignumber");
  var _bytes = require("@ethersproject/bytes");
  var _constants = require("@ethersproject/constants");
  var _hash = require("@ethersproject/hash");
  var _networks = require("@ethersproject/networks");
  var _properties = require("@ethersproject/properties");
  var _sha2 = require("@ethersproject/sha2");
  var _strings = require("@ethersproject/strings");
  var _web = require("@ethersproject/web");
  var _bech32 = require("bech32");
  var _bech32Default = parcelHelpers.interopDefault(_bech32);
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  var _formatter = require("./formatter");
  "use strict";
  var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
          });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
              try {
                  step(generator.next(value));
              } catch (e) {
                  reject(e);
              }
          }
          function rejected(value) {
              try {
                  step(generator["throw"](value));
              } catch (e) {
                  reject(e);
              }
          }
          function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const logger = new (0, _logger.Logger)((0, _version.version));
  const MAX_CCIP_REDIRECTS = 10;
  //////////////////////////////
  // Event Serializeing
  function checkTopic(topic) {
      if (topic == null) return "null";
      if ((0, _bytes.hexDataLength)(topic) !== 32) logger.throwArgumentError("invalid topic", "topic", topic);
      return topic.toLowerCase();
  }
  function serializeTopics(topics) {
      // Remove trailing null AND-topics; they are redundant
      topics = topics.slice();
      while(topics.length > 0 && topics[topics.length - 1] == null)topics.pop();
      return topics.map((topic)=>{
          if (Array.isArray(topic)) {
              // Only track unique OR-topics
              const unique = {};
              topic.forEach((topic)=>{
                  unique[checkTopic(topic)] = true;
              });
              // The order of OR-topics does not matter
              const sorted = Object.keys(unique);
              sorted.sort();
              return sorted.join("|");
          } else return checkTopic(topic);
      }).join("&");
  }
  function deserializeTopics(data) {
      if (data === "") return [];
      return data.split(/&/g).map((topic)=>{
          if (topic === "") return [];
          const comps = topic.split("|").map((topic)=>{
              return topic === "null" ? null : topic;
          });
          return comps.length === 1 ? comps[0] : comps;
      });
  }
  function getEventTag(eventName) {
      if (typeof eventName === "string") {
          eventName = eventName.toLowerCase();
          if ((0, _bytes.hexDataLength)(eventName) === 32) return "tx:" + eventName;
          if (eventName.indexOf(":") === -1) return eventName;
      } else if (Array.isArray(eventName)) return "filter:*:" + serializeTopics(eventName);
      else if ((0, _abstractProvider.ForkEvent).isForkEvent(eventName)) {
          logger.warn("not implemented");
          throw new Error("not implemented");
      } else if (eventName && typeof eventName === "object") return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
      throw new Error("invalid event - " + eventName);
  }
  //////////////////////////////
  // Helper Object
  function getTime() {
      return new Date().getTime();
  }
  function stall(duration) {
      return new Promise((resolve)=>{
          setTimeout(resolve, duration);
      });
  }
  //////////////////////////////
  // Provider Object
  /**
   *  EventType
   *   - "block"
   *   - "poll"
   *   - "didPoll"
   *   - "pending"
   *   - "error"
   *   - "network"
   *   - filter
   *   - topics array
   *   - transaction hash
   */ const PollableEvents = [
      "block",
      "network",
      "pending",
      "poll"
  ];
  class Event {
      constructor(tag, listener, once){
          (0, _properties.defineReadOnly)(this, "tag", tag);
          (0, _properties.defineReadOnly)(this, "listener", listener);
          (0, _properties.defineReadOnly)(this, "once", once);
          this._lastBlockNumber = -2;
          this._inflight = false;
      }
      get event() {
          switch(this.type){
              case "tx":
                  return this.hash;
              case "filter":
                  return this.filter;
          }
          return this.tag;
      }
      get type() {
          return this.tag.split(":")[0];
      }
      get hash() {
          const comps = this.tag.split(":");
          if (comps[0] !== "tx") return null;
          return comps[1];
      }
      get filter() {
          const comps = this.tag.split(":");
          if (comps[0] !== "filter") return null;
          const address = comps[1];
          const topics = deserializeTopics(comps[2]);
          const filter = {};
          if (topics.length > 0) filter.topics = topics;
          if (address && address !== "*") filter.address = address;
          return filter;
      }
      pollable() {
          return this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0;
      }
  }
  // https://github.com/satoshilabs/slips/blob/master/slip-0044.md
  const coinInfos = {
      "0": {
          symbol: "btc",
          p2pkh: 0x00,
          p2sh: 0x05,
          prefix: "bc"
      },
      "2": {
          symbol: "ltc",
          p2pkh: 0x30,
          p2sh: 0x32,
          prefix: "ltc"
      },
      "3": {
          symbol: "doge",
          p2pkh: 0x1e,
          p2sh: 0x16
      },
      "60": {
          symbol: "eth",
          ilk: "eth"
      },
      "61": {
          symbol: "etc",
          ilk: "eth"
      },
      "700": {
          symbol: "xdai",
          ilk: "eth"
      }
  };
  function bytes32ify(value) {
      return (0, _bytes.hexZeroPad)((0, _bignumber.BigNumber).from(value).toHexString(), 32);
  }
  // Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)
  function base58Encode(data) {
      return (0, _basex.Base58).encode((0, _bytes.concat)([
          data,
          (0, _bytes.hexDataSlice)((0, _sha2.sha256)((0, _sha2.sha256)(data)), 0, 4)
      ]));
  }
  const matcherIpfs = new RegExp("^(ipfs)://(.*)$", "i");
  const matchers = [
      new RegExp("^(https)://(.*)$", "i"),
      new RegExp("^(data):(.*)$", "i"),
      matcherIpfs,
      new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
  ];
  function _parseString(result, start) {
      try {
          return (0, _strings.toUtf8String)(_parseBytes(result, start));
      } catch (error) {}
      return null;
  }
  function _parseBytes(result, start) {
      if (result === "0x") return null;
      const offset = (0, _bignumber.BigNumber).from((0, _bytes.hexDataSlice)(result, start, start + 32)).toNumber();
      const length = (0, _bignumber.BigNumber).from((0, _bytes.hexDataSlice)(result, offset, offset + 32)).toNumber();
      return (0, _bytes.hexDataSlice)(result, offset + 32, offset + 32 + length);
  }
  // Trim off the ipfs:// prefix and return the default gateway URL
  function getIpfsLink(link) {
      if (link.match(/^ipfs:\/\/ipfs\//i)) link = link.substring(12);
      else if (link.match(/^ipfs:\/\//i)) link = link.substring(7);
      else logger.throwArgumentError("unsupported IPFS format", "link", link);
      return `https:/\/gateway.ipfs.io/ipfs/${link}`;
  }
  function numPad(value) {
      const result = (0, _bytes.arrayify)(value);
      if (result.length > 32) throw new Error("internal; should not happen");
      const padded = new Uint8Array(32);
      padded.set(result, 32 - result.length);
      return padded;
  }
  function bytesPad(value) {
      if (value.length % 32 === 0) return value;
      const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
      result.set(value);
      return result;
  }
  // ABI Encodes a series of (bytes, bytes, ...)
  function encodeBytes(datas) {
      const result = [];
      let byteCount = 0;
      // Add place-holders for pointers as we add items
      for(let i = 0; i < datas.length; i++){
          result.push(null);
          byteCount += 32;
      }
      for(let i = 0; i < datas.length; i++){
          const data = (0, _bytes.arrayify)(datas[i]);
          // Update the bytes offset
          result[i] = numPad(byteCount);
          // The length and padded value of data
          result.push(numPad(data.length));
          result.push(bytesPad(data));
          byteCount += 32 + Math.ceil(data.length / 32) * 32;
      }
      return (0, _bytes.hexConcat)(result);
  }
  class Resolver {
      // The resolvedAddress is only for creating a ReverseLookup resolver
      constructor(provider, address, name, resolvedAddress){
          (0, _properties.defineReadOnly)(this, "provider", provider);
          (0, _properties.defineReadOnly)(this, "name", name);
          (0, _properties.defineReadOnly)(this, "address", provider.formatter.address(address));
          (0, _properties.defineReadOnly)(this, "_resolvedAddress", resolvedAddress);
      }
      supportsWildcard() {
          if (!this._supportsEip2544) // supportsInterface(bytes4 = selector("resolve(bytes,bytes)"))
          this._supportsEip2544 = this.provider.call({
              to: this.address,
              data: "0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"
          }).then((result)=>{
              return (0, _bignumber.BigNumber).from(result).eq(1);
          }).catch((error)=>{
              if (error.code === (0, _logger.Logger).errors.CALL_EXCEPTION) return false;
              // Rethrow the error: link is down, etc. Let future attempts retry.
              this._supportsEip2544 = null;
              throw error;
          });
          return this._supportsEip2544;
      }
      _fetch(selector, parameters) {
          return __awaiter(this, void 0, void 0, function*() {
              // e.g. keccak256("addr(bytes32,uint256)")
              const tx = {
                  to: this.address,
                  ccipReadEnabled: true,
                  data: (0, _bytes.hexConcat)([
                      selector,
                      (0, _hash.namehash)(this.name),
                      parameters || "0x"
                  ])
              };
              // Wildcard support; use EIP-2544 to resolve the request
              let parseBytes = false;
              if (yield this.supportsWildcard()) {
                  parseBytes = true;
                  // selector("resolve(bytes,bytes)")
                  tx.data = (0, _bytes.hexConcat)([
                      "0x9061b923",
                      encodeBytes([
                          (0, _hash.dnsEncode)(this.name),
                          tx.data
                      ])
                  ]);
              }
              try {
                  let result = yield this.provider.call(tx);
                  if ((0, _bytes.arrayify)(result).length % 32 === 4) logger.throwError("resolver threw error", (0, _logger.Logger).errors.CALL_EXCEPTION, {
                      transaction: tx,
                      data: result
                  });
                  if (parseBytes) result = _parseBytes(result, 0);
                  return result;
              } catch (error) {
                  if (error.code === (0, _logger.Logger).errors.CALL_EXCEPTION) return null;
                  throw error;
              }
          });
      }
      _fetchBytes(selector, parameters) {
          return __awaiter(this, void 0, void 0, function*() {
              const result = yield this._fetch(selector, parameters);
              if (result != null) return _parseBytes(result, 0);
              return null;
          });
      }
      _getAddress(coinType, hexBytes) {
          const coinInfo = coinInfos[String(coinType)];
          if (coinInfo == null) logger.throwError(`unsupported coin type: ${coinType}`, (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
              operation: `getAddress(${coinType})`
          });
          if (coinInfo.ilk === "eth") return this.provider.formatter.address(hexBytes);
          const bytes = (0, _bytes.arrayify)(hexBytes);
          // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG
          if (coinInfo.p2pkh != null) {
              const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
              if (p2pkh) {
                  const length = parseInt(p2pkh[1], 16);
                  if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) return base58Encode((0, _bytes.concat)([
                      [
                          coinInfo.p2pkh
                      ],
                      "0x" + p2pkh[2]
                  ]));
              }
          }
          // P2SH: OP_HASH160 <scriptHash> OP_EQUAL
          if (coinInfo.p2sh != null) {
              const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
              if (p2sh) {
                  const length = parseInt(p2sh[1], 16);
                  if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) return base58Encode((0, _bytes.concat)([
                      [
                          coinInfo.p2sh
                      ],
                      "0x" + p2sh[2]
                  ]));
              }
          }
          // Bech32
          if (coinInfo.prefix != null) {
              const length = bytes[1];
              // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program
              let version = bytes[0];
              if (version === 0x00) {
                  if (length !== 20 && length !== 32) version = -1;
              } else version = -1;
              if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {
                  const words = (0, _bech32Default.default).toWords(bytes.slice(2));
                  words.unshift(version);
                  return (0, _bech32Default.default).encode(coinInfo.prefix, words);
              }
          }
          return null;
      }
      getAddress(coinType) {
          return __awaiter(this, void 0, void 0, function*() {
              if (coinType == null) coinType = 60;
              // If Ethereum, use the standard `addr(bytes32)`
              if (coinType === 60) try {
                  // keccak256("addr(bytes32)")
                  const result = yield this._fetch("0x3b3b57de");
                  // No address
                  if (result === "0x" || result === (0, _constants.HashZero)) return null;
                  return this.provider.formatter.callAddress(result);
              } catch (error) {
                  if (error.code === (0, _logger.Logger).errors.CALL_EXCEPTION) return null;
                  throw error;
              }
              // keccak256("addr(bytes32,uint256")
              const hexBytes = yield this._fetchBytes("0xf1cb7e06", bytes32ify(coinType));
              // No address
              if (hexBytes == null || hexBytes === "0x") return null;
              // Compute the address
              const address = this._getAddress(coinType, hexBytes);
              if (address == null) logger.throwError(`invalid or unsupported coin data`, (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                  operation: `getAddress(${coinType})`,
                  coinType: coinType,
                  data: hexBytes
              });
              return address;
          });
      }
      getAvatar() {
          return __awaiter(this, void 0, void 0, function*() {
              const linkage = [
                  {
                      type: "name",
                      content: this.name
                  }
              ];
              try {
                  // test data for ricmoo.eth
                  //const avatar = "eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233";
                  const avatar = yield this.getText("avatar");
                  if (avatar == null) return null;
                  for(let i = 0; i < matchers.length; i++){
                      const match = avatar.match(matchers[i]);
                      if (match == null) continue;
                      const scheme = match[1].toLowerCase();
                      switch(scheme){
                          case "https":
                              linkage.push({
                                  type: "url",
                                  content: avatar
                              });
                              return {
                                  linkage,
                                  url: avatar
                              };
                          case "data":
                              linkage.push({
                                  type: "data",
                                  content: avatar
                              });
                              return {
                                  linkage,
                                  url: avatar
                              };
                          case "ipfs":
                              linkage.push({
                                  type: "ipfs",
                                  content: avatar
                              });
                              return {
                                  linkage,
                                  url: getIpfsLink(avatar)
                              };
                          case "erc721":
                          case "erc1155":
                              {
                                  // Depending on the ERC type, use tokenURI(uint256) or url(uint256)
                                  const selector = scheme === "erc721" ? "0xc87b56dd" : "0x0e89341c";
                                  linkage.push({
                                      type: scheme,
                                      content: avatar
                                  });
                                  // The owner of this name
                                  const owner = this._resolvedAddress || (yield this.getAddress());
                                  const comps = (match[2] || "").split("/");
                                  if (comps.length !== 2) return null;
                                  const addr = yield this.provider.formatter.address(comps[0]);
                                  const tokenId = (0, _bytes.hexZeroPad)((0, _bignumber.BigNumber).from(comps[1]).toHexString(), 32);
                                  // Check that this account owns the token
                                  if (scheme === "erc721") {
                                      // ownerOf(uint256 tokenId)
                                      const tokenOwner = this.provider.formatter.callAddress((yield this.provider.call({
                                          to: addr,
                                          data: (0, _bytes.hexConcat)([
                                              "0x6352211e",
                                              tokenId
                                          ])
                                      })));
                                      if (owner !== tokenOwner) return null;
                                      linkage.push({
                                          type: "owner",
                                          content: tokenOwner
                                      });
                                  } else if (scheme === "erc1155") {
                                      // balanceOf(address owner, uint256 tokenId)
                                      const balance = (0, _bignumber.BigNumber).from((yield this.provider.call({
                                          to: addr,
                                          data: (0, _bytes.hexConcat)([
                                              "0x00fdd58e",
                                              (0, _bytes.hexZeroPad)(owner, 32),
                                              tokenId
                                          ])
                                      })));
                                      if (balance.isZero()) return null;
                                      linkage.push({
                                          type: "balance",
                                          content: balance.toString()
                                      });
                                  }
                                  // Call the token contract for the metadata URL
                                  const tx = {
                                      to: this.provider.formatter.address(comps[0]),
                                      data: (0, _bytes.hexConcat)([
                                          selector,
                                          tokenId
                                      ])
                                  };
                                  let metadataUrl = _parseString((yield this.provider.call(tx)), 0);
                                  if (metadataUrl == null) return null;
                                  linkage.push({
                                      type: "metadata-url-base",
                                      content: metadataUrl
                                  });
                                  // ERC-1155 allows a generic {id} in the URL
                                  if (scheme === "erc1155") {
                                      metadataUrl = metadataUrl.replace("{id}", tokenId.substring(2));
                                      linkage.push({
                                          type: "metadata-url-expanded",
                                          content: metadataUrl
                                      });
                                  }
                                  // Transform IPFS metadata links
                                  if (metadataUrl.match(/^ipfs:/i)) metadataUrl = getIpfsLink(metadataUrl);
                                  linkage.push({
                                      type: "metadata-url",
                                      content: metadataUrl
                                  });
                                  // Get the token metadata
                                  const metadata = yield (0, _web.fetchJson)(metadataUrl);
                                  if (!metadata) return null;
                                  linkage.push({
                                      type: "metadata",
                                      content: JSON.stringify(metadata)
                                  });
                                  // Pull the image URL out
                                  let imageUrl = metadata.image;
                                  if (typeof imageUrl !== "string") return null;
                                  if (imageUrl.match(/^(https:\/\/|data:)/i)) ;
                                  else {
                                      // Transform IPFS link to gateway
                                      const ipfs = imageUrl.match(matcherIpfs);
                                      if (ipfs == null) return null;
                                      linkage.push({
                                          type: "url-ipfs",
                                          content: imageUrl
                                      });
                                      imageUrl = getIpfsLink(imageUrl);
                                  }
                                  linkage.push({
                                      type: "url",
                                      content: imageUrl
                                  });
                                  return {
                                      linkage,
                                      url: imageUrl
                                  };
                              }
                      }
                  }
              } catch (error) {}
              return null;
          });
      }
      getContentHash() {
          return __awaiter(this, void 0, void 0, function*() {
              // keccak256("contenthash()")
              const hexBytes = yield this._fetchBytes("0xbc1c58d1");
              // No contenthash
              if (hexBytes == null || hexBytes === "0x") return null;
              // IPFS (CID: 1, Type: DAG-PB)
              const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
              if (ipfs) {
                  const length = parseInt(ipfs[3], 16);
                  if (ipfs[4].length === length * 2) return "ipfs://" + (0, _basex.Base58).encode("0x" + ipfs[1]);
              }
              // IPNS (CID: 1, Type: libp2p-key)
              const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
              if (ipns) {
                  const length = parseInt(ipns[3], 16);
                  if (ipns[4].length === length * 2) return "ipns://" + (0, _basex.Base58).encode("0x" + ipns[1]);
              }
              // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)
              const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
              if (swarm) {
                  if (swarm[1].length === 64) return "bzz://" + swarm[1];
              }
              const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);
              if (skynet) {
                  if (skynet[1].length === 68) {
                      // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5
                      const urlSafe = {
                          "=": "",
                          "+": "-",
                          "/": "_"
                      };
                      const hash = (0, _base64.encode)("0x" + skynet[1]).replace(/[=+\/]/g, (a)=>urlSafe[a]);
                      return "sia://" + hash;
                  }
              }
              return logger.throwError(`invalid or unsupported content hash data`, (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                  operation: "getContentHash()",
                  data: hexBytes
              });
          });
      }
      getText(key) {
          return __awaiter(this, void 0, void 0, function*() {
              // The key encoded as parameter to fetchBytes
              let keyBytes = (0, _strings.toUtf8Bytes)(key);
              // The nodehash consumes the first slot, so the string pointer targets
              // offset 64, with the length at offset 64 and data starting at offset 96
              keyBytes = (0, _bytes.concat)([
                  bytes32ify(64),
                  bytes32ify(keyBytes.length),
                  keyBytes
              ]);
              // Pad to word-size (32 bytes)
              if (keyBytes.length % 32 !== 0) keyBytes = (0, _bytes.concat)([
                  keyBytes,
                  (0, _bytes.hexZeroPad)("0x", 32 - key.length % 32)
              ]);
              const hexBytes = yield this._fetchBytes("0x59d1d43c", (0, _bytes.hexlify)(keyBytes));
              if (hexBytes == null || hexBytes === "0x") return null;
              return (0, _strings.toUtf8String)(hexBytes);
          });
      }
  }
  let defaultFormatter = null;
  let nextPollId = 1;
  class BaseProvider extends (0, _abstractProvider.Provider) {
      /**
       *  ready
       *
       *  A Promise<Network> that resolves only once the provider is ready.
       *
       *  Sub-classes that call the super with a network without a chainId
       *  MUST set this. Standard named networks have a known chainId.
       *
       */ constructor(network){
          super();
          // Events being listened to
          this._events = [];
          this._emitted = {
              block: -2
          };
          this.disableCcipRead = false;
          this.formatter = new.target.getFormatter();
          // If network is any, this Provider allows the underlying
          // network to change dynamically, and we auto-detect the
          // current network
          (0, _properties.defineReadOnly)(this, "anyNetwork", network === "any");
          if (this.anyNetwork) network = this.detectNetwork();
          if (network instanceof Promise) {
              this._networkPromise = network;
              // Squash any "unhandled promise" errors; that do not need to be handled
              network.catch((error)=>{});
              // Trigger initial network setting (async)
              this._ready().catch((error)=>{});
          } else {
              const knownNetwork = (0, _properties.getStatic)(new.target, "getNetwork")(network);
              if (knownNetwork) {
                  (0, _properties.defineReadOnly)(this, "_network", knownNetwork);
                  this.emit("network", knownNetwork, null);
              } else logger.throwArgumentError("invalid network", "network", network);
          }
          this._maxInternalBlockNumber = -1024;
          this._lastBlockNumber = -2;
          this._maxFilterBlockRange = 10;
          this._pollingInterval = 4000;
          this._fastQueryDate = 0;
      }
      _ready() {
          return __awaiter(this, void 0, void 0, function*() {
              if (this._network == null) {
                  let network = null;
                  if (this._networkPromise) try {
                      network = yield this._networkPromise;
                  } catch (error) {}
                  // Try the Provider's network detection (this MUST throw if it cannot)
                  if (network == null) network = yield this.detectNetwork();
                  // This should never happen; every Provider sub-class should have
                  // suggested a network by here (or have thrown).
                  if (!network) logger.throwError("no network detected", (0, _logger.Logger).errors.UNKNOWN_ERROR, {});
                  // Possible this call stacked so do not call defineReadOnly again
                  if (this._network == null) {
                      if (this.anyNetwork) this._network = network;
                      else (0, _properties.defineReadOnly)(this, "_network", network);
                      this.emit("network", network, null);
                  }
              }
              return this._network;
          });
      }
      // This will always return the most recently established network.
      // For "any", this can change (a "network" event is emitted before
      // any change is reflected); otherwise this cannot change
      get ready() {
          return (0, _web.poll)(()=>{
              return this._ready().then((network)=>{
                  return network;
              }, (error)=>{
                  // If the network isn't running yet, we will wait
                  if (error.code === (0, _logger.Logger).errors.NETWORK_ERROR && error.event === "noNetwork") return undefined;
                  throw error;
              });
          });
      }
      // @TODO: Remove this and just create a singleton formatter
      static getFormatter() {
          if (defaultFormatter == null) defaultFormatter = new (0, _formatter.Formatter)();
          return defaultFormatter;
      }
      // @TODO: Remove this and just use getNetwork
      static getNetwork(network) {
          return (0, _networks.getNetwork)(network == null ? "homestead" : network);
      }
      ccipReadFetch(tx, calldata, urls) {
          return __awaiter(this, void 0, void 0, function*() {
              if (this.disableCcipRead || urls.length === 0) return null;
              const sender = tx.to.toLowerCase();
              const data = calldata.toLowerCase();
              const errorMessages = [];
              for(let i = 0; i < urls.length; i++){
                  const url = urls[i];
                  // URL expansion
                  const href = url.replace("{sender}", sender).replace("{data}", data);
                  // If no {data} is present, use POST; otherwise GET
                  const json = url.indexOf("{data}") >= 0 ? null : JSON.stringify({
                      data,
                      sender
                  });
                  const result = yield (0, _web.fetchJson)({
                      url: href,
                      errorPassThrough: true
                  }, json, (value, response)=>{
                      value.status = response.statusCode;
                      return value;
                  });
                  if (result.data) return result.data;
                  const errorMessage = result.message || "unknown error";
                  // 4xx indicates the result is not present; stop
                  if (result.status >= 400 && result.status < 500) return logger.throwError(`response not found during CCIP fetch: ${errorMessage}`, (0, _logger.Logger).errors.SERVER_ERROR, {
                      url,
                      errorMessage
                  });
                  // 5xx indicates server issue; try the next url
                  errorMessages.push(errorMessage);
              }
              return logger.throwError(`error encountered during CCIP fetch: ${errorMessages.map((m)=>JSON.stringify(m)).join(", ")}`, (0, _logger.Logger).errors.SERVER_ERROR, {
                  urls,
                  errorMessages
              });
          });
      }
      // Fetches the blockNumber, but will reuse any result that is less
      // than maxAge old or has been requested since the last request
      _getInternalBlockNumber(maxAge) {
          return __awaiter(this, void 0, void 0, function*() {
              yield this._ready();
              // Allowing stale data up to maxAge old
              if (maxAge > 0) // While there are pending internal block requests...
              while(this._internalBlockNumber){
                  // ..."remember" which fetch we started with
                  const internalBlockNumber = this._internalBlockNumber;
                  try {
                      // Check the result is not too stale
                      const result = yield internalBlockNumber;
                      if (getTime() - result.respTime <= maxAge) return result.blockNumber;
                      break;
                  } catch (error) {
                      // The fetch rejected; if we are the first to get the
                      // rejection, drop through so we replace it with a new
                      // fetch; all others blocked will then get that fetch
                      // which won't match the one they "remembered" and loop
                      if (this._internalBlockNumber === internalBlockNumber) break;
                  }
              }
              const reqTime = getTime();
              const checkInternalBlockNumber = (0, _properties.resolveProperties)({
                  blockNumber: this.perform("getBlockNumber", {}),
                  networkError: this.getNetwork().then((network)=>null, (error)=>error)
              }).then(({ blockNumber , networkError  })=>{
                  if (networkError) {
                      // Unremember this bad internal block number
                      if (this._internalBlockNumber === checkInternalBlockNumber) this._internalBlockNumber = null;
                      throw networkError;
                  }
                  const respTime = getTime();
                  blockNumber = (0, _bignumber.BigNumber).from(blockNumber).toNumber();
                  if (blockNumber < this._maxInternalBlockNumber) blockNumber = this._maxInternalBlockNumber;
                  this._maxInternalBlockNumber = blockNumber;
                  this._setFastBlockNumber(blockNumber); // @TODO: Still need this?
                  return {
                      blockNumber,
                      reqTime,
                      respTime
                  };
              });
              this._internalBlockNumber = checkInternalBlockNumber;
              // Swallow unhandled exceptions; if needed they are handled else where
              checkInternalBlockNumber.catch((error)=>{
                  // Don't null the dead (rejected) fetch, if it has already been updated
                  if (this._internalBlockNumber === checkInternalBlockNumber) this._internalBlockNumber = null;
              });
              return (yield checkInternalBlockNumber).blockNumber;
          });
      }
      poll() {
          return __awaiter(this, void 0, void 0, function*() {
              const pollId = nextPollId++;
              // Track all running promises, so we can trigger a post-poll once they are complete
              const runners = [];
              let blockNumber = null;
              try {
                  blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);
              } catch (error) {
                  this.emit("error", error);
                  return;
              }
              this._setFastBlockNumber(blockNumber);
              // Emit a poll event after we have the latest (fast) block number
              this.emit("poll", pollId, blockNumber);
              // If the block has not changed, meh.
              if (blockNumber === this._lastBlockNumber) {
                  this.emit("didPoll", pollId);
                  return;
              }
              // First polling cycle, trigger a "block" events
              if (this._emitted.block === -2) this._emitted.block = blockNumber - 1;
              if (Math.abs(this._emitted.block - blockNumber) > 1000) {
                  logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);
                  this.emit("error", logger.makeError("network block skew detected", (0, _logger.Logger).errors.NETWORK_ERROR, {
                      blockNumber: blockNumber,
                      event: "blockSkew",
                      previousBlockNumber: this._emitted.block
                  }));
                  this.emit("block", blockNumber);
              } else // Notify all listener for each block that has passed
              for(let i = this._emitted.block + 1; i <= blockNumber; i++)this.emit("block", i);
              // The emitted block was updated, check for obsolete events
              if (this._emitted.block !== blockNumber) {
                  this._emitted.block = blockNumber;
                  Object.keys(this._emitted).forEach((key)=>{
                      // The block event does not expire
                      if (key === "block") return;
                      // The block we were at when we emitted this event
                      const eventBlockNumber = this._emitted[key];
                      // We cannot garbage collect pending transactions or blocks here
                      // They should be garbage collected by the Provider when setting
                      // "pending" events
                      if (eventBlockNumber === "pending") return;
                      // Evict any transaction hashes or block hashes over 12 blocks
                      // old, since they should not return null anyways
                      if (blockNumber - eventBlockNumber > 12) delete this._emitted[key];
                  });
              }
              // First polling cycle
              if (this._lastBlockNumber === -2) this._lastBlockNumber = blockNumber - 1;
              // Find all transaction hashes we are waiting on
              this._events.forEach((event)=>{
                  switch(event.type){
                      case "tx":
                          {
                              const hash = event.hash;
                              let runner = this.getTransactionReceipt(hash).then((receipt)=>{
                                  if (!receipt || receipt.blockNumber == null) return null;
                                  this._emitted["t:" + hash] = receipt.blockNumber;
                                  this.emit(hash, receipt);
                                  return null;
                              }).catch((error)=>{
                                  this.emit("error", error);
                              });
                              runners.push(runner);
                              break;
                          }
                      case "filter":
                          // We only allow a single getLogs to be in-flight at a time
                          if (!event._inflight) {
                              event._inflight = true;
                              // This is the first filter for this event, so we want to
                              // restrict events to events that happened no earlier than now
                              if (event._lastBlockNumber === -2) event._lastBlockNumber = blockNumber - 1;
                              // Filter from the last *known* event; due to load-balancing
                              // and some nodes returning updated block numbers before
                              // indexing events, a logs result with 0 entries cannot be
                              // trusted and we must retry a range which includes it again
                              const filter = event.filter;
                              filter.fromBlock = event._lastBlockNumber + 1;
                              filter.toBlock = blockNumber;
                              // Prevent fitler ranges from growing too wild, since it is quite
                              // likely there just haven't been any events to move the lastBlockNumber.
                              const minFromBlock = filter.toBlock - this._maxFilterBlockRange;
                              if (minFromBlock > filter.fromBlock) filter.fromBlock = minFromBlock;
                              if (filter.fromBlock < 0) filter.fromBlock = 0;
                              const runner = this.getLogs(filter).then((logs)=>{
                                  // Allow the next getLogs
                                  event._inflight = false;
                                  if (logs.length === 0) return;
                                  logs.forEach((log)=>{
                                      // Only when we get an event for a given block number
                                      // can we trust the events are indexed
                                      if (log.blockNumber > event._lastBlockNumber) event._lastBlockNumber = log.blockNumber;
                                      // Make sure we stall requests to fetch blocks and txs
                                      this._emitted["b:" + log.blockHash] = log.blockNumber;
                                      this._emitted["t:" + log.transactionHash] = log.blockNumber;
                                      this.emit(filter, log);
                                  });
                              }).catch((error)=>{
                                  this.emit("error", error);
                                  // Allow another getLogs (the range was not updated)
                                  event._inflight = false;
                              });
                              runners.push(runner);
                          }
                          break;
                  }
              });
              this._lastBlockNumber = blockNumber;
              // Once all events for this loop have been processed, emit "didPoll"
              Promise.all(runners).then(()=>{
                  this.emit("didPoll", pollId);
              }).catch((error)=>{
                  this.emit("error", error);
              });
              return;
          });
      }
      // Deprecated; do not use this
      resetEventsBlock(blockNumber) {
          this._lastBlockNumber = blockNumber - 1;
          if (this.polling) this.poll();
      }
      get network() {
          return this._network;
      }
      // This method should query the network if the underlying network
      // can change, such as when connected to a JSON-RPC backend
      detectNetwork() {
          return __awaiter(this, void 0, void 0, function*() {
              return logger.throwError("provider does not support network detection", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                  operation: "provider.detectNetwork"
              });
          });
      }
      getNetwork() {
          return __awaiter(this, void 0, void 0, function*() {
              const network = yield this._ready();
              // Make sure we are still connected to the same network; this is
              // only an external call for backends which can have the underlying
              // network change spontaneously
              const currentNetwork = yield this.detectNetwork();
              if (network.chainId !== currentNetwork.chainId) {
                  // We are allowing network changes, things can get complex fast;
                  // make sure you know what you are doing if you use "any"
                  if (this.anyNetwork) {
                      this._network = currentNetwork;
                      // Reset all internal block number guards and caches
                      this._lastBlockNumber = -2;
                      this._fastBlockNumber = null;
                      this._fastBlockNumberPromise = null;
                      this._fastQueryDate = 0;
                      this._emitted.block = -2;
                      this._maxInternalBlockNumber = -1024;
                      this._internalBlockNumber = null;
                      // The "network" event MUST happen before this method resolves
                      // so any events have a chance to unregister, so we stall an
                      // additional event loop before returning from /this/ call
                      this.emit("network", currentNetwork, network);
                      yield stall(0);
                      return this._network;
                  }
                  const error = logger.makeError("underlying network changed", (0, _logger.Logger).errors.NETWORK_ERROR, {
                      event: "changed",
                      network: network,
                      detectedNetwork: currentNetwork
                  });
                  this.emit("error", error);
                  throw error;
              }
              return network;
          });
      }
      get blockNumber() {
          this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber)=>{
              this._setFastBlockNumber(blockNumber);
          }, (error)=>{});
          return this._fastBlockNumber != null ? this._fastBlockNumber : -1;
      }
      get polling() {
          return this._poller != null;
      }
      set polling(value) {
          if (value && !this._poller) {
              this._poller = setInterval(()=>{
                  this.poll();
              }, this.pollingInterval);
              if (!this._bootstrapPoll) this._bootstrapPoll = setTimeout(()=>{
                  this.poll();
                  // We block additional polls until the polling interval
                  // is done, to prevent overwhelming the poll function
                  this._bootstrapPoll = setTimeout(()=>{
                      // If polling was disabled, something may require a poke
                      // since starting the bootstrap poll and it was disabled
                      if (!this._poller) this.poll();
                      // Clear out the bootstrap so we can do another
                      this._bootstrapPoll = null;
                  }, this.pollingInterval);
              }, 0);
          } else if (!value && this._poller) {
              clearInterval(this._poller);
              this._poller = null;
          }
      }
      get pollingInterval() {
          return this._pollingInterval;
      }
      set pollingInterval(value) {
          if (typeof value !== "number" || value <= 0 || parseInt(String(value)) != value) throw new Error("invalid polling interval");
          this._pollingInterval = value;
          if (this._poller) {
              clearInterval(this._poller);
              this._poller = setInterval(()=>{
                  this.poll();
              }, this._pollingInterval);
          }
      }
      _getFastBlockNumber() {
          const now = getTime();
          // Stale block number, request a newer value
          if (now - this._fastQueryDate > 2 * this._pollingInterval) {
              this._fastQueryDate = now;
              this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber)=>{
                  if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) this._fastBlockNumber = blockNumber;
                  return this._fastBlockNumber;
              });
          }
          return this._fastBlockNumberPromise;
      }
      _setFastBlockNumber(blockNumber) {
          // Older block, maybe a stale request
          if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) return;
          // Update the time we updated the blocknumber
          this._fastQueryDate = getTime();
          // Newer block number, use  it
          if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
              this._fastBlockNumber = blockNumber;
              this._fastBlockNumberPromise = Promise.resolve(blockNumber);
          }
      }
      waitForTransaction(transactionHash, confirmations, timeout) {
          return __awaiter(this, void 0, void 0, function*() {
              return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);
          });
      }
      _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {
          return __awaiter(this, void 0, void 0, function*() {
              const receipt = yield this.getTransactionReceipt(transactionHash);
              // Receipt is already good
              if ((receipt ? receipt.confirmations : 0) >= confirmations) return receipt;
              // Poll until the receipt is good...
              return new Promise((resolve, reject)=>{
                  const cancelFuncs = [];
                  let done = false;
                  const alreadyDone = function() {
                      if (done) return true;
                      done = true;
                      cancelFuncs.forEach((func)=>{
                          func();
                      });
                      return false;
                  };
                  const minedHandler = (receipt)=>{
                      if (receipt.confirmations < confirmations) return;
                      if (alreadyDone()) return;
                      resolve(receipt);
                  };
                  this.on(transactionHash, minedHandler);
                  cancelFuncs.push(()=>{
                      this.removeListener(transactionHash, minedHandler);
                  });
                  if (replaceable) {
                      let lastBlockNumber = replaceable.startBlock;
                      let scannedBlock = null;
                      const replaceHandler = (blockNumber)=>__awaiter(this, void 0, void 0, function*() {
                              if (done) return;
                              // Wait 1 second; this is only used in the case of a fault, so
                              // we will trade off a little bit of latency for more consistent
                              // results and fewer JSON-RPC calls
                              yield stall(1000);
                              this.getTransactionCount(replaceable.from).then((nonce)=>__awaiter(this, void 0, void 0, function*() {
                                      if (done) return;
                                      if (nonce <= replaceable.nonce) lastBlockNumber = blockNumber;
                                      else {
                                          // First check if the transaction was mined
                                          {
                                              const mined = yield this.getTransaction(transactionHash);
                                              if (mined && mined.blockNumber != null) return;
                                          }
                                          // First time scanning. We start a little earlier for some
                                          // wiggle room here to handle the eventually consistent nature
                                          // of blockchain (e.g. the getTransactionCount was for a
                                          // different block)
                                          if (scannedBlock == null) {
                                              scannedBlock = lastBlockNumber - 3;
                                              if (scannedBlock < replaceable.startBlock) scannedBlock = replaceable.startBlock;
                                          }
                                          while(scannedBlock <= blockNumber){
                                              if (done) return;
                                              const block = yield this.getBlockWithTransactions(scannedBlock);
                                              for(let ti = 0; ti < block.transactions.length; ti++){
                                                  const tx = block.transactions[ti];
                                                  // Successfully mined!
                                                  if (tx.hash === transactionHash) return;
                                                  // Matches our transaction from and nonce; its a replacement
                                                  if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {
                                                      if (done) return;
                                                      // Get the receipt of the replacement
                                                      const receipt = yield this.waitForTransaction(tx.hash, confirmations);
                                                      // Already resolved or rejected (prolly a timeout)
                                                      if (alreadyDone()) return;
                                                      // The reason we were replaced
                                                      let reason = "replaced";
                                                      if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) reason = "repriced";
                                                      else if (tx.data === "0x" && tx.from === tx.to && tx.value.isZero()) reason = "cancelled";
                                                      // Explain why we were replaced
                                                      reject(logger.makeError("transaction was replaced", (0, _logger.Logger).errors.TRANSACTION_REPLACED, {
                                                          cancelled: reason === "replaced" || reason === "cancelled",
                                                          reason,
                                                          replacement: this._wrapTransaction(tx),
                                                          hash: transactionHash,
                                                          receipt
                                                      }));
                                                      return;
                                                  }
                                              }
                                              scannedBlock++;
                                          }
                                      }
                                      if (done) return;
                                      this.once("block", replaceHandler);
                                  }), (error)=>{
                                  if (done) return;
                                  this.once("block", replaceHandler);
                              });
                          });
                      if (done) return;
                      this.once("block", replaceHandler);
                      cancelFuncs.push(()=>{
                          this.removeListener("block", replaceHandler);
                      });
                  }
                  if (typeof timeout === "number" && timeout > 0) {
                      const timer = setTimeout(()=>{
                          if (alreadyDone()) return;
                          reject(logger.makeError("timeout exceeded", (0, _logger.Logger).errors.TIMEOUT, {
                              timeout: timeout
                          }));
                      }, timeout);
                      if (timer.unref) timer.unref();
                      cancelFuncs.push(()=>{
                          clearTimeout(timer);
                      });
                  }
              });
          });
      }
      getBlockNumber() {
          return __awaiter(this, void 0, void 0, function*() {
              return this._getInternalBlockNumber(0);
          });
      }
      getGasPrice() {
          return __awaiter(this, void 0, void 0, function*() {
              yield this.getNetwork();
              const result = yield this.perform("getGasPrice", {});
              try {
                  return (0, _bignumber.BigNumber).from(result);
              } catch (error) {
                  return logger.throwError("bad result from backend", (0, _logger.Logger).errors.SERVER_ERROR, {
                      method: "getGasPrice",
                      result,
                      error
                  });
              }
          });
      }
      getBalance(addressOrName, blockTag) {
          return __awaiter(this, void 0, void 0, function*() {
              yield this.getNetwork();
              const params = yield (0, _properties.resolveProperties)({
                  address: this._getAddress(addressOrName),
                  blockTag: this._getBlockTag(blockTag)
              });
              const result = yield this.perform("getBalance", params);
              try {
                  return (0, _bignumber.BigNumber).from(result);
              } catch (error) {
                  return logger.throwError("bad result from backend", (0, _logger.Logger).errors.SERVER_ERROR, {
                      method: "getBalance",
                      params,
                      result,
                      error
                  });
              }
          });
      }
      getTransactionCount(addressOrName, blockTag) {
          return __awaiter(this, void 0, void 0, function*() {
              yield this.getNetwork();
              const params = yield (0, _properties.resolveProperties)({
                  address: this._getAddress(addressOrName),
                  blockTag: this._getBlockTag(blockTag)
              });
              const result = yield this.perform("getTransactionCount", params);
              try {
                  return (0, _bignumber.BigNumber).from(result).toNumber();
              } catch (error) {
                  return logger.throwError("bad result from backend", (0, _logger.Logger).errors.SERVER_ERROR, {
                      method: "getTransactionCount",
                      params,
                      result,
                      error
                  });
              }
          });
      }
      getCode(addressOrName, blockTag) {
          return __awaiter(this, void 0, void 0, function*() {
              yield this.getNetwork();
              const params = yield (0, _properties.resolveProperties)({
                  address: this._getAddress(addressOrName),
                  blockTag: this._getBlockTag(blockTag)
              });
              const result = yield this.perform("getCode", params);
              try {
                  return (0, _bytes.hexlify)(result);
              } catch (error) {
                  return logger.throwError("bad result from backend", (0, _logger.Logger).errors.SERVER_ERROR, {
                      method: "getCode",
                      params,
                      result,
                      error
                  });
              }
          });
      }
      getStorageAt(addressOrName, position, blockTag) {
          return __awaiter(this, void 0, void 0, function*() {
              yield this.getNetwork();
              const params = yield (0, _properties.resolveProperties)({
                  address: this._getAddress(addressOrName),
                  blockTag: this._getBlockTag(blockTag),
                  position: Promise.resolve(position).then((p)=>(0, _bytes.hexValue)(p))
              });
              const result = yield this.perform("getStorageAt", params);
              try {
                  return (0, _bytes.hexlify)(result);
              } catch (error) {
                  return logger.throwError("bad result from backend", (0, _logger.Logger).errors.SERVER_ERROR, {
                      method: "getStorageAt",
                      params,
                      result,
                      error
                  });
              }
          });
      }
      // This should be called by any subclass wrapping a TransactionResponse
      _wrapTransaction(tx, hash, startBlock) {
          if (hash != null && (0, _bytes.hexDataLength)(hash) !== 32) throw new Error("invalid response - sendTransaction");
          const result = tx;
          // Check the hash we expect is the same as the hash the server reported
          if (hash != null && tx.hash !== hash) logger.throwError("Transaction hash mismatch from Provider.sendTransaction.", (0, _logger.Logger).errors.UNKNOWN_ERROR, {
              expectedHash: tx.hash,
              returnedHash: hash
          });
          result.wait = (confirms, timeout)=>__awaiter(this, void 0, void 0, function*() {
                  if (confirms == null) confirms = 1;
                  if (timeout == null) timeout = 0;
                  // Get the details to detect replacement
                  let replacement = undefined;
                  if (confirms !== 0 && startBlock != null) replacement = {
                      data: tx.data,
                      from: tx.from,
                      nonce: tx.nonce,
                      to: tx.to,
                      value: tx.value,
                      startBlock
                  };
                  const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);
                  if (receipt == null && confirms === 0) return null;
                  // No longer pending, allow the polling loop to garbage collect this
                  this._emitted["t:" + tx.hash] = receipt.blockNumber;
                  if (receipt.status === 0) logger.throwError("transaction failed", (0, _logger.Logger).errors.CALL_EXCEPTION, {
                      transactionHash: tx.hash,
                      transaction: tx,
                      receipt: receipt
                  });
                  return receipt;
              });
          return result;
      }
      sendTransaction(signedTransaction) {
          return __awaiter(this, void 0, void 0, function*() {
              yield this.getNetwork();
              const hexTx = yield Promise.resolve(signedTransaction).then((t)=>(0, _bytes.hexlify)(t));
              const tx = this.formatter.transaction(signedTransaction);
              if (tx.confirmations == null) tx.confirmations = 0;
              const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
              try {
                  const hash = yield this.perform("sendTransaction", {
                      signedTransaction: hexTx
                  });
                  return this._wrapTransaction(tx, hash, blockNumber);
              } catch (error) {
                  error.transaction = tx;
                  error.transactionHash = tx.hash;
                  throw error;
              }
          });
      }
      _getTransactionRequest(transaction) {
          return __awaiter(this, void 0, void 0, function*() {
              const values = yield transaction;
              const tx = {};
              [
                  "from",
                  "to"
              ].forEach((key)=>{
                  if (values[key] == null) return;
                  tx[key] = Promise.resolve(values[key]).then((v)=>v ? this._getAddress(v) : null);
              });
              [
                  "gasLimit",
                  "gasPrice",
                  "maxFeePerGas",
                  "maxPriorityFeePerGas",
                  "value"
              ].forEach((key)=>{
                  if (values[key] == null) return;
                  tx[key] = Promise.resolve(values[key]).then((v)=>v ? (0, _bignumber.BigNumber).from(v) : null);
              });
              [
                  "type"
              ].forEach((key)=>{
                  if (values[key] == null) return;
                  tx[key] = Promise.resolve(values[key]).then((v)=>v != null ? v : null);
              });
              if (values.accessList) tx.accessList = this.formatter.accessList(values.accessList);
              [
                  "data"
              ].forEach((key)=>{
                  if (values[key] == null) return;
                  tx[key] = Promise.resolve(values[key]).then((v)=>v ? (0, _bytes.hexlify)(v) : null);
              });
              return this.formatter.transactionRequest((yield (0, _properties.resolveProperties)(tx)));
          });
      }
      _getFilter(filter) {
          return __awaiter(this, void 0, void 0, function*() {
              filter = yield filter;
              const result = {};
              if (filter.address != null) result.address = this._getAddress(filter.address);
              [
                  "blockHash",
                  "topics"
              ].forEach((key)=>{
                  if (filter[key] == null) return;
                  result[key] = filter[key];
              });
              [
                  "fromBlock",
                  "toBlock"
              ].forEach((key)=>{
                  if (filter[key] == null) return;
                  result[key] = this._getBlockTag(filter[key]);
              });
              return this.formatter.filter((yield (0, _properties.resolveProperties)(result)));
          });
      }
      _call(transaction, blockTag, attempt) {
          return __awaiter(this, void 0, void 0, function*() {
              if (attempt >= MAX_CCIP_REDIRECTS) logger.throwError("CCIP read exceeded maximum redirections", (0, _logger.Logger).errors.SERVER_ERROR, {
                  redirects: attempt,
                  transaction
              });
              const txSender = transaction.to;
              const result = yield this.perform("call", {
                  transaction,
                  blockTag
              });
              // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)
              if (attempt >= 0 && blockTag === "latest" && txSender != null && result.substring(0, 10) === "0x556f1830" && (0, _bytes.hexDataLength)(result) % 32 === 4) try {
                  const data = (0, _bytes.hexDataSlice)(result, 4);
                  // Check the sender of the OffchainLookup matches the transaction
                  const sender = (0, _bytes.hexDataSlice)(data, 0, 32);
                  if (!(0, _bignumber.BigNumber).from(sender).eq(txSender)) logger.throwError("CCIP Read sender did not match", (0, _logger.Logger).errors.CALL_EXCEPTION, {
                      name: "OffchainLookup",
                      signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                      transaction,
                      data: result
                  });
                  // Read the URLs from the response
                  const urls = [];
                  const urlsOffset = (0, _bignumber.BigNumber).from((0, _bytes.hexDataSlice)(data, 32, 64)).toNumber();
                  const urlsLength = (0, _bignumber.BigNumber).from((0, _bytes.hexDataSlice)(data, urlsOffset, urlsOffset + 32)).toNumber();
                  const urlsData = (0, _bytes.hexDataSlice)(data, urlsOffset + 32);
                  for(let u = 0; u < urlsLength; u++){
                      const url = _parseString(urlsData, u * 32);
                      if (url == null) logger.throwError("CCIP Read contained corrupt URL string", (0, _logger.Logger).errors.CALL_EXCEPTION, {
                          name: "OffchainLookup",
                          signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                          transaction,
                          data: result
                      });
                      urls.push(url);
                  }
                  // Get the CCIP calldata to forward
                  const calldata = _parseBytes(data, 64);
                  // Get the callbackSelector (bytes4)
                  if (!(0, _bignumber.BigNumber).from((0, _bytes.hexDataSlice)(data, 100, 128)).isZero()) logger.throwError("CCIP Read callback selector included junk", (0, _logger.Logger).errors.CALL_EXCEPTION, {
                      name: "OffchainLookup",
                      signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                      transaction,
                      data: result
                  });
                  const callbackSelector = (0, _bytes.hexDataSlice)(data, 96, 100);
                  // Get the extra data to send back to the contract as context
                  const extraData = _parseBytes(data, 128);
                  const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);
                  if (ccipResult == null) logger.throwError("CCIP Read disabled or provided no URLs", (0, _logger.Logger).errors.CALL_EXCEPTION, {
                      name: "OffchainLookup",
                      signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                      transaction,
                      data: result
                  });
                  const tx = {
                      to: txSender,
                      data: (0, _bytes.hexConcat)([
                          callbackSelector,
                          encodeBytes([
                              ccipResult,
                              extraData
                          ])
                      ])
                  };
                  return this._call(tx, blockTag, attempt + 1);
              } catch (error) {
                  if (error.code === (0, _logger.Logger).errors.SERVER_ERROR) throw error;
              }
              try {
                  return (0, _bytes.hexlify)(result);
              } catch (error) {
                  return logger.throwError("bad result from backend", (0, _logger.Logger).errors.SERVER_ERROR, {
                      method: "call",
                      params: {
                          transaction,
                          blockTag
                      },
                      result,
                      error
                  });
              }
          });
      }
      call(transaction, blockTag) {
          return __awaiter(this, void 0, void 0, function*() {
              yield this.getNetwork();
              const resolved = yield (0, _properties.resolveProperties)({
                  transaction: this._getTransactionRequest(transaction),
                  blockTag: this._getBlockTag(blockTag),
                  ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)
              });
              return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);
          });
      }
      estimateGas(transaction) {
          return __awaiter(this, void 0, void 0, function*() {
              yield this.getNetwork();
              const params = yield (0, _properties.resolveProperties)({
                  transaction: this._getTransactionRequest(transaction)
              });
              const result = yield this.perform("estimateGas", params);
              try {
                  return (0, _bignumber.BigNumber).from(result);
              } catch (error) {
                  return logger.throwError("bad result from backend", (0, _logger.Logger).errors.SERVER_ERROR, {
                      method: "estimateGas",
                      params,
                      result,
                      error
                  });
              }
          });
      }
      _getAddress(addressOrName) {
          return __awaiter(this, void 0, void 0, function*() {
              addressOrName = yield addressOrName;
              if (typeof addressOrName !== "string") logger.throwArgumentError("invalid address or ENS name", "name", addressOrName);
              const address = yield this.resolveName(addressOrName);
              if (address == null) logger.throwError("ENS name not configured", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                  operation: `resolveName(${JSON.stringify(addressOrName)})`
              });
              return address;
          });
      }
      _getBlock(blockHashOrBlockTag, includeTransactions) {
          return __awaiter(this, void 0, void 0, function*() {
              yield this.getNetwork();
              blockHashOrBlockTag = yield blockHashOrBlockTag;
              // If blockTag is a number (not "latest", etc), this is the block number
              let blockNumber = -128;
              const params = {
                  includeTransactions: !!includeTransactions
              };
              if ((0, _bytes.isHexString)(blockHashOrBlockTag, 32)) params.blockHash = blockHashOrBlockTag;
              else try {
                  params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);
                  if ((0, _bytes.isHexString)(params.blockTag)) blockNumber = parseInt(params.blockTag.substring(2), 16);
              } catch (error) {
                  logger.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
              }
              return (0, _web.poll)(()=>__awaiter(this, void 0, void 0, function*() {
                      const block = yield this.perform("getBlock", params);
                      // Block was not found
                      if (block == null) {
                          // For blockhashes, if we didn't say it existed, that blockhash may
                          // not exist. If we did see it though, perhaps from a log, we know
                          // it exists, and this node is just not caught up yet.
                          if (params.blockHash != null) {
                              if (this._emitted["b:" + params.blockHash] == null) return null;
                          }
                          // For block tags, if we are asking for a future block, we return null
                          if (params.blockTag != null) {
                              if (blockNumber > this._emitted.block) return null;
                          }
                          // Retry on the next block
                          return undefined;
                      }
                      // Add transactions
                      if (includeTransactions) {
                          let blockNumber = null;
                          for(let i = 0; i < block.transactions.length; i++){
                              const tx = block.transactions[i];
                              if (tx.blockNumber == null) tx.confirmations = 0;
                              else if (tx.confirmations == null) {
                                  if (blockNumber == null) blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                                  // Add the confirmations using the fast block number (pessimistic)
                                  let confirmations = blockNumber - tx.blockNumber + 1;
                                  if (confirmations <= 0) confirmations = 1;
                                  tx.confirmations = confirmations;
                              }
                          }
                          const blockWithTxs = this.formatter.blockWithTransactions(block);
                          blockWithTxs.transactions = blockWithTxs.transactions.map((tx)=>this._wrapTransaction(tx));
                          return blockWithTxs;
                      }
                      return this.formatter.block(block);
                  }), {
                  oncePoll: this
              });
          });
      }
      getBlock(blockHashOrBlockTag) {
          return this._getBlock(blockHashOrBlockTag, false);
      }
      getBlockWithTransactions(blockHashOrBlockTag) {
          return this._getBlock(blockHashOrBlockTag, true);
      }
      getTransaction(transactionHash) {
          return __awaiter(this, void 0, void 0, function*() {
              yield this.getNetwork();
              transactionHash = yield transactionHash;
              const params = {
                  transactionHash: this.formatter.hash(transactionHash, true)
              };
              return (0, _web.poll)(()=>__awaiter(this, void 0, void 0, function*() {
                      const result = yield this.perform("getTransaction", params);
                      if (result == null) {
                          if (this._emitted["t:" + transactionHash] == null) return null;
                          return undefined;
                      }
                      const tx = this.formatter.transactionResponse(result);
                      if (tx.blockNumber == null) tx.confirmations = 0;
                      else if (tx.confirmations == null) {
                          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                          // Add the confirmations using the fast block number (pessimistic)
                          let confirmations = blockNumber - tx.blockNumber + 1;
                          if (confirmations <= 0) confirmations = 1;
                          tx.confirmations = confirmations;
                      }
                      return this._wrapTransaction(tx);
                  }), {
                  oncePoll: this
              });
          });
      }
      getTransactionReceipt(transactionHash) {
          return __awaiter(this, void 0, void 0, function*() {
              yield this.getNetwork();
              transactionHash = yield transactionHash;
              const params = {
                  transactionHash: this.formatter.hash(transactionHash, true)
              };
              return (0, _web.poll)(()=>__awaiter(this, void 0, void 0, function*() {
                      const result = yield this.perform("getTransactionReceipt", params);
                      if (result == null) {
                          if (this._emitted["t:" + transactionHash] == null) return null;
                          return undefined;
                      }
                      // "geth-etc" returns receipts before they are ready
                      if (result.blockHash == null) return undefined;
                      const receipt = this.formatter.receipt(result);
                      if (receipt.blockNumber == null) receipt.confirmations = 0;
                      else if (receipt.confirmations == null) {
                          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                          // Add the confirmations using the fast block number (pessimistic)
                          let confirmations = blockNumber - receipt.blockNumber + 1;
                          if (confirmations <= 0) confirmations = 1;
                          receipt.confirmations = confirmations;
                      }
                      return receipt;
                  }), {
                  oncePoll: this
              });
          });
      }
      getLogs(filter) {
          return __awaiter(this, void 0, void 0, function*() {
              yield this.getNetwork();
              const params = yield (0, _properties.resolveProperties)({
                  filter: this._getFilter(filter)
              });
              const logs = yield this.perform("getLogs", params);
              logs.forEach((log)=>{
                  if (log.removed == null) log.removed = false;
              });
              return (0, _formatter.Formatter).arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);
          });
      }
      getEtherPrice() {
          return __awaiter(this, void 0, void 0, function*() {
              yield this.getNetwork();
              return this.perform("getEtherPrice", {});
          });
      }
      _getBlockTag(blockTag) {
          return __awaiter(this, void 0, void 0, function*() {
              blockTag = yield blockTag;
              if (typeof blockTag === "number" && blockTag < 0) {
                  if (blockTag % 1) logger.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
                  let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                  blockNumber += blockTag;
                  if (blockNumber < 0) blockNumber = 0;
                  return this.formatter.blockTag(blockNumber);
              }
              return this.formatter.blockTag(blockTag);
          });
      }
      getResolver(name) {
          return __awaiter(this, void 0, void 0, function*() {
              let currentName = name;
              while(true){
                  if (currentName === "" || currentName === ".") return null;
                  // Optimization since the eth node cannot change and does
                  // not have a wildcard resolver
                  if (name !== "eth" && currentName === "eth") return null;
                  // Check the current node for a resolver
                  const addr = yield this._getResolver(currentName, "getResolver");
                  // Found a resolver!
                  if (addr != null) {
                      const resolver = new Resolver(this, addr, name);
                      // Legacy resolver found, using EIP-2544 so it isn't safe to use
                      if (currentName !== name && !(yield resolver.supportsWildcard())) return null;
                      return resolver;
                  }
                  // Get the parent node
                  currentName = currentName.split(".").slice(1).join(".");
              }
          });
      }
      _getResolver(name, operation) {
          return __awaiter(this, void 0, void 0, function*() {
              if (operation == null) operation = "ENS";
              const network = yield this.getNetwork();
              // No ENS...
              if (!network.ensAddress) logger.throwError("network does not support ENS", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                  operation,
                  network: network.name
              });
              try {
                  // keccak256("resolver(bytes32)")
                  const addrData = yield this.call({
                      to: network.ensAddress,
                      data: "0x0178b8bf" + (0, _hash.namehash)(name).substring(2)
                  });
                  return this.formatter.callAddress(addrData);
              } catch (error) {
              // ENS registry cannot throw errors on resolver(bytes32)
              }
              return null;
          });
      }
      resolveName(name) {
          return __awaiter(this, void 0, void 0, function*() {
              name = yield name;
              // If it is already an address, nothing to resolve
              try {
                  return Promise.resolve(this.formatter.address(name));
              } catch (error) {
                  // If is is a hexstring, the address is bad (See #694)
                  if ((0, _bytes.isHexString)(name)) throw error;
              }
              if (typeof name !== "string") logger.throwArgumentError("invalid ENS name", "name", name);
              // Get the addr from the resolver
              const resolver = yield this.getResolver(name);
              if (!resolver) return null;
              return yield resolver.getAddress();
          });
      }
      lookupAddress(address) {
          return __awaiter(this, void 0, void 0, function*() {
              address = yield address;
              address = this.formatter.address(address);
              const node = address.substring(2).toLowerCase() + ".addr.reverse";
              const resolverAddr = yield this._getResolver(node, "lookupAddress");
              if (resolverAddr == null) return null;
              // keccak("name(bytes32)")
              const name = _parseString((yield this.call({
                  to: resolverAddr,
                  data: "0x691f3431" + (0, _hash.namehash)(node).substring(2)
              })), 0);
              const addr = yield this.resolveName(name);
              if (addr != address) return null;
              return name;
          });
      }
      getAvatar(nameOrAddress) {
          return __awaiter(this, void 0, void 0, function*() {
              let resolver = null;
              if ((0, _bytes.isHexString)(nameOrAddress)) {
                  // Address; reverse lookup
                  const address = this.formatter.address(nameOrAddress);
                  const node = address.substring(2).toLowerCase() + ".addr.reverse";
                  const resolverAddress = yield this._getResolver(node, "getAvatar");
                  if (!resolverAddress) return null;
                  // Try resolving the avatar against the addr.reverse resolver
                  resolver = new Resolver(this, resolverAddress, node);
                  try {
                      const avatar = yield resolver.getAvatar();
                      if (avatar) return avatar.url;
                  } catch (error) {
                      if (error.code !== (0, _logger.Logger).errors.CALL_EXCEPTION) throw error;
                  }
                  // Try getting the name and performing forward lookup; allowing wildcards
                  try {
                      // keccak("name(bytes32)")
                      const name = _parseString((yield this.call({
                          to: resolverAddress,
                          data: "0x691f3431" + (0, _hash.namehash)(node).substring(2)
                      })), 0);
                      resolver = yield this.getResolver(name);
                  } catch (error) {
                      if (error.code !== (0, _logger.Logger).errors.CALL_EXCEPTION) throw error;
                      return null;
                  }
              } else {
                  // ENS name; forward lookup with wildcard
                  resolver = yield this.getResolver(nameOrAddress);
                  if (!resolver) return null;
              }
              const avatar = yield resolver.getAvatar();
              if (avatar == null) return null;
              return avatar.url;
          });
      }
      perform(method, params) {
          return logger.throwError(method + " not implemented", (0, _logger.Logger).errors.NOT_IMPLEMENTED, {
              operation: method
          });
      }
      _startEvent(event) {
          this.polling = this._events.filter((e)=>e.pollable()).length > 0;
      }
      _stopEvent(event) {
          this.polling = this._events.filter((e)=>e.pollable()).length > 0;
      }
      _addEventListener(eventName, listener, once) {
          const event = new Event(getEventTag(eventName), listener, once);
          this._events.push(event);
          this._startEvent(event);
          return this;
      }
      on(eventName, listener) {
          return this._addEventListener(eventName, listener, false);
      }
      once(eventName, listener) {
          return this._addEventListener(eventName, listener, true);
      }
      emit(eventName, ...args) {
          let result = false;
          let stopped = [];
          let eventTag = getEventTag(eventName);
          this._events = this._events.filter((event)=>{
              if (event.tag !== eventTag) return true;
              setTimeout(()=>{
                  event.listener.apply(this, args);
              }, 0);
              result = true;
              if (event.once) {
                  stopped.push(event);
                  return false;
              }
              return true;
          });
          stopped.forEach((event)=>{
              this._stopEvent(event);
          });
          return result;
      }
      listenerCount(eventName) {
          if (!eventName) return this._events.length;
          let eventTag = getEventTag(eventName);
          return this._events.filter((event)=>{
              return event.tag === eventTag;
          }).length;
      }
      listeners(eventName) {
          if (eventName == null) return this._events.map((event)=>event.listener);
          let eventTag = getEventTag(eventName);
          return this._events.filter((event)=>event.tag === eventTag).map((event)=>event.listener);
      }
      off(eventName, listener) {
          if (listener == null) return this.removeAllListeners(eventName);
          const stopped = [];
          let found = false;
          let eventTag = getEventTag(eventName);
          this._events = this._events.filter((event)=>{
              if (event.tag !== eventTag || event.listener != listener) return true;
              if (found) return true;
              found = true;
              stopped.push(event);
              return false;
          });
          stopped.forEach((event)=>{
              this._stopEvent(event);
          });
          return this;
      }
      removeAllListeners(eventName) {
          let stopped = [];
          if (eventName == null) {
              stopped = this._events;
              this._events = [];
          } else {
              const eventTag = getEventTag(eventName);
              this._events = this._events.filter((event)=>{
                  if (event.tag !== eventTag) return true;
                  stopped.push(event);
                  return false;
              });
          }
          stopped.forEach((event)=>{
              this._stopEvent(event);
          });
          return this;
      }
  }
  
  },{"@ethersproject/abstract-provider":"g1jr1","@ethersproject/base64":"329Wu","@ethersproject/basex":"dm2o4","@ethersproject/bignumber":"ckYYW","@ethersproject/bytes":"htrqZ","@ethersproject/constants":"gKbDE","@ethersproject/hash":"7JYPm","@ethersproject/networks":"6JNhW","@ethersproject/properties":"h3GJb","@ethersproject/sha2":"k4R8k","@ethersproject/strings":"5TGFZ","@ethersproject/web":"5yjI3","bech32":"2C5n6","@ethersproject/logger":"hLvB2","./_version":"6PYAk","./formatter":"ZfOHh","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"329Wu":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "decode", ()=>(0, _base64.decode));
  parcelHelpers.export(exports, "encode", ()=>(0, _base64.encode));
  var _base64 = require("./base64");
  "use strict";
  
  },{"./base64":"cgzIg","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"cgzIg":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "decode", ()=>decode);
  parcelHelpers.export(exports, "encode", ()=>encode);
  var _bytes = require("@ethersproject/bytes");
  "use strict";
  function decode(textData) {
      textData = atob(textData);
      const data = [];
      for(let i = 0; i < textData.length; i++)data.push(textData.charCodeAt(i));
      return (0, _bytes.arrayify)(data);
  }
  function encode(data) {
      data = (0, _bytes.arrayify)(data);
      let textData = "";
      for(let i = 0; i < data.length; i++)textData += String.fromCharCode(data[i]);
      return btoa(textData);
  }
  
  },{"@ethersproject/bytes":"htrqZ","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"dm2o4":[function(require,module,exports) {
  /**
   * var basex = require("base-x");
   *
   * This implementation is heavily based on base-x. The main reason to
   * deviate was to prevent the dependency of Buffer.
   *
   * Contributors:
   *
   * base-x encoding
   * Forked from https://github.com/cryptocoinjs/bs58
   * Originally written by Mike Hearn for BitcoinJ
   * Copyright (c) 2011 Google Inc
   * Ported to JavaScript by Stefan Thomas
   * Merged Buffer refactorings from base58-native by Stephen Pair
   * Copyright (c) 2013 BitPay Inc
   *
   * The MIT License (MIT)
   *
   * Copyright base-x contributors (c) 2016
   *
   * Permission is hereby granted, free of charge, to any person obtaining a
   * copy of this software and associated documentation files (the "Software"),
   * to deal in the Software without restriction, including without limitation
   * the rights to use, copy, modify, merge, publish, distribute, sublicense,
   * and/or sell copies of the Software, and to permit persons to whom the
   * Software is furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
  
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
   * IN THE SOFTWARE.
   *
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "BaseX", ()=>BaseX);
  parcelHelpers.export(exports, "Base32", ()=>Base32) //console.log(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj"))
   //console.log(Base58.encode(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj")))
  ;
  parcelHelpers.export(exports, "Base58", ()=>Base58);
  var _bytes = require("@ethersproject/bytes");
  var _properties = require("@ethersproject/properties");
  class BaseX {
      constructor(alphabet){
          (0, _properties.defineReadOnly)(this, "alphabet", alphabet);
          (0, _properties.defineReadOnly)(this, "base", alphabet.length);
          (0, _properties.defineReadOnly)(this, "_alphabetMap", {});
          (0, _properties.defineReadOnly)(this, "_leader", alphabet.charAt(0));
          // pre-compute lookup table
          for(let i = 0; i < alphabet.length; i++)this._alphabetMap[alphabet.charAt(i)] = i;
      }
      encode(value) {
          let source = (0, _bytes.arrayify)(value);
          if (source.length === 0) return "";
          let digits = [
              0
          ];
          for(let i = 0; i < source.length; ++i){
              let carry = source[i];
              for(let j = 0; j < digits.length; ++j){
                  carry += digits[j] << 8;
                  digits[j] = carry % this.base;
                  carry = carry / this.base | 0;
              }
              while(carry > 0){
                  digits.push(carry % this.base);
                  carry = carry / this.base | 0;
              }
          }
          let string = "";
          // deal with leading zeros
          for(let k = 0; source[k] === 0 && k < source.length - 1; ++k)string += this._leader;
          // convert digits to a string
          for(let q = digits.length - 1; q >= 0; --q)string += this.alphabet[digits[q]];
          return string;
      }
      decode(value) {
          if (typeof value !== "string") throw new TypeError("Expected String");
          let bytes = [];
          if (value.length === 0) return new Uint8Array(bytes);
          bytes.push(0);
          for(let i = 0; i < value.length; i++){
              let byte = this._alphabetMap[value[i]];
              if (byte === undefined) throw new Error("Non-base" + this.base + " character");
              let carry = byte;
              for(let j = 0; j < bytes.length; ++j){
                  carry += bytes[j] * this.base;
                  bytes[j] = carry & 0xff;
                  carry >>= 8;
              }
              while(carry > 0){
                  bytes.push(carry & 0xff);
                  carry >>= 8;
              }
          }
          // deal with leading zeros
          for(let k = 0; value[k] === this._leader && k < value.length - 1; ++k)bytes.push(0);
          return (0, _bytes.arrayify)(new Uint8Array(bytes.reverse()));
      }
  }
  const Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
  const Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
  
  },{"@ethersproject/bytes":"htrqZ","@ethersproject/properties":"h3GJb","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"gKbDE":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "AddressZero", ()=>(0, _addresses.AddressZero));
  parcelHelpers.export(exports, "NegativeOne", ()=>(0, _bignumbers.NegativeOne));
  parcelHelpers.export(exports, "Zero", ()=>(0, _bignumbers.Zero));
  parcelHelpers.export(exports, "One", ()=>(0, _bignumbers.One));
  parcelHelpers.export(exports, "Two", ()=>(0, _bignumbers.Two));
  parcelHelpers.export(exports, "WeiPerEther", ()=>(0, _bignumbers.WeiPerEther));
  parcelHelpers.export(exports, "MaxUint256", ()=>(0, _bignumbers.MaxUint256));
  parcelHelpers.export(exports, "MinInt256", ()=>(0, _bignumbers.MinInt256));
  parcelHelpers.export(exports, "MaxInt256", ()=>(0, _bignumbers.MaxInt256));
  parcelHelpers.export(exports, "HashZero", ()=>(0, _hashes.HashZero));
  parcelHelpers.export(exports, "EtherSymbol", ()=>(0, _strings.EtherSymbol));
  var _addresses = require("./addresses");
  var _bignumbers = require("./bignumbers");
  var _hashes = require("./hashes");
  var _strings = require("./strings");
  "use strict";
  
  },{"./addresses":"jR81H","./bignumbers":"dwozw","./hashes":"4Kb3P","./strings":"gdaUD","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"jR81H":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "AddressZero", ()=>AddressZero);
  const AddressZero = "0x0000000000000000000000000000000000000000";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"dwozw":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "NegativeOne", ()=>NegativeOne);
  parcelHelpers.export(exports, "Zero", ()=>Zero);
  parcelHelpers.export(exports, "One", ()=>One);
  parcelHelpers.export(exports, "Two", ()=>Two);
  parcelHelpers.export(exports, "WeiPerEther", ()=>WeiPerEther);
  parcelHelpers.export(exports, "MaxUint256", ()=>MaxUint256);
  parcelHelpers.export(exports, "MinInt256", ()=>MinInt256);
  parcelHelpers.export(exports, "MaxInt256", ()=>MaxInt256);
  var _bignumber = require("@ethersproject/bignumber");
  const NegativeOne = /*#__PURE__*/ (0, _bignumber.BigNumber).from(-1);
  const Zero = /*#__PURE__*/ (0, _bignumber.BigNumber).from(0);
  const One = /*#__PURE__*/ (0, _bignumber.BigNumber).from(1);
  const Two = /*#__PURE__*/ (0, _bignumber.BigNumber).from(2);
  const WeiPerEther = /*#__PURE__*/ (0, _bignumber.BigNumber).from("1000000000000000000");
  const MaxUint256 = /*#__PURE__*/ (0, _bignumber.BigNumber).from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  const MinInt256 = /*#__PURE__*/ (0, _bignumber.BigNumber).from("-0x8000000000000000000000000000000000000000000000000000000000000000");
  const MaxInt256 = /*#__PURE__*/ (0, _bignumber.BigNumber).from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  
  },{"@ethersproject/bignumber":"ckYYW","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"4Kb3P":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "HashZero", ()=>HashZero);
  const HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"gdaUD":[function(require,module,exports) {
  // NFKC (composed)             // (decomposed)
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "EtherSymbol", ()=>EtherSymbol);
  const EtherSymbol = "Ξ"; // "\uD835\uDF63";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"7JYPm":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "id", ()=>(0, _id.id));
  parcelHelpers.export(exports, "dnsEncode", ()=>(0, _namehash.dnsEncode));
  parcelHelpers.export(exports, "namehash", ()=>(0, _namehash.namehash));
  parcelHelpers.export(exports, "isValidName", ()=>(0, _namehash.isValidName));
  parcelHelpers.export(exports, "ensNormalize", ()=>(0, _namehash.ensNormalize));
  parcelHelpers.export(exports, "messagePrefix", ()=>(0, _message.messagePrefix));
  parcelHelpers.export(exports, "hashMessage", ()=>(0, _message.hashMessage));
  parcelHelpers.export(exports, "_TypedDataEncoder", ()=>(0, _typedData.TypedDataEncoder));
  var _id = require("./id");
  var _namehash = require("./namehash");
  var _message = require("./message");
  var _typedData = require("./typed-data");
  "use strict";
  
  },{"./id":"70HiZ","./namehash":"bSxC5","./message":"hJKk8","./typed-data":"lozox","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"70HiZ":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "id", ()=>id);
  var _keccak256 = require("@ethersproject/keccak256");
  var _strings = require("@ethersproject/strings");
  function id(text) {
      return (0, _keccak256.keccak256)((0, _strings.toUtf8Bytes)(text));
  }
  
  },{"@ethersproject/keccak256":"hXDEv","@ethersproject/strings":"5TGFZ","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"hXDEv":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "keccak256", ()=>keccak256);
  var _jsSha3 = require("js-sha3");
  var _jsSha3Default = parcelHelpers.interopDefault(_jsSha3);
  var _bytes = require("@ethersproject/bytes");
  "use strict";
  function keccak256(data) {
      return "0x" + (0, _jsSha3Default.default).keccak_256((0, _bytes.arrayify)(data));
  }
  
  },{"js-sha3":"7x0z6","@ethersproject/bytes":"htrqZ","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"7x0z6":[function(require,module,exports) {
  var process = require("2469dc856b9108dc");
  var global = arguments[3];
  /**
   * [js-sha3]{@link https://github.com/emn178/js-sha3}
   *
   * @version 0.8.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2018
   * @license MIT
   */ /*jslint bitwise: true */ (function() {
      "use strict";
      var INPUT_ERROR = "input is invalid type";
      var FINALIZE_ERROR = "finalize already called";
      var WINDOW = typeof window === "object";
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) WINDOW = false;
      var WEB_WORKER = !WINDOW && typeof self === "object";
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS) root = global;
      else if (WEB_WORKER) root = self;
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && true && module.exports;
      var AMD = typeof define === "function" && define.amd;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
      var HEX_CHARS = "0123456789abcdef".split("");
      var SHAKE_PADDING = [
          31,
          7936,
          2031616,
          520093696
      ];
      var CSHAKE_PADDING = [
          4,
          1024,
          262144,
          67108864
      ];
      var KECCAK_PADDING = [
          1,
          256,
          65536,
          16777216
      ];
      var PADDING = [
          6,
          1536,
          393216,
          100663296
      ];
      var SHIFT = [
          0,
          8,
          16,
          24
      ];
      var RC = [
          1,
          0,
          32898,
          0,
          32906,
          2147483648,
          2147516416,
          2147483648,
          32907,
          0,
          2147483649,
          0,
          2147516545,
          2147483648,
          32777,
          2147483648,
          138,
          0,
          136,
          0,
          2147516425,
          0,
          2147483658,
          0,
          2147516555,
          0,
          139,
          2147483648,
          32905,
          2147483648,
          32771,
          2147483648,
          32770,
          2147483648,
          128,
          2147483648,
          32778,
          0,
          2147483658,
          2147483648,
          2147516545,
          2147483648,
          32896,
          2147483648,
          2147483649,
          0,
          2147516424,
          2147483648
      ];
      var BITS = [
          224,
          256,
          384,
          512
      ];
      var SHAKE_BITS = [
          128,
          256
      ];
      var OUTPUT_TYPES = [
          "hex",
          "buffer",
          "arrayBuffer",
          "array",
          "digest"
      ];
      var CSHAKE_BYTEPAD = {
          "128": 168,
          "256": 136
      };
      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) Array.isArray = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
      };
      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) ArrayBuffer.isView = function(obj) {
          return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
      };
      var createOutputMethod = function(bits, padding, outputType) {
          return function(message) {
              return new Keccak(bits, padding, bits).update(message)[outputType]();
          };
      };
      var createShakeOutputMethod = function(bits, padding, outputType) {
          return function(message, outputBits) {
              return new Keccak(bits, padding, outputBits).update(message)[outputType]();
          };
      };
      var createCshakeOutputMethod = function(bits, padding, outputType) {
          return function(message, outputBits, n, s) {
              return methods["cshake" + bits].update(message, outputBits, n, s)[outputType]();
          };
      };
      var createKmacOutputMethod = function(bits, padding, outputType) {
          return function(key, message, outputBits, s) {
              return methods["kmac" + bits].update(key, message, outputBits, s)[outputType]();
          };
      };
      var createOutputMethods = function(method, createMethod, bits, padding) {
          for(var i = 0; i < OUTPUT_TYPES.length; ++i){
              var type = OUTPUT_TYPES[i];
              method[type] = createMethod(bits, padding, type);
          }
          return method;
      };
      var createMethod = function(bits, padding) {
          var method = createOutputMethod(bits, padding, "hex");
          method.create = function() {
              return new Keccak(bits, padding, bits);
          };
          method.update = function(message) {
              return method.create().update(message);
          };
          return createOutputMethods(method, createOutputMethod, bits, padding);
      };
      var createShakeMethod = function(bits, padding) {
          var method = createShakeOutputMethod(bits, padding, "hex");
          method.create = function(outputBits) {
              return new Keccak(bits, padding, outputBits);
          };
          method.update = function(message, outputBits) {
              return method.create(outputBits).update(message);
          };
          return createOutputMethods(method, createShakeOutputMethod, bits, padding);
      };
      var createCshakeMethod = function(bits, padding) {
          var w = CSHAKE_BYTEPAD[bits];
          var method = createCshakeOutputMethod(bits, padding, "hex");
          method.create = function(outputBits, n, s) {
              if (!n && !s) return methods["shake" + bits].create(outputBits);
              else return new Keccak(bits, padding, outputBits).bytepad([
                  n,
                  s
              ], w);
          };
          method.update = function(message, outputBits, n, s) {
              return method.create(outputBits, n, s).update(message);
          };
          return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
      };
      var createKmacMethod = function(bits, padding) {
          var w = CSHAKE_BYTEPAD[bits];
          var method = createKmacOutputMethod(bits, padding, "hex");
          method.create = function(key, outputBits, s) {
              return new Kmac(bits, padding, outputBits).bytepad([
                  "KMAC",
                  s
              ], w).bytepad([
                  key
              ], w);
          };
          method.update = function(key, message, outputBits, s) {
              return method.create(key, outputBits, s).update(message);
          };
          return createOutputMethods(method, createKmacOutputMethod, bits, padding);
      };
      var algorithms = [
          {
              name: "keccak",
              padding: KECCAK_PADDING,
              bits: BITS,
              createMethod: createMethod
          },
          {
              name: "sha3",
              padding: PADDING,
              bits: BITS,
              createMethod: createMethod
          },
          {
              name: "shake",
              padding: SHAKE_PADDING,
              bits: SHAKE_BITS,
              createMethod: createShakeMethod
          },
          {
              name: "cshake",
              padding: CSHAKE_PADDING,
              bits: SHAKE_BITS,
              createMethod: createCshakeMethod
          },
          {
              name: "kmac",
              padding: CSHAKE_PADDING,
              bits: SHAKE_BITS,
              createMethod: createKmacMethod
          }
      ];
      var methods = {}, methodNames = [];
      for(var i = 0; i < algorithms.length; ++i){
          var algorithm = algorithms[i];
          var bits = algorithm.bits;
          for(var j = 0; j < bits.length; ++j){
              var methodName = algorithm.name + "_" + bits[j];
              methodNames.push(methodName);
              methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
              if (algorithm.name !== "sha3") {
                  var newMethodName = algorithm.name + bits[j];
                  methodNames.push(newMethodName);
                  methods[newMethodName] = methods[methodName];
              }
          }
      }
      function Keccak(bits, padding, outputBits) {
          this.blocks = [];
          this.s = [];
          this.padding = padding;
          this.outputBits = outputBits;
          this.reset = true;
          this.finalized = false;
          this.block = 0;
          this.start = 0;
          this.blockCount = 1600 - (bits << 1) >> 5;
          this.byteCount = this.blockCount << 2;
          this.outputBlocks = outputBits >> 5;
          this.extraBytes = (outputBits & 31) >> 3;
          for(var i = 0; i < 50; ++i)this.s[i] = 0;
      }
      Keccak.prototype.update = function(message) {
          if (this.finalized) throw new Error(FINALIZE_ERROR);
          var notString, type = typeof message;
          if (type !== "string") {
              if (type === "object") {
                  if (message === null) throw new Error(INPUT_ERROR);
                  else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) message = new Uint8Array(message);
                  else if (!Array.isArray(message)) {
                      if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) throw new Error(INPUT_ERROR);
                  }
              } else throw new Error(INPUT_ERROR);
              notString = true;
          }
          var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s = this.s, i, code;
          while(index < length){
              if (this.reset) {
                  this.reset = false;
                  blocks[0] = this.block;
                  for(i = 1; i < blockCount + 1; ++i)blocks[i] = 0;
              }
              if (notString) for(i = this.start; index < length && i < byteCount; ++index)blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
              else for(i = this.start; index < length && i < byteCount; ++index){
                  code = message.charCodeAt(index);
                  if (code < 0x80) blocks[i >> 2] |= code << SHIFT[i++ & 3];
                  else if (code < 0x800) {
                      blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];
                      blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
                  } else if (code < 0xd800 || code >= 0xe000) {
                      blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];
                      blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
                      blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
                  } else {
                      code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
                      blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];
                      blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];
                      blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
                      blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
                  }
              }
              this.lastByteIndex = i;
              if (i >= byteCount) {
                  this.start = i - byteCount;
                  this.block = blocks[blockCount];
                  for(i = 0; i < blockCount; ++i)s[i] ^= blocks[i];
                  f(s);
                  this.reset = true;
              } else this.start = i;
          }
          return this;
      };
      Keccak.prototype.encode = function(x, right) {
          var o = x & 255, n = 1;
          var bytes = [
              o
          ];
          x = x >> 8;
          o = x & 255;
          while(o > 0){
              bytes.unshift(o);
              x = x >> 8;
              o = x & 255;
              ++n;
          }
          if (right) bytes.push(n);
          else bytes.unshift(n);
          this.update(bytes);
          return bytes.length;
      };
      Keccak.prototype.encodeString = function(str) {
          var notString, type = typeof str;
          if (type !== "string") {
              if (type === "object") {
                  if (str === null) throw new Error(INPUT_ERROR);
                  else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) str = new Uint8Array(str);
                  else if (!Array.isArray(str)) {
                      if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) throw new Error(INPUT_ERROR);
                  }
              } else throw new Error(INPUT_ERROR);
              notString = true;
          }
          var bytes = 0, length = str.length;
          if (notString) bytes = length;
          else for(var i = 0; i < str.length; ++i){
              var code = str.charCodeAt(i);
              if (code < 0x80) bytes += 1;
              else if (code < 0x800) bytes += 2;
              else if (code < 0xd800 || code >= 0xe000) bytes += 3;
              else {
                  code = 0x10000 + ((code & 0x3ff) << 10 | str.charCodeAt(++i) & 0x3ff);
                  bytes += 4;
              }
          }
          bytes += this.encode(bytes * 8);
          this.update(str);
          return bytes;
      };
      Keccak.prototype.bytepad = function(strs, w) {
          var bytes = this.encode(w);
          for(var i = 0; i < strs.length; ++i)bytes += this.encodeString(strs[i]);
          var paddingBytes = w - bytes % w;
          var zeros = [];
          zeros.length = paddingBytes;
          this.update(zeros);
          return this;
      };
      Keccak.prototype.finalize = function() {
          if (this.finalized) return;
          this.finalized = true;
          var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
          blocks[i >> 2] |= this.padding[i & 3];
          if (this.lastByteIndex === this.byteCount) {
              blocks[0] = blocks[blockCount];
              for(i = 1; i < blockCount + 1; ++i)blocks[i] = 0;
          }
          blocks[blockCount - 1] |= 0x80000000;
          for(i = 0; i < blockCount; ++i)s[i] ^= blocks[i];
          f(s);
      };
      Keccak.prototype.toString = Keccak.prototype.hex = function() {
          this.finalize();
          var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i = 0, j = 0;
          var hex = "", block;
          while(j < outputBlocks){
              for(i = 0; i < blockCount && j < outputBlocks; ++i, ++j){
                  block = s[i];
                  hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];
              }
              if (j % blockCount === 0) {
                  f(s);
                  i = 0;
              }
          }
          if (extraBytes) {
              block = s[i];
              hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F];
              if (extraBytes > 1) hex += HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F];
              if (extraBytes > 2) hex += HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F];
          }
          return hex;
      };
      Keccak.prototype.arrayBuffer = function() {
          this.finalize();
          var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i = 0, j = 0;
          var bytes = this.outputBits >> 3;
          var buffer;
          if (extraBytes) buffer = new ArrayBuffer(outputBlocks + 1 << 2);
          else buffer = new ArrayBuffer(bytes);
          var array = new Uint32Array(buffer);
          while(j < outputBlocks){
              for(i = 0; i < blockCount && j < outputBlocks; ++i, ++j)array[j] = s[i];
              if (j % blockCount === 0) f(s);
          }
          if (extraBytes) {
              array[i] = s[i];
              buffer = buffer.slice(0, bytes);
          }
          return buffer;
      };
      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
      Keccak.prototype.digest = Keccak.prototype.array = function() {
          this.finalize();
          var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i = 0, j = 0;
          var array = [], offset, block;
          while(j < outputBlocks){
              for(i = 0; i < blockCount && j < outputBlocks; ++i, ++j){
                  offset = j << 2;
                  block = s[i];
                  array[offset] = block & 0xFF;
                  array[offset + 1] = block >> 8 & 0xFF;
                  array[offset + 2] = block >> 16 & 0xFF;
                  array[offset + 3] = block >> 24 & 0xFF;
              }
              if (j % blockCount === 0) f(s);
          }
          if (extraBytes) {
              offset = j << 2;
              block = s[i];
              array[offset] = block & 0xFF;
              if (extraBytes > 1) array[offset + 1] = block >> 8 & 0xFF;
              if (extraBytes > 2) array[offset + 2] = block >> 16 & 0xFF;
          }
          return array;
      };
      function Kmac(bits, padding, outputBits) {
          Keccak.call(this, bits, padding, outputBits);
      }
      Kmac.prototype = new Keccak();
      Kmac.prototype.finalize = function() {
          this.encode(this.outputBits, true);
          return Keccak.prototype.finalize.call(this);
      };
      var f = function(s) {
          var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
          for(n = 0; n < 48; n += 2){
              c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
              c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
              c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
              c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
              c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
              c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
              c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
              c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
              c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
              c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
              h = c8 ^ (c2 << 1 | c3 >>> 31);
              l = c9 ^ (c3 << 1 | c2 >>> 31);
              s[0] ^= h;
              s[1] ^= l;
              s[10] ^= h;
              s[11] ^= l;
              s[20] ^= h;
              s[21] ^= l;
              s[30] ^= h;
              s[31] ^= l;
              s[40] ^= h;
              s[41] ^= l;
              h = c0 ^ (c4 << 1 | c5 >>> 31);
              l = c1 ^ (c5 << 1 | c4 >>> 31);
              s[2] ^= h;
              s[3] ^= l;
              s[12] ^= h;
              s[13] ^= l;
              s[22] ^= h;
              s[23] ^= l;
              s[32] ^= h;
              s[33] ^= l;
              s[42] ^= h;
              s[43] ^= l;
              h = c2 ^ (c6 << 1 | c7 >>> 31);
              l = c3 ^ (c7 << 1 | c6 >>> 31);
              s[4] ^= h;
              s[5] ^= l;
              s[14] ^= h;
              s[15] ^= l;
              s[24] ^= h;
              s[25] ^= l;
              s[34] ^= h;
              s[35] ^= l;
              s[44] ^= h;
              s[45] ^= l;
              h = c4 ^ (c8 << 1 | c9 >>> 31);
              l = c5 ^ (c9 << 1 | c8 >>> 31);
              s[6] ^= h;
              s[7] ^= l;
              s[16] ^= h;
              s[17] ^= l;
              s[26] ^= h;
              s[27] ^= l;
              s[36] ^= h;
              s[37] ^= l;
              s[46] ^= h;
              s[47] ^= l;
              h = c6 ^ (c0 << 1 | c1 >>> 31);
              l = c7 ^ (c1 << 1 | c0 >>> 31);
              s[8] ^= h;
              s[9] ^= l;
              s[18] ^= h;
              s[19] ^= l;
              s[28] ^= h;
              s[29] ^= l;
              s[38] ^= h;
              s[39] ^= l;
              s[48] ^= h;
              s[49] ^= l;
              b0 = s[0];
              b1 = s[1];
              b32 = s[11] << 4 | s[10] >>> 28;
              b33 = s[10] << 4 | s[11] >>> 28;
              b14 = s[20] << 3 | s[21] >>> 29;
              b15 = s[21] << 3 | s[20] >>> 29;
              b46 = s[31] << 9 | s[30] >>> 23;
              b47 = s[30] << 9 | s[31] >>> 23;
              b28 = s[40] << 18 | s[41] >>> 14;
              b29 = s[41] << 18 | s[40] >>> 14;
              b20 = s[2] << 1 | s[3] >>> 31;
              b21 = s[3] << 1 | s[2] >>> 31;
              b2 = s[13] << 12 | s[12] >>> 20;
              b3 = s[12] << 12 | s[13] >>> 20;
              b34 = s[22] << 10 | s[23] >>> 22;
              b35 = s[23] << 10 | s[22] >>> 22;
              b16 = s[33] << 13 | s[32] >>> 19;
              b17 = s[32] << 13 | s[33] >>> 19;
              b48 = s[42] << 2 | s[43] >>> 30;
              b49 = s[43] << 2 | s[42] >>> 30;
              b40 = s[5] << 30 | s[4] >>> 2;
              b41 = s[4] << 30 | s[5] >>> 2;
              b22 = s[14] << 6 | s[15] >>> 26;
              b23 = s[15] << 6 | s[14] >>> 26;
              b4 = s[25] << 11 | s[24] >>> 21;
              b5 = s[24] << 11 | s[25] >>> 21;
              b36 = s[34] << 15 | s[35] >>> 17;
              b37 = s[35] << 15 | s[34] >>> 17;
              b18 = s[45] << 29 | s[44] >>> 3;
              b19 = s[44] << 29 | s[45] >>> 3;
              b10 = s[6] << 28 | s[7] >>> 4;
              b11 = s[7] << 28 | s[6] >>> 4;
              b42 = s[17] << 23 | s[16] >>> 9;
              b43 = s[16] << 23 | s[17] >>> 9;
              b24 = s[26] << 25 | s[27] >>> 7;
              b25 = s[27] << 25 | s[26] >>> 7;
              b6 = s[36] << 21 | s[37] >>> 11;
              b7 = s[37] << 21 | s[36] >>> 11;
              b38 = s[47] << 24 | s[46] >>> 8;
              b39 = s[46] << 24 | s[47] >>> 8;
              b30 = s[8] << 27 | s[9] >>> 5;
              b31 = s[9] << 27 | s[8] >>> 5;
              b12 = s[18] << 20 | s[19] >>> 12;
              b13 = s[19] << 20 | s[18] >>> 12;
              b44 = s[29] << 7 | s[28] >>> 25;
              b45 = s[28] << 7 | s[29] >>> 25;
              b26 = s[38] << 8 | s[39] >>> 24;
              b27 = s[39] << 8 | s[38] >>> 24;
              b8 = s[48] << 14 | s[49] >>> 18;
              b9 = s[49] << 14 | s[48] >>> 18;
              s[0] = b0 ^ ~b2 & b4;
              s[1] = b1 ^ ~b3 & b5;
              s[10] = b10 ^ ~b12 & b14;
              s[11] = b11 ^ ~b13 & b15;
              s[20] = b20 ^ ~b22 & b24;
              s[21] = b21 ^ ~b23 & b25;
              s[30] = b30 ^ ~b32 & b34;
              s[31] = b31 ^ ~b33 & b35;
              s[40] = b40 ^ ~b42 & b44;
              s[41] = b41 ^ ~b43 & b45;
              s[2] = b2 ^ ~b4 & b6;
              s[3] = b3 ^ ~b5 & b7;
              s[12] = b12 ^ ~b14 & b16;
              s[13] = b13 ^ ~b15 & b17;
              s[22] = b22 ^ ~b24 & b26;
              s[23] = b23 ^ ~b25 & b27;
              s[32] = b32 ^ ~b34 & b36;
              s[33] = b33 ^ ~b35 & b37;
              s[42] = b42 ^ ~b44 & b46;
              s[43] = b43 ^ ~b45 & b47;
              s[4] = b4 ^ ~b6 & b8;
              s[5] = b5 ^ ~b7 & b9;
              s[14] = b14 ^ ~b16 & b18;
              s[15] = b15 ^ ~b17 & b19;
              s[24] = b24 ^ ~b26 & b28;
              s[25] = b25 ^ ~b27 & b29;
              s[34] = b34 ^ ~b36 & b38;
              s[35] = b35 ^ ~b37 & b39;
              s[44] = b44 ^ ~b46 & b48;
              s[45] = b45 ^ ~b47 & b49;
              s[6] = b6 ^ ~b8 & b0;
              s[7] = b7 ^ ~b9 & b1;
              s[16] = b16 ^ ~b18 & b10;
              s[17] = b17 ^ ~b19 & b11;
              s[26] = b26 ^ ~b28 & b20;
              s[27] = b27 ^ ~b29 & b21;
              s[36] = b36 ^ ~b38 & b30;
              s[37] = b37 ^ ~b39 & b31;
              s[46] = b46 ^ ~b48 & b40;
              s[47] = b47 ^ ~b49 & b41;
              s[8] = b8 ^ ~b0 & b2;
              s[9] = b9 ^ ~b1 & b3;
              s[18] = b18 ^ ~b10 & b12;
              s[19] = b19 ^ ~b11 & b13;
              s[28] = b28 ^ ~b20 & b22;
              s[29] = b29 ^ ~b21 & b23;
              s[38] = b38 ^ ~b30 & b32;
              s[39] = b39 ^ ~b31 & b33;
              s[48] = b48 ^ ~b40 & b42;
              s[49] = b49 ^ ~b41 & b43;
              s[0] ^= RC[n];
              s[1] ^= RC[n + 1];
          }
      };
      if (COMMON_JS) module.exports = methods;
      else {
          for(i = 0; i < methodNames.length; ++i)root[methodNames[i]] = methods[methodNames[i]];
          if (AMD) define(function() {
              return methods;
          });
      }
  })();
  
  },{"2469dc856b9108dc":"d5jf4"}],"5TGFZ":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "_toEscapedUtf8String", ()=>(0, _utf8._toEscapedUtf8String));
  parcelHelpers.export(exports, "toUtf8Bytes", ()=>(0, _utf8.toUtf8Bytes));
  parcelHelpers.export(exports, "toUtf8CodePoints", ()=>(0, _utf8.toUtf8CodePoints));
  parcelHelpers.export(exports, "toUtf8String", ()=>(0, _utf8.toUtf8String));
  parcelHelpers.export(exports, "Utf8ErrorFuncs", ()=>(0, _utf8.Utf8ErrorFuncs));
  parcelHelpers.export(exports, "Utf8ErrorReason", ()=>(0, _utf8.Utf8ErrorReason));
  parcelHelpers.export(exports, "UnicodeNormalizationForm", ()=>(0, _utf8.UnicodeNormalizationForm));
  parcelHelpers.export(exports, "formatBytes32String", ()=>(0, _bytes32.formatBytes32String));
  parcelHelpers.export(exports, "parseBytes32String", ()=>(0, _bytes32.parseBytes32String));
  parcelHelpers.export(exports, "nameprep", ()=>(0, _idna.nameprep));
  var _bytes32 = require("./bytes32");
  var _idna = require("./idna");
  var _utf8 = require("./utf8");
  "use strict";
  
  },{"./bytes32":"l8eOg","./idna":"9qcL7","./utf8":"dsMpR","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"l8eOg":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "formatBytes32String", ()=>formatBytes32String);
  parcelHelpers.export(exports, "parseBytes32String", ()=>parseBytes32String);
  var _constants = require("@ethersproject/constants");
  var _bytes = require("@ethersproject/bytes");
  var _utf8 = require("./utf8");
  "use strict";
  function formatBytes32String(text) {
      // Get the bytes
      const bytes = (0, _utf8.toUtf8Bytes)(text);
      // Check we have room for null-termination
      if (bytes.length > 31) throw new Error("bytes32 string must be less than 32 bytes");
      // Zero-pad (implicitly null-terminates)
      return (0, _bytes.hexlify)((0, _bytes.concat)([
          bytes,
          (0, _constants.HashZero)
      ]).slice(0, 32));
  }
  function parseBytes32String(bytes) {
      const data = (0, _bytes.arrayify)(bytes);
      // Must be 32 bytes with a null-termination
      if (data.length !== 32) throw new Error("invalid bytes32 - not 32 bytes long");
      if (data[31] !== 0) throw new Error("invalid bytes32 string - no null terminator");
      // Find the null termination
      let length = 31;
      while(data[length - 1] === 0)length--;
      // Determine the string value
      return (0, _utf8.toUtf8String)(data.slice(0, length));
  }
  
  },{"@ethersproject/constants":"gKbDE","@ethersproject/bytes":"htrqZ","./utf8":"dsMpR","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"dsMpR":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "UnicodeNormalizationForm", ()=>UnicodeNormalizationForm);
  parcelHelpers.export(exports, "Utf8ErrorReason", ()=>Utf8ErrorReason);
  parcelHelpers.export(exports, "Utf8ErrorFuncs", ()=>Utf8ErrorFuncs);
  // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
  parcelHelpers.export(exports, "toUtf8Bytes", ()=>toUtf8Bytes);
  parcelHelpers.export(exports, "_toEscapedUtf8String", ()=>_toEscapedUtf8String);
  parcelHelpers.export(exports, "_toUtf8String", ()=>_toUtf8String);
  parcelHelpers.export(exports, "toUtf8String", ()=>toUtf8String);
  parcelHelpers.export(exports, "toUtf8CodePoints", ()=>toUtf8CodePoints);
  var _bytes = require("@ethersproject/bytes");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  "use strict";
  const logger = new (0, _logger.Logger)((0, _version.version));
  var UnicodeNormalizationForm;
  (function(UnicodeNormalizationForm) {
      UnicodeNormalizationForm["current"] = "";
      UnicodeNormalizationForm["NFC"] = "NFC";
      UnicodeNormalizationForm["NFD"] = "NFD";
      UnicodeNormalizationForm["NFKC"] = "NFKC";
      UnicodeNormalizationForm["NFKD"] = "NFKD";
  })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
  var Utf8ErrorReason;
  (function(Utf8ErrorReason) {
      // A continuation byte was present where there was nothing to continue
      // - offset = the index the codepoint began in
      Utf8ErrorReason["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
      // An invalid (non-continuation) byte to start a UTF-8 codepoint was found
      // - offset = the index the codepoint began in
      Utf8ErrorReason["BAD_PREFIX"] = "bad codepoint prefix";
      // The string is too short to process the expected codepoint
      // - offset = the index the codepoint began in
      Utf8ErrorReason["OVERRUN"] = "string overrun";
      // A missing continuation byte was expected but not found
      // - offset = the index the continuation byte was expected at
      Utf8ErrorReason["MISSING_CONTINUE"] = "missing continuation byte";
      // The computed code point is outside the range for UTF-8
      // - offset       = start of this codepoint
      // - badCodepoint = the computed codepoint; outside the UTF-8 range
      Utf8ErrorReason["OUT_OF_RANGE"] = "out of UTF-8 range";
      // UTF-8 strings may not contain UTF-16 surrogate pairs
      // - offset       = start of this codepoint
      // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range
      Utf8ErrorReason["UTF16_SURROGATE"] = "UTF-16 surrogate";
      // The string is an overlong representation
      // - offset       = start of this codepoint
      // - badCodepoint = the computed codepoint; already bounds checked
      Utf8ErrorReason["OVERLONG"] = "overlong representation";
  })(Utf8ErrorReason || (Utf8ErrorReason = {}));
  function errorFunc(reason, offset, bytes, output, badCodepoint) {
      return logger.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
  }
  function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
      // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
      if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
          let i = 0;
          for(let o = offset + 1; o < bytes.length; o++){
              if (bytes[o] >> 6 !== 0x02) break;
              i++;
          }
          return i;
      }
      // This byte runs us past the end of the string, so just jump to the end
      // (but the first byte was read already read and therefore skipped)
      if (reason === Utf8ErrorReason.OVERRUN) return bytes.length - offset - 1;
      // Nothing to skip
      return 0;
  }
  function replaceFunc(reason, offset, bytes, output, badCodepoint) {
      // Overlong representations are otherwise "valid" code points; just non-deistingtished
      if (reason === Utf8ErrorReason.OVERLONG) {
          output.push(badCodepoint);
          return 0;
      }
      // Put the replacement character into the output
      output.push(0xfffd);
      // Otherwise, process as if ignoring errors
      return ignoreFunc(reason, offset, bytes, output, badCodepoint);
  }
  const Utf8ErrorFuncs = Object.freeze({
      error: errorFunc,
      ignore: ignoreFunc,
      replace: replaceFunc
  });
  // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
  function getUtf8CodePoints(bytes, onError) {
      if (onError == null) onError = Utf8ErrorFuncs.error;
      bytes = (0, _bytes.arrayify)(bytes);
      const result = [];
      let i = 0;
      // Invalid bytes are ignored
      while(i < bytes.length){
          const c = bytes[i++];
          // 0xxx xxxx
          if (c >> 7 === 0) {
              result.push(c);
              continue;
          }
          // Multibyte; how many bytes left for this character?
          let extraLength = null;
          let overlongMask = null;
          // 110x xxxx 10xx xxxx
          if ((c & 0xe0) === 0xc0) {
              extraLength = 1;
              overlongMask = 0x7f;
          // 1110 xxxx 10xx xxxx 10xx xxxx
          } else if ((c & 0xf0) === 0xe0) {
              extraLength = 2;
              overlongMask = 0x7ff;
          // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
          } else if ((c & 0xf8) === 0xf0) {
              extraLength = 3;
              overlongMask = 0xffff;
          } else {
              if ((c & 0xc0) === 0x80) i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
              else i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
              continue;
          }
          // Do we have enough bytes in our data?
          if (i - 1 + extraLength >= bytes.length) {
              i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
              continue;
          }
          // Remove the length prefix from the char
          let res = c & (1 << 8 - extraLength - 1) - 1;
          for(let j = 0; j < extraLength; j++){
              let nextChar = bytes[i];
              // Invalid continuation byte
              if ((nextChar & 0xc0) != 0x80) {
                  i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
                  res = null;
                  break;
              }
              res = res << 6 | nextChar & 0x3f;
              i++;
          }
          // See above loop for invalid continuation byte
          if (res === null) continue;
          // Maximum code point
          if (res > 0x10ffff) {
              i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
              continue;
          }
          // Reserved for UTF-16 surrogate halves
          if (res >= 0xd800 && res <= 0xdfff) {
              i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
              continue;
          }
          // Check for overlong sequences (more bytes than needed)
          if (res <= overlongMask) {
              i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
              continue;
          }
          result.push(res);
      }
      return result;
  }
  function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
      if (form != UnicodeNormalizationForm.current) {
          logger.checkNormalize();
          str = str.normalize(form);
      }
      let result = [];
      for(let i = 0; i < str.length; i++){
          const c = str.charCodeAt(i);
          if (c < 0x80) result.push(c);
          else if (c < 0x800) {
              result.push(c >> 6 | 0xc0);
              result.push(c & 0x3f | 0x80);
          } else if ((c & 0xfc00) == 0xd800) {
              i++;
              const c2 = str.charCodeAt(i);
              if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) throw new Error("invalid utf-8 string");
              // Surrogate Pair
              const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
              result.push(pair >> 18 | 0xf0);
              result.push(pair >> 12 & 0x3f | 0x80);
              result.push(pair >> 6 & 0x3f | 0x80);
              result.push(pair & 0x3f | 0x80);
          } else {
              result.push(c >> 12 | 0xe0);
              result.push(c >> 6 & 0x3f | 0x80);
              result.push(c & 0x3f | 0x80);
          }
      }
      return (0, _bytes.arrayify)(result);
  }
  function escapeChar(value) {
      const hex = "0000" + value.toString(16);
      return "\\u" + hex.substring(hex.length - 4);
  }
  function _toEscapedUtf8String(bytes, onError) {
      return '"' + getUtf8CodePoints(bytes, onError).map((codePoint)=>{
          if (codePoint < 256) {
              switch(codePoint){
                  case 8:
                      return "\\b";
                  case 9:
                      return "\\t";
                  case 10:
                      return "\\n";
                  case 13:
                      return "\\r";
                  case 34:
                      return '\\"';
                  case 92:
                      return "\\\\";
              }
              if (codePoint >= 32 && codePoint < 127) return String.fromCharCode(codePoint);
          }
          if (codePoint <= 0xffff) return escapeChar(codePoint);
          codePoint -= 0x10000;
          return escapeChar((codePoint >> 10 & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);
      }).join("") + '"';
  }
  function _toUtf8String(codePoints) {
      return codePoints.map((codePoint)=>{
          if (codePoint <= 0xffff) return String.fromCharCode(codePoint);
          codePoint -= 0x10000;
          return String.fromCharCode((codePoint >> 10 & 0x3ff) + 0xd800, (codePoint & 0x3ff) + 0xdc00);
      }).join("");
  }
  function toUtf8String(bytes, onError) {
      return _toUtf8String(getUtf8CodePoints(bytes, onError));
  }
  function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {
      return getUtf8CodePoints(toUtf8Bytes(str, form));
  }
  
  },{"@ethersproject/bytes":"htrqZ","@ethersproject/logger":"hLvB2","./_version":"9NTd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"9NTd9":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "version", ()=>version);
  const version = "strings/5.7.0";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"9qcL7":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "_nameprepTableA1", ()=>_nameprepTableA1);
  parcelHelpers.export(exports, "_nameprepTableB2", ()=>_nameprepTableB2);
  parcelHelpers.export(exports, "_nameprepTableC", ()=>_nameprepTableC);
  parcelHelpers.export(exports, "nameprep", ()=>nameprep);
  var _utf8 = require("./utf8");
  "use strict";
  function bytes2(data) {
      if (data.length % 4 !== 0) throw new Error("bad data");
      let result = [];
      for(let i = 0; i < data.length; i += 4)result.push(parseInt(data.substring(i, i + 4), 16));
      return result;
  }
  function createTable(data, func) {
      if (!func) func = function(value) {
          return [
              parseInt(value, 16)
          ];
      };
      let lo = 0;
      let result = {};
      data.split(",").forEach((pair)=>{
          let comps = pair.split(":");
          lo += parseInt(comps[0], 16);
          result[lo] = func(comps[1]);
      });
      return result;
  }
  function createRangeTable(data) {
      let hi = 0;
      return data.split(",").map((v)=>{
          let comps = v.split("-");
          if (comps.length === 1) comps[1] = "0";
          else if (comps[1] === "") comps[1] = "1";
          let lo = hi + parseInt(comps[0], 16);
          hi = parseInt(comps[1], 16);
          return {
              l: lo,
              h: hi
          };
      });
  }
  function matchMap(value, ranges) {
      let lo = 0;
      for(let i = 0; i < ranges.length; i++){
          let range = ranges[i];
          lo += range.l;
          if (value >= lo && value <= lo + range.h && (value - lo) % (range.d || 1) === 0) {
              if (range.e && range.e.indexOf(value - lo) !== -1) continue;
              return range;
          }
      }
      return null;
  }
  const Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
  // @TODO: Make this relative...
  const Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v)=>parseInt(v, 16));
  const Table_B_2_ranges = [
      {
          h: 25,
          s: 32,
          l: 65
      },
      {
          h: 30,
          s: 32,
          e: [
              23
          ],
          l: 127
      },
      {
          h: 54,
          s: 1,
          e: [
              48
          ],
          l: 64,
          d: 2
      },
      {
          h: 14,
          s: 1,
          l: 57,
          d: 2
      },
      {
          h: 44,
          s: 1,
          l: 17,
          d: 2
      },
      {
          h: 10,
          s: 1,
          e: [
              2,
              6,
              8
          ],
          l: 61,
          d: 2
      },
      {
          h: 16,
          s: 1,
          l: 68,
          d: 2
      },
      {
          h: 84,
          s: 1,
          e: [
              18,
              24,
              66
          ],
          l: 19,
          d: 2
      },
      {
          h: 26,
          s: 32,
          e: [
              17
          ],
          l: 435
      },
      {
          h: 22,
          s: 1,
          l: 71,
          d: 2
      },
      {
          h: 15,
          s: 80,
          l: 40
      },
      {
          h: 31,
          s: 32,
          l: 16
      },
      {
          h: 32,
          s: 1,
          l: 80,
          d: 2
      },
      {
          h: 52,
          s: 1,
          l: 42,
          d: 2
      },
      {
          h: 12,
          s: 1,
          l: 55,
          d: 2
      },
      {
          h: 40,
          s: 1,
          e: [
              38
          ],
          l: 15,
          d: 2
      },
      {
          h: 14,
          s: 1,
          l: 48,
          d: 2
      },
      {
          h: 37,
          s: 48,
          l: 49
      },
      {
          h: 148,
          s: 1,
          l: 6351,
          d: 2
      },
      {
          h: 88,
          s: 1,
          l: 160,
          d: 2
      },
      {
          h: 15,
          s: 16,
          l: 704
      },
      {
          h: 25,
          s: 26,
          l: 854
      },
      {
          h: 25,
          s: 32,
          l: 55915
      },
      {
          h: 37,
          s: 40,
          l: 1247
      },
      {
          h: 25,
          s: -119711,
          l: 53248
      },
      {
          h: 25,
          s: -119763,
          l: 52
      },
      {
          h: 25,
          s: -119815,
          l: 52
      },
      {
          h: 25,
          s: -119867,
          e: [
              1,
              4,
              5,
              7,
              8,
              11,
              12,
              17
          ],
          l: 52
      },
      {
          h: 25,
          s: -119919,
          l: 52
      },
      {
          h: 24,
          s: -119971,
          e: [
              2,
              7,
              8,
              17
          ],
          l: 52
      },
      {
          h: 24,
          s: -120023,
          e: [
              2,
              7,
              13,
              15,
              16,
              17
          ],
          l: 52
      },
      {
          h: 25,
          s: -120075,
          l: 52
      },
      {
          h: 25,
          s: -120127,
          l: 52
      },
      {
          h: 25,
          s: -120179,
          l: 52
      },
      {
          h: 25,
          s: -120231,
          l: 52
      },
      {
          h: 25,
          s: -120283,
          l: 52
      },
      {
          h: 25,
          s: -120335,
          l: 52
      },
      {
          h: 24,
          s: -119543,
          e: [
              17
          ],
          l: 56
      },
      {
          h: 24,
          s: -119601,
          e: [
              17
          ],
          l: 58
      },
      {
          h: 24,
          s: -119659,
          e: [
              17
          ],
          l: 58
      },
      {
          h: 24,
          s: -119717,
          e: [
              17
          ],
          l: 58
      },
      {
          h: 24,
          s: -119775,
          e: [
              17
          ],
          l: 58
      }
  ];
  const Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
  const Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
  const Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
  const Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
  function flatten(values) {
      return values.reduce((accum, value)=>{
          value.forEach((value)=>{
              accum.push(value);
          });
          return accum;
      }, []);
  }
  function _nameprepTableA1(codepoint) {
      return !!matchMap(codepoint, Table_A_1_ranges);
  }
  function _nameprepTableB2(codepoint) {
      let range = matchMap(codepoint, Table_B_2_ranges);
      if (range) return [
          codepoint + range.s
      ];
      let codes = Table_B_2_lut_abs[codepoint];
      if (codes) return codes;
      let shift = Table_B_2_lut_rel[codepoint];
      if (shift) return [
          codepoint + shift[0]
      ];
      let complex = Table_B_2_complex[codepoint];
      if (complex) return complex;
      return null;
  }
  function _nameprepTableC(codepoint) {
      return !!matchMap(codepoint, Table_C_ranges);
  }
  function nameprep(value) {
      // This allows platforms with incomplete normalize to bypass
      // it for very basic names which the built-in toLowerCase
      // will certainly handle correctly
      if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) return value.toLowerCase();
      // Get the code points (keeping the current normalization)
      let codes = (0, _utf8.toUtf8CodePoints)(value);
      codes = flatten(codes.map((code)=>{
          // Substitute Table B.1 (Maps to Nothing)
          if (Table_B_1_flags.indexOf(code) >= 0) return [];
          if (code >= 0xfe00 && code <= 0xfe0f) return [];
          // Substitute Table B.2 (Case Folding)
          let codesTableB2 = _nameprepTableB2(code);
          if (codesTableB2) return codesTableB2;
          // No Substitution
          return [
              code
          ];
      }));
      // Normalize using form KC
      codes = (0, _utf8.toUtf8CodePoints)((0, _utf8._toUtf8String)(codes), (0, _utf8.UnicodeNormalizationForm).NFKC);
      // Prohibit Tables C.1.2, C.2.2, C.3, C.4, C.5, C.6, C.7, C.8, C.9
      codes.forEach((code)=>{
          if (_nameprepTableC(code)) throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
      });
      // Prohibit Unassigned Code Points (Table A.1)
      codes.forEach((code)=>{
          if (_nameprepTableA1(code)) throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
      });
      // IDNA extras
      let name = (0, _utf8._toUtf8String)(codes);
      // IDNA: 4.2.3.1
      if (name.substring(0, 1) === "-" || name.substring(2, 4) === "--" || name.substring(name.length - 1) === "-") throw new Error("invalid hyphen");
      return name;
  }
  
  },{"./utf8":"dsMpR","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"bSxC5":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "ensNormalize", ()=>ensNormalize);
  parcelHelpers.export(exports, "isValidName", ()=>isValidName);
  parcelHelpers.export(exports, "namehash", ()=>namehash);
  parcelHelpers.export(exports, "dnsEncode", ()=>dnsEncode);
  var _bytes = require("@ethersproject/bytes");
  var _strings = require("@ethersproject/strings");
  var _keccak256 = require("@ethersproject/keccak256");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  var _lib = require("./ens-normalize/lib");
  const logger = new (0, _logger.Logger)((0, _version.version));
  const Zeros = new Uint8Array(32);
  Zeros.fill(0);
  function checkComponent(comp) {
      if (comp.length === 0) throw new Error("invalid ENS name; empty component");
      return comp;
  }
  function ensNameSplit(name) {
      const bytes = (0, _strings.toUtf8Bytes)((0, _lib.ens_normalize)(name));
      const comps = [];
      if (name.length === 0) return comps;
      let last = 0;
      for(let i = 0; i < bytes.length; i++){
          const d = bytes[i];
          // A separator (i.e. "."); copy this component
          if (d === 0x2e) {
              comps.push(checkComponent(bytes.slice(last, i)));
              last = i + 1;
          }
      }
      // There was a stray separator at the end of the name
      if (last >= bytes.length) throw new Error("invalid ENS name; empty component");
      comps.push(checkComponent(bytes.slice(last)));
      return comps;
  }
  function ensNormalize(name) {
      return ensNameSplit(name).map((comp)=>(0, _strings.toUtf8String)(comp)).join(".");
  }
  function isValidName(name) {
      try {
          return ensNameSplit(name).length !== 0;
      } catch (error) {}
      return false;
  }
  function namehash(name) {
      /* istanbul ignore if */ if (typeof name !== "string") logger.throwArgumentError("invalid ENS name; not a string", "name", name);
      let result = Zeros;
      const comps = ensNameSplit(name);
      while(comps.length)result = (0, _keccak256.keccak256)((0, _bytes.concat)([
          result,
          (0, _keccak256.keccak256)(comps.pop())
      ]));
      return (0, _bytes.hexlify)(result);
  }
  function dnsEncode(name) {
      return (0, _bytes.hexlify)((0, _bytes.concat)(ensNameSplit(name).map((comp)=>{
          // DNS does not allow components over 63 bytes in length
          if (comp.length > 63) throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");
          const bytes = new Uint8Array(comp.length + 1);
          bytes.set(comp, 1);
          bytes[0] = bytes.length - 1;
          return bytes;
      }))) + "00";
  }
  
  },{"@ethersproject/bytes":"htrqZ","@ethersproject/strings":"5TGFZ","@ethersproject/keccak256":"hXDEv","@ethersproject/logger":"hLvB2","./_version":"kUuZu","./ens-normalize/lib":"f04Ft","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"kUuZu":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "version", ()=>version);
  const version = "hash/5.7.0";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"f04Ft":[function(require,module,exports) {
  /**
   * MIT License
   *
   * Copyright (c) 2021 Andrew Raffensperger
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in all
   * copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   *
   * This is a near carbon-copy of the original source (link below) with the
   * TypeScript typings added and a few tweaks to make it ES3-compatible.
   *
   * See: https://github.com/adraffy/ens-normalize.js
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "ens_normalize_post_check", ()=>ens_normalize_post_check);
  parcelHelpers.export(exports, "ens_normalize", ()=>ens_normalize);
  var _strings = require("@ethersproject/strings");
  var _includeJs = require("./include.js");
  var _decoderJs = require("./decoder.js");
  const r = (0, _includeJs.getData)();
  // @TODO: This should be lazily loaded
  const VALID = new Set((0, _decoderJs.read_member_array)(r));
  const IGNORED = new Set((0, _decoderJs.read_member_array)(r));
  const MAPPED = (0, _decoderJs.read_mapped_map)(r);
  const EMOJI_ROOT = (0, _decoderJs.read_emoji_trie)(r);
  //const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));
  //const STOP = 0x2E;
  const HYPHEN = 0x2D;
  const UNDERSCORE = 0x5F;
  function explode_cp(name) {
      return (0, _strings.toUtf8CodePoints)(name);
  }
  function filter_fe0f(cps) {
      return cps.filter((cp)=>cp != 0xFE0F);
  }
  function ens_normalize_post_check(name) {
      for (let label of name.split(".")){
          let cps = explode_cp(label);
          try {
              for(let i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--){
                  if (cps[i] !== UNDERSCORE) throw new Error(`underscore only allowed at start`);
              }
              if (cps.length >= 4 && cps.every((cp)=>cp < 0x80) && cps[2] === HYPHEN && cps[3] === HYPHEN) throw new Error(`invalid label extension`);
          } catch (err) {
              throw new Error(`Invalid label "${label}": ${err.message}`);
          }
      }
      return name;
  }
  function ens_normalize(name) {
      return ens_normalize_post_check(normalize(name, filter_fe0f));
  }
  function normalize(name, emoji_filter) {
      let input = explode_cp(name).reverse(); // flip for pop
      let output = [];
      while(input.length){
          let emoji = consume_emoji_reversed(input);
          if (emoji) {
              output.push(...emoji_filter(emoji));
              continue;
          }
          let cp = input.pop();
          if (VALID.has(cp)) {
              output.push(cp);
              continue;
          }
          if (IGNORED.has(cp)) continue;
          let cps = MAPPED[cp];
          if (cps) {
              output.push(...cps);
              continue;
          }
          throw new Error(`Disallowed codepoint: 0x${cp.toString(16).toUpperCase()}`);
      }
      return ens_normalize_post_check(nfc(String.fromCodePoint(...output)));
  }
  function nfc(s) {
      return s.normalize("NFC");
  }
  function consume_emoji_reversed(cps, eaten) {
      var _a;
      let node = EMOJI_ROOT;
      let emoji;
      let saved;
      let stack = [];
      let pos = cps.length;
      if (eaten) eaten.length = 0; // clear input buffer (if needed)
      while(pos){
          let cp = cps[--pos];
          node = (_a = node.branches.find((x)=>x.set.has(cp))) === null || _a === void 0 ? void 0 : _a.node;
          if (!node) break;
          if (node.save) saved = cp;
          else if (node.check) {
              if (cp === saved) break;
          }
          stack.push(cp);
          if (node.fe0f) {
              stack.push(0xFE0F);
              if (pos > 0 && cps[pos - 1] == 0xFE0F) pos--; // consume optional FE0F
          }
          if (node.valid) {
              emoji = stack.slice(); // copy stack
              if (node.valid == 2) emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)
              if (eaten) eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)
              cps.length = pos; // truncate
          }
      }
      return emoji;
  }
  
  },{"@ethersproject/strings":"5TGFZ","./include.js":"fe7hh","./decoder.js":"k3KbO","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"fe7hh":[function(require,module,exports) {
  /**
   * MIT License
   *
   * Copyright (c) 2021 Andrew Raffensperger
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in all
   * copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   *
   * This is a near carbon-copy of the original source (link below) with the
   * TypeScript typings added and a few tweaks to make it ES3-compatible.
   *
   * See: https://github.com/adraffy/ens-normalize.js
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "getData", ()=>getData);
  var _base64 = require("@ethersproject/base64");
  var _decoderJs = require("./decoder.js");
  function getData() {
      return (0, _decoderJs.read_compressed_payload)((0, _base64.decode)("AEQF2AO2DEsA2wIrAGsBRABxAN8AZwCcAEwAqgA0AGwAUgByADcATAAVAFYAIQAyACEAKAAYAFgAGwAjABQAMAAmADIAFAAfABQAKwATACoADgAbAA8AHQAYABoAGQAxADgALAAoADwAEwA9ABMAGgARAA4ADwAWABMAFgAIAA8AHgQXBYMA5BHJAS8JtAYoAe4AExozi0UAH21tAaMnBT8CrnIyhrMDhRgDygIBUAEHcoFHUPe8AXBjAewCjgDQR8IICIcEcQLwATXCDgzvHwBmBoHNAqsBdBcUAykgDhAMShskMgo8AY8jqAQfAUAfHw8BDw87MioGlCIPBwZCa4ELatMAAMspJVgsDl8AIhckSg8XAHdvTwBcIQEiDT4OPhUqbyECAEoAS34Aej8Ybx83JgT/Xw8gHxZ/7w8RICxPHA9vBw+Pfw8PHwAPFv+fAsAvCc8vEr8ivwD/EQ8Bol8OEBa/A78hrwAPCU8vESNvvwWfHwNfAVoDHr+ZAAED34YaAdJPAK7PLwSEgDLHAGo1Pz8Pvx9fUwMrpb8O/58VTzAPIBoXIyQJNF8hpwIVAT8YGAUADDNBaX3RAMomJCg9EhUeA29MABsZBTMNJipjOhc19gcIDR8bBwQHEggCWi6DIgLuAQYA+BAFCha3A5XiAEsqM7UFFgFLhAMjFTMYE1Klnw74nRVBG/ASCm0BYRN/BrsU3VoWy+S0vV8LQx+vN8gF2AC2AK5EAWwApgYDKmAAroQ0NDQ0AT+OCg7wAAIHRAbpNgVcBV0APTA5BfbPFgMLzcYL/QqqA82eBALKCjQCjqYCht0/k2+OAsXQAoP3ASTKDgDw6ACKAUYCMpIKJpRaAE4A5womABzZvs0REEKiACIQAd5QdAECAj4Ywg/wGqY2AVgAYADYvAoCGAEubA0gvAY2ALAAbpbvqpyEAGAEpgQAJgAG7gAgAEACmghUFwCqAMpAINQIwC4DthRAAPcycKgApoIdABwBfCisABoATwBqASIAvhnSBP8aH/ECeAKXAq40NjgDBTwFYQU6AXs3oABgAD4XNgmcCY1eCl5tIFZeUqGgyoNHABgAEQAaABNwWQAmABMATPMa3T34ADldyprmM1M2XociUQgLzvwAXT3xABgAEQAaABNwIGFAnADD8AAgAD4BBJWzaCcIAIEBFMAWwKoAAdq9BWAF5wLQpALEtQAKUSGkahR4GnJM+gsAwCgeFAiUAECQ0BQuL8AAIAAAADKeIheclvFqQAAETr4iAMxIARMgAMIoHhQIAn0E0pDQFC4HhznoAAAAIAI2C0/4lvFqQAAETgBJJwYCAy4ABgYAFAA8MBKYEH4eRhTkAjYeFcgACAYAeABsOqyQ5gRwDayqugEgaIIAtgoACgDmEABmBAWGme5OBJJA2m4cDeoAmITWAXwrMgOgAGwBCh6CBXYF1Tzg1wKAAFdiuABRAFwAXQBsAG8AdgBrAHYAbwCEAHEwfxQBVE5TEQADVFhTBwBDANILAqcCzgLTApQCrQL6vAAMAL8APLhNBKkE6glGKTAU4Dr4N2EYEwBCkABKk8rHAbYBmwIoAiU4Ajf/Aq4CowCAANIChzgaNBsCsTgeODcFXrgClQKdAqQBiQGYAqsCsjTsNHsfNPA0ixsAWTWiOAMFPDQSNCk2BDZHNow2TTZUNhk28Jk9VzI3QkEoAoICoQKwAqcAQAAxBV4FXbS9BW47YkIXP1ciUqs05DS/FwABUwJW11e6nHuYZmSh/RAYA8oMKvZ8KASoUAJYWAJ6ILAsAZSoqjpgA0ocBIhmDgDWAAawRDQoAAcuAj5iAHABZiR2AIgiHgCaAU68ACxuHAG0ygM8MiZIAlgBdF4GagJqAPZOHAMuBgoATkYAsABiAHgAMLoGDPj0HpKEBAAOJgAuALggTAHWAeAMEDbd20Uege0ADwAWADkAQgA9OHd+2MUQZBBhBgNNDkxxPxUQArEPqwvqERoM1irQ090ANK4H8ANYB/ADWANYB/AH8ANYB/ADWANYA1gDWBwP8B/YxRBkD00EcgWTBZAE2wiIJk4RhgctCNdUEnQjHEwDSgEBIypJITuYMxAlR0wRTQgIATZHbKx9PQNMMbBU+pCnA9AyVDlxBgMedhKlAC8PeCE1uk6DekxxpQpQT7NX9wBFBgASqwAS5gBJDSgAUCwGPQBI4zTYABNGAE2bAE3KAExdGABKaAbgAFBXAFCOAFBJABI2SWdObALDOq0//QomCZhvwHdTBkIQHCemEPgMNAG2ATwN7kvZBPIGPATKH34ZGg/OlZ0Ipi3eDO4m5C6igFsj9iqEBe5L9TzeC05RaQ9aC2YJ5DpkgU8DIgEOIowK3g06CG4Q9ArKbA3mEUYHOgPWSZsApgcCCxIdNhW2JhFirQsKOXgG/Br3C5AmsBMqev0F1BoiBk4BKhsAANAu6IWxWjJcHU9gBgQLJiPIFKlQIQ0mQLh4SRocBxYlqgKSQ3FKiFE3HpQh9zw+DWcuFFF9B/Y8BhlQC4I8n0asRQ8R0z6OPUkiSkwtBDaALDAnjAnQD4YMunxzAVoJIgmyDHITMhEYN8YIOgcaLpclJxYIIkaWYJsE+KAD9BPSAwwFQAlCBxQDthwuEy8VKgUOgSXYAvQ21i60ApBWgQEYBcwPJh/gEFFH4Q7qCJwCZgOEJewALhUiABginAhEZABgj9lTBi7MCMhqbSN1A2gU6GIRdAeSDlgHqBw0FcAc4nDJXgyGCSiksAlcAXYJmgFgBOQICjVcjKEgQmdUi1kYnCBiQUBd/QIyDGYVoES+h3kCjA9sEhwBNgF0BzoNAgJ4Ee4RbBCWCOyGBTW2M/k6JgRQIYQgEgooA1BszwsoJvoM+WoBpBJjAw00PnfvZ6xgtyUX/gcaMsZBYSHyC5NPzgydGsIYQ1QvGeUHwAP0GvQn60FYBgADpAQUOk4z7wS+C2oIjAlAAEoOpBgH2BhrCnKM0QEyjAG4mgNYkoQCcJAGOAcMAGgMiAV65gAeAqgIpAAGANADWAA6Aq4HngAaAIZCAT4DKDABIuYCkAOUCDLMAZYwAfQqBBzEDBYA+DhuSwLDsgKAa2ajBd5ZAo8CSjYBTiYEBk9IUgOwcuIA3ABMBhTgSAEWrEvMG+REAeBwLADIAPwABjYHBkIBzgH0bgC4AWALMgmjtLYBTuoqAIQAFmwB2AKKAN4ANgCA8gFUAE4FWvoF1AJQSgESMhksWGIBvAMgATQBDgB6BsyOpsoIIARuB9QCEBwV4gLvLwe2AgMi4BPOQsYCvd9WADIXUu5eZwqoCqdeaAC0YTQHMnM9UQAPH6k+yAdy/BZIiQImSwBQ5gBQQzSaNTFWSTYBpwGqKQK38AFtqwBI/wK37gK3rQK3sAK6280C0gK33AK3zxAAUEIAUD9SklKDArekArw5AEQAzAHCO147WTteO1k7XjtZO147WTteO1kDmChYI03AVU0oJqkKbV9GYewMpw3VRMk6ShPcYFJgMxPJLbgUwhXPJVcZPhq9JwYl5VUKDwUt1GYxCC00dhe9AEApaYNCY4ceMQpMHOhTklT5LRwAskujM7ANrRsWREEFSHXuYisWDwojAmSCAmJDXE6wXDchAqH4AmiZAmYKAp+FOBwMAmY8AmYnBG8EgAN/FAN+kzkHOXgYOYM6JCQCbB4CMjc4CwJtyAJtr/CLADRoRiwBaADfAOIASwYHmQyOAP8MwwAOtgJ3MAJ2o0ACeUxEAni7Hl3cRa9G9AJ8QAJ6yQJ9CgJ88UgBSH5kJQAsFklZSlwWGErNAtECAtDNSygDiFADh+dExpEzAvKiXQQDA69Lz0wuJgTQTU1NsAKLQAKK2cIcCB5EaAa4Ao44Ao5dQZiCAo7aAo5deVG1UzYLUtVUhgKT/AKTDQDqAB1VH1WwVdEHLBwplocy4nhnRTw6ApegAu+zWCKpAFomApaQApZ9nQCqWa1aCoJOADwClrYClk9cRVzSApnMApllXMtdCBoCnJw5wzqeApwXAp+cAp65iwAeEDIrEAKd8gKekwC2PmE1YfACntQCoG8BqgKeoCACnk+mY8lkKCYsAiewAiZ/AqD8AqBN2AKmMAKlzwKoAAB+AqfzaH1osgAESmodatICrOQCrK8CrWgCrQMCVx4CVd0CseLYAx9PbJgCsr4OArLpGGzhbWRtSWADJc4Ctl08QG6RAylGArhfArlIFgK5K3hwN3DiAr0aAy2zAzISAr6JcgMDM3ICvhtzI3NQAsPMAsMFc4N0TDZGdOEDPKgDPJsDPcACxX0CxkgCxhGKAshqUgLIRQLJUALJLwJkngLd03h6YniveSZL0QMYpGcDAmH1GfSVJXsMXpNevBICz2wCz20wTFTT9BSgAMeuAs90ASrrA04TfkwGAtwoAtuLAtJQA1JdA1NgAQIDVY2AikABzBfuYUZ2AILPg44C2sgC2d+EEYRKpz0DhqYAMANkD4ZyWvoAVgLfZgLeuXR4AuIw7RUB8zEoAfScAfLTiALr9ALpcXoAAur6AurlAPpIAboC7ooC652Wq5cEAu5AA4XhmHpw4XGiAvMEAGoDjheZlAL3FAORbwOSiAL3mQL52gL4Z5odmqy8OJsfA52EAv77ARwAOp8dn7QDBY4DpmsDptoA0sYDBmuhiaIGCgMMSgFgASACtgNGAJwEgLpoBgC8BGzAEowcggCEDC6kdjoAJAM0C5IKRoABZCgiAIzw3AYBLACkfng9ogigkgNmWAN6AEQCvrkEVqTGAwCsBRbAA+4iQkMCHR072jI2PTbUNsk2RjY5NvA23TZKNiU3EDcZN5I+RTxDRTBCJkK5VBYKFhZfwQCWygU3AJBRHpu+OytgNxa61A40GMsYjsn7BVwFXQVcBV0FaAVdBVwFXQVcBV0FXAVdBVwFXUsaCNyKAK4AAQUHBwKU7oICoW1e7jAEzgPxA+YDwgCkBFDAwADABKzAAOxFLhitA1UFTDeyPkM+bj51QkRCuwTQWWQ8X+0AWBYzsACNA8xwzAGm7EZ/QisoCTAbLDs6fnLfb8H2GccsbgFw13M1HAVkBW/Jxsm9CNRO8E8FDD0FBQw9FkcClOYCoMFegpDfADgcMiA2AJQACB8AsigKAIzIEAJKeBIApY5yPZQIAKQiHb4fvj5BKSRPQrZCOz0oXyxgOywfKAnGbgMClQaCAkILXgdeCD9IIGUgQj5fPoY+dT52Ao5CM0dAX9BTVG9SDzFwWTQAbxBzJF/lOEIQQglCCkKJIAls5AcClQICoKPMODEFxhi6KSAbiyfIRrMjtCgdWCAkPlFBIitCsEJRzAbMAV/OEyQzDg0OAQQEJ36i328/Mk9AybDJsQlq3tDRApUKAkFzXf1d/j9uALYP6hCoFgCTGD8kPsFKQiobrm0+zj0KSD8kPnVCRBwMDyJRTHFgMTJa5rwXQiQ2YfI/JD7BMEJEHGINTw4TOFlIRzwJO0icMQpyPyQ+wzJCRBv6DVgnKB01NgUKj2bwYzMqCoBkznBgEF+zYDIocwRIX+NgHj4HICNfh2C4CwdwFWpTG/lgUhYGAwRfv2Ts8mAaXzVgml/XYIJfuWC4HI1gUF9pYJZgMR6ilQHMAOwLAlDRefC0in4AXAEJA6PjCwc0IamOANMMCAECRQDFNRTZBgd+CwQlRA+r6+gLBDEFBnwUBXgKATIArwAGRAAHA3cDdAN2A3kDdwN9A3oDdQN7A30DfAN4A3oDfQAYEAAlAtYASwMAUAFsAHcKAHcAmgB3AHUAdQB2AHVu8UgAygDAAHcAdQB1AHYAdQALCgB3AAsAmgB3AAsCOwB3AAtu8UgAygDAAHgKAJoAdwB3AHUAdQB2AHUAeAB1AHUAdgB1bvFIAMoAwAALCgCaAHcACwB3AAsCOwB3AAtu8UgAygDAAH4ACwGgALcBpwC6AahdAu0COwLtbvFIAMoAwAALCgCaAu0ACwLtAAsCOwLtAAtu8UgAygDAA24ACwNvAAu0VsQAAzsAABCkjUIpAAsAUIusOggWcgMeBxVsGwL67U/2HlzmWOEeOgALASvuAAseAfpKUpnpGgYJDCIZM6YyARUE9ThqAD5iXQgnAJYJPnOzw0ZAEZxEKsIAkA4DhAHnTAIDxxUDK0lxCQlPYgIvIQVYJQBVqE1GakUAKGYiDToSBA1EtAYAXQJYAIF8GgMHRyAAIAjOe9YncekRAA0KACUrjwE7Ayc6AAYWAqaiKG4McEcqANoN3+Mg9TwCBhIkuCny+JwUQ29L008JluRxu3K+oAdqiHOqFH0AG5SUIfUJ5SxCGfxdipRzqTmT4V5Zb+r1Uo4Vm+NqSSEl2mNvR2JhIa8SpYO6ntdwFXHCWTCK8f2+Hxo7uiG3drDycAuKIMP5bhi06ACnqArH1rz4Rqg//lm6SgJGEVbF9xJHISaR6HxqxSnkw6shDnelHKNEfGUXSJRJ1GcsmtJw25xrZMDK9gXSm1/YMkdX4/6NKYOdtk/NQ3/NnDASjTc3fPjIjW/5sVfVObX2oTDWkr1dF9f3kxBsD3/3aQO8hPfRz+e0uEiJqt1161griu7gz8hDDwtpy+F+BWtefnKHZPAxcZoWbnznhJpy0e842j36bcNzGnIEusgGX0a8ZxsnjcSsPDZ09yZ36fCQbriHeQ72JRMILNl6ePPf2HWoVwgWAm1fb3V2sAY0+B6rAXqSwPBgseVmoqsBTSrm91+XasMYYySI8eeRxH3ZvHkMz3BQ5aJ3iUVbYPNM3/7emRtjlsMgv/9VyTsyt/mK+8fgWeT6SoFaclXqn42dAIsvAarF5vNNWHzKSkKQ/8Hfk5ZWK7r9yliOsooyBjRhfkHP4Q2DkWXQi6FG/9r/IwbmkV5T7JSopHKn1pJwm9tb5Ot0oyN1Z2mPpKXHTxx2nlK08fKk1hEYA8WgVVWL5lgx0iTv+KdojJeU23ZDjmiubXOxVXJKKi2Wjuh2HLZOFLiSC7Tls5SMh4f+Pj6xUSrNjFqLGehRNB8lC0QSLNmkJJx/wSG3MnjE9T1CkPwJI0wH2lfzwETIiVqUxg0dfu5q39Gt+hwdcxkhhNvQ4TyrBceof3Mhs/IxFci1HmHr4FMZgXEEczPiGCx0HRwzAqDq2j9AVm1kwN0mRVLWLylgtoPNapF5cY4Y1wJh/e0BBwZj44YgZrDNqvD/9Hv7GFYdUQeDJuQ3EWI4HaKqavU1XjC/n41kT4L79kqGq0kLhdTZvgP3TA3fS0ozVz+5piZsoOtIvBUFoMKbNcmBL6YxxaUAusHB38XrS8dQMnQwJfUUkpRoGr5AUeWicvBTzyK9g77+yCkf5PAysL7r/JjcZgrbvRpMW9iyaxZvKO6ceZN2EwIxKwVFPuvFuiEPGCoagbMo+SpydLrXqBzNCDGFCrO/rkcwa2xhokQZ5CdZ0AsU3JfSqJ6n5I14YA+P/uAgfhPU84Tlw7cEFfp7AEE8ey4sP12PTt4Cods1GRgDOB5xvyiR5m+Bx8O5nBCNctU8BevfV5A08x6RHd5jcwPTMDSZJOedIZ1cGQ704lxbAzqZOP05ZxaOghzSdvFBHYqomATARyAADK4elP8Ly3IrUZKfWh23Xy20uBUmLS4Pfagu9+oyVa2iPgqRP3F2CTUsvJ7+RYnN8fFZbU/HVvxvcFFDKkiTqV5UBZ3Gz54JAKByi9hkKMZJvuGgcSYXFmw08UyoQyVdfTD1/dMkCHXcTGAKeROgArsvmRrQTLUOXioOHGK2QkjHuoYFgXciZoTJd6Fs5q1QX1G+p/e26hYsEf7QZD1nnIyl/SFkNtYYmmBhpBrxl9WbY0YpHWRuw2Ll/tj9mD8P4snVzJl4F9J+1arVeTb9E5r2ILH04qStjxQNwn3m4YNqxmaNbLAqW2TN6LidwuJRqS+NXbtqxoeDXpxeGWmxzSkWxjkyCkX4NQRme6q5SAcC+M7+9ETfA/EwrzQajKakCwYyeunP6ZFlxU2oMEn1Pz31zeStW74G406ZJFCl1wAXIoUKkWotYEpOuXB1uVNxJ63dpJEqfxBeptwIHNrPz8BllZoIcBoXwgfJ+8VAUnVPvRvexnw0Ma/WiGYuJO5y8QTvEYBigFmhUxY5RqzE8OcywN/8m4UYrlaniJO75XQ6KSo9+tWHlu+hMi0UVdiKQp7NelnoZUzNaIyBPVeOwK6GNp+FfHuPOoyhaWuNvTYFkvxscMQWDh+zeFCFkgwbXftiV23ywJ4+uwRqmg9k3KzwIQpzppt8DBBOMbrqwQM5Gb05sEwdKzMiAqOloaA/lr0KA+1pr0/+HiWoiIjHA/wir2nIuS3PeU/ji3O6ZwoxcR1SZ9FhtLC5S0FIzFhbBWcGVP/KpxOPSiUoAdWUpqKH++6Scz507iCcxYI6rdMBICPJZea7OcmeFw5mObJSiqpjg2UoWNIs+cFhyDSt6geV5qgi3FunmwwDoGSMgerFOZGX1m0dMCYo5XOruxO063dwENK9DbnVM9wYFREzh4vyU1WYYJ/LRRp6oxgjqP/X5a8/4Af6p6NWkQferzBmXme0zY/4nwMJm/wd1tIqSwGz+E3xPEAOoZlJit3XddD7/BT1pllzOx+8bmQtANQ/S6fZexc6qi3W+Q2xcmXTUhuS5mpHQRvcxZUN0S5+PL9lXWUAaRZhEH8hTdAcuNMMCuVNKTEGtSUKNi3O6KhSaTzck8csZ2vWRZ+d7mW8c4IKwXIYd25S/zIftPkwPzufjEvOHWVD1m+FjpDVUTV0DGDuHj6QnaEwLu/dEgdLQOg9E1Sro9XHJ8ykLAwtPu+pxqKDuFexqON1sKQm7rwbE1E68UCfA/erovrTCG+DBSNg0l4goDQvZN6uNlbyLpcZAwj2UclycvLpIZMgv4yRlpb3YuMftozorbcGVHt/VeDV3+Fdf1TP0iuaCsPi2G4XeGhsyF1ubVDxkoJhmniQ0/jSg/eYML9KLfnCFgISWkp91eauR3IQvED0nAPXK+6hPCYs+n3+hCZbiskmVMG2da+0EsZPonUeIY8EbfusQXjsK/eFDaosbPjEfQS0RKG7yj5GG69M7MeO1HmiUYocgygJHL6M1qzUDDwUSmr99V7Sdr2F3JjQAJY+F0yH33Iv3+C9M38eML7gTgmNu/r2bUMiPvpYbZ6v1/IaESirBHNa7mPKn4dEmYg7v/+HQgPN1G79jBQ1+soydfDC2r+h2Bl/KIc5KjMK7OH6nb1jLsNf0EHVe2KBiE51ox636uyG6Lho0t3J34L5QY/ilE3mikaF4HKXG1mG1rCevT1Vv6GavltxoQe/bMrpZvRggnBxSEPEeEzkEdOxTnPXHVjUYdw8JYvjB/o7Eegc3Ma+NUxLLnsK0kJlinPmUHzHGtrk5+CAbVzFOBqpyy3QVUnzTDfC/0XD94/okH+OB+i7g9lolhWIjSnfIb+Eq43ZXOWmwvjyV/qqD+t0e+7mTEM74qP/Ozt8nmC7mRpyu63OB4KnUzFc074SqoyPUAgM+/TJGFo6T44EHnQU4X4z6qannVqgw/U7zCpwcmXV1AubIrvOmkKHazJAR55ePjp5tLBsN8vAqs3NAHdcEHOR2xQ0lsNAFzSUuxFQCFYvXLZJdOj9p4fNq6p0HBGUik2YzaI4xySy91KzhQ0+q1hjxvImRwPRf76tChlRkhRCi74NXZ9qUNeIwP+s5p+3m5nwPdNOHgSLD79n7O9m1n1uDHiMntq4nkYwV5OZ1ENbXxFd4PgrlvavZsyUO4MqYlqqn1O8W/I1dEZq5dXhrbETLaZIbC2Kj/Aa/QM+fqUOHdf0tXAQ1huZ3cmWECWSXy/43j35+Mvq9xws7JKseriZ1pEWKc8qlzNrGPUGcVgOa9cPJYIJsGnJTAUsEcDOEVULO5x0rXBijc1lgXEzQQKhROf8zIV82w8eswc78YX11KYLWQRcgHNJElBxfXr72lS2RBSl07qTKorO2uUDZr3sFhYsvnhLZn0A94KRzJ/7DEGIAhW5ZWFpL8gEwu1aLA9MuWZzNwl8Oze9Y+bX+v9gywRVnoB5I/8kXTXU3141yRLYrIOOz6SOnyHNy4SieqzkBXharjfjqq1q6tklaEbA8Qfm2DaIPs7OTq/nvJBjKfO2H9bH2cCMh1+5gspfycu8f/cuuRmtDjyqZ7uCIMyjdV3a+p3fqmXsRx4C8lujezIFHnQiVTXLXuI1XrwN3+siYYj2HHTvESUx8DlOTXpak9qFRK+L3mgJ1WsD7F4cu1aJoFoYQnu+wGDMOjJM3kiBQWHCcvhJ/HRdxodOQp45YZaOTA22Nb4XKCVxqkbwMYFhzYQYIAnCW8FW14uf98jhUG2zrKhQQ0q0CEq0t5nXyvUyvR8DvD69LU+g3i+HFWQMQ8PqZuHD+sNKAV0+M6EJC0szq7rEr7B5bQ8BcNHzvDMc9eqB5ZCQdTf80Obn4uzjwpYU7SISdtV0QGa9D3Wrh2BDQtpBKxaNFV+/Cy2P/Sv+8s7Ud0Fd74X4+o/TNztWgETUapy+majNQ68Lq3ee0ZO48VEbTZYiH1Co4OlfWef82RWeyUXo7woM03PyapGfikTnQinoNq5z5veLpeMV3HCAMTaZmA1oGLAn7XS3XYsz+XK7VMQsc4XKrmDXOLU/pSXVNUq8dIqTba///3x6LiLS6xs1xuCAYSfcQ3+rQgmu7uvf3THKt5Ooo97TqcbRqxx7EASizaQCBQllG/rYxVapMLgtLbZS64w1MDBMXX+PQpBKNwqUKOf2DDRDUXQf9EhOS0Qj4nTmlA8dzSLz/G1d+Ud8MTy/6ghhdiLpeerGY/UlDOfiuqFsMUU5/UYlP+BAmgRLuNpvrUaLlVkrqDievNVEAwF+4CoM1MZTmjxjJMsKJq+u8Zd7tNCUFy6LiyYXRJQ4VyvEQFFaCGKsxIwQkk7EzZ6LTJq2hUuPhvAW+gQnSG6J+MszC+7QCRHcnqDdyNRJ6T9xyS87A6MDutbzKGvGktpbXqtzWtXb9HsfK2cBMomjN9a4y+TaJLnXxAeX/HWzmf4cR4vALt/P4w4qgKY04ml4ZdLOinFYS6cup3G/1ie4+t1eOnpBNlqGqs75ilzkT4+DsZQxNvaSKJ//6zIbbk/M7LOhFmRc/1R+kBtz7JFGdZm/COotIdvQoXpTqP/1uqEUmCb/QWoGLMwO5ANcHzxdY48IGP5+J+zKOTBFZ4Pid+GTM+Wq12MV/H86xEJptBa6T+p3kgpwLedManBHC2GgNrFpoN2xnrMz9WFWX/8/ygSBkavq2Uv7FdCsLEYLu9LLIvAU0bNRDtzYl+/vXmjpIvuJFYjmI0im6QEYqnIeMsNjXG4vIutIGHijeAG/9EDBozKV5cldkHbLxHh25vT+ZEzbhXlqvpzKJwcEgfNwLAKFeo0/pvEE10XDB+EXRTXtSzJozQKFFAJhMxYkVaCW+E9AL7tMeU8acxidHqzb6lX4691UsDpy/LLRmT+epgW56+5Cw8tB4kMUv6s9lh3eRKbyGs+H/4mQMaYzPTf2OOdokEn+zzgvoD3FqNKk8QqGAXVsqcGdXrT62fSPkR2vROFi68A6se86UxRUk4cajfPyCC4G5wDhD+zNq4jodQ4u4n/m37Lr36n4LIAAsVr02dFi9AiwA81MYs2rm4eDlDNmdMRvEKRHfBwW5DdMNp0jPFZMeARqF/wL4XBfd+EMLBfMzpH5GH6NaW+1vrvMdg+VxDzatk3MXgO3ro3P/DpcC6+Mo4MySJhKJhSR01SGGGp5hPWmrrUgrv3lDnP+HhcI3nt3YqBoVAVTBAQT5iuhTg8nvPtd8ZeYj6w1x6RqGUBrSku7+N1+BaasZvjTk64RoIDlL8brpEcJx3OmY7jLoZsswdtmhfC/G21llXhITOwmvRDDeTTPbyASOa16cF5/A1fZAidJpqju3wYAy9avPR1ya6eNp9K8XYrrtuxlqi+bDKwlfrYdR0RRiKRVTLOH85+ZY7XSmzRpfZBJjaTa81VDcJHpZnZnSQLASGYW9l51ZV/h7eVzTi3Hv6hUsgc/51AqJRTkpbFVLXXszoBL8nBX0u/0jBLT8nH+fJePbrwURT58OY+UieRjd1vs04w0VG5VN2U6MoGZkQzKN/ptz0Q366dxoTGmj7i1NQGHi9GgnquXFYdrCfZBmeb7s0T6yrdlZH5cZuwHFyIJ/kAtGsTg0xH5taAAq44BAk1CPk9KVVbqQzrCUiFdF/6gtlPQ8bHHc1G1W92MXGZ5HEHftyLYs8mbD/9xYRUWkHmlM0zC2ilJlnNgV4bfALpQghxOUoZL7VTqtCHIaQSXm+YUMnpkXybnV+A6xlm2CVy8fn0Xlm2XRa0+zzOa21JWWmixfiPMSCZ7qA4rS93VN3pkpF1s5TonQjisHf7iU9ZGvUPOAKZcR1pbeVf/Ul7OhepGCaId9wOtqo7pJ7yLcBZ0pFkOF28y4zEI/kcUNmutBHaQpBdNM8vjCS6HZRokkeo88TBAjGyG7SR+6vUgTcyK9Imalj0kuxz0wmK+byQU11AiJFk/ya5dNduRClcnU64yGu/ieWSeOos1t3ep+RPIWQ2pyTYVbZltTbsb7NiwSi3AV+8KLWk7LxCnfZUetEM8ThnsSoGH38/nyAwFguJp8FjvlHtcWZuU4hPva0rHfr0UhOOJ/F6vS62FW7KzkmRll2HEc7oUq4fyi5T70Vl7YVIfsPHUCdHesf9Lk7WNVWO75JDkYbMI8TOW8JKVtLY9d6UJRITO8oKo0xS+o99Yy04iniGHAaGj88kEWgwv0OrHdY/nr76DOGNS59hXCGXzTKUvDl9iKpLSWYN1lxIeyywdNpTkhay74w2jFT6NS8qkjo5CxA1yfSYwp6AJIZNKIeEK5PJAW7ORgWgwp0VgzYpqovMrWxbu+DGZ6Lhie1RAqpzm8VUzKJOH3mCzWuTOLsN3VT/dv2eeYe9UjbR8YTBsLz7q60VN1sU51k+um1f8JxD5pPhbhSC8rRaB454tmh6YUWrJI3+GWY0qeWioj/tbkYITOkJaeuGt4JrJvHA+l0Gu7kY7XOaa05alMnRWVCXqFgLIwSY4uF59Ue5SU4QKuc/HamDxbr0x6csCetXGoP7Qn1Bk/J9DsynO/UD6iZ1Hyrz+jit0hDCwi/E9OjgKTbB3ZQKQ/0ZOvevfNHG0NK4Aj3Cp7NpRk07RT1i/S0EL93Ag8GRgKI9CfpajKyK6+Jj/PI1KO5/85VAwz2AwzP8FTBb075IxCXv6T9RVvWT2tUaqxDS92zrGUbWzUYk9mSs82pECH+fkqsDt93VW++4YsR/dHCYcQSYTO/KaBMDj9LSD/J/+z20Kq8XvZUAIHtm9hRPP3ItbuAu2Hm5lkPs92pd7kCxgRs0xOVBnZ13ccdA0aunrwv9SdqElJRC3g+oCu+nXyCgmXUs9yMjTMAIHfxZV+aPKcZeUBWt057Xo85Ks1Ir5gzEHCWqZEhrLZMuF11ziGtFQUds/EESajhagzcKsxamcSZxGth4UII+adPhQkUnx2WyN+4YWR+r3f8MnkyGFuR4zjzxJS8WsQYR5PTyRaD9ixa6Mh741nBHbzfjXHskGDq179xaRNrCIB1z1xRfWfjqw2pHc1zk9xlPpL8sQWAIuETZZhbnmL54rceXVNRvUiKrrqIkeogsl0XXb17ylNb0f4GA9Wd44vffEG8FSZGHEL2fbaTGRcSiCeA8PmA/f6Hz8HCS76fXUHwgwkzSwlI71ekZ7Fapmlk/KC+Hs8hUcw3N2LN5LhkVYyizYFl/uPeVP5lsoJHhhfWvvSWruCUW1ZcJOeuTbrDgywJ/qG07gZJplnTvLcYdNaH0KMYOYMGX+rB4NGPFmQsNaIwlWrfCezxre8zXBrsMT+edVLbLqN1BqB76JH4BvZTqUIMfGwPGEn+EnmTV86fPBaYbFL3DFEhjB45CewkXEAtJxk4/Ms2pPXnaRqdky0HOYdcUcE2zcXq4vaIvW2/v0nHFJH2XXe22ueDmq/18XGtELSq85j9X8q0tcNSSKJIX8FTuJF/Pf8j5PhqG2u+osvsLxYrvvfeVJL+4tkcXcr9JV7v0ERmj/X6fM3NC4j6dS1+9Umr2oPavqiAydTZPLMNRGY23LO9zAVDly7jD+70G5TPPLdhRIl4WxcYjLnM+SNcJ26FOrkrISUtPObIz5Zb3AG612krnpy15RMW+1cQjlnWFI6538qky9axd2oJmHIHP08KyP0ubGO+TQNOYuv2uh17yCIvR8VcStw7o1g0NM60sk+8Tq7YfIBJrtp53GkvzXH7OA0p8/n/u1satf/VJhtR1l8Wa6Gmaug7haSpaCaYQax6ta0mkutlb+eAOSG1aobM81D9A4iS1RRlzBBoVX6tU1S6WE2N9ORY6DfeLRC4l9Rvr5h95XDWB2mR1d4WFudpsgVYwiTwT31ljskD8ZyDOlm5DkGh9N/UB/0AI5Xvb8ZBmai2hQ4BWMqFwYnzxwB26YHSOv9WgY3JXnvoN+2R4rqGVh/LLDMtpFP+SpMGJNWvbIl5SOodbCczW2RKleksPoUeGEzrjtKHVdtZA+kfqO+rVx/iclCqwoopepvJpSTDjT+b9GWylGRF8EDbGlw6eUzmJM95Ovoz+kwLX3c2fTjFeYEsE7vUZm3mqdGJuKh2w9/QGSaqRHs99aScGOdDqkFcACoqdbBoQqqjamhH6Q9ng39JCg3lrGJwd50Qk9ovnqBTr8MME7Ps2wiVfygUmPoUBJJfJWX5Nda0nuncbFkA=="));
  }
  
  },{"@ethersproject/base64":"329Wu","./decoder.js":"k3KbO","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"k3KbO":[function(require,module,exports) {
  /**
   * MIT License
   *
   * Copyright (c) 2021 Andrew Raffensperger
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in all
   * copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   *
   * This is a near carbon-copy of the original source (link below) with the
   * TypeScript typings added and a few tweaks to make it ES3-compatible.
   *
   * See: https://github.com/adraffy/ens-normalize.js
   */ // https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "decode_arithmetic", ()=>decode_arithmetic);
  // returns an iterator which returns the next symbol
  parcelHelpers.export(exports, "read_payload", ()=>read_payload);
  parcelHelpers.export(exports, "read_compressed_payload", ()=>read_compressed_payload);
  // eg. [0,1,2,3...] => [0,-1,1,-2,...]
  parcelHelpers.export(exports, "signed", ()=>signed);
  parcelHelpers.export(exports, "read_member_array", ()=>read_member_array);
  // returns array of 
  // [x, ys] => single replacement rule
  // [x, ys, n, dx, dx] => linear map
  parcelHelpers.export(exports, "read_mapped_map", ()=>read_mapped_map);
  parcelHelpers.export(exports, "read_zero_terminated_array", ()=>read_zero_terminated_array);
  parcelHelpers.export(exports, "read_emoji_trie", ()=>read_emoji_trie);
  function flat(array, depth) {
      if (depth == null) depth = 1;
      const result = [];
      const forEach = result.forEach;
      const flatDeep = function(arr, depth) {
          forEach.call(arr, function(val) {
              if (depth > 0 && Array.isArray(val)) flatDeep(val, depth - 1);
              else result.push(val);
          });
      };
      flatDeep(array, depth);
      return result;
  }
  function fromEntries(array) {
      const result = {};
      for(let i = 0; i < array.length; i++){
          const value = array[i];
          result[value[0]] = value[1];
      }
      return result;
  }
  function decode_arithmetic(bytes) {
      let pos = 0;
      function u16() {
          return bytes[pos++] << 8 | bytes[pos++];
      }
      // decode the frequency table
      let symbol_count = u16();
      let total = 1;
      let acc = [
          0,
          1
      ]; // first symbol has frequency 1
      for(let i = 1; i < symbol_count; i++)acc.push(total += u16());
      // skip the sized-payload that the last 3 symbols index into
      let skip = u16();
      let pos_payload = pos;
      pos += skip;
      let read_width = 0;
      let read_buffer = 0;
      function read_bit() {
          if (read_width == 0) {
              // this will read beyond end of buffer
              // but (undefined|0) => zero pad
              read_buffer = read_buffer << 8 | bytes[pos++];
              read_width = 8;
          }
          return read_buffer >> --read_width & 1;
      }
      const N = 31;
      const FULL = Math.pow(2, N);
      const HALF = FULL >>> 1;
      const QRTR = HALF >> 1;
      const MASK = FULL - 1;
      // fill register
      let register = 0;
      for(let i = 0; i < N; i++)register = register << 1 | read_bit();
      let symbols = [];
      let low = 0;
      let range = FULL; // treat like a float
      while(true){
          let value = Math.floor(((register - low + 1) * total - 1) / range);
          let start = 0;
          let end = symbol_count;
          while(end - start > 1){
              let mid = start + end >>> 1;
              if (value < acc[mid]) end = mid;
              else start = mid;
          }
          if (start == 0) break; // first symbol is end mark
          symbols.push(start);
          let a = low + Math.floor(range * acc[start] / total);
          let b = low + Math.floor(range * acc[start + 1] / total) - 1;
          while(((a ^ b) & HALF) == 0){
              register = register << 1 & MASK | read_bit();
              a = a << 1 & MASK;
              b = b << 1 & MASK | 1;
          }
          while(a & ~b & QRTR){
              register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
              a = a << 1 ^ HALF;
              b = (b ^ HALF) << 1 | HALF | 1;
          }
          low = a;
          range = 1 + b - a;
      }
      let offset = symbol_count - 4;
      return symbols.map((x)=>{
          switch(x - offset){
              case 3:
                  return offset + 0x10100 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);
              case 2:
                  return offset + 0x100 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);
              case 1:
                  return offset + bytes[pos_payload++];
              default:
                  return x - 1;
          }
      });
  }
  function read_payload(v) {
      let pos = 0;
      return ()=>v[pos++];
  }
  function read_compressed_payload(bytes) {
      return read_payload(decode_arithmetic(bytes));
  }
  function signed(i) {
      return i & 1 ? ~i >> 1 : i >> 1;
  }
  function read_counts(n, next) {
      let v = Array(n);
      for(let i = 0; i < n; i++)v[i] = 1 + next();
      return v;
  }
  function read_ascending(n, next) {
      let v = Array(n);
      for(let i = 0, x = -1; i < n; i++)v[i] = x += 1 + next();
      return v;
  }
  function read_deltas(n, next) {
      let v = Array(n);
      for(let i = 0, x = 0; i < n; i++)v[i] = x += signed(next());
      return v;
  }
  function read_member_array(next, lookup) {
      let v = read_ascending(next(), next);
      let n = next();
      let vX = read_ascending(n, next);
      let vN = read_counts(n, next);
      for(let i = 0; i < n; i++)for(let j = 0; j < vN[i]; j++)v.push(vX[i] + j);
      return lookup ? v.map((x)=>lookup[x]) : v;
  }
  function read_mapped_map(next) {
      let ret = [];
      while(true){
          let w = next();
          if (w == 0) break;
          ret.push(read_linear_table(w, next));
      }
      while(true){
          let w = next() - 1;
          if (w < 0) break;
          ret.push(read_replacement_table(w, next));
      }
      return fromEntries(flat(ret));
  }
  function read_zero_terminated_array(next) {
      let v = [];
      while(true){
          let i = next();
          if (i == 0) break;
          v.push(i);
      }
      return v;
  }
  function read_transposed(n, w, next) {
      let m = Array(n).fill(undefined).map(()=>[]);
      for(let i = 0; i < w; i++)read_deltas(n, next).forEach((x, j)=>m[j].push(x));
      return m;
  }
  function read_linear_table(w, next) {
      let dx = 1 + next();
      let dy = next();
      let vN = read_zero_terminated_array(next);
      let m = read_transposed(vN.length, 1 + w, next);
      return flat(m.map((v, i)=>{
          const x = v[0], ys = v.slice(1);
          //let [x, ...ys] = v;
          //return Array(vN[i]).fill().map((_, j) => {
          return Array(vN[i]).fill(undefined).map((_, j)=>{
              let j_dy = j * dy;
              return [
                  x + j * dx,
                  ys.map((y)=>y + j_dy)
              ];
          });
      }));
  }
  function read_replacement_table(w, next) {
      let n = 1 + next();
      let m = read_transposed(n, 1 + w, next);
      return m.map((v)=>[
              v[0],
              v.slice(1)
          ]);
  }
  function read_emoji_trie(next) {
      let sorted = read_member_array(next).sort((a, b)=>a - b);
      return read();
      function read() {
          let branches = [];
          while(true){
              let keys = read_member_array(next, sorted);
              if (keys.length == 0) break;
              branches.push({
                  set: new Set(keys),
                  node: read()
              });
          }
          branches.sort((a, b)=>b.set.size - a.set.size); // sort by likelihood
          let temp = next();
          let valid = temp % 3;
          temp = temp / 3 | 0;
          let fe0f = !!(temp & 1);
          temp >>= 1;
          let save = temp == 1;
          let check = temp == 2;
          return {
              branches,
              valid,
              fe0f,
              save,
              check
          };
      }
  }
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"hJKk8":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "messagePrefix", ()=>messagePrefix);
  parcelHelpers.export(exports, "hashMessage", ()=>hashMessage);
  var _bytes = require("@ethersproject/bytes");
  var _keccak256 = require("@ethersproject/keccak256");
  var _strings = require("@ethersproject/strings");
  const messagePrefix = "\x19Ethereum Signed Message:\n";
  function hashMessage(message) {
      if (typeof message === "string") message = (0, _strings.toUtf8Bytes)(message);
      return (0, _keccak256.keccak256)((0, _bytes.concat)([
          (0, _strings.toUtf8Bytes)(messagePrefix),
          (0, _strings.toUtf8Bytes)(String(message.length)),
          message
      ]));
  }
  
  },{"@ethersproject/bytes":"htrqZ","@ethersproject/keccak256":"hXDEv","@ethersproject/strings":"5TGFZ","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"lozox":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "TypedDataEncoder", ()=>TypedDataEncoder);
  var _address = require("@ethersproject/address");
  var _bignumber = require("@ethersproject/bignumber");
  var _bytes = require("@ethersproject/bytes");
  var _keccak256 = require("@ethersproject/keccak256");
  var _properties = require("@ethersproject/properties");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  var _id = require("./id");
  var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
          });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
              try {
                  step(generator.next(value));
              } catch (e) {
                  reject(e);
              }
          }
          function rejected(value) {
              try {
                  step(generator["throw"](value));
              } catch (e) {
                  reject(e);
              }
          }
          function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const logger = new (0, _logger.Logger)((0, _version.version));
  const padding = new Uint8Array(32);
  padding.fill(0);
  const NegativeOne = (0, _bignumber.BigNumber).from(-1);
  const Zero = (0, _bignumber.BigNumber).from(0);
  const One = (0, _bignumber.BigNumber).from(1);
  const MaxUint256 = (0, _bignumber.BigNumber).from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  function hexPadRight(value) {
      const bytes = (0, _bytes.arrayify)(value);
      const padOffset = bytes.length % 32;
      if (padOffset) return (0, _bytes.hexConcat)([
          bytes,
          padding.slice(padOffset)
      ]);
      return (0, _bytes.hexlify)(bytes);
  }
  const hexTrue = (0, _bytes.hexZeroPad)(One.toHexString(), 32);
  const hexFalse = (0, _bytes.hexZeroPad)(Zero.toHexString(), 32);
  const domainFieldTypes = {
      name: "string",
      version: "string",
      chainId: "uint256",
      verifyingContract: "address",
      salt: "bytes32"
  };
  const domainFieldNames = [
      "name",
      "version",
      "chainId",
      "verifyingContract",
      "salt"
  ];
  function checkString(key) {
      return function(value) {
          if (typeof value !== "string") logger.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
          return value;
      };
  }
  const domainChecks = {
      name: checkString("name"),
      version: checkString("version"),
      chainId: function(value) {
          try {
              return (0, _bignumber.BigNumber).from(value).toString();
          } catch (error) {}
          return logger.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value);
      },
      verifyingContract: function(value) {
          try {
              return (0, _address.getAddress)(value).toLowerCase();
          } catch (error) {}
          return logger.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
      },
      salt: function(value) {
          try {
              const bytes = (0, _bytes.arrayify)(value);
              if (bytes.length !== 32) throw new Error("bad length");
              return (0, _bytes.hexlify)(bytes);
          } catch (error) {}
          return logger.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value);
      }
  };
  function getBaseEncoder(type) {
      // intXX and uintXX
      {
          const match = type.match(/^(u?)int(\d*)$/);
          if (match) {
              const signed = match[1] === "";
              const width = parseInt(match[2] || "256");
              if (width % 8 !== 0 || width > 256 || match[2] && match[2] !== String(width)) logger.throwArgumentError("invalid numeric width", "type", type);
              const boundsUpper = MaxUint256.mask(signed ? width - 1 : width);
              const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;
              return function(value) {
                  const v = (0, _bignumber.BigNumber).from(value);
                  if (v.lt(boundsLower) || v.gt(boundsUpper)) logger.throwArgumentError(`value out-of-bounds for ${type}`, "value", value);
                  return (0, _bytes.hexZeroPad)(v.toTwos(256).toHexString(), 32);
              };
          }
      }
      // bytesXX
      {
          const match = type.match(/^bytes(\d+)$/);
          if (match) {
              const width = parseInt(match[1]);
              if (width === 0 || width > 32 || match[1] !== String(width)) logger.throwArgumentError("invalid bytes width", "type", type);
              return function(value) {
                  const bytes = (0, _bytes.arrayify)(value);
                  if (bytes.length !== width) logger.throwArgumentError(`invalid length for ${type}`, "value", value);
                  return hexPadRight(value);
              };
          }
      }
      switch(type){
          case "address":
              return function(value) {
                  return (0, _bytes.hexZeroPad)((0, _address.getAddress)(value), 32);
              };
          case "bool":
              return function(value) {
                  return !value ? hexFalse : hexTrue;
              };
          case "bytes":
              return function(value) {
                  return (0, _keccak256.keccak256)(value);
              };
          case "string":
              return function(value) {
                  return (0, _id.id)(value);
              };
      }
      return null;
  }
  function encodeType(name, fields) {
      return `${name}(${fields.map(({ name , type  })=>type + " " + name).join(",")})`;
  }
  class TypedDataEncoder {
      constructor(types){
          (0, _properties.defineReadOnly)(this, "types", Object.freeze((0, _properties.deepCopy)(types)));
          (0, _properties.defineReadOnly)(this, "_encoderCache", {});
          (0, _properties.defineReadOnly)(this, "_types", {});
          // Link struct types to their direct child structs
          const links = {};
          // Link structs to structs which contain them as a child
          const parents = {};
          // Link all subtypes within a given struct
          const subtypes = {};
          Object.keys(types).forEach((type)=>{
              links[type] = {};
              parents[type] = [];
              subtypes[type] = {};
          });
          for(const name in types){
              const uniqueNames = {};
              types[name].forEach((field)=>{
                  // Check each field has a unique name
                  if (uniqueNames[field.name]) logger.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", types);
                  uniqueNames[field.name] = true;
                  // Get the base type (drop any array specifiers)
                  const baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
                  if (baseType === name) logger.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, "types", types);
                  // Is this a base encoding type?
                  const encoder = getBaseEncoder(baseType);
                  if (encoder) return;
                  if (!parents[baseType]) logger.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, "types", types);
                  // Add linkage
                  parents[baseType].push(name);
                  links[name][baseType] = true;
              });
          }
          // Deduce the primary type
          const primaryTypes = Object.keys(parents).filter((n)=>parents[n].length === 0);
          if (primaryTypes.length === 0) logger.throwArgumentError("missing primary type", "types", types);
          else if (primaryTypes.length > 1) logger.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map((t)=>JSON.stringify(t)).join(", ")}`, "types", types);
          (0, _properties.defineReadOnly)(this, "primaryType", primaryTypes[0]);
          // Check for circular type references
          function checkCircular(type, found) {
              if (found[type]) logger.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, "types", types);
              found[type] = true;
              Object.keys(links[type]).forEach((child)=>{
                  if (!parents[child]) return;
                  // Recursively check children
                  checkCircular(child, found);
                  // Mark all ancestors as having this decendant
                  Object.keys(found).forEach((subtype)=>{
                      subtypes[subtype][child] = true;
                  });
              });
              delete found[type];
          }
          checkCircular(this.primaryType, {});
          // Compute each fully describe type
          for(const name in subtypes){
              const st = Object.keys(subtypes[name]);
              st.sort();
              this._types[name] = encodeType(name, types[name]) + st.map((t)=>encodeType(t, types[t])).join("");
          }
      }
      getEncoder(type) {
          let encoder = this._encoderCache[type];
          if (!encoder) encoder = this._encoderCache[type] = this._getEncoder(type);
          return encoder;
      }
      _getEncoder(type) {
          // Basic encoder type (address, bool, uint256, etc)
          {
              const encoder = getBaseEncoder(type);
              if (encoder) return encoder;
          }
          // Array
          const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
          if (match) {
              const subtype = match[1];
              const subEncoder = this.getEncoder(subtype);
              const length = parseInt(match[3]);
              return (value)=>{
                  if (length >= 0 && value.length !== length) logger.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
                  let result = value.map(subEncoder);
                  if (this._types[subtype]) result = result.map((0, _keccak256.keccak256));
                  return (0, _keccak256.keccak256)((0, _bytes.hexConcat)(result));
              };
          }
          // Struct
          const fields = this.types[type];
          if (fields) {
              const encodedType = (0, _id.id)(this._types[type]);
              return (value)=>{
                  const values = fields.map(({ name , type  })=>{
                      const result = this.getEncoder(type)(value[name]);
                      if (this._types[type]) return (0, _keccak256.keccak256)(result);
                      return result;
                  });
                  values.unshift(encodedType);
                  return (0, _bytes.hexConcat)(values);
              };
          }
          return logger.throwArgumentError(`unknown type: ${type}`, "type", type);
      }
      encodeType(name) {
          const result = this._types[name];
          if (!result) logger.throwArgumentError(`unknown type: ${JSON.stringify(name)}`, "name", name);
          return result;
      }
      encodeData(type, value) {
          return this.getEncoder(type)(value);
      }
      hashStruct(name, value) {
          return (0, _keccak256.keccak256)(this.encodeData(name, value));
      }
      encode(value) {
          return this.encodeData(this.primaryType, value);
      }
      hash(value) {
          return this.hashStruct(this.primaryType, value);
      }
      _visit(type, value, callback) {
          // Basic encoder type (address, bool, uint256, etc)
          {
              const encoder = getBaseEncoder(type);
              if (encoder) return callback(type, value);
          }
          // Array
          const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
          if (match) {
              const subtype = match[1];
              const length = parseInt(match[3]);
              if (length >= 0 && value.length !== length) logger.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
              return value.map((v)=>this._visit(subtype, v, callback));
          }
          // Struct
          const fields = this.types[type];
          if (fields) return fields.reduce((accum, { name , type  })=>{
              accum[name] = this._visit(type, value[name], callback);
              return accum;
          }, {});
          return logger.throwArgumentError(`unknown type: ${type}`, "type", type);
      }
      visit(value, callback) {
          return this._visit(this.primaryType, value, callback);
      }
      static from(types) {
          return new TypedDataEncoder(types);
      }
      static getPrimaryType(types) {
          return TypedDataEncoder.from(types).primaryType;
      }
      static hashStruct(name, types, value) {
          return TypedDataEncoder.from(types).hashStruct(name, value);
      }
      static hashDomain(domain) {
          const domainFields = [];
          for(const name in domain){
              const type = domainFieldTypes[name];
              if (!type) logger.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
              domainFields.push({
                  name,
                  type
              });
          }
          domainFields.sort((a, b)=>{
              return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
          });
          return TypedDataEncoder.hashStruct("EIP712Domain", {
              EIP712Domain: domainFields
          }, domain);
      }
      static encode(domain, types, value) {
          return (0, _bytes.hexConcat)([
              "0x1901",
              TypedDataEncoder.hashDomain(domain),
              TypedDataEncoder.from(types).hash(value)
          ]);
      }
      static hash(domain, types, value) {
          return (0, _keccak256.keccak256)(TypedDataEncoder.encode(domain, types, value));
      }
      // Replaces all address types with ENS names with their looked up address
      static resolveNames(domain, types, value, resolveName) {
          return __awaiter(this, void 0, void 0, function*() {
              // Make a copy to isolate it from the object passed in
              domain = (0, _properties.shallowCopy)(domain);
              // Look up all ENS names
              const ensCache = {};
              // Do we need to look up the domain's verifyingContract?
              if (domain.verifyingContract && !(0, _bytes.isHexString)(domain.verifyingContract, 20)) ensCache[domain.verifyingContract] = "0x";
              // We are going to use the encoder to visit all the base values
              const encoder = TypedDataEncoder.from(types);
              // Get a list of all the addresses
              encoder.visit(value, (type, value)=>{
                  if (type === "address" && !(0, _bytes.isHexString)(value, 20)) ensCache[value] = "0x";
                  return value;
              });
              // Lookup each name
              for(const name in ensCache)ensCache[name] = yield resolveName(name);
              // Replace the domain verifyingContract if needed
              if (domain.verifyingContract && ensCache[domain.verifyingContract]) domain.verifyingContract = ensCache[domain.verifyingContract];
              // Replace all ENS names with their address
              value = encoder.visit(value, (type, value)=>{
                  if (type === "address" && ensCache[value]) return ensCache[value];
                  return value;
              });
              return {
                  domain,
                  value
              };
          });
      }
      static getPayload(domain, types, value) {
          // Validate the domain fields
          TypedDataEncoder.hashDomain(domain);
          // Derive the EIP712Domain Struct reference type
          const domainValues = {};
          const domainTypes = [];
          domainFieldNames.forEach((name)=>{
              const value = domain[name];
              if (value == null) return;
              domainValues[name] = domainChecks[name](value);
              domainTypes.push({
                  name,
                  type: domainFieldTypes[name]
              });
          });
          const encoder = TypedDataEncoder.from(types);
          const typesWithDomain = (0, _properties.shallowCopy)(types);
          if (typesWithDomain.EIP712Domain) logger.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", types);
          else typesWithDomain.EIP712Domain = domainTypes;
          // Validate the data structures and types
          encoder.encode(value);
          return {
              types: typesWithDomain,
              domain: domainValues,
              primaryType: encoder.primaryType,
              message: encoder.visit(value, (type, value)=>{
                  // bytes
                  if (type.match(/^bytes(\d*)/)) return (0, _bytes.hexlify)((0, _bytes.arrayify)(value));
                  // uint or int
                  if (type.match(/^u?int/)) return (0, _bignumber.BigNumber).from(value).toString();
                  switch(type){
                      case "address":
                          return value.toLowerCase();
                      case "bool":
                          return !!value;
                      case "string":
                          if (typeof value !== "string") logger.throwArgumentError(`invalid string`, "value", value);
                          return value;
                  }
                  return logger.throwArgumentError("unsupported type", "type", type);
              })
          };
      }
  }
  
  },{"@ethersproject/address":"ggdAz","@ethersproject/bignumber":"ckYYW","@ethersproject/bytes":"htrqZ","@ethersproject/keccak256":"hXDEv","@ethersproject/properties":"h3GJb","@ethersproject/logger":"hLvB2","./_version":"kUuZu","./id":"70HiZ","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"ggdAz":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "getAddress", ()=>getAddress);
  parcelHelpers.export(exports, "isAddress", ()=>isAddress);
  parcelHelpers.export(exports, "getIcapAddress", ()=>getIcapAddress);
  // http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
  parcelHelpers.export(exports, "getContractAddress", ()=>getContractAddress);
  parcelHelpers.export(exports, "getCreate2Address", ()=>getCreate2Address);
  var _bytes = require("@ethersproject/bytes");
  var _bignumber = require("@ethersproject/bignumber");
  var _keccak256 = require("@ethersproject/keccak256");
  var _rlp = require("@ethersproject/rlp");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  "use strict";
  const logger = new (0, _logger.Logger)((0, _version.version));
  function getChecksumAddress(address) {
      if (!(0, _bytes.isHexString)(address, 20)) logger.throwArgumentError("invalid address", "address", address);
      address = address.toLowerCase();
      const chars = address.substring(2).split("");
      const expanded = new Uint8Array(40);
      for(let i = 0; i < 40; i++)expanded[i] = chars[i].charCodeAt(0);
      const hashed = (0, _bytes.arrayify)((0, _keccak256.keccak256)(expanded));
      for(let i = 0; i < 40; i += 2){
          if (hashed[i >> 1] >> 4 >= 8) chars[i] = chars[i].toUpperCase();
          if ((hashed[i >> 1] & 0x0f) >= 8) chars[i + 1] = chars[i + 1].toUpperCase();
      }
      return "0x" + chars.join("");
  }
  // Shims for environments that are missing some required constants and functions
  const MAX_SAFE_INTEGER = 0x1fffffffffffff;
  function log10(x) {
      if (Math.log10) return Math.log10(x);
      return Math.log(x) / Math.LN10;
  }
  // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
  // Create lookup table
  const ibanLookup = {};
  for(let i = 0; i < 10; i++)ibanLookup[String(i)] = String(i);
  for(let i = 0; i < 26; i++)ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
  // How many decimal digits can we process? (for 64-bit float, this is 15)
  const safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
  function ibanChecksum(address) {
      address = address.toUpperCase();
      address = address.substring(4) + address.substring(0, 2) + "00";
      let expanded = address.split("").map((c)=>{
          return ibanLookup[c];
      }).join("");
      // Javascript can handle integers safely up to 15 (decimal) digits
      while(expanded.length >= safeDigits){
          let block = expanded.substring(0, safeDigits);
          expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
      }
      let checksum = String(98 - parseInt(expanded, 10) % 97);
      while(checksum.length < 2)checksum = "0" + checksum;
      return checksum;
  }
  function getAddress(address) {
      let result = null;
      if (typeof address !== "string") logger.throwArgumentError("invalid address", "address", address);
      if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
          // Missing the 0x prefix
          if (address.substring(0, 2) !== "0x") address = "0x" + address;
          result = getChecksumAddress(address);
          // It is a checksummed address with a bad checksum
          if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) logger.throwArgumentError("bad address checksum", "address", address);
      // Maybe ICAP? (we only support direct mode)
      } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
          // It is an ICAP address with a bad checksum
          if (address.substring(2, 4) !== ibanChecksum(address)) logger.throwArgumentError("bad icap checksum", "address", address);
          result = (0, _bignumber._base36To16)(address.substring(4));
          while(result.length < 40)result = "0" + result;
          result = getChecksumAddress("0x" + result);
      } else logger.throwArgumentError("invalid address", "address", address);
      return result;
  }
  function isAddress(address) {
      try {
          getAddress(address);
          return true;
      } catch (error) {}
      return false;
  }
  function getIcapAddress(address) {
      let base36 = (0, _bignumber._base16To36)(getAddress(address).substring(2)).toUpperCase();
      while(base36.length < 30)base36 = "0" + base36;
      return "XE" + ibanChecksum("XE00" + base36) + base36;
  }
  function getContractAddress(transaction) {
      let from = null;
      try {
          from = getAddress(transaction.from);
      } catch (error) {
          logger.throwArgumentError("missing from address", "transaction", transaction);
      }
      const nonce = (0, _bytes.stripZeros)((0, _bytes.arrayify)((0, _bignumber.BigNumber).from(transaction.nonce).toHexString()));
      return getAddress((0, _bytes.hexDataSlice)((0, _keccak256.keccak256)((0, _rlp.encode)([
          from,
          nonce
      ])), 12));
  }
  function getCreate2Address(from, salt, initCodeHash) {
      if ((0, _bytes.hexDataLength)(salt) !== 32) logger.throwArgumentError("salt must be 32 bytes", "salt", salt);
      if ((0, _bytes.hexDataLength)(initCodeHash) !== 32) logger.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
      return getAddress((0, _bytes.hexDataSlice)((0, _keccak256.keccak256)((0, _bytes.concat)([
          "0xff",
          getAddress(from),
          salt,
          initCodeHash
      ])), 12));
  }
  
  },{"@ethersproject/bytes":"htrqZ","@ethersproject/bignumber":"ckYYW","@ethersproject/keccak256":"hXDEv","@ethersproject/rlp":"b2vlp","@ethersproject/logger":"hLvB2","./_version":"jWoM7","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"b2vlp":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "encode", ()=>encode);
  parcelHelpers.export(exports, "decode", ()=>decode);
  //See: https://github.com/ethereum/wiki/wiki/RLP
  var _bytes = require("@ethersproject/bytes");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  "use strict";
  const logger = new (0, _logger.Logger)((0, _version.version));
  function arrayifyInteger(value) {
      const result = [];
      while(value){
          result.unshift(value & 0xff);
          value >>= 8;
      }
      return result;
  }
  function unarrayifyInteger(data, offset, length) {
      let result = 0;
      for(let i = 0; i < length; i++)result = result * 256 + data[offset + i];
      return result;
  }
  function _encode(object) {
      if (Array.isArray(object)) {
          let payload = [];
          object.forEach(function(child) {
              payload = payload.concat(_encode(child));
          });
          if (payload.length <= 55) {
              payload.unshift(0xc0 + payload.length);
              return payload;
          }
          const length = arrayifyInteger(payload.length);
          length.unshift(0xf7 + length.length);
          return length.concat(payload);
      }
      if (!(0, _bytes.isBytesLike)(object)) logger.throwArgumentError("RLP object must be BytesLike", "object", object);
      const data = Array.prototype.slice.call((0, _bytes.arrayify)(object));
      if (data.length === 1 && data[0] <= 0x7f) return data;
      else if (data.length <= 55) {
          data.unshift(0x80 + data.length);
          return data;
      }
      const length = arrayifyInteger(data.length);
      length.unshift(0xb7 + length.length);
      return length.concat(data);
  }
  function encode(object) {
      return (0, _bytes.hexlify)(_encode(object));
  }
  function _decodeChildren(data, offset, childOffset, length) {
      const result = [];
      while(childOffset < offset + 1 + length){
          const decoded = _decode(data, childOffset);
          result.push(decoded.result);
          childOffset += decoded.consumed;
          if (childOffset > offset + 1 + length) logger.throwError("child data too short", (0, _logger.Logger).errors.BUFFER_OVERRUN, {});
      }
      return {
          consumed: 1 + length,
          result: result
      };
  }
  // returns { consumed: number, result: Object }
  function _decode(data, offset) {
      if (data.length === 0) logger.throwError("data too short", (0, _logger.Logger).errors.BUFFER_OVERRUN, {});
      // Array with extra length prefix
      if (data[offset] >= 0xf8) {
          const lengthLength = data[offset] - 0xf7;
          if (offset + 1 + lengthLength > data.length) logger.throwError("data short segment too short", (0, _logger.Logger).errors.BUFFER_OVERRUN, {});
          const length = unarrayifyInteger(data, offset + 1, lengthLength);
          if (offset + 1 + lengthLength + length > data.length) logger.throwError("data long segment too short", (0, _logger.Logger).errors.BUFFER_OVERRUN, {});
          return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
      } else if (data[offset] >= 0xc0) {
          const length = data[offset] - 0xc0;
          if (offset + 1 + length > data.length) logger.throwError("data array too short", (0, _logger.Logger).errors.BUFFER_OVERRUN, {});
          return _decodeChildren(data, offset, offset + 1, length);
      } else if (data[offset] >= 0xb8) {
          const lengthLength = data[offset] - 0xb7;
          if (offset + 1 + lengthLength > data.length) logger.throwError("data array too short", (0, _logger.Logger).errors.BUFFER_OVERRUN, {});
          const length = unarrayifyInteger(data, offset + 1, lengthLength);
          if (offset + 1 + lengthLength + length > data.length) logger.throwError("data array too short", (0, _logger.Logger).errors.BUFFER_OVERRUN, {});
          const result = (0, _bytes.hexlify)(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
          return {
              consumed: 1 + lengthLength + length,
              result: result
          };
      } else if (data[offset] >= 0x80) {
          const length = data[offset] - 0x80;
          if (offset + 1 + length > data.length) logger.throwError("data too short", (0, _logger.Logger).errors.BUFFER_OVERRUN, {});
          const result = (0, _bytes.hexlify)(data.slice(offset + 1, offset + 1 + length));
          return {
              consumed: 1 + length,
              result: result
          };
      }
      return {
          consumed: 1,
          result: (0, _bytes.hexlify)(data[offset])
      };
  }
  function decode(data) {
      const bytes = (0, _bytes.arrayify)(data);
      const decoded = _decode(bytes, 0);
      if (decoded.consumed !== bytes.length) logger.throwArgumentError("invalid rlp data", "data", data);
      return decoded.result;
  }
  
  },{"@ethersproject/bytes":"htrqZ","@ethersproject/logger":"hLvB2","./_version":"9e0ao","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"9e0ao":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "version", ()=>version);
  const version = "rlp/5.7.0";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"jWoM7":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "version", ()=>version);
  const version = "address/5.7.0";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"k4R8k":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "computeHmac", ()=>(0, _sha2.computeHmac));
  parcelHelpers.export(exports, "ripemd160", ()=>(0, _sha2.ripemd160));
  parcelHelpers.export(exports, "sha256", ()=>(0, _sha2.sha256));
  parcelHelpers.export(exports, "sha512", ()=>(0, _sha2.sha512));
  parcelHelpers.export(exports, "SupportedAlgorithm", ()=>(0, _types.SupportedAlgorithm));
  var _sha2 = require("./sha2");
  var _types = require("./types");
  
  },{"./sha2":"gqduC","./types":"gUbat","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"gqduC":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "ripemd160", ()=>ripemd160);
  parcelHelpers.export(exports, "sha256", ()=>sha256);
  parcelHelpers.export(exports, "sha512", ()=>sha512);
  parcelHelpers.export(exports, "computeHmac", ()=>computeHmac);
  var _hashJs = require("hash.js");
  var _hashJsDefault = parcelHelpers.interopDefault(_hashJs);
  //const _ripemd160 = _hash.ripemd160;
  var _bytes = require("@ethersproject/bytes");
  var _types = require("./types");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  "use strict";
  const logger = new (0, _logger.Logger)((0, _version.version));
  function ripemd160(data) {
      return "0x" + (0, _hashJsDefault.default).ripemd160().update((0, _bytes.arrayify)(data)).digest("hex");
  }
  function sha256(data) {
      return "0x" + (0, _hashJsDefault.default).sha256().update((0, _bytes.arrayify)(data)).digest("hex");
  }
  function sha512(data) {
      return "0x" + (0, _hashJsDefault.default).sha512().update((0, _bytes.arrayify)(data)).digest("hex");
  }
  function computeHmac(algorithm, key, data) {
      if (!(0, _types.SupportedAlgorithm)[algorithm]) logger.throwError("unsupported algorithm " + algorithm, (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
          operation: "hmac",
          algorithm: algorithm
      });
      return "0x" + (0, _hashJsDefault.default).hmac((0, _hashJsDefault.default)[algorithm], (0, _bytes.arrayify)(key)).update((0, _bytes.arrayify)(data)).digest("hex");
  }
  
  },{"hash.js":"gOEGU","@ethersproject/bytes":"htrqZ","./types":"gUbat","@ethersproject/logger":"hLvB2","./_version":"c9Q6D","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"gOEGU":[function(require,module,exports) {
  var hash = exports;
  hash.utils = require("107debe1eb0b410a");
  hash.common = require("88c706d769b2a4ad");
  hash.sha = require("4bae8ad6598d5b99");
  hash.ripemd = require("646904e3c9d68c5a");
  hash.hmac = require("a2a9cbc513adc3bd");
  // Proxy hash functions to the main object
  hash.sha1 = hash.sha.sha1;
  hash.sha256 = hash.sha.sha256;
  hash.sha224 = hash.sha.sha224;
  hash.sha384 = hash.sha.sha384;
  hash.sha512 = hash.sha.sha512;
  hash.ripemd160 = hash.ripemd.ripemd160;
  
  },{"107debe1eb0b410a":"kfzn2","88c706d769b2a4ad":"ecAfF","4bae8ad6598d5b99":"8nbee","646904e3c9d68c5a":"9kyRQ","a2a9cbc513adc3bd":"5KrrE"}],"kfzn2":[function(require,module,exports) {
  "use strict";
  var assert = require("7937969cdc090f0a");
  var inherits = require("f807b7c3a817a2f9");
  exports.inherits = inherits;
  function isSurrogatePair(msg, i) {
      if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) return false;
      if (i < 0 || i + 1 >= msg.length) return false;
      return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
  }
  function toArray(msg, enc) {
      if (Array.isArray(msg)) return msg.slice();
      if (!msg) return [];
      var res = [];
      if (typeof msg === "string") {
          if (!enc) {
              // Inspired by stringToUtf8ByteArray() in closure-library by Google
              // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
              // Apache License 2.0
              // https://github.com/google/closure-library/blob/master/LICENSE
              var p = 0;
              for(var i = 0; i < msg.length; i++){
                  var c = msg.charCodeAt(i);
                  if (c < 128) res[p++] = c;
                  else if (c < 2048) {
                      res[p++] = c >> 6 | 192;
                      res[p++] = c & 63 | 128;
                  } else if (isSurrogatePair(msg, i)) {
                      c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
                      res[p++] = c >> 18 | 240;
                      res[p++] = c >> 12 & 63 | 128;
                      res[p++] = c >> 6 & 63 | 128;
                      res[p++] = c & 63 | 128;
                  } else {
                      res[p++] = c >> 12 | 224;
                      res[p++] = c >> 6 & 63 | 128;
                      res[p++] = c & 63 | 128;
                  }
              }
          } else if (enc === "hex") {
              msg = msg.replace(/[^a-z0-9]+/ig, "");
              if (msg.length % 2 !== 0) msg = "0" + msg;
              for(i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
          }
      } else for(i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
      return res;
  }
  exports.toArray = toArray;
  function toHex(msg) {
      var res = "";
      for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
      return res;
  }
  exports.toHex = toHex;
  function htonl(w) {
      var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
      return res >>> 0;
  }
  exports.htonl = htonl;
  function toHex32(msg, endian) {
      var res = "";
      for(var i = 0; i < msg.length; i++){
          var w = msg[i];
          if (endian === "little") w = htonl(w);
          res += zero8(w.toString(16));
      }
      return res;
  }
  exports.toHex32 = toHex32;
  function zero2(word) {
      if (word.length === 1) return "0" + word;
      else return word;
  }
  exports.zero2 = zero2;
  function zero8(word) {
      if (word.length === 7) return "0" + word;
      else if (word.length === 6) return "00" + word;
      else if (word.length === 5) return "000" + word;
      else if (word.length === 4) return "0000" + word;
      else if (word.length === 3) return "00000" + word;
      else if (word.length === 2) return "000000" + word;
      else if (word.length === 1) return "0000000" + word;
      else return word;
  }
  exports.zero8 = zero8;
  function join32(msg, start, end, endian) {
      var len = end - start;
      assert(len % 4 === 0);
      var res = new Array(len / 4);
      for(var i = 0, k = start; i < res.length; i++, k += 4){
          var w;
          if (endian === "big") w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
          else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
          res[i] = w >>> 0;
      }
      return res;
  }
  exports.join32 = join32;
  function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for(var i = 0, k = 0; i < msg.length; i++, k += 4){
          var m = msg[i];
          if (endian === "big") {
              res[k] = m >>> 24;
              res[k + 1] = m >>> 16 & 0xff;
              res[k + 2] = m >>> 8 & 0xff;
              res[k + 3] = m & 0xff;
          } else {
              res[k + 3] = m >>> 24;
              res[k + 2] = m >>> 16 & 0xff;
              res[k + 1] = m >>> 8 & 0xff;
              res[k] = m & 0xff;
          }
      }
      return res;
  }
  exports.split32 = split32;
  function rotr32(w, b) {
      return w >>> b | w << 32 - b;
  }
  exports.rotr32 = rotr32;
  function rotl32(w, b) {
      return w << b | w >>> 32 - b;
  }
  exports.rotl32 = rotl32;
  function sum32(a, b) {
      return a + b >>> 0;
  }
  exports.sum32 = sum32;
  function sum32_3(a, b, c) {
      return a + b + c >>> 0;
  }
  exports.sum32_3 = sum32_3;
  function sum32_4(a, b, c, d) {
      return a + b + c + d >>> 0;
  }
  exports.sum32_4 = sum32_4;
  function sum32_5(a, b, c, d, e) {
      return a + b + c + d + e >>> 0;
  }
  exports.sum32_5 = sum32_5;
  function sum64(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
  }
  exports.sum64 = sum64;
  function sum64_hi(ah, al, bh, bl) {
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
  }
  exports.sum64_hi = sum64_hi;
  function sum64_lo(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
  }
  exports.sum64_lo = sum64_lo;
  function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
  }
  exports.sum64_4_hi = sum64_4_hi;
  function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
  }
  exports.sum64_4_lo = sum64_4_lo;
  function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = lo + el >>> 0;
      carry += lo < el ? 1 : 0;
      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
  }
  exports.sum64_5_hi = sum64_5_hi;
  function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;
      return lo >>> 0;
  }
  exports.sum64_5_lo = sum64_5_lo;
  function rotr64_hi(ah, al, num) {
      var r = al << 32 - num | ah >>> num;
      return r >>> 0;
  }
  exports.rotr64_hi = rotr64_hi;
  function rotr64_lo(ah, al, num) {
      var r = ah << 32 - num | al >>> num;
      return r >>> 0;
  }
  exports.rotr64_lo = rotr64_lo;
  function shr64_hi(ah, al, num) {
      return ah >>> num;
  }
  exports.shr64_hi = shr64_hi;
  function shr64_lo(ah, al, num) {
      var r = ah << 32 - num | al >>> num;
      return r >>> 0;
  }
  exports.shr64_lo = shr64_lo;
  
  },{"7937969cdc090f0a":"8OvWh","f807b7c3a817a2f9":"bRL3M"}],"8OvWh":[function(require,module,exports) {
  module.exports = assert;
  function assert(val, msg) {
      if (!val) throw new Error(msg || "Assertion failed");
  }
  assert.equal = function assertEqual(l, r, msg) {
      if (l != r) throw new Error(msg || "Assertion failed: " + l + " != " + r);
  };
  
  },{}],"bRL3M":[function(require,module,exports) {
  if (typeof Object.create === "function") // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                  value: ctor,
                  enumerable: false,
                  writable: true,
                  configurable: true
              }
          });
      }
  };
  else // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
      }
  };
  
  },{}],"ecAfF":[function(require,module,exports) {
  "use strict";
  var utils = require("a5579b2569ebc781");
  var assert = require("42f72e804e34f86b");
  function BlockHash() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = "big";
      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
  }
  exports.BlockHash = BlockHash;
  BlockHash.prototype.update = function update(msg, enc) {
      // Convert message to array, pad it, and join into 32bit blocks
      msg = utils.toArray(msg, enc);
      if (!this.pending) this.pending = msg;
      else this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;
      // Enough data, try updating
      if (this.pending.length >= this._delta8) {
          msg = this.pending;
          // Process pending data in blocks
          var r = msg.length % this._delta8;
          this.pending = msg.slice(msg.length - r, msg.length);
          if (this.pending.length === 0) this.pending = null;
          msg = utils.join32(msg, 0, msg.length - r, this.endian);
          for(var i = 0; i < msg.length; i += this._delta32)this._update(msg, i, i + this._delta32);
      }
      return this;
  };
  BlockHash.prototype.digest = function digest(enc) {
      this.update(this._pad());
      assert(this.pending === null);
      return this._digest(enc);
  };
  BlockHash.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - (len + this.padLength) % bytes;
      var res = new Array(k + this.padLength);
      res[0] = 0x80;
      for(var i = 1; i < k; i++)res[i] = 0;
      // Append length
      len <<= 3;
      if (this.endian === "big") {
          for(var t = 8; t < this.padLength; t++)res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = len >>> 24 & 0xff;
          res[i++] = len >>> 16 & 0xff;
          res[i++] = len >>> 8 & 0xff;
          res[i++] = len & 0xff;
      } else {
          res[i++] = len & 0xff;
          res[i++] = len >>> 8 & 0xff;
          res[i++] = len >>> 16 & 0xff;
          res[i++] = len >>> 24 & 0xff;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;
          for(t = 8; t < this.padLength; t++)res[i++] = 0;
      }
      return res;
  };
  
  },{"a5579b2569ebc781":"kfzn2","42f72e804e34f86b":"8OvWh"}],"8nbee":[function(require,module,exports) {
  "use strict";
  exports.sha1 = require("cfcae84f59aa6d5a");
  exports.sha224 = require("4418555b7800eeb3");
  exports.sha256 = require("19db52ac4b845489");
  exports.sha384 = require("b2b884229a194568");
  exports.sha512 = require("a2a3db14d751cc8a");
  
  },{"cfcae84f59aa6d5a":"fnjyb","4418555b7800eeb3":"9x7tY","19db52ac4b845489":"9bCbT","b2b884229a194568":"lJMiS","a2a3db14d751cc8a":"8y482"}],"fnjyb":[function(require,module,exports) {
  "use strict";
  var utils = require("8298a574ec81e115");
  var common = require("750d9c55e793949a");
  var shaCommon = require("7682680ffc4dfac6");
  var rotl32 = utils.rotl32;
  var sum32 = utils.sum32;
  var sum32_5 = utils.sum32_5;
  var ft_1 = shaCommon.ft_1;
  var BlockHash = common.BlockHash;
  var sha1_K = [
      0x5A827999,
      0x6ED9EBA1,
      0x8F1BBCDC,
      0xCA62C1D6
  ];
  function SHA1() {
      if (!(this instanceof SHA1)) return new SHA1();
      BlockHash.call(this);
      this.h = [
          0x67452301,
          0xefcdab89,
          0x98badcfe,
          0x10325476,
          0xc3d2e1f0
      ];
      this.W = new Array(80);
  }
  utils.inherits(SHA1, BlockHash);
  module.exports = SHA1;
  SHA1.blockSize = 512;
  SHA1.outSize = 160;
  SHA1.hmacStrength = 80;
  SHA1.padLength = 64;
  SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;
      for(var i = 0; i < 16; i++)W[i] = msg[start + i];
      for(; i < W.length; i++)W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      for(i = 0; i < W.length; i++){
          var s = ~~(i / 20);
          var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
          e = d;
          d = c;
          c = rotl32(b, 30);
          b = a;
          a = t;
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
  };
  SHA1.prototype._digest = function digest(enc) {
      if (enc === "hex") return utils.toHex32(this.h, "big");
      else return utils.split32(this.h, "big");
  };
  
  },{"8298a574ec81e115":"kfzn2","750d9c55e793949a":"ecAfF","7682680ffc4dfac6":"gzrNi"}],"gzrNi":[function(require,module,exports) {
  "use strict";
  var utils = require("82e66484ce1c37e9");
  var rotr32 = utils.rotr32;
  function ft_1(s, x, y, z) {
      if (s === 0) return ch32(x, y, z);
      if (s === 1 || s === 3) return p32(x, y, z);
      if (s === 2) return maj32(x, y, z);
  }
  exports.ft_1 = ft_1;
  function ch32(x, y, z) {
      return x & y ^ ~x & z;
  }
  exports.ch32 = ch32;
  function maj32(x, y, z) {
      return x & y ^ x & z ^ y & z;
  }
  exports.maj32 = maj32;
  function p32(x, y, z) {
      return x ^ y ^ z;
  }
  exports.p32 = p32;
  function s0_256(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
  }
  exports.s0_256 = s0_256;
  function s1_256(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
  }
  exports.s1_256 = s1_256;
  function g0_256(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
  }
  exports.g0_256 = g0_256;
  function g1_256(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
  }
  exports.g1_256 = g1_256;
  
  },{"82e66484ce1c37e9":"kfzn2"}],"9x7tY":[function(require,module,exports) {
  "use strict";
  var utils = require("67184d3444f0d943");
  var SHA256 = require("684477c0a86134eb");
  function SHA224() {
      if (!(this instanceof SHA224)) return new SHA224();
      SHA256.call(this);
      this.h = [
          0xc1059ed8,
          0x367cd507,
          0x3070dd17,
          0xf70e5939,
          0xffc00b31,
          0x68581511,
          0x64f98fa7,
          0xbefa4fa4
      ];
  }
  utils.inherits(SHA224, SHA256);
  module.exports = SHA224;
  SHA224.blockSize = 512;
  SHA224.outSize = 224;
  SHA224.hmacStrength = 192;
  SHA224.padLength = 64;
  SHA224.prototype._digest = function digest(enc) {
      // Just truncate output
      if (enc === "hex") return utils.toHex32(this.h.slice(0, 7), "big");
      else return utils.split32(this.h.slice(0, 7), "big");
  };
  
  },{"67184d3444f0d943":"kfzn2","684477c0a86134eb":"9bCbT"}],"9bCbT":[function(require,module,exports) {
  "use strict";
  var utils = require("88653032a57a5fec");
  var common = require("24d80b690f5e97b");
  var shaCommon = require("7309e1866ad00a3");
  var assert = require("e253e8967647ab70");
  var sum32 = utils.sum32;
  var sum32_4 = utils.sum32_4;
  var sum32_5 = utils.sum32_5;
  var ch32 = shaCommon.ch32;
  var maj32 = shaCommon.maj32;
  var s0_256 = shaCommon.s0_256;
  var s1_256 = shaCommon.s1_256;
  var g0_256 = shaCommon.g0_256;
  var g1_256 = shaCommon.g1_256;
  var BlockHash = common.BlockHash;
  var sha256_K = [
      0x428a2f98,
      0x71374491,
      0xb5c0fbcf,
      0xe9b5dba5,
      0x3956c25b,
      0x59f111f1,
      0x923f82a4,
      0xab1c5ed5,
      0xd807aa98,
      0x12835b01,
      0x243185be,
      0x550c7dc3,
      0x72be5d74,
      0x80deb1fe,
      0x9bdc06a7,
      0xc19bf174,
      0xe49b69c1,
      0xefbe4786,
      0x0fc19dc6,
      0x240ca1cc,
      0x2de92c6f,
      0x4a7484aa,
      0x5cb0a9dc,
      0x76f988da,
      0x983e5152,
      0xa831c66d,
      0xb00327c8,
      0xbf597fc7,
      0xc6e00bf3,
      0xd5a79147,
      0x06ca6351,
      0x14292967,
      0x27b70a85,
      0x2e1b2138,
      0x4d2c6dfc,
      0x53380d13,
      0x650a7354,
      0x766a0abb,
      0x81c2c92e,
      0x92722c85,
      0xa2bfe8a1,
      0xa81a664b,
      0xc24b8b70,
      0xc76c51a3,
      0xd192e819,
      0xd6990624,
      0xf40e3585,
      0x106aa070,
      0x19a4c116,
      0x1e376c08,
      0x2748774c,
      0x34b0bcb5,
      0x391c0cb3,
      0x4ed8aa4a,
      0x5b9cca4f,
      0x682e6ff3,
      0x748f82ee,
      0x78a5636f,
      0x84c87814,
      0x8cc70208,
      0x90befffa,
      0xa4506ceb,
      0xbef9a3f7,
      0xc67178f2
  ];
  function SHA256() {
      if (!(this instanceof SHA256)) return new SHA256();
      BlockHash.call(this);
      this.h = [
          0x6a09e667,
          0xbb67ae85,
          0x3c6ef372,
          0xa54ff53a,
          0x510e527f,
          0x9b05688c,
          0x1f83d9ab,
          0x5be0cd19
      ];
      this.k = sha256_K;
      this.W = new Array(64);
  }
  utils.inherits(SHA256, BlockHash);
  module.exports = SHA256;
  SHA256.blockSize = 512;
  SHA256.outSize = 256;
  SHA256.hmacStrength = 192;
  SHA256.padLength = 64;
  SHA256.prototype._update = function _update(msg, start) {
      var W = this.W;
      for(var i = 0; i < 16; i++)W[i] = msg[start + i];
      for(; i < W.length; i++)W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];
      assert(this.k.length === W.length);
      for(i = 0; i < W.length; i++){
          var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
          var T2 = sum32(s0_256(a), maj32(a, b, c));
          h = g;
          g = f;
          f = e;
          e = sum32(d, T1);
          d = c;
          c = b;
          b = a;
          a = sum32(T1, T2);
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
      this.h[5] = sum32(this.h[5], f);
      this.h[6] = sum32(this.h[6], g);
      this.h[7] = sum32(this.h[7], h);
  };
  SHA256.prototype._digest = function digest(enc) {
      if (enc === "hex") return utils.toHex32(this.h, "big");
      else return utils.split32(this.h, "big");
  };
  
  },{"88653032a57a5fec":"kfzn2","24d80b690f5e97b":"ecAfF","7309e1866ad00a3":"gzrNi","e253e8967647ab70":"8OvWh"}],"lJMiS":[function(require,module,exports) {
  "use strict";
  var utils = require("756ae81258c97bed");
  var SHA512 = require("ff0f1b4358ca3866");
  function SHA384() {
      if (!(this instanceof SHA384)) return new SHA384();
      SHA512.call(this);
      this.h = [
          0xcbbb9d5d,
          0xc1059ed8,
          0x629a292a,
          0x367cd507,
          0x9159015a,
          0x3070dd17,
          0x152fecd8,
          0xf70e5939,
          0x67332667,
          0xffc00b31,
          0x8eb44a87,
          0x68581511,
          0xdb0c2e0d,
          0x64f98fa7,
          0x47b5481d,
          0xbefa4fa4
      ];
  }
  utils.inherits(SHA384, SHA512);
  module.exports = SHA384;
  SHA384.blockSize = 1024;
  SHA384.outSize = 384;
  SHA384.hmacStrength = 192;
  SHA384.padLength = 128;
  SHA384.prototype._digest = function digest(enc) {
      if (enc === "hex") return utils.toHex32(this.h.slice(0, 12), "big");
      else return utils.split32(this.h.slice(0, 12), "big");
  };
  
  },{"756ae81258c97bed":"kfzn2","ff0f1b4358ca3866":"8y482"}],"8y482":[function(require,module,exports) {
  "use strict";
  var utils = require("bbda65ec99c4b3f7");
  var common = require("a8a09f935a431ee5");
  var assert = require("b85adf04da27aeb0");
  var rotr64_hi = utils.rotr64_hi;
  var rotr64_lo = utils.rotr64_lo;
  var shr64_hi = utils.shr64_hi;
  var shr64_lo = utils.shr64_lo;
  var sum64 = utils.sum64;
  var sum64_hi = utils.sum64_hi;
  var sum64_lo = utils.sum64_lo;
  var sum64_4_hi = utils.sum64_4_hi;
  var sum64_4_lo = utils.sum64_4_lo;
  var sum64_5_hi = utils.sum64_5_hi;
  var sum64_5_lo = utils.sum64_5_lo;
  var BlockHash = common.BlockHash;
  var sha512_K = [
      0x428a2f98,
      0xd728ae22,
      0x71374491,
      0x23ef65cd,
      0xb5c0fbcf,
      0xec4d3b2f,
      0xe9b5dba5,
      0x8189dbbc,
      0x3956c25b,
      0xf348b538,
      0x59f111f1,
      0xb605d019,
      0x923f82a4,
      0xaf194f9b,
      0xab1c5ed5,
      0xda6d8118,
      0xd807aa98,
      0xa3030242,
      0x12835b01,
      0x45706fbe,
      0x243185be,
      0x4ee4b28c,
      0x550c7dc3,
      0xd5ffb4e2,
      0x72be5d74,
      0xf27b896f,
      0x80deb1fe,
      0x3b1696b1,
      0x9bdc06a7,
      0x25c71235,
      0xc19bf174,
      0xcf692694,
      0xe49b69c1,
      0x9ef14ad2,
      0xefbe4786,
      0x384f25e3,
      0x0fc19dc6,
      0x8b8cd5b5,
      0x240ca1cc,
      0x77ac9c65,
      0x2de92c6f,
      0x592b0275,
      0x4a7484aa,
      0x6ea6e483,
      0x5cb0a9dc,
      0xbd41fbd4,
      0x76f988da,
      0x831153b5,
      0x983e5152,
      0xee66dfab,
      0xa831c66d,
      0x2db43210,
      0xb00327c8,
      0x98fb213f,
      0xbf597fc7,
      0xbeef0ee4,
      0xc6e00bf3,
      0x3da88fc2,
      0xd5a79147,
      0x930aa725,
      0x06ca6351,
      0xe003826f,
      0x14292967,
      0x0a0e6e70,
      0x27b70a85,
      0x46d22ffc,
      0x2e1b2138,
      0x5c26c926,
      0x4d2c6dfc,
      0x5ac42aed,
      0x53380d13,
      0x9d95b3df,
      0x650a7354,
      0x8baf63de,
      0x766a0abb,
      0x3c77b2a8,
      0x81c2c92e,
      0x47edaee6,
      0x92722c85,
      0x1482353b,
      0xa2bfe8a1,
      0x4cf10364,
      0xa81a664b,
      0xbc423001,
      0xc24b8b70,
      0xd0f89791,
      0xc76c51a3,
      0x0654be30,
      0xd192e819,
      0xd6ef5218,
      0xd6990624,
      0x5565a910,
      0xf40e3585,
      0x5771202a,
      0x106aa070,
      0x32bbd1b8,
      0x19a4c116,
      0xb8d2d0c8,
      0x1e376c08,
      0x5141ab53,
      0x2748774c,
      0xdf8eeb99,
      0x34b0bcb5,
      0xe19b48a8,
      0x391c0cb3,
      0xc5c95a63,
      0x4ed8aa4a,
      0xe3418acb,
      0x5b9cca4f,
      0x7763e373,
      0x682e6ff3,
      0xd6b2b8a3,
      0x748f82ee,
      0x5defb2fc,
      0x78a5636f,
      0x43172f60,
      0x84c87814,
      0xa1f0ab72,
      0x8cc70208,
      0x1a6439ec,
      0x90befffa,
      0x23631e28,
      0xa4506ceb,
      0xde82bde9,
      0xbef9a3f7,
      0xb2c67915,
      0xc67178f2,
      0xe372532b,
      0xca273ece,
      0xea26619c,
      0xd186b8c7,
      0x21c0c207,
      0xeada7dd6,
      0xcde0eb1e,
      0xf57d4f7f,
      0xee6ed178,
      0x06f067aa,
      0x72176fba,
      0x0a637dc5,
      0xa2c898a6,
      0x113f9804,
      0xbef90dae,
      0x1b710b35,
      0x131c471b,
      0x28db77f5,
      0x23047d84,
      0x32caab7b,
      0x40c72493,
      0x3c9ebe0a,
      0x15c9bebc,
      0x431d67c4,
      0x9c100d4c,
      0x4cc5d4be,
      0xcb3e42b6,
      0x597f299c,
      0xfc657e2a,
      0x5fcb6fab,
      0x3ad6faec,
      0x6c44198c,
      0x4a475817
  ];
  function SHA512() {
      if (!(this instanceof SHA512)) return new SHA512();
      BlockHash.call(this);
      this.h = [
          0x6a09e667,
          0xf3bcc908,
          0xbb67ae85,
          0x84caa73b,
          0x3c6ef372,
          0xfe94f82b,
          0xa54ff53a,
          0x5f1d36f1,
          0x510e527f,
          0xade682d1,
          0x9b05688c,
          0x2b3e6c1f,
          0x1f83d9ab,
          0xfb41bd6b,
          0x5be0cd19,
          0x137e2179
      ];
      this.k = sha512_K;
      this.W = new Array(160);
  }
  utils.inherits(SHA512, BlockHash);
  module.exports = SHA512;
  SHA512.blockSize = 1024;
  SHA512.outSize = 512;
  SHA512.hmacStrength = 192;
  SHA512.padLength = 128;
  SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;
      // 32 x 32bit words
      for(var i = 0; i < 32; i++)W[i] = msg[start + i];
      for(; i < W.length; i += 2){
          var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2
          var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
          var c1_hi = W[i - 14]; // i - 7
          var c1_lo = W[i - 13];
          var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15
          var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
          var c3_hi = W[i - 32]; // i - 16
          var c3_lo = W[i - 31];
          W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
          W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
      }
  };
  SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);
      var W = this.W;
      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];
      assert(this.k.length === W.length);
      for(var i = 0; i < W.length; i += 2){
          var c0_hi = hh;
          var c0_lo = hl;
          var c1_hi = s1_512_hi(eh, el);
          var c1_lo = s1_512_lo(eh, el);
          var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
          var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
          var c3_hi = this.k[i];
          var c3_lo = this.k[i + 1];
          var c4_hi = W[i];
          var c4_lo = W[i + 1];
          var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
          var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
          c0_hi = s0_512_hi(ah, al);
          c0_lo = s0_512_lo(ah, al);
          c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
          c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
          var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
          var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
          hh = gh;
          hl = gl;
          gh = fh;
          gl = fl;
          fh = eh;
          fl = el;
          eh = sum64_hi(dh, dl, T1_hi, T1_lo);
          el = sum64_lo(dl, dl, T1_hi, T1_lo);
          dh = ch;
          dl = cl;
          ch = bh;
          cl = bl;
          bh = ah;
          bl = al;
          ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
          al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }
      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
  };
  SHA512.prototype._digest = function digest(enc) {
      if (enc === "hex") return utils.toHex32(this.h, "big");
      else return utils.split32(this.h, "big");
  };
  function ch64_hi(xh, xl, yh, yl, zh) {
      var r = xh & yh ^ ~xh & zh;
      if (r < 0) r += 0x100000000;
      return r;
  }
  function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r = xl & yl ^ ~xl & zl;
      if (r < 0) r += 0x100000000;
      return r;
  }
  function maj64_hi(xh, xl, yh, yl, zh) {
      var r = xh & yh ^ xh & zh ^ yh & zh;
      if (r < 0) r += 0x100000000;
      return r;
  }
  function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r = xl & yl ^ xl & zl ^ yl & zl;
      if (r < 0) r += 0x100000000;
      return r;
  }
  function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2); // 34
      var c2_hi = rotr64_hi(xl, xh, 7); // 39
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0) r += 0x100000000;
      return r;
  }
  function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2); // 34
      var c2_lo = rotr64_lo(xl, xh, 7); // 39
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0) r += 0x100000000;
      return r;
  }
  function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9); // 41
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0) r += 0x100000000;
      return r;
  }
  function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9); // 41
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0) r += 0x100000000;
      return r;
  }
  function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0) r += 0x100000000;
      return r;
  }
  function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0) r += 0x100000000;
      return r;
  }
  function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29); // 61
      var c2_hi = shr64_hi(xh, xl, 6);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0) r += 0x100000000;
      return r;
  }
  function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29); // 61
      var c2_lo = shr64_lo(xh, xl, 6);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0) r += 0x100000000;
      return r;
  }
  
  },{"bbda65ec99c4b3f7":"kfzn2","a8a09f935a431ee5":"ecAfF","b85adf04da27aeb0":"8OvWh"}],"9kyRQ":[function(require,module,exports) {
  "use strict";
  var utils = require("264d77d20f317a60");
  var common = require("52a551230a365172");
  var rotl32 = utils.rotl32;
  var sum32 = utils.sum32;
  var sum32_3 = utils.sum32_3;
  var sum32_4 = utils.sum32_4;
  var BlockHash = common.BlockHash;
  function RIPEMD160() {
      if (!(this instanceof RIPEMD160)) return new RIPEMD160();
      BlockHash.call(this);
      this.h = [
          0x67452301,
          0xefcdab89,
          0x98badcfe,
          0x10325476,
          0xc3d2e1f0
      ];
      this.endian = "little";
  }
  utils.inherits(RIPEMD160, BlockHash);
  exports.ripemd160 = RIPEMD160;
  RIPEMD160.blockSize = 512;
  RIPEMD160.outSize = 160;
  RIPEMD160.hmacStrength = 192;
  RIPEMD160.padLength = 64;
  RIPEMD160.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for(var j = 0; j < 80; j++){
          var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
          A = E;
          E = D;
          D = rotl32(C, 10);
          C = B;
          B = T;
          T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
          Ah = Eh;
          Eh = Dh;
          Dh = rotl32(Ch, 10);
          Ch = Bh;
          Bh = T;
      }
      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
  };
  RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === "hex") return utils.toHex32(this.h, "little");
      else return utils.split32(this.h, "little");
  };
  function f(j, x, y, z) {
      if (j <= 15) return x ^ y ^ z;
      else if (j <= 31) return x & y | ~x & z;
      else if (j <= 47) return (x | ~y) ^ z;
      else if (j <= 63) return x & z | y & ~z;
      else return x ^ (y | ~z);
  }
  function K(j) {
      if (j <= 15) return 0x00000000;
      else if (j <= 31) return 0x5a827999;
      else if (j <= 47) return 0x6ed9eba1;
      else if (j <= 63) return 0x8f1bbcdc;
      else return 0xa953fd4e;
  }
  function Kh(j) {
      if (j <= 15) return 0x50a28be6;
      else if (j <= 31) return 0x5c4dd124;
      else if (j <= 47) return 0x6d703ef3;
      else if (j <= 63) return 0x7a6d76e9;
      else return 0x00000000;
  }
  var r = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      7,
      4,
      13,
      1,
      10,
      6,
      15,
      3,
      12,
      0,
      9,
      5,
      2,
      14,
      11,
      8,
      3,
      10,
      14,
      4,
      9,
      15,
      8,
      1,
      2,
      7,
      0,
      6,
      13,
      11,
      5,
      12,
      1,
      9,
      11,
      10,
      0,
      8,
      12,
      4,
      13,
      3,
      7,
      15,
      14,
      5,
      6,
      2,
      4,
      0,
      5,
      9,
      7,
      12,
      2,
      10,
      14,
      1,
      3,
      8,
      11,
      6,
      15,
      13
  ];
  var rh = [
      5,
      14,
      7,
      0,
      9,
      2,
      11,
      4,
      13,
      6,
      15,
      8,
      1,
      10,
      3,
      12,
      6,
      11,
      3,
      7,
      0,
      13,
      5,
      10,
      14,
      15,
      8,
      12,
      4,
      9,
      1,
      2,
      15,
      5,
      1,
      3,
      7,
      14,
      6,
      9,
      11,
      8,
      12,
      2,
      10,
      0,
      4,
      13,
      8,
      6,
      4,
      1,
      3,
      11,
      15,
      0,
      5,
      12,
      2,
      13,
      9,
      7,
      10,
      14,
      12,
      15,
      10,
      4,
      1,
      5,
      8,
      7,
      6,
      2,
      13,
      14,
      0,
      3,
      9,
      11
  ];
  var s = [
      11,
      14,
      15,
      12,
      5,
      8,
      7,
      9,
      11,
      13,
      14,
      15,
      6,
      7,
      9,
      8,
      7,
      6,
      8,
      13,
      11,
      9,
      7,
      15,
      7,
      12,
      15,
      9,
      11,
      7,
      13,
      12,
      11,
      13,
      6,
      7,
      14,
      9,
      13,
      15,
      14,
      8,
      13,
      6,
      5,
      12,
      7,
      5,
      11,
      12,
      14,
      15,
      14,
      15,
      9,
      8,
      9,
      14,
      5,
      6,
      8,
      6,
      5,
      12,
      9,
      15,
      5,
      11,
      6,
      8,
      13,
      12,
      5,
      12,
      13,
      14,
      11,
      8,
      5,
      6
  ];
  var sh = [
      8,
      9,
      9,
      11,
      13,
      15,
      15,
      5,
      7,
      7,
      8,
      11,
      14,
      14,
      12,
      6,
      9,
      13,
      15,
      7,
      12,
      8,
      9,
      11,
      7,
      7,
      12,
      7,
      6,
      15,
      13,
      11,
      9,
      7,
      15,
      11,
      8,
      6,
      6,
      14,
      12,
      13,
      5,
      14,
      13,
      13,
      7,
      5,
      15,
      5,
      8,
      11,
      14,
      14,
      6,
      14,
      6,
      9,
      12,
      9,
      12,
      5,
      15,
      8,
      8,
      5,
      12,
      9,
      12,
      5,
      14,
      6,
      8,
      13,
      6,
      5,
      15,
      13,
      11,
      11
  ];
  
  },{"264d77d20f317a60":"kfzn2","52a551230a365172":"ecAfF"}],"5KrrE":[function(require,module,exports) {
  "use strict";
  var utils = require("38ad3fb4b541f444");
  var assert = require("802f5236a8b976ff");
  function Hmac(hash, key, enc) {
      if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;
      this._init(utils.toArray(key, enc));
  }
  module.exports = Hmac;
  Hmac.prototype._init = function init(key) {
      // Shorten key, if needed
      if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
      assert(key.length <= this.blockSize);
      // Add padding to key
      for(var i = key.length; i < this.blockSize; i++)key.push(0);
      for(i = 0; i < key.length; i++)key[i] ^= 0x36;
      this.inner = new this.Hash().update(key);
      // 0x36 ^ 0x5c = 0x6a
      for(i = 0; i < key.length; i++)key[i] ^= 0x6a;
      this.outer = new this.Hash().update(key);
  };
  Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
  };
  Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
  };
  
  },{"38ad3fb4b541f444":"kfzn2","802f5236a8b976ff":"8OvWh"}],"gUbat":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "SupportedAlgorithm", ()=>SupportedAlgorithm);
  var SupportedAlgorithm;
  (function(SupportedAlgorithm) {
      SupportedAlgorithm["sha256"] = "sha256";
      SupportedAlgorithm["sha512"] = "sha512";
  })(SupportedAlgorithm || (SupportedAlgorithm = {}));
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"c9Q6D":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "version", ()=>version);
  const version = "sha2/5.7.0";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"5yjI3":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  // This API is still a work in progress; the future changes will likely be:
  // - ConnectionInfo => FetchDataRequest<T = any>
  // - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }
  //   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)
  // - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T
  // For this reason, it should be considered internal until the API is finalized
  parcelHelpers.export(exports, "_fetchData", ()=>_fetchData);
  parcelHelpers.export(exports, "fetchJson", ()=>fetchJson);
  parcelHelpers.export(exports, "poll", ()=>poll);
  var _base64 = require("@ethersproject/base64");
  var _bytes = require("@ethersproject/bytes");
  var _properties = require("@ethersproject/properties");
  var _strings = require("@ethersproject/strings");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  var _geturl = require("./geturl");
  "use strict";
  var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
          });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
              try {
                  step(generator.next(value));
              } catch (e) {
                  reject(e);
              }
          }
          function rejected(value) {
              try {
                  step(generator["throw"](value));
              } catch (e) {
                  reject(e);
              }
          }
          function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const logger = new (0, _logger.Logger)((0, _version.version));
  function staller(duration) {
      return new Promise((resolve)=>{
          setTimeout(resolve, duration);
      });
  }
  function bodyify(value, type) {
      if (value == null) return null;
      if (typeof value === "string") return value;
      if ((0, _bytes.isBytesLike)(value)) {
          if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) try {
              return (0, _strings.toUtf8String)(value);
          } catch (error) {}
          return (0, _bytes.hexlify)(value);
      }
      return value;
  }
  function unpercent(value) {
      return (0, _strings.toUtf8Bytes)(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code)=>{
          return String.fromCharCode(parseInt(code, 16));
      }));
  }
  function _fetchData(connection, body, processFunc) {
      // How many times to retry in the event of a throttle
      const attemptLimit = typeof connection === "object" && connection.throttleLimit != null ? connection.throttleLimit : 12;
      logger.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
      const throttleCallback = typeof connection === "object" ? connection.throttleCallback : null;
      const throttleSlotInterval = typeof connection === "object" && typeof connection.throttleSlotInterval === "number" ? connection.throttleSlotInterval : 100;
      logger.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
      const errorPassThrough = typeof connection === "object" ? !!connection.errorPassThrough : false;
      const headers = {};
      let url = null;
      // @TODO: Allow ConnectionInfo to override some of these values
      const options = {
          method: "GET"
      };
      let allow304 = false;
      let timeout = 120000;
      if (typeof connection === "string") url = connection;
      else if (typeof connection === "object") {
          if (connection == null || connection.url == null) logger.throwArgumentError("missing URL", "connection.url", connection);
          url = connection.url;
          if (typeof connection.timeout === "number" && connection.timeout > 0) timeout = connection.timeout;
          if (connection.headers) for(const key in connection.headers){
              headers[key.toLowerCase()] = {
                  key: key,
                  value: String(connection.headers[key])
              };
              if ([
                  "if-none-match",
                  "if-modified-since"
              ].indexOf(key.toLowerCase()) >= 0) allow304 = true;
          }
          options.allowGzip = !!connection.allowGzip;
          if (connection.user != null && connection.password != null) {
              if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) logger.throwError("basic authentication requires a secure https url", (0, _logger.Logger).errors.INVALID_ARGUMENT, {
                  argument: "url",
                  url: url,
                  user: connection.user,
                  password: "[REDACTED]"
              });
              const authorization = connection.user + ":" + connection.password;
              headers["authorization"] = {
                  key: "Authorization",
                  value: "Basic " + (0, _base64.encode)((0, _strings.toUtf8Bytes)(authorization))
              };
          }
          if (connection.skipFetchSetup != null) options.skipFetchSetup = !!connection.skipFetchSetup;
          if (connection.fetchOptions != null) options.fetchOptions = (0, _properties.shallowCopy)(connection.fetchOptions);
      }
      const reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
      const dataMatch = url ? url.match(reData) : null;
      if (dataMatch) try {
          const response = {
              statusCode: 200,
              statusMessage: "OK",
              headers: {
                  "content-type": dataMatch[1] || "text/plain"
              },
              body: dataMatch[2] ? (0, _base64.decode)(dataMatch[3]) : unpercent(dataMatch[3])
          };
          let result = response.body;
          if (processFunc) result = processFunc(response.body, response);
          return Promise.resolve(result);
      } catch (error) {
          logger.throwError("processing response error", (0, _logger.Logger).errors.SERVER_ERROR, {
              body: bodyify(dataMatch[1], dataMatch[2]),
              error: error,
              requestBody: null,
              requestMethod: "GET",
              url: url
          });
      }
      if (body) {
          options.method = "POST";
          options.body = body;
          if (headers["content-type"] == null) headers["content-type"] = {
              key: "Content-Type",
              value: "application/octet-stream"
          };
          if (headers["content-length"] == null) headers["content-length"] = {
              key: "Content-Length",
              value: String(body.length)
          };
      }
      const flatHeaders = {};
      Object.keys(headers).forEach((key)=>{
          const header = headers[key];
          flatHeaders[header.key] = header.value;
      });
      options.headers = flatHeaders;
      const runningTimeout = function() {
          let timer = null;
          const promise = new Promise(function(resolve, reject) {
              if (timeout) timer = setTimeout(()=>{
                  if (timer == null) return;
                  timer = null;
                  reject(logger.makeError("timeout", (0, _logger.Logger).errors.TIMEOUT, {
                      requestBody: bodyify(options.body, flatHeaders["content-type"]),
                      requestMethod: options.method,
                      timeout: timeout,
                      url: url
                  }));
              }, timeout);
          });
          const cancel = function() {
              if (timer == null) return;
              clearTimeout(timer);
              timer = null;
          };
          return {
              promise,
              cancel
          };
      }();
      const runningFetch = function() {
          return __awaiter(this, void 0, void 0, function*() {
              for(let attempt = 0; attempt < attemptLimit; attempt++){
                  let response = null;
                  try {
                      response = yield (0, _geturl.getUrl)(url, options);
                      if (attempt < attemptLimit) {
                          if (response.statusCode === 301 || response.statusCode === 302) {
                              // Redirection; for now we only support absolute locataions
                              const location = response.headers.location || "";
                              if (options.method === "GET" && location.match(/^https:/)) {
                                  url = response.headers.location;
                                  continue;
                              }
                          } else if (response.statusCode === 429) {
                              // Exponential back-off throttling
                              let tryAgain = true;
                              if (throttleCallback) tryAgain = yield throttleCallback(attempt, url);
                              if (tryAgain) {
                                  let stall = 0;
                                  const retryAfter = response.headers["retry-after"];
                                  if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) stall = parseInt(retryAfter) * 1000;
                                  else stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                                  //console.log("Stalling 429");
                                  yield staller(stall);
                                  continue;
                              }
                          }
                      }
                  } catch (error) {
                      response = error.response;
                      if (response == null) {
                          runningTimeout.cancel();
                          logger.throwError("missing response", (0, _logger.Logger).errors.SERVER_ERROR, {
                              requestBody: bodyify(options.body, flatHeaders["content-type"]),
                              requestMethod: options.method,
                              serverError: error,
                              url: url
                          });
                      }
                  }
                  let body = response.body;
                  if (allow304 && response.statusCode === 304) body = null;
                  else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {
                      runningTimeout.cancel();
                      logger.throwError("bad response", (0, _logger.Logger).errors.SERVER_ERROR, {
                          status: response.statusCode,
                          headers: response.headers,
                          body: bodyify(body, response.headers ? response.headers["content-type"] : null),
                          requestBody: bodyify(options.body, flatHeaders["content-type"]),
                          requestMethod: options.method,
                          url: url
                      });
                  }
                  if (processFunc) try {
                      const result = yield processFunc(body, response);
                      runningTimeout.cancel();
                      return result;
                  } catch (error) {
                      // Allow the processFunc to trigger a throttle
                      if (error.throttleRetry && attempt < attemptLimit) {
                          let tryAgain = true;
                          if (throttleCallback) tryAgain = yield throttleCallback(attempt, url);
                          if (tryAgain) {
                              const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                              //console.log("Stalling callback");
                              yield staller(timeout);
                              continue;
                          }
                      }
                      runningTimeout.cancel();
                      logger.throwError("processing response error", (0, _logger.Logger).errors.SERVER_ERROR, {
                          body: bodyify(body, response.headers ? response.headers["content-type"] : null),
                          error: error,
                          requestBody: bodyify(options.body, flatHeaders["content-type"]),
                          requestMethod: options.method,
                          url: url
                      });
                  }
                  runningTimeout.cancel();
                  // If we had a processFunc, it either returned a T or threw above.
                  // The "body" is now a Uint8Array.
                  return body;
              }
              return logger.throwError("failed response", (0, _logger.Logger).errors.SERVER_ERROR, {
                  requestBody: bodyify(options.body, flatHeaders["content-type"]),
                  requestMethod: options.method,
                  url: url
              });
          });
      }();
      return Promise.race([
          runningTimeout.promise,
          runningFetch
      ]);
  }
  function fetchJson(connection, json, processFunc) {
      let processJsonFunc = (value, response)=>{
          let result = null;
          if (value != null) try {
              result = JSON.parse((0, _strings.toUtf8String)(value));
          } catch (error) {
              logger.throwError("invalid JSON", (0, _logger.Logger).errors.SERVER_ERROR, {
                  body: value,
                  error: error
              });
          }
          if (processFunc) result = processFunc(result, response);
          return result;
      };
      // If we have json to send, we must
      // - add content-type of application/json (unless already overridden)
      // - convert the json to bytes
      let body = null;
      if (json != null) {
          body = (0, _strings.toUtf8Bytes)(json);
          // Create a connection with the content-type set for JSON
          const updated = typeof connection === "string" ? {
              url: connection
          } : (0, _properties.shallowCopy)(connection);
          if (updated.headers) {
              const hasContentType = Object.keys(updated.headers).filter((k)=>k.toLowerCase() === "content-type").length !== 0;
              if (!hasContentType) {
                  updated.headers = (0, _properties.shallowCopy)(updated.headers);
                  updated.headers["content-type"] = "application/json";
              }
          } else updated.headers = {
              "content-type": "application/json"
          };
          connection = updated;
      }
      return _fetchData(connection, body, processJsonFunc);
  }
  function poll(func, options) {
      if (!options) options = {};
      options = (0, _properties.shallowCopy)(options);
      if (options.floor == null) options.floor = 0;
      if (options.ceiling == null) options.ceiling = 10000;
      if (options.interval == null) options.interval = 250;
      return new Promise(function(resolve, reject) {
          let timer = null;
          let done = false;
          // Returns true if cancel was successful. Unsuccessful cancel means we're already done.
          const cancel = ()=>{
              if (done) return false;
              done = true;
              if (timer) clearTimeout(timer);
              return true;
          };
          if (options.timeout) timer = setTimeout(()=>{
              if (cancel()) reject(new Error("timeout"));
          }, options.timeout);
          const retryLimit = options.retryLimit;
          let attempt = 0;
          function check() {
              return func().then(function(result) {
                  // If we have a result, or are allowed null then we're done
                  if (result !== undefined) {
                      if (cancel()) resolve(result);
                  } else if (options.oncePoll) options.oncePoll.once("poll", check);
                  else if (options.onceBlock) options.onceBlock.once("block", check);
                  else if (!done) {
                      attempt++;
                      if (attempt > retryLimit) {
                          if (cancel()) reject(new Error("retry limit reached"));
                          return;
                      }
                      let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                      if (timeout < options.floor) timeout = options.floor;
                      if (timeout > options.ceiling) timeout = options.ceiling;
                      setTimeout(check, timeout);
                  }
                  return null;
              }, function(error) {
                  if (cancel()) reject(error);
              });
          }
          check();
      });
  }
  
  },{"@ethersproject/base64":"329Wu","@ethersproject/bytes":"htrqZ","@ethersproject/properties":"h3GJb","@ethersproject/strings":"5TGFZ","@ethersproject/logger":"hLvB2","./_version":"6HtXu","./geturl":"gsrWY","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"6HtXu":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "version", ()=>version);
  const version = "web/5.7.1";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"gsrWY":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "getUrl", ()=>getUrl);
  var _bytes = require("@ethersproject/bytes");
  "use strict";
  var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
          });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
              try {
                  step(generator.next(value));
              } catch (e) {
                  reject(e);
              }
          }
          function rejected(value) {
              try {
                  step(generator["throw"](value));
              } catch (e) {
                  reject(e);
              }
          }
          function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  function getUrl(href, options) {
      return __awaiter(this, void 0, void 0, function*() {
          if (options == null) options = {};
          const request = {
              method: options.method || "GET",
              headers: options.headers || {},
              body: options.body || undefined
          };
          if (options.skipFetchSetup !== true) {
              request.mode = "cors"; // no-cors, cors, *same-origin
              request.cache = "no-cache"; // *default, no-cache, reload, force-cache, only-if-cached
              request.credentials = "same-origin"; // include, *same-origin, omit
              request.redirect = "follow"; // manual, *follow, error
              request.referrer = "client"; // no-referrer, *client
          }
          if (options.fetchOptions != null) {
              const opts = options.fetchOptions;
              if (opts.mode) request.mode = opts.mode;
              if (opts.cache) request.cache = opts.cache;
              if (opts.credentials) request.credentials = opts.credentials;
              if (opts.redirect) request.redirect = opts.redirect;
              if (opts.referrer) request.referrer = opts.referrer;
          }
          const response = yield fetch(href, request);
          const body = yield response.arrayBuffer();
          const headers = {};
          if (response.headers.forEach) response.headers.forEach((value, key)=>{
              headers[key.toLowerCase()] = value;
          });
          else response.headers.keys().forEach((key)=>{
              headers[key.toLowerCase()] = response.headers.get(key);
          });
          return {
              headers: headers,
              statusCode: response.status,
              statusMessage: response.statusText,
              body: (0, _bytes.arrayify)(new Uint8Array(body))
          };
      });
  }
  
  },{"@ethersproject/bytes":"htrqZ","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"2C5n6":[function(require,module,exports) {
  "use strict";
  var ALPHABET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";
  // pre-compute lookup table
  var ALPHABET_MAP = {};
  for(var z = 0; z < ALPHABET.length; z++){
      var x = ALPHABET.charAt(z);
      if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + " is ambiguous");
      ALPHABET_MAP[x] = z;
  }
  function polymodStep(pre) {
      var b = pre >> 25;
      return (pre & 0x1FFFFFF) << 5 ^ -(b >> 0 & 1) & 0x3b6a57b2 ^ -(b >> 1 & 1) & 0x26508e6d ^ -(b >> 2 & 1) & 0x1ea119fa ^ -(b >> 3 & 1) & 0x3d4233dd ^ -(b >> 4 & 1) & 0x2a1462b3;
  }
  function prefixChk(prefix) {
      var chk = 1;
      for(var i = 0; i < prefix.length; ++i){
          var c = prefix.charCodeAt(i);
          if (c < 33 || c > 126) return "Invalid prefix (" + prefix + ")";
          chk = polymodStep(chk) ^ c >> 5;
      }
      chk = polymodStep(chk);
      for(i = 0; i < prefix.length; ++i){
          var v = prefix.charCodeAt(i);
          chk = polymodStep(chk) ^ v & 0x1f;
      }
      return chk;
  }
  function encode(prefix, words, LIMIT) {
      LIMIT = LIMIT || 90;
      if (prefix.length + 7 + words.length > LIMIT) throw new TypeError("Exceeds length limit");
      prefix = prefix.toLowerCase();
      // determine chk mod
      var chk = prefixChk(prefix);
      if (typeof chk === "string") throw new Error(chk);
      var result = prefix + "1";
      for(var i = 0; i < words.length; ++i){
          var x = words[i];
          if (x >> 5 !== 0) throw new Error("Non 5-bit word");
          chk = polymodStep(chk) ^ x;
          result += ALPHABET.charAt(x);
      }
      for(i = 0; i < 6; ++i)chk = polymodStep(chk);
      chk ^= 1;
      for(i = 0; i < 6; ++i){
          var v = chk >> (5 - i) * 5 & 0x1f;
          result += ALPHABET.charAt(v);
      }
      return result;
  }
  function __decode(str, LIMIT) {
      LIMIT = LIMIT || 90;
      if (str.length < 8) return str + " too short";
      if (str.length > LIMIT) return "Exceeds length limit";
      // don't allow mixed case
      var lowered = str.toLowerCase();
      var uppered = str.toUpperCase();
      if (str !== lowered && str !== uppered) return "Mixed-case string " + str;
      str = lowered;
      var split = str.lastIndexOf("1");
      if (split === -1) return "No separator character for " + str;
      if (split === 0) return "Missing prefix for " + str;
      var prefix = str.slice(0, split);
      var wordChars = str.slice(split + 1);
      if (wordChars.length < 6) return "Data too short";
      var chk = prefixChk(prefix);
      if (typeof chk === "string") return chk;
      var words = [];
      for(var i = 0; i < wordChars.length; ++i){
          var c = wordChars.charAt(i);
          var v = ALPHABET_MAP[c];
          if (v === undefined) return "Unknown character " + c;
          chk = polymodStep(chk) ^ v;
          // not in the checksum?
          if (i + 6 >= wordChars.length) continue;
          words.push(v);
      }
      if (chk !== 1) return "Invalid checksum for " + str;
      return {
          prefix: prefix,
          words: words
      };
  }
  function decodeUnsafe() {
      var res = __decode.apply(null, arguments);
      if (typeof res === "object") return res;
  }
  function decode(str) {
      var res = __decode.apply(null, arguments);
      if (typeof res === "object") return res;
      throw new Error(res);
  }
  function convert(data, inBits, outBits, pad) {
      var value = 0;
      var bits = 0;
      var maxV = (1 << outBits) - 1;
      var result = [];
      for(var i = 0; i < data.length; ++i){
          value = value << inBits | data[i];
          bits += inBits;
          while(bits >= outBits){
              bits -= outBits;
              result.push(value >> bits & maxV);
          }
      }
      if (pad) {
          if (bits > 0) result.push(value << outBits - bits & maxV);
      } else {
          if (bits >= inBits) return "Excess padding";
          if (value << outBits - bits & maxV) return "Non-zero padding";
      }
      return result;
  }
  function toWordsUnsafe(bytes) {
      var res = convert(bytes, 8, 5, true);
      if (Array.isArray(res)) return res;
  }
  function toWords(bytes) {
      var res = convert(bytes, 8, 5, true);
      if (Array.isArray(res)) return res;
      throw new Error(res);
  }
  function fromWordsUnsafe(words) {
      var res = convert(words, 5, 8, false);
      if (Array.isArray(res)) return res;
  }
  function fromWords(words) {
      var res = convert(words, 5, 8, false);
      if (Array.isArray(res)) return res;
      throw new Error(res);
  }
  module.exports = {
      decodeUnsafe: decodeUnsafe,
      decode: decode,
      encode: encode,
      toWordsUnsafe: toWordsUnsafe,
      toWords: toWords,
      fromWordsUnsafe: fromWordsUnsafe,
      fromWords: fromWords
  };
  
  },{}],"6PYAk":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "version", ()=>version);
  const version = "providers/5.7.2";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"ZfOHh":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "Formatter", ()=>Formatter);
  parcelHelpers.export(exports, "isCommunityResourcable", ()=>isCommunityResourcable);
  parcelHelpers.export(exports, "isCommunityResource", ()=>isCommunityResource);
  parcelHelpers.export(exports, "showThrottleMessage", ()=>showThrottleMessage);
  var _address = require("@ethersproject/address");
  var _bignumber = require("@ethersproject/bignumber");
  var _bytes = require("@ethersproject/bytes");
  var _constants = require("@ethersproject/constants");
  var _properties = require("@ethersproject/properties");
  var _transactions = require("@ethersproject/transactions");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  "use strict";
  const logger = new (0, _logger.Logger)((0, _version.version));
  class Formatter {
      constructor(){
          this.formats = this.getDefaultFormats();
      }
      getDefaultFormats() {
          const formats = {};
          const address = this.address.bind(this);
          const bigNumber = this.bigNumber.bind(this);
          const blockTag = this.blockTag.bind(this);
          const data = this.data.bind(this);
          const hash = this.hash.bind(this);
          const hex = this.hex.bind(this);
          const number = this.number.bind(this);
          const type = this.type.bind(this);
          const strictData = (v)=>{
              return this.data(v, true);
          };
          formats.transaction = {
              hash: hash,
              type: type,
              accessList: Formatter.allowNull(this.accessList.bind(this), null),
              blockHash: Formatter.allowNull(hash, null),
              blockNumber: Formatter.allowNull(number, null),
              transactionIndex: Formatter.allowNull(number, null),
              confirmations: Formatter.allowNull(number, null),
              from: address,
              // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)
              // must be set
              gasPrice: Formatter.allowNull(bigNumber),
              maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
              maxFeePerGas: Formatter.allowNull(bigNumber),
              gasLimit: bigNumber,
              to: Formatter.allowNull(address, null),
              value: bigNumber,
              nonce: number,
              data: data,
              r: Formatter.allowNull(this.uint256),
              s: Formatter.allowNull(this.uint256),
              v: Formatter.allowNull(number),
              creates: Formatter.allowNull(address, null),
              raw: Formatter.allowNull(data)
          };
          formats.transactionRequest = {
              from: Formatter.allowNull(address),
              nonce: Formatter.allowNull(number),
              gasLimit: Formatter.allowNull(bigNumber),
              gasPrice: Formatter.allowNull(bigNumber),
              maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
              maxFeePerGas: Formatter.allowNull(bigNumber),
              to: Formatter.allowNull(address),
              value: Formatter.allowNull(bigNumber),
              data: Formatter.allowNull(strictData),
              type: Formatter.allowNull(number),
              accessList: Formatter.allowNull(this.accessList.bind(this), null)
          };
          formats.receiptLog = {
              transactionIndex: number,
              blockNumber: number,
              transactionHash: hash,
              address: address,
              topics: Formatter.arrayOf(hash),
              data: data,
              logIndex: number,
              blockHash: hash
          };
          formats.receipt = {
              to: Formatter.allowNull(this.address, null),
              from: Formatter.allowNull(this.address, null),
              contractAddress: Formatter.allowNull(address, null),
              transactionIndex: number,
              // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
              root: Formatter.allowNull(hex),
              gasUsed: bigNumber,
              logsBloom: Formatter.allowNull(data),
              blockHash: hash,
              transactionHash: hash,
              logs: Formatter.arrayOf(this.receiptLog.bind(this)),
              blockNumber: number,
              confirmations: Formatter.allowNull(number, null),
              cumulativeGasUsed: bigNumber,
              effectiveGasPrice: Formatter.allowNull(bigNumber),
              status: Formatter.allowNull(number),
              type: type
          };
          formats.block = {
              hash: Formatter.allowNull(hash),
              parentHash: hash,
              number: number,
              timestamp: number,
              nonce: Formatter.allowNull(hex),
              difficulty: this.difficulty.bind(this),
              gasLimit: bigNumber,
              gasUsed: bigNumber,
              miner: Formatter.allowNull(address),
              extraData: data,
              transactions: Formatter.allowNull(Formatter.arrayOf(hash)),
              baseFeePerGas: Formatter.allowNull(bigNumber)
          };
          formats.blockWithTransactions = (0, _properties.shallowCopy)(formats.block);
          formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));
          formats.filter = {
              fromBlock: Formatter.allowNull(blockTag, undefined),
              toBlock: Formatter.allowNull(blockTag, undefined),
              blockHash: Formatter.allowNull(hash, undefined),
              address: Formatter.allowNull(address, undefined),
              topics: Formatter.allowNull(this.topics.bind(this), undefined)
          };
          formats.filterLog = {
              blockNumber: Formatter.allowNull(number),
              blockHash: Formatter.allowNull(hash),
              transactionIndex: number,
              removed: Formatter.allowNull(this.boolean.bind(this)),
              address: address,
              data: Formatter.allowFalsish(data, "0x"),
              topics: Formatter.arrayOf(hash),
              transactionHash: hash,
              logIndex: number
          };
          return formats;
      }
      accessList(accessList) {
          return (0, _transactions.accessListify)(accessList || []);
      }
      // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number
      // Strict! Used on input.
      number(number) {
          if (number === "0x") return 0;
          return (0, _bignumber.BigNumber).from(number).toNumber();
      }
      type(number) {
          if (number === "0x" || number == null) return 0;
          return (0, _bignumber.BigNumber).from(number).toNumber();
      }
      // Strict! Used on input.
      bigNumber(value) {
          return (0, _bignumber.BigNumber).from(value);
      }
      // Requires a boolean, "true" or  "false"; returns a boolean
      boolean(value) {
          if (typeof value === "boolean") return value;
          if (typeof value === "string") {
              value = value.toLowerCase();
              if (value === "true") return true;
              if (value === "false") return false;
          }
          throw new Error("invalid boolean - " + value);
      }
      hex(value, strict) {
          if (typeof value === "string") {
              if (!strict && value.substring(0, 2) !== "0x") value = "0x" + value;
              if ((0, _bytes.isHexString)(value)) return value.toLowerCase();
          }
          return logger.throwArgumentError("invalid hash", "value", value);
      }
      data(value, strict) {
          const result = this.hex(value, strict);
          if (result.length % 2 !== 0) throw new Error("invalid data; odd-length - " + value);
          return result;
      }
      // Requires an address
      // Strict! Used on input.
      address(value) {
          return (0, _address.getAddress)(value);
      }
      callAddress(value) {
          if (!(0, _bytes.isHexString)(value, 32)) return null;
          const address = (0, _address.getAddress)((0, _bytes.hexDataSlice)(value, 12));
          return address === (0, _constants.AddressZero) ? null : address;
      }
      contractAddress(value) {
          return (0, _address.getContractAddress)(value);
      }
      // Strict! Used on input.
      blockTag(blockTag) {
          if (blockTag == null) return "latest";
          if (blockTag === "earliest") return "0x0";
          switch(blockTag){
              case "earliest":
                  return "0x0";
              case "latest":
              case "pending":
              case "safe":
              case "finalized":
                  return blockTag;
          }
          if (typeof blockTag === "number" || (0, _bytes.isHexString)(blockTag)) return (0, _bytes.hexValue)(blockTag);
          throw new Error("invalid blockTag");
      }
      // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.
      hash(value, strict) {
          const result = this.hex(value, strict);
          if ((0, _bytes.hexDataLength)(result) !== 32) return logger.throwArgumentError("invalid hash", "value", value);
          return result;
      }
      // Returns the difficulty as a number, or if too large (i.e. PoA network) null
      difficulty(value) {
          if (value == null) return null;
          const v = (0, _bignumber.BigNumber).from(value);
          try {
              return v.toNumber();
          } catch (error) {}
          return null;
      }
      uint256(value) {
          if (!(0, _bytes.isHexString)(value)) throw new Error("invalid uint256");
          return (0, _bytes.hexZeroPad)(value, 32);
      }
      _block(value, format) {
          if (value.author != null && value.miner == null) value.miner = value.author;
          // The difficulty may need to come from _difficulty in recursed blocks
          const difficulty = value._difficulty != null ? value._difficulty : value.difficulty;
          const result = Formatter.check(format, value);
          result._difficulty = difficulty == null ? null : (0, _bignumber.BigNumber).from(difficulty);
          return result;
      }
      block(value) {
          return this._block(value, this.formats.block);
      }
      blockWithTransactions(value) {
          return this._block(value, this.formats.blockWithTransactions);
      }
      // Strict! Used on input.
      transactionRequest(value) {
          return Formatter.check(this.formats.transactionRequest, value);
      }
      transactionResponse(transaction) {
          // Rename gas to gasLimit
          if (transaction.gas != null && transaction.gasLimit == null) transaction.gasLimit = transaction.gas;
          // Some clients (TestRPC) do strange things like return 0x0 for the
          // 0 address; correct this to be a real address
          if (transaction.to && (0, _bignumber.BigNumber).from(transaction.to).isZero()) transaction.to = "0x0000000000000000000000000000000000000000";
          // Rename input to data
          if (transaction.input != null && transaction.data == null) transaction.data = transaction.input;
          // If to and creates are empty, populate the creates from the transaction
          if (transaction.to == null && transaction.creates == null) transaction.creates = this.contractAddress(transaction);
          if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) transaction.accessList = [];
          const result = Formatter.check(this.formats.transaction, transaction);
          if (transaction.chainId != null) {
              let chainId = transaction.chainId;
              if ((0, _bytes.isHexString)(chainId)) chainId = (0, _bignumber.BigNumber).from(chainId).toNumber();
              result.chainId = chainId;
          } else {
              let chainId = transaction.networkId;
              // geth-etc returns chainId
              if (chainId == null && result.v == null) chainId = transaction.chainId;
              if ((0, _bytes.isHexString)(chainId)) chainId = (0, _bignumber.BigNumber).from(chainId).toNumber();
              if (typeof chainId !== "number" && result.v != null) {
                  chainId = (result.v - 35) / 2;
                  if (chainId < 0) chainId = 0;
                  chainId = parseInt(chainId);
              }
              if (typeof chainId !== "number") chainId = 0;
              result.chainId = chainId;
          }
          // 0x0000... should actually be null
          if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") result.blockHash = null;
          return result;
      }
      transaction(value) {
          return (0, _transactions.parse)(value);
      }
      receiptLog(value) {
          return Formatter.check(this.formats.receiptLog, value);
      }
      receipt(value) {
          const result = Formatter.check(this.formats.receipt, value);
          // RSK incorrectly implemented EIP-658, so we munge things a bit here for it
          if (result.root != null) {
              if (result.root.length <= 4) {
                  // Could be 0x00, 0x0, 0x01 or 0x1
                  const value = (0, _bignumber.BigNumber).from(result.root).toNumber();
                  if (value === 0 || value === 1) {
                      // Make sure if both are specified, they match
                      if (result.status != null && result.status !== value) logger.throwArgumentError("alt-root-status/status mismatch", "value", {
                          root: result.root,
                          status: result.status
                      });
                      result.status = value;
                      delete result.root;
                  } else logger.throwArgumentError("invalid alt-root-status", "value.root", result.root);
              } else if (result.root.length !== 66) // Must be a valid bytes32
              logger.throwArgumentError("invalid root hash", "value.root", result.root);
          }
          if (result.status != null) result.byzantium = true;
          return result;
      }
      topics(value) {
          if (Array.isArray(value)) return value.map((v)=>this.topics(v));
          else if (value != null) return this.hash(value, true);
          return null;
      }
      filter(value) {
          return Formatter.check(this.formats.filter, value);
      }
      filterLog(value) {
          return Formatter.check(this.formats.filterLog, value);
      }
      static check(format, object) {
          const result = {};
          for(const key in format)try {
              const value = format[key](object[key]);
              if (value !== undefined) result[key] = value;
          } catch (error) {
              error.checkKey = key;
              error.checkValue = object[key];
              throw error;
          }
          return result;
      }
      // if value is null-ish, nullValue is returned
      static allowNull(format, nullValue) {
          return function(value) {
              if (value == null) return nullValue;
              return format(value);
          };
      }
      // If value is false-ish, replaceValue is returned
      static allowFalsish(format, replaceValue) {
          return function(value) {
              if (!value) return replaceValue;
              return format(value);
          };
      }
      // Requires an Array satisfying check
      static arrayOf(format) {
          return function(array) {
              if (!Array.isArray(array)) throw new Error("not an array");
              const result = [];
              array.forEach(function(value) {
                  result.push(format(value));
              });
              return result;
          };
      }
  }
  function isCommunityResourcable(value) {
      return value && typeof value.isCommunityResource === "function";
  }
  function isCommunityResource(value) {
      return isCommunityResourcable(value) && value.isCommunityResource();
  }
  // Show the throttle message only once
  let throttleMessage = false;
  function showThrottleMessage() {
      if (throttleMessage) return;
      throttleMessage = true;
      console.log("========= NOTICE =========");
      console.log("Request-Rate Exceeded  (this message will not be repeated)");
      console.log("");
      console.log("The default API keys for each service are provided as a highly-throttled,");
      console.log("community resource for low-traffic projects and early prototyping.");
      console.log("");
      console.log("While your application will continue to function, we highly recommended");
      console.log("signing up for your own API keys to improve performance, increase your");
      console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
      console.log("");
      console.log("For more details: https://docs.ethers.io/api-keys/");
      console.log("==========================");
  }
  
  },{"@ethersproject/address":"ggdAz","@ethersproject/bignumber":"ckYYW","@ethersproject/bytes":"htrqZ","@ethersproject/constants":"gKbDE","@ethersproject/properties":"h3GJb","@ethersproject/transactions":"d1ust","@ethersproject/logger":"hLvB2","./_version":"6PYAk","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"d1ust":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "TransactionTypes", ()=>TransactionTypes);
  parcelHelpers.export(exports, "computeAddress", ()=>computeAddress);
  parcelHelpers.export(exports, "recoverAddress", ()=>recoverAddress);
  parcelHelpers.export(exports, "accessListify", ()=>accessListify);
  parcelHelpers.export(exports, "serialize", ()=>serialize);
  parcelHelpers.export(exports, "parse", ()=>parse);
  var _address = require("@ethersproject/address");
  var _bignumber = require("@ethersproject/bignumber");
  var _bytes = require("@ethersproject/bytes");
  var _constants = require("@ethersproject/constants");
  var _keccak256 = require("@ethersproject/keccak256");
  var _properties = require("@ethersproject/properties");
  var _rlp = require("@ethersproject/rlp");
  var _signingKey = require("@ethersproject/signing-key");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  "use strict";
  const logger = new (0, _logger.Logger)((0, _version.version));
  var TransactionTypes;
  (function(TransactionTypes) {
      TransactionTypes[TransactionTypes["legacy"] = 0] = "legacy";
      TransactionTypes[TransactionTypes["eip2930"] = 1] = "eip2930";
      TransactionTypes[TransactionTypes["eip1559"] = 2] = "eip1559";
  })(TransactionTypes || (TransactionTypes = {}));
  ///////////////////////////////
  function handleAddress(value) {
      if (value === "0x") return null;
      return (0, _address.getAddress)(value);
  }
  function handleNumber(value) {
      if (value === "0x") return 0, _constants.Zero;
      return (0, _bignumber.BigNumber).from(value);
  }
  // Legacy Transaction Fields
  const transactionFields = [
      {
          name: "nonce",
          maxLength: 32,
          numeric: true
      },
      {
          name: "gasPrice",
          maxLength: 32,
          numeric: true
      },
      {
          name: "gasLimit",
          maxLength: 32,
          numeric: true
      },
      {
          name: "to",
          length: 20
      },
      {
          name: "value",
          maxLength: 32,
          numeric: true
      },
      {
          name: "data"
      }
  ];
  const allowedTransactionKeys = {
      chainId: true,
      data: true,
      gasLimit: true,
      gasPrice: true,
      nonce: true,
      to: true,
      type: true,
      value: true
  };
  function computeAddress(key) {
      const publicKey = (0, _signingKey.computePublicKey)(key);
      return (0, _address.getAddress)((0, _bytes.hexDataSlice)((0, _keccak256.keccak256)((0, _bytes.hexDataSlice)(publicKey, 1)), 12));
  }
  function recoverAddress(digest, signature) {
      return computeAddress((0, _signingKey.recoverPublicKey)((0, _bytes.arrayify)(digest), signature));
  }
  function formatNumber(value, name) {
      const result = (0, _bytes.stripZeros)((0, _bignumber.BigNumber).from(value).toHexString());
      if (result.length > 32) logger.throwArgumentError("invalid length for " + name, "transaction:" + name, value);
      return result;
  }
  function accessSetify(addr, storageKeys) {
      return {
          address: (0, _address.getAddress)(addr),
          storageKeys: (storageKeys || []).map((storageKey, index)=>{
              if ((0, _bytes.hexDataLength)(storageKey) !== 32) logger.throwArgumentError("invalid access list storageKey", `accessList[${addr}:${index}]`, storageKey);
              return storageKey.toLowerCase();
          })
      };
  }
  function accessListify(value) {
      if (Array.isArray(value)) return value.map((set, index)=>{
          if (Array.isArray(set)) {
              if (set.length > 2) logger.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${index}]`, set);
              return accessSetify(set[0], set[1]);
          }
          return accessSetify(set.address, set.storageKeys);
      });
      const result = Object.keys(value).map((addr)=>{
          const storageKeys = value[addr].reduce((accum, storageKey)=>{
              accum[storageKey] = true;
              return accum;
          }, {});
          return accessSetify(addr, Object.keys(storageKeys).sort());
      });
      result.sort((a, b)=>a.address.localeCompare(b.address));
      return result;
  }
  function formatAccessList(value) {
      return accessListify(value).map((set)=>[
              set.address,
              set.storageKeys
          ]);
  }
  function _serializeEip1559(transaction, signature) {
      // If there is an explicit gasPrice, make sure it matches the
      // EIP-1559 fees; otherwise they may not understand what they
      // think they are setting in terms of fee.
      if (transaction.gasPrice != null) {
          const gasPrice = (0, _bignumber.BigNumber).from(transaction.gasPrice);
          const maxFeePerGas = (0, _bignumber.BigNumber).from(transaction.maxFeePerGas || 0);
          if (!gasPrice.eq(maxFeePerGas)) logger.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
              gasPrice,
              maxFeePerGas
          });
      }
      const fields = [
          formatNumber(transaction.chainId || 0, "chainId"),
          formatNumber(transaction.nonce || 0, "nonce"),
          formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
          formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
          formatNumber(transaction.gasLimit || 0, "gasLimit"),
          transaction.to != null ? (0, _address.getAddress)(transaction.to) : "0x",
          formatNumber(transaction.value || 0, "value"),
          transaction.data || "0x",
          formatAccessList(transaction.accessList || [])
      ];
      if (signature) {
          const sig = (0, _bytes.splitSignature)(signature);
          fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
          fields.push((0, _bytes.stripZeros)(sig.r));
          fields.push((0, _bytes.stripZeros)(sig.s));
      }
      return (0, _bytes.hexConcat)([
          "0x02",
          _rlp.encode(fields)
      ]);
  }
  function _serializeEip2930(transaction, signature) {
      const fields = [
          formatNumber(transaction.chainId || 0, "chainId"),
          formatNumber(transaction.nonce || 0, "nonce"),
          formatNumber(transaction.gasPrice || 0, "gasPrice"),
          formatNumber(transaction.gasLimit || 0, "gasLimit"),
          transaction.to != null ? (0, _address.getAddress)(transaction.to) : "0x",
          formatNumber(transaction.value || 0, "value"),
          transaction.data || "0x",
          formatAccessList(transaction.accessList || [])
      ];
      if (signature) {
          const sig = (0, _bytes.splitSignature)(signature);
          fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
          fields.push((0, _bytes.stripZeros)(sig.r));
          fields.push((0, _bytes.stripZeros)(sig.s));
      }
      return (0, _bytes.hexConcat)([
          "0x01",
          _rlp.encode(fields)
      ]);
  }
  // Legacy Transactions and EIP-155
  function _serialize(transaction, signature) {
      (0, _properties.checkProperties)(transaction, allowedTransactionKeys);
      const raw = [];
      transactionFields.forEach(function(fieldInfo) {
          let value = transaction[fieldInfo.name] || [];
          const options = {};
          if (fieldInfo.numeric) options.hexPad = "left";
          value = (0, _bytes.arrayify)((0, _bytes.hexlify)(value, options));
          // Fixed-width field
          if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) logger.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
          // Variable-width (with a maximum)
          if (fieldInfo.maxLength) {
              value = (0, _bytes.stripZeros)(value);
              if (value.length > fieldInfo.maxLength) logger.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
          }
          raw.push((0, _bytes.hexlify)(value));
      });
      let chainId = 0;
      if (transaction.chainId != null) {
          // A chainId was provided; if non-zero we'll use EIP-155
          chainId = transaction.chainId;
          if (typeof chainId !== "number") logger.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
      } else if (signature && !(0, _bytes.isBytesLike)(signature) && signature.v > 28) // No chainId provided, but the signature is signing with EIP-155; derive chainId
      chainId = Math.floor((signature.v - 35) / 2);
      // We have an EIP-155 transaction (chainId was specified and non-zero)
      if (chainId !== 0) {
          raw.push((0, _bytes.hexlify)(chainId)); // @TODO: hexValue?
          raw.push("0x");
          raw.push("0x");
      }
      // Requesting an unsigned transaction
      if (!signature) return _rlp.encode(raw);
      // The splitSignature will ensure the transaction has a recoveryParam in the
      // case that the signTransaction function only adds a v.
      const sig = (0, _bytes.splitSignature)(signature);
      // We pushed a chainId and null r, s on for hashing only; remove those
      let v = 27 + sig.recoveryParam;
      if (chainId !== 0) {
          raw.pop();
          raw.pop();
          raw.pop();
          v += chainId * 2 + 8;
          // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!
          if (sig.v > 28 && sig.v !== v) logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
      } else if (sig.v !== v) logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
      raw.push((0, _bytes.hexlify)(v));
      raw.push((0, _bytes.stripZeros)((0, _bytes.arrayify)(sig.r)));
      raw.push((0, _bytes.stripZeros)((0, _bytes.arrayify)(sig.s)));
      return _rlp.encode(raw);
  }
  function serialize(transaction, signature) {
      // Legacy and EIP-155 Transactions
      if (transaction.type == null || transaction.type === 0) {
          if (transaction.accessList != null) logger.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
          return _serialize(transaction, signature);
      }
      // Typed Transactions (EIP-2718)
      switch(transaction.type){
          case 1:
              return _serializeEip2930(transaction, signature);
          case 2:
              return _serializeEip1559(transaction, signature);
          default:
              break;
      }
      return logger.throwError(`unsupported transaction type: ${transaction.type}`, (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
          operation: "serializeTransaction",
          transactionType: transaction.type
      });
  }
  function _parseEipSignature(tx, fields, serialize) {
      try {
          const recid = handleNumber(fields[0]).toNumber();
          if (recid !== 0 && recid !== 1) throw new Error("bad recid");
          tx.v = recid;
      } catch (error) {
          logger.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
      }
      tx.r = (0, _bytes.hexZeroPad)(fields[1], 32);
      tx.s = (0, _bytes.hexZeroPad)(fields[2], 32);
      try {
          const digest = (0, _keccak256.keccak256)(serialize(tx));
          tx.from = recoverAddress(digest, {
              r: tx.r,
              s: tx.s,
              recoveryParam: tx.v
          });
      } catch (error) {}
  }
  function _parseEip1559(payload) {
      const transaction = _rlp.decode(payload.slice(1));
      if (transaction.length !== 9 && transaction.length !== 12) logger.throwArgumentError("invalid component count for transaction type: 2", "payload", (0, _bytes.hexlify)(payload));
      const maxPriorityFeePerGas = handleNumber(transaction[2]);
      const maxFeePerGas = handleNumber(transaction[3]);
      const tx = {
          type: 2,
          chainId: handleNumber(transaction[0]).toNumber(),
          nonce: handleNumber(transaction[1]).toNumber(),
          maxPriorityFeePerGas: maxPriorityFeePerGas,
          maxFeePerGas: maxFeePerGas,
          gasPrice: null,
          gasLimit: handleNumber(transaction[4]),
          to: handleAddress(transaction[5]),
          value: handleNumber(transaction[6]),
          data: transaction[7],
          accessList: accessListify(transaction[8])
      };
      // Unsigned EIP-1559 Transaction
      if (transaction.length === 9) return tx;
      tx.hash = (0, _keccak256.keccak256)(payload);
      _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
      return tx;
  }
  function _parseEip2930(payload) {
      const transaction = _rlp.decode(payload.slice(1));
      if (transaction.length !== 8 && transaction.length !== 11) logger.throwArgumentError("invalid component count for transaction type: 1", "payload", (0, _bytes.hexlify)(payload));
      const tx = {
          type: 1,
          chainId: handleNumber(transaction[0]).toNumber(),
          nonce: handleNumber(transaction[1]).toNumber(),
          gasPrice: handleNumber(transaction[2]),
          gasLimit: handleNumber(transaction[3]),
          to: handleAddress(transaction[4]),
          value: handleNumber(transaction[5]),
          data: transaction[6],
          accessList: accessListify(transaction[7])
      };
      // Unsigned EIP-2930 Transaction
      if (transaction.length === 8) return tx;
      tx.hash = (0, _keccak256.keccak256)(payload);
      _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
      return tx;
  }
  // Legacy Transactions and EIP-155
  function _parse(rawTransaction) {
      const transaction = _rlp.decode(rawTransaction);
      if (transaction.length !== 9 && transaction.length !== 6) logger.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
      const tx = {
          nonce: handleNumber(transaction[0]).toNumber(),
          gasPrice: handleNumber(transaction[1]),
          gasLimit: handleNumber(transaction[2]),
          to: handleAddress(transaction[3]),
          value: handleNumber(transaction[4]),
          data: transaction[5],
          chainId: 0
      };
      // Legacy unsigned transaction
      if (transaction.length === 6) return tx;
      try {
          tx.v = (0, _bignumber.BigNumber).from(transaction[6]).toNumber();
      } catch (error) {
          // @TODO: What makes snese to do? The v is too big
          return tx;
      }
      tx.r = (0, _bytes.hexZeroPad)(transaction[7], 32);
      tx.s = (0, _bytes.hexZeroPad)(transaction[8], 32);
      if ((0, _bignumber.BigNumber).from(tx.r).isZero() && (0, _bignumber.BigNumber).from(tx.s).isZero()) {
          // EIP-155 unsigned transaction
          tx.chainId = tx.v;
          tx.v = 0;
      } else {
          // Signed Transaction
          tx.chainId = Math.floor((tx.v - 35) / 2);
          if (tx.chainId < 0) tx.chainId = 0;
          let recoveryParam = tx.v - 27;
          const raw = transaction.slice(0, 6);
          if (tx.chainId !== 0) {
              raw.push((0, _bytes.hexlify)(tx.chainId));
              raw.push("0x");
              raw.push("0x");
              recoveryParam -= tx.chainId * 2 + 8;
          }
          const digest = (0, _keccak256.keccak256)(_rlp.encode(raw));
          try {
              tx.from = recoverAddress(digest, {
                  r: (0, _bytes.hexlify)(tx.r),
                  s: (0, _bytes.hexlify)(tx.s),
                  recoveryParam: recoveryParam
              });
          } catch (error) {}
          tx.hash = (0, _keccak256.keccak256)(rawTransaction);
      }
      tx.type = null;
      return tx;
  }
  function parse(rawTransaction) {
      const payload = (0, _bytes.arrayify)(rawTransaction);
      // Legacy and EIP-155 Transactions
      if (payload[0] > 0x7f) return _parse(payload);
      // Typed Transaction (EIP-2718)
      switch(payload[0]){
          case 1:
              return _parseEip2930(payload);
          case 2:
              return _parseEip1559(payload);
          default:
              break;
      }
      return logger.throwError(`unsupported transaction type: ${payload[0]}`, (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
          operation: "parseTransaction",
          transactionType: payload[0]
      });
  }
  
  },{"@ethersproject/address":"ggdAz","@ethersproject/bignumber":"ckYYW","@ethersproject/bytes":"htrqZ","@ethersproject/constants":"gKbDE","@ethersproject/keccak256":"hXDEv","@ethersproject/properties":"h3GJb","@ethersproject/rlp":"b2vlp","@ethersproject/signing-key":"krGB2","@ethersproject/logger":"hLvB2","./_version":"7piXV","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"krGB2":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "SigningKey", ()=>SigningKey);
  parcelHelpers.export(exports, "recoverPublicKey", ()=>recoverPublicKey);
  parcelHelpers.export(exports, "computePublicKey", ()=>computePublicKey);
  var _elliptic = require("./elliptic");
  var _bytes = require("@ethersproject/bytes");
  var _properties = require("@ethersproject/properties");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  "use strict";
  const logger = new (0, _logger.Logger)((0, _version.version));
  let _curve = null;
  function getCurve() {
      if (!_curve) _curve = new (0, _elliptic.EC)("secp256k1");
      return _curve;
  }
  class SigningKey {
      constructor(privateKey){
          (0, _properties.defineReadOnly)(this, "curve", "secp256k1");
          (0, _properties.defineReadOnly)(this, "privateKey", (0, _bytes.hexlify)(privateKey));
          if ((0, _bytes.hexDataLength)(this.privateKey) !== 32) logger.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
          const keyPair = getCurve().keyFromPrivate((0, _bytes.arrayify)(this.privateKey));
          (0, _properties.defineReadOnly)(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
          (0, _properties.defineReadOnly)(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
          (0, _properties.defineReadOnly)(this, "_isSigningKey", true);
      }
      _addPoint(other) {
          const p0 = getCurve().keyFromPublic((0, _bytes.arrayify)(this.publicKey));
          const p1 = getCurve().keyFromPublic((0, _bytes.arrayify)(other));
          return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
      }
      signDigest(digest) {
          const keyPair = getCurve().keyFromPrivate((0, _bytes.arrayify)(this.privateKey));
          const digestBytes = (0, _bytes.arrayify)(digest);
          if (digestBytes.length !== 32) logger.throwArgumentError("bad digest length", "digest", digest);
          const signature = keyPair.sign(digestBytes, {
              canonical: true
          });
          return (0, _bytes.splitSignature)({
              recoveryParam: signature.recoveryParam,
              r: (0, _bytes.hexZeroPad)("0x" + signature.r.toString(16), 32),
              s: (0, _bytes.hexZeroPad)("0x" + signature.s.toString(16), 32)
          });
      }
      computeSharedSecret(otherKey) {
          const keyPair = getCurve().keyFromPrivate((0, _bytes.arrayify)(this.privateKey));
          const otherKeyPair = getCurve().keyFromPublic((0, _bytes.arrayify)(computePublicKey(otherKey)));
          return (0, _bytes.hexZeroPad)("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
      }
      static isSigningKey(value) {
          return !!(value && value._isSigningKey);
      }
  }
  function recoverPublicKey(digest, signature) {
      const sig = (0, _bytes.splitSignature)(signature);
      const rs = {
          r: (0, _bytes.arrayify)(sig.r),
          s: (0, _bytes.arrayify)(sig.s)
      };
      return "0x" + getCurve().recoverPubKey((0, _bytes.arrayify)(digest), rs, sig.recoveryParam).encode("hex", false);
  }
  function computePublicKey(key, compressed) {
      const bytes = (0, _bytes.arrayify)(key);
      if (bytes.length === 32) {
          const signingKey = new SigningKey(bytes);
          if (compressed) return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
          return signingKey.publicKey;
      } else if (bytes.length === 33) {
          if (compressed) return (0, _bytes.hexlify)(bytes);
          return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
      } else if (bytes.length === 65) {
          if (!compressed) return (0, _bytes.hexlify)(bytes);
          return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
      }
      return logger.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
  }
  
  },{"./elliptic":"iqlLr","@ethersproject/bytes":"htrqZ","@ethersproject/properties":"h3GJb","@ethersproject/logger":"hLvB2","./_version":"dHyc2","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"iqlLr":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "EC", ()=>EC$1);
  var _bnJs = require("bn.js");
  var _bnJsDefault = parcelHelpers.interopDefault(_bnJs);
  var _hashJs = require("hash.js");
  var _hashJsDefault = parcelHelpers.interopDefault(_hashJs);
  var global = arguments[3];
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function getDefaultExportFromCjs(x) {
      return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
  }
  function createCommonjsModule(fn, basedir, module) {
      return module = {
          path: basedir,
          exports: {},
          require: function(path, base) {
              return commonjsRequire(path, base === undefined || base === null ? module.path : base);
          }
      }, fn(module, module.exports), module.exports;
  }
  function getDefaultExportFromNamespaceIfPresent(n) {
      return n && Object.prototype.hasOwnProperty.call(n, "default") ? n["default"] : n;
  }
  function getDefaultExportFromNamespaceIfNotNamed(n) {
      return n && Object.prototype.hasOwnProperty.call(n, "default") && Object.keys(n).length === 1 ? n["default"] : n;
  }
  function getAugmentedNamespace(n) {
      if (n.__esModule) return n;
      var a = Object.defineProperty({}, "__esModule", {
          value: true
      });
      Object.keys(n).forEach(function(k) {
          var d = Object.getOwnPropertyDescriptor(n, k);
          Object.defineProperty(a, k, d.get ? d : {
              enumerable: true,
              get: function() {
                  return n[k];
              }
          });
      });
      return a;
  }
  function commonjsRequire() {
      throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
  }
  var minimalisticAssert = assert;
  function assert(val, msg) {
      if (!val) throw new Error(msg || "Assertion failed");
  }
  assert.equal = function assertEqual(l, r, msg) {
      if (l != r) throw new Error(msg || "Assertion failed: " + l + " != " + r);
  };
  var utils_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var utils = exports;
      function toArray(msg, enc) {
          if (Array.isArray(msg)) return msg.slice();
          if (!msg) return [];
          var res = [];
          if (typeof msg !== "string") {
              for(var i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
              return res;
          }
          if (enc === "hex") {
              msg = msg.replace(/[^a-z0-9]+/ig, "");
              if (msg.length % 2 !== 0) msg = "0" + msg;
              for(var i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
          } else for(var i = 0; i < msg.length; i++){
              var c = msg.charCodeAt(i);
              var hi = c >> 8;
              var lo = c & 0xff;
              if (hi) res.push(hi, lo);
              else res.push(lo);
          }
          return res;
      }
      utils.toArray = toArray;
      function zero2(word) {
          if (word.length === 1) return "0" + word;
          else return word;
      }
      utils.zero2 = zero2;
      function toHex(msg) {
          var res = "";
          for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
          return res;
      }
      utils.toHex = toHex;
      utils.encode = function encode(arr, enc) {
          if (enc === "hex") return toHex(arr);
          else return arr;
      };
  });
  var utils_1$1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var utils = exports;
      utils.assert = minimalisticAssert;
      utils.toArray = utils_1.toArray;
      utils.zero2 = utils_1.zero2;
      utils.toHex = utils_1.toHex;
      utils.encode = utils_1.encode;
      // Represent num in a w-NAF form
      function getNAF(num, w, bits) {
          var naf = new Array(Math.max(num.bitLength(), bits) + 1);
          naf.fill(0);
          var ws = 1 << w + 1;
          var k = num.clone();
          for(var i = 0; i < naf.length; i++){
              var z;
              var mod = k.andln(ws - 1);
              if (k.isOdd()) {
                  if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
                  else z = mod;
                  k.isubn(z);
              } else z = 0;
              naf[i] = z;
              k.iushrn(1);
          }
          return naf;
      }
      utils.getNAF = getNAF;
      // Represent k1, k2 in a Joint Sparse Form
      function getJSF(k1, k2) {
          var jsf = [
              [],
              []
          ];
          k1 = k1.clone();
          k2 = k2.clone();
          var d1 = 0;
          var d2 = 0;
          var m8;
          while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){
              // First phase
              var m14 = k1.andln(3) + d1 & 3;
              var m24 = k2.andln(3) + d2 & 3;
              if (m14 === 3) m14 = -1;
              if (m24 === 3) m24 = -1;
              var u1;
              if ((m14 & 1) === 0) u1 = 0;
              else {
                  m8 = k1.andln(7) + d1 & 7;
                  if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
                  else u1 = m14;
              }
              jsf[0].push(u1);
              var u2;
              if ((m24 & 1) === 0) u2 = 0;
              else {
                  m8 = k2.andln(7) + d2 & 7;
                  if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
                  else u2 = m24;
              }
              jsf[1].push(u2);
              // Second phase
              if (2 * d1 === u1 + 1) d1 = 1 - d1;
              if (2 * d2 === u2 + 1) d2 = 1 - d2;
              k1.iushrn(1);
              k2.iushrn(1);
          }
          return jsf;
      }
      utils.getJSF = getJSF;
      function cachedProperty(obj, name, computer) {
          var key = "_" + name;
          obj.prototype[name] = function cachedProperty() {
              return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
          };
      }
      utils.cachedProperty = cachedProperty;
      function parseBytes(bytes) {
          return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
      }
      utils.parseBytes = parseBytes;
      function intFromLE(bytes) {
          return new (0, _bnJsDefault.default)(bytes, "hex", "le");
      }
      utils.intFromLE = intFromLE;
  });
  "use strict";
  var getNAF = utils_1$1.getNAF;
  var getJSF = utils_1$1.getJSF;
  var assert$1 = utils_1$1.assert;
  function BaseCurve(type, conf) {
      this.type = type;
      this.p = new (0, _bnJsDefault.default)(conf.p, 16);
      // Use Montgomery, when there is no fast reduction for the prime
      this.red = conf.prime ? (0, _bnJsDefault.default).red(conf.prime) : (0, _bnJsDefault.default).mont(this.p);
      // Useful for many curves
      this.zero = new (0, _bnJsDefault.default)(0).toRed(this.red);
      this.one = new (0, _bnJsDefault.default)(1).toRed(this.red);
      this.two = new (0, _bnJsDefault.default)(2).toRed(this.red);
      // Curve configuration, optional
      this.n = conf.n && new (0, _bnJsDefault.default)(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
      // Temporary arrays
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);
      this._bitLength = this.n ? this.n.bitLength() : 0;
      // Generalized Greg Maxwell's trick
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) this.redN = null;
      else {
          this._maxwellTrick = true;
          this.redN = this.n.toRed(this.red);
      }
  }
  var base = BaseCurve;
  BaseCurve.prototype.point = function point() {
      throw new Error("Not implemented");
  };
  BaseCurve.prototype.validate = function validate() {
      throw new Error("Not implemented");
  };
  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert$1(p.precomputed);
      var doubles = p._getDoubles();
      var naf = getNAF(k, 1, this._bitLength);
      var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;
      // Translate into more windowed form
      var repr = [];
      var j;
      var nafW;
      for(j = 0; j < naf.length; j += doubles.step){
          nafW = 0;
          for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];
          repr.push(nafW);
      }
      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for(var i = I; i > 0; i--){
          for(j = 0; j < repr.length; j++){
              nafW = repr[j];
              if (nafW === i) b = b.mixedAdd(doubles.points[j]);
              else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
          }
          a = a.add(b);
      }
      return a.toP();
  };
  BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;
      // Precompute window
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;
      // Get NAF form
      var naf = getNAF(k, w, this._bitLength);
      // Add `this`*(N+1) for every w-NAF index
      var acc = this.jpoint(null, null, null);
      for(var i = naf.length - 1; i >= 0; i--){
          // Count zeroes
          for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;
          if (i >= 0) l++;
          acc = acc.dblp(l);
          if (i < 0) break;
          var z = naf[i];
          assert$1(z !== 0);
          if (p.type === "affine") {
              // J +- P
              if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);
              else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
          } else // J +- J
          if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);
          else acc = acc.add(wnd[-z - 1 >> 1].neg());
      }
      return p.type === "affine" ? acc.toP() : acc;
  };
  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;
      // Fill all arrays
      var max = 0;
      var i;
      var j;
      var p;
      for(i = 0; i < len; i++){
          p = points[i];
          var nafPoints = p._getNAFPoints(defW);
          wndWidth[i] = nafPoints.wnd;
          wnd[i] = nafPoints.points;
      }
      // Comb small window NAFs
      for(i = len - 1; i >= 1; i -= 2){
          var a = i - 1;
          var b = i;
          if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
              naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
              naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
              max = Math.max(naf[a].length, max);
              max = Math.max(naf[b].length, max);
              continue;
          }
          var comb = [
              points[a],
              /* 1 */ null,
              /* 3 */ null,
              /* 5 */ points[b]
          ];
          // Try to avoid Projective points, if possible
          if (points[a].y.cmp(points[b].y) === 0) {
              comb[1] = points[a].add(points[b]);
              comb[2] = points[a].toJ().mixedAdd(points[b].neg());
          } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
              comb[1] = points[a].toJ().mixedAdd(points[b]);
              comb[2] = points[a].add(points[b].neg());
          } else {
              comb[1] = points[a].toJ().mixedAdd(points[b]);
              comb[2] = points[a].toJ().mixedAdd(points[b].neg());
          }
          var index = [
              -3,
              /* -1 -1 */ -1,
              /* -1 0 */ -5,
              /* -1 1 */ -7,
              /* 0 -1 */ 0,
              /* 0 0 */ 7,
              /* 0 1 */ 5,
              /* 1 -1 */ 1,
              /* 1 0 */ 3
          ];
          var jsf = getJSF(coeffs[a], coeffs[b]);
          max = Math.max(jsf[0].length, max);
          naf[a] = new Array(max);
          naf[b] = new Array(max);
          for(j = 0; j < max; j++){
              var ja = jsf[0][j] | 0;
              var jb = jsf[1][j] | 0;
              naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
              naf[b][j] = 0;
              wnd[a] = comb;
          }
      }
      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for(i = max; i >= 0; i--){
          var k = 0;
          while(i >= 0){
              var zero = true;
              for(j = 0; j < len; j++){
                  tmp[j] = naf[j][i] | 0;
                  if (tmp[j] !== 0) zero = false;
              }
              if (!zero) break;
              k++;
              i--;
          }
          if (i >= 0) k++;
          acc = acc.dblp(k);
          if (i < 0) break;
          for(j = 0; j < len; j++){
              var z = tmp[j];
              p;
              if (z === 0) continue;
              else if (z > 0) p = wnd[j][z - 1 >> 1];
              else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
              if (p.type === "affine") acc = acc.mixedAdd(p);
              else acc = acc.add(p);
          }
      }
      // Zeroify references
      for(i = 0; i < len; i++)wnd[i] = null;
      if (jacobianResult) return acc;
      else return acc.toP();
  };
  function BasePoint(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
  }
  BaseCurve.BasePoint = BasePoint;
  BasePoint.prototype.eq = function eq() {
      throw new Error("Not implemented");
  };
  BasePoint.prototype.validate = function validate() {
      return this.curve.validate(this);
  };
  BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils_1$1.toArray(bytes, enc);
      var len = this.p.byteLength();
      // uncompressed, hybrid-odd, hybrid-even
      if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
          if (bytes[0] === 0x06) assert$1(bytes[bytes.length - 1] % 2 === 0);
          else if (bytes[0] === 0x07) assert$1(bytes[bytes.length - 1] % 2 === 1);
          var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
          return res;
      } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
      throw new Error("Unknown point format");
  };
  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
  };
  BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray("be", len);
      if (compact) return [
          this.getY().isEven() ? 0x02 : 0x03
      ].concat(x);
      return [
          0x04
      ].concat(x, this.getY().toArray("be", len));
  };
  BasePoint.prototype.encode = function encode(enc, compact) {
      return utils_1$1.encode(this._encode(compact), enc);
  };
  BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed) return this;
      var precomputed = {
          doubles: null,
          naf: null,
          beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
      return this;
  };
  BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed) return false;
      var doubles = this.precomputed.doubles;
      if (!doubles) return false;
      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
  };
  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
      var doubles = [
          this
      ];
      var acc = this;
      for(var i = 0; i < power; i += step){
          for(var j = 0; j < step; j++)acc = acc.dbl();
          doubles.push(acc);
      }
      return {
          step: step,
          points: doubles
      };
  };
  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
      var res = [
          this
      ];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();
      for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);
      return {
          wnd: wnd,
          points: res
      };
  };
  BasePoint.prototype._getBeta = function _getBeta() {
      return null;
  };
  BasePoint.prototype.dblp = function dblp(k) {
      var r = this;
      for(var i = 0; i < k; i++)r = r.dbl();
      return r;
  };
  var inherits_browser = createCommonjsModule(function(module) {
      if (typeof Object.create === "function") // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
              ctor.super_ = superCtor;
              ctor.prototype = Object.create(superCtor.prototype, {
                  constructor: {
                      value: ctor,
                      enumerable: false,
                      writable: true,
                      configurable: true
                  }
              });
          }
      };
      else // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
              ctor.super_ = superCtor;
              var TempCtor = function() {};
              TempCtor.prototype = superCtor.prototype;
              ctor.prototype = new TempCtor();
              ctor.prototype.constructor = ctor;
          }
      };
  });
  "use strict";
  var assert$2 = utils_1$1.assert;
  function ShortCurve(conf) {
      base.call(this, "short", conf);
      this.a = new (0, _bnJsDefault.default)(conf.a, 16).toRed(this.red);
      this.b = new (0, _bnJsDefault.default)(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();
      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
      // If the curve is endomorphic, precalculate beta and lambda
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
  }
  inherits_browser(ShortCurve, base);
  var short_1 = ShortCurve;
  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      // No efficient endomorphism
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;
      // Compute beta and lambda, that lambda * P = (beta * Px; Py)
      var beta;
      var lambda;
      if (conf.beta) beta = new (0, _bnJsDefault.default)(conf.beta, 16).toRed(this.red);
      else {
          var betas = this._getEndoRoots(this.p);
          // Choose the smallest beta
          beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
          beta = beta.toRed(this.red);
      }
      if (conf.lambda) lambda = new (0, _bnJsDefault.default)(conf.lambda, 16);
      else {
          // Choose the lambda that is matching selected beta
          var lambdas = this._getEndoRoots(this.n);
          if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) lambda = lambdas[0];
          else {
              lambda = lambdas[1];
              assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
          }
      }
      // Get basis vectors, used for balanced length-two representation
      var basis;
      if (conf.basis) basis = conf.basis.map(function(vec) {
          return {
              a: new (0, _bnJsDefault.default)(vec.a, 16),
              b: new (0, _bnJsDefault.default)(vec.b, 16)
          };
      });
      else basis = this._getEndoBasis(lambda);
      return {
          beta: beta,
          lambda: lambda,
          basis: basis
      };
  };
  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      // Find roots of for x^2 + x + 1 in F
      // Root = (-1 +- Sqrt(-3)) / 2
      //
      var red = num === this.p ? this.red : (0, _bnJsDefault.default).mont(num);
      var tinv = new (0, _bnJsDefault.default)(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
      var s = new (0, _bnJsDefault.default)(3).toRed(red).redNeg().redSqrt().redMul(tinv);
      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [
          l1,
          l2
      ];
  };
  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      // aprxSqrt >= sqrt(this.n)
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
      // 3.74
      // Run EGCD, until r(L + 1) < aprxSqrt
      var u = lambda;
      var v = this.n.clone();
      var x1 = new (0, _bnJsDefault.default)(1);
      var y1 = new (0, _bnJsDefault.default)(0);
      var x2 = new (0, _bnJsDefault.default)(0);
      var y2 = new (0, _bnJsDefault.default)(1);
      // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
      var a0;
      var b0;
      // First vector
      var a1;
      var b1;
      // Second vector
      var a2;
      var b2;
      var prevR;
      var i = 0;
      var r;
      var x;
      while(u.cmpn(0) !== 0){
          var q = v.div(u);
          r = v.sub(q.mul(u));
          x = x2.sub(q.mul(x1));
          var y = y2.sub(q.mul(y1));
          if (!a1 && r.cmp(aprxSqrt) < 0) {
              a0 = prevR.neg();
              b0 = x1;
              a1 = r.neg();
              b1 = x;
          } else if (a1 && ++i === 2) break;
          prevR = r;
          v = u;
          u = r;
          x2 = x1;
          x1 = x;
          y2 = y1;
          y1 = y;
      }
      a2 = r.neg();
      b2 = x;
      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
          a2 = a0;
          b2 = b0;
      }
      // Normalize signs
      if (a1.negative) {
          a1 = a1.neg();
          b1 = b1.neg();
      }
      if (a2.negative) {
          a2 = a2.neg();
          b2 = b2.neg();
      }
      return [
          {
              a: a1,
              b: b1
          },
          {
              a: a2,
              b: b2
          }
      ];
  };
  ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];
      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);
      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);
      // Calculate answer
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return {
          k1: k1,
          k2: k2
      };
  };
  ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new (0, _bnJsDefault.default)(x, 16);
      if (!x.red) x = x.toRed(this.red);
      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point");
      // XXX Is there any way to tell if the number is odd without converting it
      // to non-red form?
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
      return this.point(x, y);
  };
  ShortCurve.prototype.validate = function validate(point) {
      if (point.inf) return true;
      var x = point.x;
      var y = point.y;
      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
  };
  ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for(var i = 0; i < points.length; i++){
          var split = this._endoSplit(coeffs[i]);
          var p = points[i];
          var beta = p._getBeta();
          if (split.k1.negative) {
              split.k1.ineg();
              p = p.neg(true);
          }
          if (split.k2.negative) {
              split.k2.ineg();
              beta = beta.neg(true);
          }
          npoints[i * 2] = p;
          npoints[i * 2 + 1] = beta;
          ncoeffs[i * 2] = split.k1;
          ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
      // Clean-up references to points and coefficients
      for(var j = 0; j < i * 2; j++){
          npoints[j] = null;
          ncoeffs[j] = null;
      }
      return res;
  };
  function Point(curve, x, y, isRed) {
      base.BasePoint.call(this, curve, "affine");
      if (x === null && y === null) {
          this.x = null;
          this.y = null;
          this.inf = true;
      } else {
          this.x = new (0, _bnJsDefault.default)(x, 16);
          this.y = new (0, _bnJsDefault.default)(y, 16);
          // Force redgomery representation when loading from JSON
          if (isRed) {
              this.x.forceRed(this.curve.red);
              this.y.forceRed(this.curve.red);
          }
          if (!this.x.red) this.x = this.x.toRed(this.curve.red);
          if (!this.y.red) this.y = this.y.toRed(this.curve.red);
          this.inf = false;
      }
  }
  inherits_browser(Point, base.BasePoint);
  ShortCurve.prototype.point = function point(x, y, isRed) {
      return new Point(this, x, y, isRed);
  };
  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
  };
  Point.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo) return;
      var pre = this.precomputed;
      if (pre && pre.beta) return pre.beta;
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
          var curve = this.curve;
          var endoMul = function(p) {
              return curve.point(p.x.redMul(curve.endo.beta), p.y);
          };
          pre.beta = beta;
          beta.precomputed = {
              beta: null,
              naf: pre.naf && {
                  wnd: pre.naf.wnd,
                  points: pre.naf.points.map(endoMul)
              },
              doubles: pre.doubles && {
                  step: pre.doubles.step,
                  points: pre.doubles.points.map(endoMul)
              }
          };
      }
      return beta;
  };
  Point.prototype.toJSON = function toJSON() {
      if (!this.precomputed) return [
          this.x,
          this.y
      ];
      return [
          this.x,
          this.y,
          this.precomputed && {
              doubles: this.precomputed.doubles && {
                  step: this.precomputed.doubles.step,
                  points: this.precomputed.doubles.points.slice(1)
              },
              naf: this.precomputed.naf && {
                  wnd: this.precomputed.naf.wnd,
                  points: this.precomputed.naf.points.slice(1)
              }
          }
      ];
  };
  Point.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === "string") obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2]) return res;
      function obj2point(obj) {
          return curve.point(obj[0], obj[1], red);
      }
      var pre = obj[2];
      res.precomputed = {
          beta: null,
          doubles: pre.doubles && {
              step: pre.doubles.step,
              points: [
                  res
              ].concat(pre.doubles.points.map(obj2point))
          },
          naf: pre.naf && {
              wnd: pre.naf.wnd,
              points: [
                  res
              ].concat(pre.naf.points.map(obj2point))
          }
      };
      return res;
  };
  Point.prototype.inspect = function inspect() {
      if (this.isInfinity()) return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
  };
  Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
  };
  Point.prototype.add = function add(p) {
      // O + P = P
      if (this.inf) return p;
      // P + O = P
      if (p.inf) return this;
      // P + P = 2P
      if (this.eq(p)) return this.dbl();
      // P + (-P) = O
      if (this.neg().eq(p)) return this.curve.point(null, null);
      // P + Q = O
      if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
  };
  Point.prototype.dbl = function dbl() {
      if (this.inf) return this;
      // 2P = O
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
      var a = this.curve.a;
      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
  };
  Point.prototype.getX = function getX() {
      return this.x.fromRed();
  };
  Point.prototype.getY = function getY() {
      return this.y.fromRed();
  };
  Point.prototype.mul = function mul(k) {
      k = new (0, _bnJsDefault.default)(k, 16);
      if (this.isInfinity()) return this;
      else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo) return this.curve._endoWnafMulAdd([
          this
      ], [
          k
      ]);
      else return this.curve._wnafMul(this, k);
  };
  Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [
          this,
          p2
      ];
      var coeffs = [
          k1,
          k2
      ];
      if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
      else return this.curve._wnafMulAdd(1, points, coeffs, 2);
  };
  Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [
          this,
          p2
      ];
      var coeffs = [
          k1,
          k2
      ];
      if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
      else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
  };
  Point.prototype.eq = function eq(p) {
      return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
  };
  Point.prototype.neg = function neg(_precompute) {
      if (this.inf) return this;
      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
          var pre = this.precomputed;
          var negate = function(p) {
              return p.neg();
          };
          res.precomputed = {
              naf: pre.naf && {
                  wnd: pre.naf.wnd,
                  points: pre.naf.points.map(negate)
              },
              doubles: pre.doubles && {
                  step: pre.doubles.step,
                  points: pre.doubles.points.map(negate)
              }
          };
      }
      return res;
  };
  Point.prototype.toJ = function toJ() {
      if (this.inf) return this.curve.jpoint(null, null, null);
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
  };
  function JPoint(curve, x, y, z) {
      base.BasePoint.call(this, curve, "jacobian");
      if (x === null && y === null && z === null) {
          this.x = this.curve.one;
          this.y = this.curve.one;
          this.z = new (0, _bnJsDefault.default)(0);
      } else {
          this.x = new (0, _bnJsDefault.default)(x, 16);
          this.y = new (0, _bnJsDefault.default)(y, 16);
          this.z = new (0, _bnJsDefault.default)(z, 16);
      }
      if (!this.x.red) this.x = this.x.toRed(this.curve.red);
      if (!this.y.red) this.y = this.y.toRed(this.curve.red);
      if (!this.z.red) this.z = this.z.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
  }
  inherits_browser(JPoint, base.BasePoint);
  ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint(this, x, y, z);
  };
  JPoint.prototype.toP = function toP() {
      if (this.isInfinity()) return this.curve.point(null, null);
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
      return this.curve.point(ax, ay);
  };
  JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  };
  JPoint.prototype.add = function add(p) {
      // O + P = P
      if (this.isInfinity()) return p;
      // P + O = P
      if (p.isInfinity()) return this;
      // 12M + 4S + 7A
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
          if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
          else return this.dbl();
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);
      return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mixedAdd = function mixedAdd(p) {
      // O + P = P
      if (this.isInfinity()) return p.toJ();
      // P + O = P
      if (p.isInfinity()) return this;
      // 8M + 3S + 7A
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
          if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
          else return this.dbl();
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);
      return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.dblp = function dblp(pow) {
      if (pow === 0) return this;
      if (this.isInfinity()) return this;
      if (!pow) return this.dbl();
      var i;
      if (this.curve.zeroA || this.curve.threeA) {
          var r = this;
          for(i = 0; i < pow; i++)r = r.dbl();
          return r;
      }
      // 1M + 2S + 1A + N * (4S + 5M + 8A)
      // N = 1 => 6M + 6S + 9A
      var a = this.curve.a;
      var tinv = this.curve.tinv;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      // Reuse results
      var jyd = jy.redAdd(jy);
      for(i = 0; i < pow; i++){
          var jx2 = jx.redSqr();
          var jyd2 = jyd.redSqr();
          var jyd4 = jyd2.redSqr();
          var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
          var t1 = jx.redMul(jyd2);
          var nx = c.redSqr().redISub(t1.redAdd(t1));
          var t2 = t1.redISub(nx);
          var dny = c.redMul(t2);
          dny = dny.redIAdd(dny).redISub(jyd4);
          var nz = jyd.redMul(jz);
          if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
          jx = nx;
          jz = nz;
          jyd = dny;
      }
      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  };
  JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity()) return this;
      if (this.curve.zeroA) return this._zeroDbl();
      else if (this.curve.threeA) return this._threeDbl();
      else return this._dbl();
  };
  JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
          // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
          //     #doubling-mdbl-2007-bl
          // 1M + 5S + 14A
          // XX = X1^2
          var xx = this.x.redSqr();
          // YY = Y1^2
          var yy = this.y.redSqr();
          // YYYY = YY^2
          var yyyy = yy.redSqr();
          // S = 2 * ((X1 + YY)^2 - XX - YYYY)
          var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
          s = s.redIAdd(s);
          // M = 3 * XX + a; a = 0
          var m = xx.redAdd(xx).redIAdd(xx);
          // T = M ^ 2 - 2*S
          var t = m.redSqr().redISub(s).redISub(s);
          // 8 * YYYY
          var yyyy8 = yyyy.redIAdd(yyyy);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          // X3 = T
          nx = t;
          // Y3 = M * (S - T) - 8 * YYYY
          ny = m.redMul(s.redISub(t)).redISub(yyyy8);
          // Z3 = 2*Y1
          nz = this.y.redAdd(this.y);
      } else {
          // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
          //     #doubling-dbl-2009-l
          // 2M + 5S + 13A
          // A = X1^2
          var a = this.x.redSqr();
          // B = Y1^2
          var b = this.y.redSqr();
          // C = B^2
          var c = b.redSqr();
          // D = 2 * ((X1 + B)^2 - A - C)
          var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
          d = d.redIAdd(d);
          // E = 3 * A
          var e = a.redAdd(a).redIAdd(a);
          // F = E^2
          var f = e.redSqr();
          // 8 * C
          var c8 = c.redIAdd(c);
          c8 = c8.redIAdd(c8);
          c8 = c8.redIAdd(c8);
          // X3 = F - 2 * D
          nx = f.redISub(d).redISub(d);
          // Y3 = E * (D - X3) - 8 * C
          ny = e.redMul(d.redISub(nx)).redISub(c8);
          // Z3 = 2 * Y1 * Z1
          nz = this.y.redMul(this.z);
          nz = nz.redIAdd(nz);
      }
      return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
          // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
          //     #doubling-mdbl-2007-bl
          // 1M + 5S + 15A
          // XX = X1^2
          var xx = this.x.redSqr();
          // YY = Y1^2
          var yy = this.y.redSqr();
          // YYYY = YY^2
          var yyyy = yy.redSqr();
          // S = 2 * ((X1 + YY)^2 - XX - YYYY)
          var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
          s = s.redIAdd(s);
          // M = 3 * XX + a
          var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
          // T = M^2 - 2 * S
          var t = m.redSqr().redISub(s).redISub(s);
          // X3 = T
          nx = t;
          // Y3 = M * (S - T) - 8 * YYYY
          var yyyy8 = yyyy.redIAdd(yyyy);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          ny = m.redMul(s.redISub(t)).redISub(yyyy8);
          // Z3 = 2 * Y1
          nz = this.y.redAdd(this.y);
      } else {
          // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
          // 3M + 5S
          // delta = Z1^2
          var delta = this.z.redSqr();
          // gamma = Y1^2
          var gamma = this.y.redSqr();
          // beta = X1 * gamma
          var beta = this.x.redMul(gamma);
          // alpha = 3 * (X1 - delta) * (X1 + delta)
          var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
          alpha = alpha.redAdd(alpha).redIAdd(alpha);
          // X3 = alpha^2 - 8 * beta
          var beta4 = beta.redIAdd(beta);
          beta4 = beta4.redIAdd(beta4);
          var beta8 = beta4.redAdd(beta4);
          nx = alpha.redSqr().redISub(beta8);
          // Z3 = (Y1 + Z1)^2 - gamma - delta
          nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
          // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
          var ggamma8 = gamma.redSqr();
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }
      return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a;
      // 4M + 6S + 10A
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
      return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA) return this.dbl().add(this);
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
      // 5M + 10S + ...
      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // ZZ = Z1^2
      var zz = this.z.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // M = 3 * XX + a * ZZ2; a = 0
      var m = xx.redAdd(xx).redIAdd(xx);
      // MM = M^2
      var mm = m.redSqr();
      // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      // EE = E^2
      var ee = e.redSqr();
      // T = 16*YYYY
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      // U = (M + E)^2 - MM - EE - T
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      // X3 = 4 * (X1 * EE - 4 * YY * U)
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      // Z3 = (Z1 + E)^2 - ZZ - EE
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
      return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mul = function mul(k, kbase) {
      k = new (0, _bnJsDefault.default)(k, kbase);
      return this.curve._wnafMul(this, k);
  };
  JPoint.prototype.eq = function eq(p) {
      if (p.type === "affine") return this.eq(p.toJ());
      if (this === p) return true;
      // x1 * z2^2 == x2 * z1^2
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;
      // y1 * z2^3 == y2 * z1^3
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
  };
  JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0) return true;
      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for(;;){
          xc.iadd(this.curve.n);
          if (xc.cmp(this.curve.p) >= 0) return false;
          rx.redIAdd(t);
          if (this.x.cmp(rx) === 0) return true;
      }
  };
  JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity()) return "<EC JPoint Infinity>";
      return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
  };
  JPoint.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
  };
  var curve_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var curve = exports;
      curve.base = base;
      curve.short = short_1;
      curve.mont = /*RicMoo:ethers:require(./mont)*/ null;
      curve.edwards = /*RicMoo:ethers:require(./edwards)*/ null;
  });
  var curves_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var curves = exports;
      var assert = utils_1$1.assert;
      function PresetCurve(options) {
          if (options.type === "short") this.curve = new curve_1.short(options);
          else if (options.type === "edwards") this.curve = new curve_1.edwards(options);
          else this.curve = new curve_1.mont(options);
          this.g = this.curve.g;
          this.n = this.curve.n;
          this.hash = options.hash;
          assert(this.g.validate(), "Invalid curve");
          assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
      }
      curves.PresetCurve = PresetCurve;
      function defineCurve(name, options) {
          Object.defineProperty(curves, name, {
              configurable: true,
              enumerable: true,
              get: function() {
                  var curve = new PresetCurve(options);
                  Object.defineProperty(curves, name, {
                      configurable: true,
                      enumerable: true,
                      value: curve
                  });
                  return curve;
              }
          });
      }
      defineCurve("p192", {
          type: "short",
          prime: "p192",
          p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
          a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
          b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
          n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
          hash: (0, _hashJsDefault.default).sha256,
          gRed: false,
          g: [
              "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
              "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
          ]
      });
      defineCurve("p224", {
          type: "short",
          prime: "p224",
          p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
          a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
          b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
          n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
          hash: (0, _hashJsDefault.default).sha256,
          gRed: false,
          g: [
              "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
              "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
          ]
      });
      defineCurve("p256", {
          type: "short",
          prime: null,
          p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
          a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
          b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
          n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
          hash: (0, _hashJsDefault.default).sha256,
          gRed: false,
          g: [
              "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
              "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
          ]
      });
      defineCurve("p384", {
          type: "short",
          prime: null,
          p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
          a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
          b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
          n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
          hash: (0, _hashJsDefault.default).sha384,
          gRed: false,
          g: [
              "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
              "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
          ]
      });
      defineCurve("p521", {
          type: "short",
          prime: null,
          p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
          a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
          b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
          n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
          hash: (0, _hashJsDefault.default).sha512,
          gRed: false,
          g: [
              "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
              "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
          ]
      });
      defineCurve("curve25519", {
          type: "mont",
          prime: "p25519",
          p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
          a: "76d06",
          b: "1",
          n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
          hash: (0, _hashJsDefault.default).sha256,
          gRed: false,
          g: [
              "9"
          ]
      });
      defineCurve("ed25519", {
          type: "edwards",
          prime: "p25519",
          p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
          a: "-1",
          c: "1",
          // -121665 * (121666^(-1)) (mod P)
          d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
          n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
          hash: (0, _hashJsDefault.default).sha256,
          gRed: false,
          g: [
              "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
              // 4/5
              "6666666666666666666666666666666666666666666666666666666666666658"
          ]
      });
      var pre;
      try {
          pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/ null.crash();
      } catch (e) {
          pre = undefined;
      }
      defineCurve("secp256k1", {
          type: "short",
          prime: "k256",
          p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
          a: "0",
          b: "7",
          n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
          h: "1",
          hash: (0, _hashJsDefault.default).sha256,
          // Precomputed endomorphism
          beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
          lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
          basis: [
              {
                  a: "3086d221a7d46bcde86c90e49284eb15",
                  b: "-e4437ed6010e88286f547fa90abfe4c3"
              },
              {
                  a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
                  b: "3086d221a7d46bcde86c90e49284eb15"
              }
          ],
          gRed: false,
          g: [
              "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
              "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
              pre
          ]
      });
  });
  "use strict";
  function HmacDRBG(options) {
      if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;
      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;
      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;
      var entropy = utils_1.toArray(options.entropy, options.entropyEnc || "hex");
      var nonce = utils_1.toArray(options.nonce, options.nonceEnc || "hex");
      var pers = utils_1.toArray(options.pers, options.persEnc || "hex");
      minimalisticAssert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
      this._init(entropy, nonce, pers);
  }
  var hmacDrbg = HmacDRBG;
  HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);
      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for(var i = 0; i < this.V.length; i++){
          this.K[i] = 0x00;
          this.V[i] = 0x01;
      }
      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 0x1000000000000; // 2^48
  };
  HmacDRBG.prototype._hmac = function hmac() {
      return new (0, _hashJsDefault.default).hmac(this.hash, this.K);
  };
  HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac().update(this.V).update([
          0x00
      ]);
      if (seed) kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed) return;
      this.K = this._hmac().update(this.V).update([
          0x01
      ]).update(seed).digest();
      this.V = this._hmac().update(this.V).digest();
  };
  HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      // Optional entropy enc
      if (typeof entropyEnc !== "string") {
          addEnc = add;
          add = entropyEnc;
          entropyEnc = null;
      }
      entropy = utils_1.toArray(entropy, entropyEnc);
      add = utils_1.toArray(add, addEnc);
      minimalisticAssert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
      this._update(entropy.concat(add || []));
      this._reseed = 1;
  };
  HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
      // Optional encoding
      if (typeof enc !== "string") {
          addEnc = add;
          add = enc;
          enc = null;
      }
      // Optional additional data
      if (add) {
          add = utils_1.toArray(add, addEnc || "hex");
          this._update(add);
      }
      var temp = [];
      while(temp.length < len){
          this.V = this._hmac().update(this.V).digest();
          temp = temp.concat(this.V);
      }
      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
      return utils_1.encode(res, enc);
  };
  "use strict";
  var assert$3 = utils_1$1.assert;
  function KeyPair(ec, options) {
      this.ec = ec;
      this.priv = null;
      this.pub = null;
      // KeyPair(ec, { priv: ..., pub: ... })
      if (options.priv) this._importPrivate(options.priv, options.privEnc);
      if (options.pub) this._importPublic(options.pub, options.pubEnc);
  }
  var key = KeyPair;
  KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
      if (pub instanceof KeyPair) return pub;
      return new KeyPair(ec, {
          pub: pub,
          pubEnc: enc
      });
  };
  KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
      if (priv instanceof KeyPair) return priv;
      return new KeyPair(ec, {
          priv: priv,
          privEnc: enc
      });
  };
  KeyPair.prototype.validate = function validate() {
      var pub = this.getPublic();
      if (pub.isInfinity()) return {
          result: false,
          reason: "Invalid public key"
      };
      if (!pub.validate()) return {
          result: false,
          reason: "Public key is not a point"
      };
      if (!pub.mul(this.ec.curve.n).isInfinity()) return {
          result: false,
          reason: "Public key * N != O"
      };
      return {
          result: true,
          reason: null
      };
  };
  KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      // compact is optional argument
      if (typeof compact === "string") {
          enc = compact;
          compact = null;
      }
      if (!this.pub) this.pub = this.ec.g.mul(this.priv);
      if (!enc) return this.pub;
      return this.pub.encode(enc, compact);
  };
  KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === "hex") return this.priv.toString(16, 2);
      else return this.priv;
  };
  KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new (0, _bnJsDefault.default)(key, enc || 16);
      // Ensure that the priv won't be bigger than n, otherwise we may fail
      // in fixed multiplication method
      this.priv = this.priv.umod(this.ec.curve.n);
  };
  KeyPair.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
          // Montgomery points only have an `x` coordinate.
          // Weierstrass/Edwards points on the other hand have both `x` and
          // `y` coordinates.
          if (this.ec.curve.type === "mont") assert$3(key.x, "Need x coordinate");
          else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") assert$3(key.x && key.y, "Need both x and y coordinate");
          this.pub = this.ec.curve.point(key.x, key.y);
          return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
  };
  // ECDH
  KeyPair.prototype.derive = function derive(pub) {
      if (!pub.validate()) assert$3(pub.validate(), "public point not validated");
      return pub.mul(this.priv).getX();
  };
  // ECDSA
  KeyPair.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
  };
  KeyPair.prototype.verify = function verify(msg, signature) {
      return this.ec.verify(msg, signature, this);
  };
  KeyPair.prototype.inspect = function inspect() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
  };
  "use strict";
  var assert$4 = utils_1$1.assert;
  function Signature(options, enc) {
      if (options instanceof Signature) return options;
      if (this._importDER(options, enc)) return;
      assert$4(options.r && options.s, "Signature without r or s");
      this.r = new (0, _bnJsDefault.default)(options.r, 16);
      this.s = new (0, _bnJsDefault.default)(options.s, 16);
      if (options.recoveryParam === undefined) this.recoveryParam = null;
      else this.recoveryParam = options.recoveryParam;
  }
  var signature = Signature;
  function Position() {
      this.place = 0;
  }
  function getLength(buf, p) {
      var initial = buf[p.place++];
      if (!(initial & 0x80)) return initial;
      var octetLen = initial & 0xf;
      // Indefinite length or overflow
      if (octetLen === 0 || octetLen > 4) return false;
      var val = 0;
      for(var i = 0, off = p.place; i < octetLen; i++, off++){
          val <<= 8;
          val |= buf[off];
          val >>>= 0;
      }
      // Leading zeroes
      if (val <= 0x7f) return false;
      p.place = off;
      return val;
  }
  function rmPadding(buf) {
      var i = 0;
      var len = buf.length - 1;
      while(!buf[i] && !(buf[i + 1] & 0x80) && i < len)i++;
      if (i === 0) return buf;
      return buf.slice(i);
  }
  Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils_1$1.toArray(data, enc);
      var p = new Position();
      if (data[p.place++] !== 0x30) return false;
      var len = getLength(data, p);
      if (len === false) return false;
      if (len + p.place !== data.length) return false;
      if (data[p.place++] !== 0x02) return false;
      var rlen = getLength(data, p);
      if (rlen === false) return false;
      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 0x02) return false;
      var slen = getLength(data, p);
      if (slen === false) return false;
      if (data.length !== slen + p.place) return false;
      var s = data.slice(p.place, slen + p.place);
      if (r[0] === 0) {
          if (r[1] & 0x80) r = r.slice(1);
          else // Leading zeroes
          return false;
      }
      if (s[0] === 0) {
          if (s[1] & 0x80) s = s.slice(1);
          else // Leading zeroes
          return false;
      }
      this.r = new (0, _bnJsDefault.default)(r);
      this.s = new (0, _bnJsDefault.default)(s);
      this.recoveryParam = null;
      return true;
  };
  function constructLength(arr, len) {
      if (len < 0x80) {
          arr.push(len);
          return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 0x80);
      while(--octets)arr.push(len >>> (octets << 3) & 0xff);
      arr.push(len);
  }
  Signature.prototype.toDER = function toDER(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray();
      // Pad values
      if (r[0] & 0x80) r = [
          0
      ].concat(r);
      // Pad values
      if (s[0] & 0x80) s = [
          0
      ].concat(s);
      r = rmPadding(r);
      s = rmPadding(s);
      while(!s[0] && !(s[1] & 0x80))s = s.slice(1);
      var arr = [
          0x02
      ];
      constructLength(arr, r.length);
      arr = arr.concat(r);
      arr.push(0x02);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [
          0x30
      ];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils_1$1.encode(res, enc);
  };
  "use strict";
  var rand = /*RicMoo:ethers:require(brorand)*/ function() {
      throw new Error("unsupported");
  };
  var assert$5 = utils_1$1.assert;
  function EC(options) {
      if (!(this instanceof EC)) return new EC(options);
      // Shortcut `elliptic.ec(curve-name)`
      if (typeof options === "string") {
          assert$5(Object.prototype.hasOwnProperty.call(curves_1, options), "Unknown curve " + options);
          options = curves_1[options];
      }
      // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
      if (options instanceof curves_1.PresetCurve) options = {
          curve: options
      };
      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;
      // Point on curve
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);
      // Hash for function for DRBG
      this.hash = options.hash || options.curve.hash;
  }
  var ec = EC;
  EC.prototype.keyPair = function keyPair(options) {
      return new key(this, options);
  };
  EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return key.fromPrivate(this, priv, enc);
  };
  EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return key.fromPublic(this, pub, enc);
  };
  EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options) options = {};
      // Instantiate Hmac_DRBG
      var drbg = new hmacDrbg({
          hash: this.hash,
          pers: options.pers,
          persEnc: options.persEnc || "utf8",
          entropy: options.entropy || rand(this.hash.hmacStrength),
          entropyEnc: options.entropy && options.entropyEnc || "utf8",
          nonce: this.n.toArray()
      });
      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new (0, _bnJsDefault.default)(2));
      for(;;){
          var priv = new (0, _bnJsDefault.default)(drbg.generate(bytes));
          if (priv.cmp(ns2) > 0) continue;
          priv.iaddn(1);
          return this.keyFromPrivate(priv);
      }
  };
  EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0) msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
      else return msg;
  };
  EC.prototype.sign = function sign(msg, key, enc, options) {
      if (typeof enc === "object") {
          options = enc;
          enc = null;
      }
      if (!options) options = {};
      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(new (0, _bnJsDefault.default)(msg, 16));
      // Zero-extend key to provide enough entropy
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray("be", bytes);
      // Zero-extend nonce to have the same byte size as N
      var nonce = msg.toArray("be", bytes);
      // Instantiate Hmac_DRBG
      var drbg = new hmacDrbg({
          hash: this.hash,
          entropy: bkey,
          nonce: nonce,
          pers: options.pers,
          persEnc: options.persEnc || "utf8"
      });
      // Number of bytes to generate
      var ns1 = this.n.sub(new (0, _bnJsDefault.default)(1));
      for(var iter = 0;; iter++){
          var k = options.k ? options.k(iter) : new (0, _bnJsDefault.default)(drbg.generate(this.n.byteLength()));
          k = this._truncateToN(k, true);
          if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
          var kp = this.g.mul(k);
          if (kp.isInfinity()) continue;
          var kpX = kp.getX();
          var r = kpX.umod(this.n);
          if (r.cmpn(0) === 0) continue;
          var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
          s = s.umod(this.n);
          if (s.cmpn(0) === 0) continue;
          var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
          // Use complement of `s`, if it is > `n / 2`
          if (options.canonical && s.cmp(this.nh) > 0) {
              s = this.n.sub(s);
              recoveryParam ^= 1;
          }
          return new signature({
              r: r,
              s: s,
              recoveryParam: recoveryParam
          });
      }
  };
  EC.prototype.verify = function verify(msg, signature$1, key, enc) {
      msg = this._truncateToN(new (0, _bnJsDefault.default)(msg, 16));
      key = this.keyFromPublic(key, enc);
      signature$1 = new signature(signature$1, "hex");
      // Perform primitive values validation
      var r = signature$1.r;
      var s = signature$1.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;
      // Validate signature
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);
      var p;
      if (!this.curve._maxwellTrick) {
          p = this.g.mulAdd(u1, key.getPublic(), u2);
          if (p.isInfinity()) return false;
          return p.getX().umod(this.n).cmp(r) === 0;
      }
      // NOTE: Greg Maxwell's trick, inspired by:
      // https://git.io/vad3K
      p = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity()) return false;
      // Compare `p.x` of Jacobian point with `r`,
      // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
      // inverse of `p.z^2`
      return p.eqXToP(r);
  };
  EC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {
      assert$5((3 & j) === j, "The recovery param is more than two bits");
      signature$1 = new signature(signature$1, enc);
      var n = this.n;
      var e = new (0, _bnJsDefault.default)(msg);
      var r = signature$1.r;
      var s = signature$1.s;
      // A set LSB signifies that the y-coordinate is odd
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error("Unable to find sencond key candinate");
      // 1.1. Let x = r + jn.
      if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
      else r = this.curve.pointFromX(r, isYOdd);
      var rInv = signature$1.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);
      // 1.6.1 Compute Q = r^-1 (sR -  eG)
      //               Q = r^-1 (sR + -eG)
      return this.g.mulAdd(s1, r, s2);
  };
  EC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {
      signature$1 = new signature(signature$1, enc);
      if (signature$1.recoveryParam !== null) return signature$1.recoveryParam;
      for(var i = 0; i < 4; i++){
          var Qprime;
          try {
              Qprime = this.recoverPubKey(e, signature$1, i);
          } catch (e) {
              continue;
          }
          if (Qprime.eq(Q)) return i;
      }
      throw new Error("Unable to find valid recovery factor");
  };
  var elliptic_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var elliptic = exports;
      elliptic.version = "6.5.4";
      elliptic.utils = utils_1$1;
      elliptic.rand = /*RicMoo:ethers:require(brorand)*/ function() {
          throw new Error("unsupported");
      };
      elliptic.curve = curve_1;
      elliptic.curves = curves_1;
      // Protocols
      elliptic.ec = ec;
      elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/ null;
  });
  var EC$1 = elliptic_1.ec;
  
  },{"bn.js":"cz6bo","hash.js":"gOEGU","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"cz6bo":[function(require,module,exports) {
  (function(module1, exports) {
      "use strict";
      // Utils
      function assert(val, msg) {
          if (!val) throw new Error(msg || "Assertion failed");
      }
      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
      }
      // BN
      function BN(number, base, endian) {
          if (BN.isBN(number)) return number;
          this.negative = 0;
          this.words = null;
          this.length = 0;
          // Reduction context
          this.red = null;
          if (number !== null) {
              if (base === "le" || base === "be") {
                  endian = base;
                  base = 10;
              }
              this._init(number || 0, base || 10, endian || "be");
          }
      }
      if (typeof module1 === "object") module1.exports = BN;
      else exports.BN = BN;
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer;
      try {
          if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
          else Buffer = require("f86a03d8f0aa65f4").Buffer;
      } catch (e) {}
      BN.isBN = function isBN(num) {
          if (num instanceof BN) return true;
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max(left, right) {
          if (left.cmp(right) > 0) return left;
          return right;
      };
      BN.min = function min(left, right) {
          if (left.cmp(right) < 0) return left;
          return right;
      };
      BN.prototype._init = function init(number, base, endian) {
          if (typeof number === "number") return this._initNumber(number, base, endian);
          if (typeof number === "object") return this._initArray(number, base, endian);
          if (base === "hex") base = 16;
          assert(base === (base | 0) && base >= 2 && base <= 36);
          number = number.toString().replace(/\s+/g, "");
          var start = 0;
          if (number[0] === "-") {
              start++;
              this.negative = 1;
          }
          if (start < number.length) {
              if (base === 16) this._parseHex(number, start, endian);
              else {
                  this._parseBase(number, base, start);
                  if (endian === "le") this._initArray(this.toArray(), base, endian);
              }
          }
      };
      BN.prototype._initNumber = function _initNumber(number, base, endian) {
          if (number < 0) {
              this.negative = 1;
              number = -number;
          }
          if (number < 0x4000000) {
              this.words = [
                  number & 0x3ffffff
              ];
              this.length = 1;
          } else if (number < 0x10000000000000) {
              this.words = [
                  number & 0x3ffffff,
                  number / 0x4000000 & 0x3ffffff
              ];
              this.length = 2;
          } else {
              assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
              this.words = [
                  number & 0x3ffffff,
                  number / 0x4000000 & 0x3ffffff,
                  1
              ];
              this.length = 3;
          }
          if (endian !== "le") return;
          // Reverse the bytes
          this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initArray = function _initArray(number, base, endian) {
          // Perhaps a Uint8Array
          assert(typeof number.length === "number");
          if (number.length <= 0) {
              this.words = [
                  0
              ];
              this.length = 1;
              return this;
          }
          this.length = Math.ceil(number.length / 3);
          this.words = new Array(this.length);
          for(var i = 0; i < this.length; i++)this.words[i] = 0;
          var j, w;
          var off = 0;
          if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
              w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
              this.words[j] |= w << off & 0x3ffffff;
              this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
              off += 24;
              if (off >= 26) {
                  off -= 26;
                  j++;
              }
          }
          else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
              w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
              this.words[j] |= w << off & 0x3ffffff;
              this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
              off += 24;
              if (off >= 26) {
                  off -= 26;
                  j++;
              }
          }
          return this._strip();
      };
      function parseHex4Bits(string, index) {
          var c = string.charCodeAt(index);
          // '0' - '9'
          if (c >= 48 && c <= 57) return c - 48;
          else if (c >= 65 && c <= 70) return c - 55;
          else if (c >= 97 && c <= 102) return c - 87;
          else assert(false, "Invalid character in " + string);
      }
      function parseHexByte(string, lowerBound, index) {
          var r = parseHex4Bits(string, index);
          if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
          return r;
      }
      BN.prototype._parseHex = function _parseHex(number, start, endian) {
          // Create possibly bigger array to ensure that it fits the number
          this.length = Math.ceil((number.length - start) / 6);
          this.words = new Array(this.length);
          for(var i = 0; i < this.length; i++)this.words[i] = 0;
          // 24-bits chunks
          var off = 0;
          var j = 0;
          var w;
          if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
              w = parseHexByte(number, start, i) << off;
              this.words[j] |= w & 0x3ffffff;
              if (off >= 18) {
                  off -= 18;
                  j += 1;
                  this.words[j] |= w >>> 26;
              } else off += 8;
          }
          else {
              var parseLength = number.length - start;
              for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                  w = parseHexByte(number, start, i) << off;
                  this.words[j] |= w & 0x3ffffff;
                  if (off >= 18) {
                      off -= 18;
                      j += 1;
                      this.words[j] |= w >>> 26;
                  } else off += 8;
              }
          }
          this._strip();
      };
      function parseBase(str, start, end, mul) {
          var r = 0;
          var b = 0;
          var len = Math.min(str.length, end);
          for(var i = start; i < len; i++){
              var c = str.charCodeAt(i) - 48;
              r *= mul;
              // 'a'
              if (c >= 49) b = c - 49 + 0xa;
              else if (c >= 17) b = c - 17 + 0xa;
              else b = c;
              assert(c >= 0 && b < mul, "Invalid character");
              r += b;
          }
          return r;
      }
      BN.prototype._parseBase = function _parseBase(number, base, start) {
          // Initialize as zero
          this.words = [
              0
          ];
          this.length = 1;
          // Find length of limb in base
          for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
          limbLen--;
          limbPow = limbPow / base | 0;
          var total = number.length - start;
          var mod = total % limbLen;
          var end = Math.min(total, total - mod) + start;
          var word = 0;
          for(var i = start; i < end; i += limbLen){
              word = parseBase(number, i, i + limbLen, base);
              this.imuln(limbPow);
              if (this.words[0] + word < 0x4000000) this.words[0] += word;
              else this._iaddn(word);
          }
          if (mod !== 0) {
              var pow = 1;
              word = parseBase(number, i, number.length, base);
              for(i = 0; i < mod; i++)pow *= base;
              this.imuln(pow);
              if (this.words[0] + word < 0x4000000) this.words[0] += word;
              else this._iaddn(word);
          }
          this._strip();
      };
      BN.prototype.copy = function copy(dest) {
          dest.words = new Array(this.length);
          for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
      };
      function move(dest, src) {
          dest.words = src.words;
          dest.length = src.length;
          dest.negative = src.negative;
          dest.red = src.red;
      }
      BN.prototype._move = function _move(dest) {
          move(dest, this);
      };
      BN.prototype.clone = function clone() {
          var r = new BN(null);
          this.copy(r);
          return r;
      };
      BN.prototype._expand = function _expand(size) {
          while(this.length < size)this.words[this.length++] = 0;
          return this;
      };
      // Remove leading `0` from `this`
      BN.prototype._strip = function strip() {
          while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
          return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
          // -0 = 0
          if (this.length === 1 && this.words[0] === 0) this.negative = 0;
          return this;
      };
      // Check Symbol.for because not everywhere where Symbol defined
      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") try {
          BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
      } catch (e) {
          BN.prototype.inspect = inspect;
      }
      else BN.prototype.inspect = inspect;
      function inspect() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      /*
  
    var zeros = [];
    var groupSizes = [];
    var groupBases = [];
  
    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }
  
    */ var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
      ];
      var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
      ];
      var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          10000000,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64000000,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          24300000,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
      ];
      BN.prototype.toString = function toString(base, padding) {
          base = base || 10;
          padding = padding | 0 || 1;
          var out;
          if (base === 16 || base === "hex") {
              out = "";
              var off = 0;
              var carry = 0;
              for(var i = 0; i < this.length; i++){
                  var w = this.words[i];
                  var word = ((w << off | carry) & 0xffffff).toString(16);
                  carry = w >>> 24 - off & 0xffffff;
                  off += 2;
                  if (off >= 26) {
                      off -= 26;
                      i--;
                  }
                  if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                  else out = word + out;
              }
              if (carry !== 0) out = carry.toString(16) + out;
              while(out.length % padding !== 0)out = "0" + out;
              if (this.negative !== 0) out = "-" + out;
              return out;
          }
          if (base === (base | 0) && base >= 2 && base <= 36) {
              // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
              var groupSize = groupSizes[base];
              // var groupBase = Math.pow(base, groupSize);
              var groupBase = groupBases[base];
              out = "";
              var c = this.clone();
              c.negative = 0;
              while(!c.isZero()){
                  var r = c.modrn(groupBase).toString(base);
                  c = c.idivn(groupBase);
                  if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                  else out = r + out;
              }
              if (this.isZero()) out = "0" + out;
              while(out.length % padding !== 0)out = "0" + out;
              if (this.negative !== 0) out = "-" + out;
              return out;
          }
          assert(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) ret += this.words[1] * 0x4000000;
          else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + this.words[1] * 0x4000000;
          else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
          return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
          return this.toString(16, 2);
      };
      if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer, endian, length);
      };
      BN.prototype.toArray = function toArray(endian, length) {
          return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate(ArrayType, size) {
          if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
          return new ArrayType(size);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
          this._strip();
          var byteLength = this.byteLength();
          var reqLength = length || Math.max(1, byteLength);
          assert(byteLength <= reqLength, "byte array longer than desired length");
          assert(reqLength > 0, "Requested array length <= 0");
          var res = allocate(ArrayType, reqLength);
          var postfix = endian === "le" ? "LE" : "BE";
          this["_toArrayLike" + postfix](res, byteLength);
          return res;
      };
      BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
          var position = 0;
          var carry = 0;
          for(var i = 0, shift = 0; i < this.length; i++){
              var word = this.words[i] << shift | carry;
              res[position++] = word & 0xff;
              if (position < res.length) res[position++] = word >> 8 & 0xff;
              if (position < res.length) res[position++] = word >> 16 & 0xff;
              if (shift === 6) {
                  if (position < res.length) res[position++] = word >> 24 & 0xff;
                  carry = 0;
                  shift = 0;
              } else {
                  carry = word >>> 24;
                  shift += 2;
              }
          }
          if (position < res.length) {
              res[position++] = carry;
              while(position < res.length)res[position++] = 0;
          }
      };
      BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
          var position = res.length - 1;
          var carry = 0;
          for(var i = 0, shift = 0; i < this.length; i++){
              var word = this.words[i] << shift | carry;
              res[position--] = word & 0xff;
              if (position >= 0) res[position--] = word >> 8 & 0xff;
              if (position >= 0) res[position--] = word >> 16 & 0xff;
              if (shift === 6) {
                  if (position >= 0) res[position--] = word >> 24 & 0xff;
                  carry = 0;
                  shift = 0;
              } else {
                  carry = word >>> 24;
                  shift += 2;
              }
          }
          if (position >= 0) {
              res[position--] = carry;
              while(position >= 0)res[position--] = 0;
          }
      };
      if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
      };
      else BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
              r += 13;
              t >>>= 13;
          }
          if (t >= 0x40) {
              r += 7;
              t >>>= 7;
          }
          if (t >= 0x8) {
              r += 4;
              t >>>= 4;
          }
          if (t >= 0x02) {
              r += 2;
              t >>>= 2;
          }
          return r + t;
      };
      BN.prototype._zeroBits = function _zeroBits(w) {
          // Short-cut
          if (w === 0) return 26;
          var t = w;
          var r = 0;
          if ((t & 0x1fff) === 0) {
              r += 13;
              t >>>= 13;
          }
          if ((t & 0x7f) === 0) {
              r += 7;
              t >>>= 7;
          }
          if ((t & 0xf) === 0) {
              r += 4;
              t >>>= 4;
          }
          if ((t & 0x3) === 0) {
              r += 2;
              t >>>= 2;
          }
          if ((t & 0x1) === 0) r++;
          return r;
      };
      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength() {
          var w = this.words[this.length - 1];
          var hi = this._countBits(w);
          return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
          var w = new Array(num.bitLength());
          for(var bit = 0; bit < w.length; bit++){
              var off = bit / 26 | 0;
              var wbit = bit % 26;
              w[bit] = num.words[off] >>> wbit & 0x01;
          }
          return w;
      }
      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits() {
          if (this.isZero()) return 0;
          var r = 0;
          for(var i = 0; i < this.length; i++){
              var b = this._zeroBits(this.words[i]);
              r += b;
              if (b !== 26) break;
          }
          return r;
      };
      BN.prototype.byteLength = function byteLength() {
          return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
          return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
          return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
      };
      // Return negative clone of `this`
      BN.prototype.neg = function neg() {
          return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
          if (!this.isZero()) this.negative ^= 1;
          return this;
      };
      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor(num) {
          while(this.length < num.length)this.words[this.length++] = 0;
          for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
          return this._strip();
      };
      BN.prototype.ior = function ior(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuor(num);
      };
      // Or `num` with `this`
      BN.prototype.or = function or(num) {
          if (this.length > num.length) return this.clone().ior(num);
          return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
          if (this.length > num.length) return this.clone().iuor(num);
          return num.clone().iuor(this);
      };
      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand(num) {
          // b = min-length(num, this)
          var b;
          if (this.length > num.length) b = num;
          else b = this;
          for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
          this.length = b.length;
          return this._strip();
      };
      BN.prototype.iand = function iand(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuand(num);
      };
      // And `num` with `this`
      BN.prototype.and = function and(num) {
          if (this.length > num.length) return this.clone().iand(num);
          return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
          if (this.length > num.length) return this.clone().iuand(num);
          return num.clone().iuand(this);
      };
      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor(num) {
          // a.length > b.length
          var a;
          var b;
          if (this.length > num.length) {
              a = this;
              b = num;
          } else {
              a = num;
              b = this;
          }
          for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
          if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
          this.length = a.length;
          return this._strip();
      };
      BN.prototype.ixor = function ixor(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuxor(num);
      };
      // Xor `num` with `this`
      BN.prototype.xor = function xor(num) {
          if (this.length > num.length) return this.clone().ixor(num);
          return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
          if (this.length > num.length) return this.clone().iuxor(num);
          return num.clone().iuxor(this);
      };
      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn(width) {
          assert(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          // Extend the buffer with leading zeroes
          this._expand(bytesNeeded);
          if (bitsLeft > 0) bytesNeeded--;
          // Handle complete words
          for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
          // Handle the residue
          if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
          // And remove leading zeroes
          return this._strip();
      };
      BN.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
      };
      // Set `bit` of `this`
      BN.prototype.setn = function setn(bit, val) {
          assert(typeof bit === "number" && bit >= 0);
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off + 1);
          if (val) this.words[off] = this.words[off] | 1 << wbit;
          else this.words[off] = this.words[off] & ~(1 << wbit);
          return this._strip();
      };
      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd(num) {
          var r;
          // negative + positive
          if (this.negative !== 0 && num.negative === 0) {
              this.negative = 0;
              r = this.isub(num);
              this.negative ^= 1;
              return this._normSign();
          // positive + negative
          } else if (this.negative === 0 && num.negative !== 0) {
              num.negative = 0;
              r = this.isub(num);
              num.negative = 1;
              return r._normSign();
          }
          // a.length > b.length
          var a, b;
          if (this.length > num.length) {
              a = this;
              b = num;
          } else {
              a = num;
              b = this;
          }
          var carry = 0;
          for(var i = 0; i < b.length; i++){
              r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
              this.words[i] = r & 0x3ffffff;
              carry = r >>> 26;
          }
          for(; carry !== 0 && i < a.length; i++){
              r = (a.words[i] | 0) + carry;
              this.words[i] = r & 0x3ffffff;
              carry = r >>> 26;
          }
          this.length = a.length;
          if (carry !== 0) {
              this.words[this.length] = carry;
              this.length++;
          // Copy the rest of the words
          } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
          return this;
      };
      // Add `num` to `this`
      BN.prototype.add = function add(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
              num.negative = 0;
              res = this.sub(num);
              num.negative ^= 1;
              return res;
          } else if (num.negative === 0 && this.negative !== 0) {
              this.negative = 0;
              res = num.sub(this);
              this.negative = 1;
              return res;
          }
          if (this.length > num.length) return this.clone().iadd(num);
          return num.clone().iadd(this);
      };
      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub(num) {
          // this - (-num) = this + num
          if (num.negative !== 0) {
              num.negative = 0;
              var r = this.iadd(num);
              num.negative = 1;
              return r._normSign();
          // -this - num = -(this + num)
          } else if (this.negative !== 0) {
              this.negative = 0;
              this.iadd(num);
              this.negative = 1;
              return this._normSign();
          }
          // At this point both numbers are positive
          var cmp = this.cmp(num);
          // Optimization - zeroify
          if (cmp === 0) {
              this.negative = 0;
              this.length = 1;
              this.words[0] = 0;
              return this;
          }
          // a > b
          var a, b;
          if (cmp > 0) {
              a = this;
              b = num;
          } else {
              a = num;
              b = this;
          }
          var carry = 0;
          for(var i = 0; i < b.length; i++){
              r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
              carry = r >> 26;
              this.words[i] = r & 0x3ffffff;
          }
          for(; carry !== 0 && i < a.length; i++){
              r = (a.words[i] | 0) + carry;
              carry = r >> 26;
              this.words[i] = r & 0x3ffffff;
          }
          // Copy rest of the words
          if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
          this.length = Math.max(this.length, i);
          if (a !== this) this.negative = 1;
          return this._strip();
      };
      // Subtract `num` from `this`
      BN.prototype.sub = function sub(num) {
          return this.clone().isub(num);
      };
      function smallMulTo(self, num, out) {
          out.negative = num.negative ^ self.negative;
          var len = self.length + num.length | 0;
          out.length = len;
          len = len - 1 | 0;
          // Peel one iteration (compiler can't do it, because of code complexity)
          var a = self.words[0] | 0;
          var b = num.words[0] | 0;
          var r = a * b;
          var lo = r & 0x3ffffff;
          var carry = r / 0x4000000 | 0;
          out.words[0] = lo;
          for(var k = 1; k < len; k++){
              // Sum all words with the same `i + j = k` and accumulate `ncarry`,
              // note that ncarry could be >= 0x3ffffff
              var ncarry = carry >>> 26;
              var rword = carry & 0x3ffffff;
              var maxJ = Math.min(k, num.length - 1);
              for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                  var i = k - j | 0;
                  a = self.words[i] | 0;
                  b = num.words[j] | 0;
                  r = a * b + rword;
                  ncarry += r / 0x4000000 | 0;
                  rword = r & 0x3ffffff;
              }
              out.words[k] = rword | 0;
              carry = ncarry | 0;
          }
          if (carry !== 0) out.words[k] = carry | 0;
          else out.length--;
          return out._strip();
      }
      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo(self, num, out) {
          var a = self.words;
          var b = num.words;
          var o = out.words;
          var c = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a[0] | 0;
          var al0 = a0 & 0x1fff;
          var ah0 = a0 >>> 13;
          var a1 = a[1] | 0;
          var al1 = a1 & 0x1fff;
          var ah1 = a1 >>> 13;
          var a2 = a[2] | 0;
          var al2 = a2 & 0x1fff;
          var ah2 = a2 >>> 13;
          var a3 = a[3] | 0;
          var al3 = a3 & 0x1fff;
          var ah3 = a3 >>> 13;
          var a4 = a[4] | 0;
          var al4 = a4 & 0x1fff;
          var ah4 = a4 >>> 13;
          var a5 = a[5] | 0;
          var al5 = a5 & 0x1fff;
          var ah5 = a5 >>> 13;
          var a6 = a[6] | 0;
          var al6 = a6 & 0x1fff;
          var ah6 = a6 >>> 13;
          var a7 = a[7] | 0;
          var al7 = a7 & 0x1fff;
          var ah7 = a7 >>> 13;
          var a8 = a[8] | 0;
          var al8 = a8 & 0x1fff;
          var ah8 = a8 >>> 13;
          var a9 = a[9] | 0;
          var al9 = a9 & 0x1fff;
          var ah9 = a9 >>> 13;
          var b0 = b[0] | 0;
          var bl0 = b0 & 0x1fff;
          var bh0 = b0 >>> 13;
          var b1 = b[1] | 0;
          var bl1 = b1 & 0x1fff;
          var bh1 = b1 >>> 13;
          var b2 = b[2] | 0;
          var bl2 = b2 & 0x1fff;
          var bh2 = b2 >>> 13;
          var b3 = b[3] | 0;
          var bl3 = b3 & 0x1fff;
          var bh3 = b3 >>> 13;
          var b4 = b[4] | 0;
          var bl4 = b4 & 0x1fff;
          var bh4 = b4 >>> 13;
          var b5 = b[5] | 0;
          var bl5 = b5 & 0x1fff;
          var bh5 = b5 >>> 13;
          var b6 = b[6] | 0;
          var bl6 = b6 & 0x1fff;
          var bh6 = b6 >>> 13;
          var b7 = b[7] | 0;
          var bl7 = b7 & 0x1fff;
          var bh7 = b7 >>> 13;
          var b8 = b[8] | 0;
          var bl8 = b8 & 0x1fff;
          var bh8 = b8 >>> 13;
          var b9 = b[9] | 0;
          var bl9 = b9 & 0x1fff;
          var bh9 = b9 >>> 13;
          out.negative = self.negative ^ num.negative;
          out.length = 19;
          /* k = 0 */ lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
          w0 &= 0x3ffffff;
          /* k = 1 */ lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi = Math.imul(ah1, bh0);
          lo = lo + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi = hi + Math.imul(ah0, bh1) | 0;
          var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 0x3ffffff;
          /* k = 2 */ lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi = Math.imul(ah2, bh0);
          lo = lo + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi = hi + Math.imul(ah1, bh1) | 0;
          lo = lo + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi = hi + Math.imul(ah0, bh2) | 0;
          var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
          w2 &= 0x3ffffff;
          /* k = 3 */ lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi = Math.imul(ah3, bh0);
          lo = lo + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi = hi + Math.imul(ah2, bh1) | 0;
          lo = lo + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi = hi + Math.imul(ah1, bh2) | 0;
          lo = lo + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi = hi + Math.imul(ah0, bh3) | 0;
          var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 0x3ffffff;
          /* k = 4 */ lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi = Math.imul(ah4, bh0);
          lo = lo + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi = hi + Math.imul(ah3, bh1) | 0;
          lo = lo + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi = hi + Math.imul(ah2, bh2) | 0;
          lo = lo + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi = hi + Math.imul(ah1, bh3) | 0;
          lo = lo + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi = hi + Math.imul(ah0, bh4) | 0;
          var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 0x3ffffff;
          /* k = 5 */ lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi = Math.imul(ah5, bh0);
          lo = lo + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi = hi + Math.imul(ah4, bh1) | 0;
          lo = lo + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi = hi + Math.imul(ah3, bh2) | 0;
          lo = lo + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi = hi + Math.imul(ah2, bh3) | 0;
          lo = lo + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi = hi + Math.imul(ah1, bh4) | 0;
          lo = lo + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi = hi + Math.imul(ah0, bh5) | 0;
          var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 0x3ffffff;
          /* k = 6 */ lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi = Math.imul(ah6, bh0);
          lo = lo + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi = hi + Math.imul(ah5, bh1) | 0;
          lo = lo + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi = hi + Math.imul(ah4, bh2) | 0;
          lo = lo + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi = hi + Math.imul(ah3, bh3) | 0;
          lo = lo + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi = hi + Math.imul(ah2, bh4) | 0;
          lo = lo + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi = hi + Math.imul(ah1, bh5) | 0;
          lo = lo + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi = hi + Math.imul(ah0, bh6) | 0;
          var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 0x3ffffff;
          /* k = 7 */ lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi = Math.imul(ah7, bh0);
          lo = lo + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi = hi + Math.imul(ah6, bh1) | 0;
          lo = lo + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi = hi + Math.imul(ah5, bh2) | 0;
          lo = lo + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi = hi + Math.imul(ah4, bh3) | 0;
          lo = lo + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi = hi + Math.imul(ah3, bh4) | 0;
          lo = lo + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi = hi + Math.imul(ah2, bh5) | 0;
          lo = lo + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi = hi + Math.imul(ah1, bh6) | 0;
          lo = lo + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi = hi + Math.imul(ah0, bh7) | 0;
          var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 0x3ffffff;
          /* k = 8 */ lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi = Math.imul(ah8, bh0);
          lo = lo + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi = hi + Math.imul(ah7, bh1) | 0;
          lo = lo + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi = hi + Math.imul(ah6, bh2) | 0;
          lo = lo + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi = hi + Math.imul(ah5, bh3) | 0;
          lo = lo + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi = hi + Math.imul(ah4, bh4) | 0;
          lo = lo + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi = hi + Math.imul(ah3, bh5) | 0;
          lo = lo + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi = hi + Math.imul(ah2, bh6) | 0;
          lo = lo + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi = hi + Math.imul(ah1, bh7) | 0;
          lo = lo + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi = hi + Math.imul(ah0, bh8) | 0;
          var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 0x3ffffff;
          /* k = 9 */ lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi = Math.imul(ah9, bh0);
          lo = lo + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi = hi + Math.imul(ah8, bh1) | 0;
          lo = lo + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi = hi + Math.imul(ah7, bh2) | 0;
          lo = lo + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi = hi + Math.imul(ah6, bh3) | 0;
          lo = lo + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi = hi + Math.imul(ah5, bh4) | 0;
          lo = lo + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi = hi + Math.imul(ah4, bh5) | 0;
          lo = lo + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi = hi + Math.imul(ah3, bh6) | 0;
          lo = lo + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi = hi + Math.imul(ah2, bh7) | 0;
          lo = lo + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi = hi + Math.imul(ah1, bh8) | 0;
          lo = lo + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi = hi + Math.imul(ah0, bh9) | 0;
          var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 0x3ffffff;
          /* k = 10 */ lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi = Math.imul(ah9, bh1);
          lo = lo + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi = hi + Math.imul(ah8, bh2) | 0;
          lo = lo + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi = hi + Math.imul(ah7, bh3) | 0;
          lo = lo + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi = hi + Math.imul(ah6, bh4) | 0;
          lo = lo + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi = hi + Math.imul(ah5, bh5) | 0;
          lo = lo + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi = hi + Math.imul(ah4, bh6) | 0;
          lo = lo + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi = hi + Math.imul(ah3, bh7) | 0;
          lo = lo + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi = hi + Math.imul(ah2, bh8) | 0;
          lo = lo + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi = hi + Math.imul(ah1, bh9) | 0;
          var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 0x3ffffff;
          /* k = 11 */ lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi = Math.imul(ah9, bh2);
          lo = lo + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi = hi + Math.imul(ah8, bh3) | 0;
          lo = lo + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi = hi + Math.imul(ah7, bh4) | 0;
          lo = lo + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi = hi + Math.imul(ah6, bh5) | 0;
          lo = lo + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi = hi + Math.imul(ah5, bh6) | 0;
          lo = lo + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi = hi + Math.imul(ah4, bh7) | 0;
          lo = lo + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi = hi + Math.imul(ah3, bh8) | 0;
          lo = lo + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi = hi + Math.imul(ah2, bh9) | 0;
          var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 0x3ffffff;
          /* k = 12 */ lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi = Math.imul(ah9, bh3);
          lo = lo + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi = hi + Math.imul(ah8, bh4) | 0;
          lo = lo + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi = hi + Math.imul(ah7, bh5) | 0;
          lo = lo + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi = hi + Math.imul(ah6, bh6) | 0;
          lo = lo + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi = hi + Math.imul(ah5, bh7) | 0;
          lo = lo + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi = hi + Math.imul(ah4, bh8) | 0;
          lo = lo + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi = hi + Math.imul(ah3, bh9) | 0;
          var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 0x3ffffff;
          /* k = 13 */ lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi = Math.imul(ah9, bh4);
          lo = lo + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi = hi + Math.imul(ah8, bh5) | 0;
          lo = lo + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi = hi + Math.imul(ah7, bh6) | 0;
          lo = lo + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi = hi + Math.imul(ah6, bh7) | 0;
          lo = lo + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi = hi + Math.imul(ah5, bh8) | 0;
          lo = lo + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi = hi + Math.imul(ah4, bh9) | 0;
          var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 0x3ffffff;
          /* k = 14 */ lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi = Math.imul(ah9, bh5);
          lo = lo + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi = hi + Math.imul(ah8, bh6) | 0;
          lo = lo + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi = hi + Math.imul(ah7, bh7) | 0;
          lo = lo + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi = hi + Math.imul(ah6, bh8) | 0;
          lo = lo + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi = hi + Math.imul(ah5, bh9) | 0;
          var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 0x3ffffff;
          /* k = 15 */ lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi = Math.imul(ah9, bh6);
          lo = lo + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi = hi + Math.imul(ah8, bh7) | 0;
          lo = lo + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi = hi + Math.imul(ah7, bh8) | 0;
          lo = lo + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi = hi + Math.imul(ah6, bh9) | 0;
          var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 0x3ffffff;
          /* k = 16 */ lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi = Math.imul(ah9, bh7);
          lo = lo + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi = hi + Math.imul(ah8, bh8) | 0;
          lo = lo + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi = hi + Math.imul(ah7, bh9) | 0;
          var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 0x3ffffff;
          /* k = 17 */ lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi = Math.imul(ah9, bh8);
          lo = lo + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi = hi + Math.imul(ah8, bh9) | 0;
          var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 0x3ffffff;
          /* k = 18 */ lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 0x3ffffff;
          o[0] = w0;
          o[1] = w1;
          o[2] = w2;
          o[3] = w3;
          o[4] = w4;
          o[5] = w5;
          o[6] = w6;
          o[7] = w7;
          o[8] = w8;
          o[9] = w9;
          o[10] = w10;
          o[11] = w11;
          o[12] = w12;
          o[13] = w13;
          o[14] = w14;
          o[15] = w15;
          o[16] = w16;
          o[17] = w17;
          o[18] = w18;
          if (c !== 0) {
              o[19] = c;
              out.length++;
          }
          return out;
      };
      // Polyfill comb
      if (!Math.imul) comb10MulTo = smallMulTo;
      function bigMulTo(self, num, out) {
          out.negative = num.negative ^ self.negative;
          out.length = self.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for(var k = 0; k < out.length - 1; k++){
              // Sum all words with the same `i + j = k` and accumulate `ncarry`,
              // note that ncarry could be >= 0x3ffffff
              var ncarry = hncarry;
              hncarry = 0;
              var rword = carry & 0x3ffffff;
              var maxJ = Math.min(k, num.length - 1);
              for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                  var i = k - j;
                  var a = self.words[i] | 0;
                  var b = num.words[j] | 0;
                  var r = a * b;
                  var lo = r & 0x3ffffff;
                  ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                  lo = lo + rword | 0;
                  rword = lo & 0x3ffffff;
                  ncarry = ncarry + (lo >>> 26) | 0;
                  hncarry += ncarry >>> 26;
                  ncarry &= 0x3ffffff;
              }
              out.words[k] = rword;
              carry = ncarry;
              ncarry = hncarry;
          }
          if (carry !== 0) out.words[k] = carry;
          else out.length--;
          return out._strip();
      }
      function jumboMulTo(self, num, out) {
          // Temporary disable, see https://github.com/indutny/bn.js/issues/211
          // var fftm = new FFTM();
          // return fftm.mulp(self, num, out);
          return bigMulTo(self, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len = this.length + num.length;
          if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
          else if (len < 63) res = smallMulTo(this, num, out);
          else if (len < 1024) res = bigMulTo(this, num, out);
          else res = jumboMulTo(this, num, out);
          return res;
      };
      // Cooley-Tukey algorithm for FFT
      // slightly revisited to rely on looping instead of recursion
      function FFTM(x, y) {
          this.x = x;
          this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
          var t = new Array(N);
          var l = BN.prototype._countBits(N) - 1;
          for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
          return t;
      };
      // Returns binary-reversed representation of `x`
      FFTM.prototype.revBin = function revBin(x, l, N) {
          if (x === 0 || x === N - 1) return x;
          var rb = 0;
          for(var i = 0; i < l; i++){
              rb |= (x & 1) << l - i - 1;
              x >>= 1;
          }
          return rb;
      };
      // Performs "tweedling" phase, therefore 'emulating'
      // behaviour of the recursive algorithm
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
          for(var i = 0; i < N; i++){
              rtws[i] = rws[rbt[i]];
              itws[i] = iws[rbt[i]];
          }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
          this.permute(rbt, rws, iws, rtws, itws, N);
          for(var s = 1; s < N; s <<= 1){
              var l = s << 1;
              var rtwdf = Math.cos(2 * Math.PI / l);
              var itwdf = Math.sin(2 * Math.PI / l);
              for(var p = 0; p < N; p += l){
                  var rtwdf_ = rtwdf;
                  var itwdf_ = itwdf;
                  for(var j = 0; j < s; j++){
                      var re = rtws[p + j];
                      var ie = itws[p + j];
                      var ro = rtws[p + j + s];
                      var io = itws[p + j + s];
                      var rx = rtwdf_ * ro - itwdf_ * io;
                      io = rtwdf_ * io + itwdf_ * ro;
                      ro = rx;
                      rtws[p + j] = re + ro;
                      itws[p + j] = ie + io;
                      rtws[p + j + s] = re - ro;
                      itws[p + j + s] = ie - io;
                      /* jshint maxdepth : false */ if (j !== l) {
                          rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                          itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                          rtwdf_ = rx;
                      }
                  }
              }
          }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
          var N = Math.max(m, n) | 1;
          var odd = N & 1;
          var i = 0;
          for(N = N / 2 | 0; N; N = N >>> 1)i++;
          return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
          if (N <= 1) return;
          for(var i = 0; i < N / 2; i++){
              var t = rws[i];
              rws[i] = rws[N - i - 1];
              rws[N - i - 1] = t;
              t = iws[i];
              iws[i] = -iws[N - i - 1];
              iws[N - i - 1] = -t;
          }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
          var carry = 0;
          for(var i = 0; i < N / 2; i++){
              var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
              ws[i] = w & 0x3ffffff;
              if (w < 0x4000000) carry = 0;
              else carry = w / 0x4000000 | 0;
          }
          return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
          var carry = 0;
          for(var i = 0; i < len; i++){
              carry = carry + (ws[i] | 0);
              rws[2 * i] = carry & 0x1fff;
              carry = carry >>> 13;
              rws[2 * i + 1] = carry & 0x1fff;
              carry = carry >>> 13;
          }
          // Pad with zeroes
          for(i = 2 * len; i < N; ++i)rws[i] = 0;
          assert(carry === 0);
          assert((carry & -8192) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
          var ph = new Array(N);
          for(var i = 0; i < N; i++)ph[i] = 0;
          return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
          var N = 2 * this.guessLen13b(x.length, y.length);
          var rbt = this.makeRBT(N);
          var _ = this.stub(N);
          var rws = new Array(N);
          var rwst = new Array(N);
          var iwst = new Array(N);
          var nrws = new Array(N);
          var nrwst = new Array(N);
          var niwst = new Array(N);
          var rmws = out.words;
          rmws.length = N;
          this.convert13b(x.words, x.length, rws, N);
          this.convert13b(y.words, y.length, nrws, N);
          this.transform(rws, _, rwst, iwst, N, rbt);
          this.transform(nrws, _, nrwst, niwst, N, rbt);
          for(var i = 0; i < N; i++){
              var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
              iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
              rwst[i] = rx;
          }
          this.conjugate(rwst, iwst, N);
          this.transform(rwst, iwst, rmws, _, N, rbt);
          this.conjugate(rmws, _, N);
          this.normalize13b(rmws, N);
          out.negative = x.negative ^ y.negative;
          out.length = x.length + y.length;
          return out._strip();
      };
      // Multiply `this` by `num`
      BN.prototype.mul = function mul(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
      };
      // Multiply employing FFT
      BN.prototype.mulf = function mulf(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
      };
      // In-place Multiplication
      BN.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;
          assert(typeof num === "number");
          assert(num < 0x4000000);
          // Carry
          var carry = 0;
          for(var i = 0; i < this.length; i++){
              var w = (this.words[i] | 0) * num;
              var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
              carry >>= 26;
              carry += w / 0x4000000 | 0;
              // NOTE: lo is 27bit maximum
              carry += lo >>> 26;
              this.words[i] = lo & 0x3ffffff;
          }
          if (carry !== 0) {
              this.words[i] = carry;
              this.length++;
          }
          return isNegNum ? this.ineg() : this;
      };
      BN.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
      };
      // `this` * `this`
      BN.prototype.sqr = function sqr() {
          return this.mul(this);
      };
      // `this` * `this` in-place
      BN.prototype.isqr = function isqr() {
          return this.imul(this.clone());
      };
      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow(num) {
          var w = toBitArray(num);
          if (w.length === 0) return new BN(1);
          // Skip leading zeroes
          var res = this;
          for(var i = 0; i < w.length; i++, res = res.sqr()){
              if (w[i] !== 0) break;
          }
          if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
              if (w[i] === 0) continue;
              res = res.mul(q);
          }
          return res;
      };
      // Shift-left in-place
      BN.prototype.iushln = function iushln(bits) {
          assert(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
          var i;
          if (r !== 0) {
              var carry = 0;
              for(i = 0; i < this.length; i++){
                  var newCarry = this.words[i] & carryMask;
                  var c = (this.words[i] | 0) - newCarry << r;
                  this.words[i] = c | carry;
                  carry = newCarry >>> 26 - r;
              }
              if (carry) {
                  this.words[i] = carry;
                  this.length++;
              }
          }
          if (s !== 0) {
              for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
              for(i = 0; i < s; i++)this.words[i] = 0;
              this.length += s;
          }
          return this._strip();
      };
      BN.prototype.ishln = function ishln(bits) {
          // TODO(indutny): implement me
          assert(this.negative === 0);
          return this.iushln(bits);
      };
      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert(typeof bits === "number" && bits >= 0);
          var h;
          if (hint) h = (hint - hint % 26) / 26;
          else h = 0;
          var r = bits % 26;
          var s = Math.min((bits - r) / 26, this.length);
          var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
          var maskedWords = extended;
          h -= s;
          h = Math.max(0, h);
          // Extended mode, copy masked part
          if (maskedWords) {
              for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
              maskedWords.length = s;
          }
          if (s === 0) ;
          else if (this.length > s) {
              this.length -= s;
              for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
          } else {
              this.words[0] = 0;
              this.length = 1;
          }
          var carry = 0;
          for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
              var word = this.words[i] | 0;
              this.words[i] = carry << 26 - r | word >>> r;
              carry = word & mask;
          }
          // Push carried bits as a mask
          if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
          if (this.length === 0) {
              this.words[0] = 0;
              this.length = 1;
          }
          return this._strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
          // TODO(indutny): implement me
          assert(this.negative === 0);
          return this.iushrn(bits, hint, extended);
      };
      // Shift-left
      BN.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
      };
      // Shift-right
      BN.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
      };
      // Test if n bit is set
      BN.prototype.testn = function testn(bit) {
          assert(typeof bit === "number" && bit >= 0);
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          // Fast case: bit is much higher than all existing words
          if (this.length <= s) return false;
          // Check bit and return
          var w = this.words[s];
          return !!(w & q);
      };
      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn(bits) {
          assert(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          assert(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s) return this;
          if (r !== 0) s++;
          this.length = Math.min(s, this.length);
          if (r !== 0) {
              var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
              this.words[this.length - 1] &= mask;
          }
          return this._strip();
      };
      // Return only lowers bits of number
      BN.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
      };
      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn(num) {
          assert(typeof num === "number");
          assert(num < 0x4000000);
          if (num < 0) return this.isubn(-num);
          // Possible sign change
          if (this.negative !== 0) {
              if (this.length === 1 && (this.words[0] | 0) <= num) {
                  this.words[0] = num - (this.words[0] | 0);
                  this.negative = 0;
                  return this;
              }
              this.negative = 0;
              this.isubn(num);
              this.negative = 1;
              return this;
          }
          // Add without checks
          return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          // Carry
          for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
              this.words[i] -= 0x4000000;
              if (i === this.length - 1) this.words[i + 1] = 1;
              else this.words[i + 1]++;
          }
          this.length = Math.max(this.length, i + 1);
          return this;
      };
      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn(num) {
          assert(typeof num === "number");
          assert(num < 0x4000000);
          if (num < 0) return this.iaddn(-num);
          if (this.negative !== 0) {
              this.negative = 0;
              this.iaddn(num);
              this.negative = 1;
              return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
              this.words[0] = -this.words[0];
              this.negative = 1;
          } else // Carry
          for(var i = 0; i < this.length && this.words[i] < 0; i++){
              this.words[i] += 0x4000000;
              this.words[i + 1] -= 1;
          }
          return this._strip();
      };
      BN.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
      };
      BN.prototype.abs = function abs() {
          return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len = num.length + shift;
          var i;
          this._expand(len);
          var w;
          var carry = 0;
          for(i = 0; i < num.length; i++){
              w = (this.words[i + shift] | 0) + carry;
              var right = (num.words[i] | 0) * mul;
              w -= right & 0x3ffffff;
              carry = (w >> 26) - (right / 0x4000000 | 0);
              this.words[i + shift] = w & 0x3ffffff;
          }
          for(; i < this.length - shift; i++){
              w = (this.words[i + shift] | 0) + carry;
              carry = w >> 26;
              this.words[i + shift] = w & 0x3ffffff;
          }
          if (carry === 0) return this._strip();
          // Subtraction overflow
          assert(carry === -1);
          carry = 0;
          for(i = 0; i < this.length; i++){
              w = -(this.words[i] | 0) + carry;
              carry = w >> 26;
              this.words[i] = w & 0x3ffffff;
          }
          this.negative = 1;
          return this._strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a = this.clone();
          var b = num;
          // Normalize
          var bhi = b.words[b.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
              b = b.ushln(shift);
              a.iushln(shift);
              bhi = b.words[b.length - 1] | 0;
          }
          // Initialize quotient
          var m = a.length - b.length;
          var q;
          if (mode !== "mod") {
              q = new BN(null);
              q.length = m + 1;
              q.words = new Array(q.length);
              for(var i = 0; i < q.length; i++)q.words[i] = 0;
          }
          var diff = a.clone()._ishlnsubmul(b, 1, m);
          if (diff.negative === 0) {
              a = diff;
              if (q) q.words[m] = 1;
          }
          for(var j = m - 1; j >= 0; j--){
              var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
              // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
              // (0x7ffffff)
              qj = Math.min(qj / bhi | 0, 0x3ffffff);
              a._ishlnsubmul(b, qj, j);
              while(a.negative !== 0){
                  qj--;
                  a.negative = 0;
                  a._ishlnsubmul(b, 1, j);
                  if (!a.isZero()) a.negative ^= 1;
              }
              if (q) q.words[j] = qj;
          }
          if (q) q._strip();
          a._strip();
          // Denormalize
          if (mode !== "div" && shift !== 0) a.iushrn(shift);
          return {
              div: q || null,
              mod: a
          };
      };
      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod(num, mode, positive) {
          assert(!num.isZero());
          if (this.isZero()) return {
              div: new BN(0),
              mod: new BN(0)
          };
          var div, mod, res;
          if (this.negative !== 0 && num.negative === 0) {
              res = this.neg().divmod(num, mode);
              if (mode !== "mod") div = res.div.neg();
              if (mode !== "div") {
                  mod = res.mod.neg();
                  if (positive && mod.negative !== 0) mod.iadd(num);
              }
              return {
                  div: div,
                  mod: mod
              };
          }
          if (this.negative === 0 && num.negative !== 0) {
              res = this.divmod(num.neg(), mode);
              if (mode !== "mod") div = res.div.neg();
              return {
                  div: div,
                  mod: res.mod
              };
          }
          if ((this.negative & num.negative) !== 0) {
              res = this.neg().divmod(num.neg(), mode);
              if (mode !== "div") {
                  mod = res.mod.neg();
                  if (positive && mod.negative !== 0) mod.isub(num);
              }
              return {
                  div: res.div,
                  mod: mod
              };
          }
          // Both numbers are positive at this point
          // Strip both numbers to approximate shift value
          if (num.length > this.length || this.cmp(num) < 0) return {
              div: new BN(0),
              mod: this
          };
          // Very short reduction
          if (num.length === 1) {
              if (mode === "div") return {
                  div: this.divn(num.words[0]),
                  mod: null
              };
              if (mode === "mod") return {
                  div: null,
                  mod: new BN(this.modrn(num.words[0]))
              };
              return {
                  div: this.divn(num.words[0]),
                  mod: new BN(this.modrn(num.words[0]))
              };
          }
          return this._wordDiv(num, mode);
      };
      // Find `this` / `num`
      BN.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
      };
      // Find `this` % `num`
      BN.prototype.mod = function mod(num) {
          return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
      };
      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          // Fast case - exact division
          if (dm.mod.isZero()) return dm.div;
          var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r2 = num.andln(1);
          var cmp = mod.cmp(half);
          // Round down
          if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
          // Round up
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modrn = function modrn(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;
          assert(num <= 0x3ffffff);
          var p = 67108864 % num;
          var acc = 0;
          for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
          return isNegNum ? -acc : acc;
      };
      // WARNING: DEPRECATED
      BN.prototype.modn = function modn(num) {
          return this.modrn(num);
      };
      // In-place division by number
      BN.prototype.idivn = function idivn(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;
          assert(num <= 0x3ffffff);
          var carry = 0;
          for(var i = this.length - 1; i >= 0; i--){
              var w = (this.words[i] | 0) + carry * 0x4000000;
              this.words[i] = w / num | 0;
              carry = w % num;
          }
          this._strip();
          return isNegNum ? this.ineg() : this;
      };
      BN.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p) {
          assert(p.negative === 0);
          assert(!p.isZero());
          var x = this;
          var y = p.clone();
          if (x.negative !== 0) x = x.umod(p);
          else x = x.clone();
          // A * x + B * y = x
          var A = new BN(1);
          var B = new BN(0);
          // C * x + D * y = y
          var C = new BN(0);
          var D = new BN(1);
          var g = 0;
          while(x.isEven() && y.isEven()){
              x.iushrn(1);
              y.iushrn(1);
              ++g;
          }
          var yp = y.clone();
          var xp = x.clone();
          while(!x.isZero()){
              for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
              if (i > 0) {
                  x.iushrn(i);
                  while(i-- > 0){
                      if (A.isOdd() || B.isOdd()) {
                          A.iadd(yp);
                          B.isub(xp);
                      }
                      A.iushrn(1);
                      B.iushrn(1);
                  }
              }
              for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
              if (j > 0) {
                  y.iushrn(j);
                  while(j-- > 0){
                      if (C.isOdd() || D.isOdd()) {
                          C.iadd(yp);
                          D.isub(xp);
                      }
                      C.iushrn(1);
                      D.iushrn(1);
                  }
              }
              if (x.cmp(y) >= 0) {
                  x.isub(y);
                  A.isub(C);
                  B.isub(D);
              } else {
                  y.isub(x);
                  C.isub(A);
                  D.isub(B);
              }
          }
          return {
              a: C,
              b: D,
              gcd: y.iushln(g)
          };
      };
      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp(p) {
          assert(p.negative === 0);
          assert(!p.isZero());
          var a = this;
          var b = p.clone();
          if (a.negative !== 0) a = a.umod(p);
          else a = a.clone();
          var x1 = new BN(1);
          var x2 = new BN(0);
          var delta = b.clone();
          while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
              for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
              if (i > 0) {
                  a.iushrn(i);
                  while(i-- > 0){
                      if (x1.isOdd()) x1.iadd(delta);
                      x1.iushrn(1);
                  }
              }
              for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
              if (j > 0) {
                  b.iushrn(j);
                  while(j-- > 0){
                      if (x2.isOdd()) x2.iadd(delta);
                      x2.iushrn(1);
                  }
              }
              if (a.cmp(b) >= 0) {
                  a.isub(b);
                  x1.isub(x2);
              } else {
                  b.isub(a);
                  x2.isub(x1);
              }
          }
          var res;
          if (a.cmpn(1) === 0) res = x1;
          else res = x2;
          if (res.cmpn(0) < 0) res.iadd(p);
          return res;
      };
      BN.prototype.gcd = function gcd(num) {
          if (this.isZero()) return num.abs();
          if (num.isZero()) return this.abs();
          var a = this.clone();
          var b = num.clone();
          a.negative = 0;
          b.negative = 0;
          // Remove common factor of two
          for(var shift = 0; a.isEven() && b.isEven(); shift++){
              a.iushrn(1);
              b.iushrn(1);
          }
          do {
              while(a.isEven())a.iushrn(1);
              while(b.isEven())b.iushrn(1);
              var r = a.cmp(b);
              if (r < 0) {
                  // Swap `a` and `b` to make `a` always bigger than `b`
                  var t = a;
                  a = b;
                  b = t;
              } else if (r === 0 || b.cmpn(1) === 0) break;
              a.isub(b);
          }while (true);
          return b.iushln(shift);
      };
      // Invert number in the field F(num)
      BN.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
          return (this.words[0] & 1) === 1;
      };
      // And first word and num
      BN.prototype.andln = function andln(num) {
          return this.words[0] & num;
      };
      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn(bit) {
          assert(typeof bit === "number");
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          // Fast case: bit is much higher than all existing words
          if (this.length <= s) {
              this._expand(s + 1);
              this.words[s] |= q;
              return this;
          }
          // Add bit and propagate, if needed
          var carry = q;
          for(var i = s; carry !== 0 && i < this.length; i++){
              var w = this.words[i] | 0;
              w += carry;
              carry = w >>> 26;
              w &= 0x3ffffff;
              this.words[i] = w;
          }
          if (carry !== 0) {
              this.words[i] = carry;
              this.length++;
          }
          return this;
      };
      BN.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative) return -1;
          if (this.negative === 0 && negative) return 1;
          this._strip();
          var res;
          if (this.length > 1) res = 1;
          else {
              if (negative) num = -num;
              assert(num <= 0x3ffffff, "Number is too big");
              var w = this.words[0] | 0;
              res = w === num ? 0 : w < num ? -1 : 1;
          }
          if (this.negative !== 0) return -res | 0;
          return res;
      };
      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp(num) {
          if (this.negative !== 0 && num.negative === 0) return -1;
          if (this.negative === 0 && num.negative !== 0) return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0) return -res | 0;
          return res;
      };
      // Unsigned comparison
      BN.prototype.ucmp = function ucmp(num) {
          // At this point both numbers have the same sign
          if (this.length > num.length) return 1;
          if (this.length < num.length) return -1;
          var res = 0;
          for(var i = this.length - 1; i >= 0; i--){
              var a = this.words[i] | 0;
              var b = num.words[i] | 0;
              if (a === b) continue;
              if (a < b) res = -1;
              else if (a > b) res = 1;
              break;
          }
          return res;
      };
      BN.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt(num) {
          return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
          return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt(num) {
          return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
          return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
          return this.cmp(num) === 0;
      };
      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red(num) {
          return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
          assert(!this.red, "Already a number in reduction context");
          assert(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
          assert(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
          assert(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
          assert(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
          assert(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
          assert(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
          assert(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
          assert(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
          assert(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
          assert(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
          assert(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
          assert(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
      };
      // Square root over p
      BN.prototype.redSqrt = function redSqrt() {
          assert(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
          assert(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
      };
      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg() {
          assert(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
          assert(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
      };
      // Prime numbers with efficient reduction
      var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
      };
      // Pseudo-Mersenne prime
      function MPrime(name, p) {
          // P = 2 ^ N - K
          this.name = name;
          this.p = new BN(p, 16);
          this.n = this.p.bitLength();
          this.k = new BN(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
          // Assumes that `num` is less than `P^2`
          // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
          var r = num;
          var rlen;
          do {
              this.split(r, this.tmp);
              r = this.imulK(r);
              r = r.iadd(this.tmp);
              rlen = r.bitLength();
          }while (rlen > this.n);
          var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
          if (cmp === 0) {
              r.words[0] = 0;
              r.length = 1;
          } else if (cmp > 0) r.isub(this.p);
          else if (r.strip !== undefined) // r is a BN v4 instance
          r.strip();
          else // r is a BN v5 instance
          r._strip();
          return r;
      };
      MPrime.prototype.split = function split(input, out) {
          input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
      };
      function K256() {
          MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
          // 256 = 9 * 26 + 22
          var mask = 0x3fffff;
          var outLen = Math.min(input.length, 9);
          for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
          output.length = outLen;
          if (input.length <= 9) {
              input.words[0] = 0;
              input.length = 1;
              return;
          }
          // Shift by 9 limbs
          var prev = input.words[9];
          output.words[output.length++] = prev & mask;
          for(i = 10; i < input.length; i++){
              var next = input.words[i] | 0;
              input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
              prev = next;
          }
          prev >>>= 22;
          input.words[i - 10] = prev;
          if (prev === 0 && input.length > 10) input.length -= 10;
          else input.length -= 9;
      };
      K256.prototype.imulK = function imulK(num) {
          // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
          var lo = 0;
          for(var i = 0; i < num.length; i++){
              var w = num.words[i] | 0;
              lo += w * 0x3d1;
              num.words[i] = lo & 0x3ffffff;
              lo = w * 0x40 + (lo / 0x4000000 | 0);
          }
          // Fast length reduction
          if (num.words[num.length - 1] === 0) {
              num.length--;
              if (num.words[num.length - 1] === 0) num.length--;
          }
          return num;
      };
      function P224() {
          MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      inherits(P224, MPrime);
      function P192() {
          MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      inherits(P192, MPrime);
      function P25519() {
          // 2 ^ 255 - 19
          MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
          // K = 0x13
          var carry = 0;
          for(var i = 0; i < num.length; i++){
              var hi = (num.words[i] | 0) * 0x13 + carry;
              var lo = hi & 0x3ffffff;
              hi >>>= 26;
              num.words[i] = lo;
              carry = hi;
          }
          if (carry !== 0) num.words[num.length++] = carry;
          return num;
      };
      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime(name) {
          // Cached version of prime
          if (primes[name]) return primes[name];
          var prime;
          if (name === "k256") prime = new K256();
          else if (name === "p224") prime = new P224();
          else if (name === "p192") prime = new P192();
          else if (name === "p25519") prime = new P25519();
          else throw new Error("Unknown prime " + name);
          primes[name] = prime;
          return prime;
      };
      //
      // Base reduction engine
      //
      function Red(m) {
          if (typeof m === "string") {
              var prime = BN._prime(m);
              this.m = prime.p;
              this.prime = prime;
          } else {
              assert(m.gtn(1), "modulus must be greater than 1");
              this.m = m;
              this.prime = null;
          }
      }
      Red.prototype._verify1 = function _verify1(a) {
          assert(a.negative === 0, "red works only with positives");
          assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
          assert((a.negative | b.negative) === 0, "red works only with positives");
          assert(a.red && a.red === b.red, "red works only with red numbers");
      };
      Red.prototype.imod = function imod(a) {
          if (this.prime) return this.prime.ireduce(a)._forceRed(this);
          move(a, a.umod(this.m)._forceRed(this));
          return a;
      };
      Red.prototype.neg = function neg(a) {
          if (a.isZero()) return a.clone();
          return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
          this._verify2(a, b);
          var res = a.add(b);
          if (res.cmp(this.m) >= 0) res.isub(this.m);
          return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
          this._verify2(a, b);
          var res = a.iadd(b);
          if (res.cmp(this.m) >= 0) res.isub(this.m);
          return res;
      };
      Red.prototype.sub = function sub(a, b) {
          this._verify2(a, b);
          var res = a.sub(b);
          if (res.cmpn(0) < 0) res.iadd(this.m);
          return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
          this._verify2(a, b);
          var res = a.isub(b);
          if (res.cmpn(0) < 0) res.iadd(this.m);
          return res;
      };
      Red.prototype.shl = function shl(a, num) {
          this._verify1(a);
          return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
          this._verify2(a, b);
          return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
          this._verify2(a, b);
          return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
          return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
          return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
          if (a.isZero()) return a.clone();
          var mod3 = this.m.andln(3);
          assert(mod3 % 2 === 1);
          // Fast case
          if (mod3 === 3) {
              var pow = this.m.add(new BN(1)).iushrn(2);
              return this.pow(a, pow);
          }
          // Tonelli-Shanks algorithm (Totally unoptimized and slow)
          //
          // Find Q and S, that Q * 2 ^ S = (P - 1)
          var q = this.m.subn(1);
          var s = 0;
          while(!q.isZero() && q.andln(1) === 0){
              s++;
              q.iushrn(1);
          }
          assert(!q.isZero());
          var one = new BN(1).toRed(this);
          var nOne = one.redNeg();
          // Find quadratic non-residue
          // NOTE: Max is such because of generalized Riemann hypothesis.
          var lpow = this.m.subn(1).iushrn(1);
          var z = this.m.bitLength();
          z = new BN(2 * z * z).toRed(this);
          while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
          var c = this.pow(z, q);
          var r = this.pow(a, q.addn(1).iushrn(1));
          var t = this.pow(a, q);
          var m = s;
          while(t.cmp(one) !== 0){
              var tmp = t;
              for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
              assert(i < m);
              var b = this.pow(c, new BN(1).iushln(m - i - 1));
              r = r.redMul(b);
              c = b.redSqr();
              t = t.redMul(c);
              m = i;
          }
          return r;
      };
      Red.prototype.invm = function invm(a) {
          var inv = a._invmp(this.m);
          if (inv.negative !== 0) {
              inv.negative = 0;
              return this.imod(inv).redNeg();
          } else return this.imod(inv);
      };
      Red.prototype.pow = function pow(a, num) {
          if (num.isZero()) return new BN(1).toRed(this);
          if (num.cmpn(1) === 0) return a.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN(1).toRed(this);
          wnd[1] = a;
          for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) start = 26;
          for(i = num.length - 1; i >= 0; i--){
              var word = num.words[i];
              for(var j = start - 1; j >= 0; j--){
                  var bit = word >> j & 1;
                  if (res !== wnd[0]) res = this.sqr(res);
                  if (bit === 0 && current === 0) {
                      currentLen = 0;
                      continue;
                  }
                  current <<= 1;
                  current |= bit;
                  currentLen++;
                  if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                  res = this.mul(res, wnd[current]);
                  currentLen = 0;
                  current = 0;
              }
              start = 26;
          }
          return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
          var r = num.umod(this.m);
          return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
      };
      //
      // Montgomery method engine
      //
      BN.mont = function mont(num) {
          return new Mont(num);
      };
      function Mont(m) {
          Red.call(this, m);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
          this.r = new BN(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
          var r = this.imod(num.mul(this.rinv));
          r.red = null;
          return r;
      };
      Mont.prototype.imul = function imul(a, b) {
          if (a.isZero() || b.isZero()) {
              a.words[0] = 0;
              a.length = 1;
              return a;
          }
          var t = a.imul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) res = u.isub(this.m);
          else if (u.cmpn(0) < 0) res = u.iadd(this.m);
          return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
          if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
          var t = a.mul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) res = u.isub(this.m);
          else if (u.cmpn(0) < 0) res = u.iadd(this.m);
          return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
          // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
          var res = this.imod(a._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
      };
  })(module, this);
  
  },{"f86a03d8f0aa65f4":"16z3F"}],"dHyc2":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "version", ()=>version);
  const version = "signing-key/5.7.0";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"7piXV":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "version", ()=>version);
  const version = "transactions/5.7.0";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"jD4Nf":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "AlchemyWebSocketProvider", ()=>AlchemyWebSocketProvider);
  parcelHelpers.export(exports, "AlchemyProvider", ()=>AlchemyProvider);
  var _properties = require("@ethersproject/properties");
  var _formatter = require("./formatter");
  var _websocketProvider = require("./websocket-provider");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  var _urlJsonRpcProvider = require("./url-json-rpc-provider");
  "use strict";
  const logger = new (0, _logger.Logger)((0, _version.version));
  // This key was provided to ethers.js by Alchemy to be used by the
  // default provider, but it is recommended that for your own
  // production environments, that you acquire your own API key at:
  //   https://dashboard.alchemyapi.io
  const defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
  class AlchemyWebSocketProvider extends (0, _websocketProvider.WebSocketProvider) {
      constructor(network, apiKey){
          const provider = new AlchemyProvider(network, apiKey);
          const url = provider.connection.url.replace(/^http/i, "ws").replace(".alchemyapi.", ".ws.alchemyapi.");
          super(url, provider.network);
          (0, _properties.defineReadOnly)(this, "apiKey", provider.apiKey);
      }
      isCommunityResource() {
          return this.apiKey === defaultApiKey;
      }
  }
  class AlchemyProvider extends (0, _urlJsonRpcProvider.UrlJsonRpcProvider) {
      static getWebSocketProvider(network, apiKey) {
          return new AlchemyWebSocketProvider(network, apiKey);
      }
      static getApiKey(apiKey) {
          if (apiKey == null) return defaultApiKey;
          if (apiKey && typeof apiKey !== "string") logger.throwArgumentError("invalid apiKey", "apiKey", apiKey);
          return apiKey;
      }
      static getUrl(network, apiKey) {
          let host = null;
          switch(network.name){
              case "homestead":
                  host = "eth-mainnet.alchemyapi.io/v2/";
                  break;
              case "goerli":
                  host = "eth-goerli.g.alchemy.com/v2/";
                  break;
              case "matic":
                  host = "polygon-mainnet.g.alchemy.com/v2/";
                  break;
              case "maticmum":
                  host = "polygon-mumbai.g.alchemy.com/v2/";
                  break;
              case "arbitrum":
                  host = "arb-mainnet.g.alchemy.com/v2/";
                  break;
              case "arbitrum-goerli":
                  host = "arb-goerli.g.alchemy.com/v2/";
                  break;
              case "optimism":
                  host = "opt-mainnet.g.alchemy.com/v2/";
                  break;
              case "optimism-goerli":
                  host = "opt-goerli.g.alchemy.com/v2/";
                  break;
              default:
                  logger.throwArgumentError("unsupported network", "network", arguments[0]);
          }
          return {
              allowGzip: true,
              url: "https://" + host + apiKey,
              throttleCallback: (attempt, url)=>{
                  if (apiKey === defaultApiKey) (0, _formatter.showThrottleMessage)();
                  return Promise.resolve(true);
              }
          };
      }
      isCommunityResource() {
          return this.apiKey === defaultApiKey;
      }
  }
  
  },{"@ethersproject/properties":"h3GJb","./formatter":"ZfOHh","./websocket-provider":"9KF9f","@ethersproject/logger":"hLvB2","./_version":"6PYAk","./url-json-rpc-provider":"9CTqA","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"9KF9f":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  // For more info about the Real-time Event API see:
  //   https://geth.ethereum.org/docs/rpc/pubsub
  parcelHelpers.export(exports, "WebSocketProvider", ()=>WebSocketProvider);
  var _bignumber = require("@ethersproject/bignumber");
  var _properties = require("@ethersproject/properties");
  var _jsonRpcProvider = require("./json-rpc-provider");
  var _ws = require("./ws");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  "use strict";
  var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
          });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
              try {
                  step(generator.next(value));
              } catch (e) {
                  reject(e);
              }
          }
          function rejected(value) {
              try {
                  step(generator["throw"](value));
              } catch (e) {
                  reject(e);
              }
          }
          function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const logger = new (0, _logger.Logger)((0, _version.version));
  /**
   *  Notes:
   *
   *  This provider differs a bit from the polling providers. One main
   *  difference is how it handles consistency. The polling providers
   *  will stall responses to ensure a consistent state, while this
   *  WebSocket provider assumes the connected backend will manage this.
   *
   *  For example, if a polling provider emits an event which indicates
   *  the event occurred in blockhash XXX, a call to fetch that block by
   *  its hash XXX, if not present will retry until it is present. This
   *  can occur when querying a pool of nodes that are mildly out of sync
   *  with each other.
   */ let NextId = 1;
  class WebSocketProvider extends (0, _jsonRpcProvider.JsonRpcProvider) {
      constructor(url, network){
          // This will be added in the future; please open an issue to expedite
          if (network === "any") logger.throwError("WebSocketProvider does not support 'any' network yet", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
              operation: "network:any"
          });
          if (typeof url === "string") super(url, network);
          else super("_websocket", network);
          this._pollingInterval = -1;
          this._wsReady = false;
          if (typeof url === "string") (0, _properties.defineReadOnly)(this, "_websocket", new (0, _ws.WebSocket)(this.connection.url));
          else (0, _properties.defineReadOnly)(this, "_websocket", url);
          (0, _properties.defineReadOnly)(this, "_requests", {});
          (0, _properties.defineReadOnly)(this, "_subs", {});
          (0, _properties.defineReadOnly)(this, "_subIds", {});
          (0, _properties.defineReadOnly)(this, "_detectNetwork", super.detectNetwork());
          // Stall sending requests until the socket is open...
          this.websocket.onopen = ()=>{
              this._wsReady = true;
              Object.keys(this._requests).forEach((id)=>{
                  this.websocket.send(this._requests[id].payload);
              });
          };
          this.websocket.onmessage = (messageEvent)=>{
              const data = messageEvent.data;
              const result = JSON.parse(data);
              if (result.id != null) {
                  const id = String(result.id);
                  const request = this._requests[id];
                  delete this._requests[id];
                  if (result.result !== undefined) {
                      request.callback(null, result.result);
                      this.emit("debug", {
                          action: "response",
                          request: JSON.parse(request.payload),
                          response: result.result,
                          provider: this
                      });
                  } else {
                      let error = null;
                      if (result.error) {
                          error = new Error(result.error.message || "unknown error");
                          (0, _properties.defineReadOnly)(error, "code", result.error.code || null);
                          (0, _properties.defineReadOnly)(error, "response", data);
                      } else error = new Error("unknown error");
                      request.callback(error, undefined);
                      this.emit("debug", {
                          action: "response",
                          error: error,
                          request: JSON.parse(request.payload),
                          provider: this
                      });
                  }
              } else if (result.method === "eth_subscription") {
                  // Subscription...
                  const sub = this._subs[result.params.subscription];
                  if (sub) //this.emit.apply(this,                  );
                  sub.processFunc(result.params.result);
              } else console.warn("this should not happen");
          };
          // This Provider does not actually poll, but we want to trigger
          // poll events for things that depend on them (like stalling for
          // block and transaction lookups)
          const fauxPoll = setInterval(()=>{
              this.emit("poll");
          }, 1000);
          if (fauxPoll.unref) fauxPoll.unref();
      }
      // Cannot narrow the type of _websocket, as that is not backwards compatible
      // so we add a getter and let the WebSocket be a public API.
      get websocket() {
          return this._websocket;
      }
      detectNetwork() {
          return this._detectNetwork;
      }
      get pollingInterval() {
          return 0;
      }
      resetEventsBlock(blockNumber) {
          logger.throwError("cannot reset events block on WebSocketProvider", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
              operation: "resetEventBlock"
          });
      }
      set pollingInterval(value) {
          logger.throwError("cannot set polling interval on WebSocketProvider", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
              operation: "setPollingInterval"
          });
      }
      poll() {
          return __awaiter(this, void 0, void 0, function*() {
              return null;
          });
      }
      set polling(value) {
          if (!value) return;
          logger.throwError("cannot set polling on WebSocketProvider", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
              operation: "setPolling"
          });
      }
      send(method, params) {
          const rid = NextId++;
          return new Promise((resolve, reject)=>{
              function callback(error, result) {
                  if (error) return reject(error);
                  return resolve(result);
              }
              const payload = JSON.stringify({
                  method: method,
                  params: params,
                  id: rid,
                  jsonrpc: "2.0"
              });
              this.emit("debug", {
                  action: "request",
                  request: JSON.parse(payload),
                  provider: this
              });
              this._requests[String(rid)] = {
                  callback,
                  payload
              };
              if (this._wsReady) this.websocket.send(payload);
          });
      }
      static defaultUrl() {
          return "ws://localhost:8546";
      }
      _subscribe(tag, param, processFunc) {
          return __awaiter(this, void 0, void 0, function*() {
              let subIdPromise = this._subIds[tag];
              if (subIdPromise == null) {
                  subIdPromise = Promise.all(param).then((param)=>{
                      return this.send("eth_subscribe", param);
                  });
                  this._subIds[tag] = subIdPromise;
              }
              const subId = yield subIdPromise;
              this._subs[subId] = {
                  tag,
                  processFunc
              };
          });
      }
      _startEvent(event) {
          switch(event.type){
              case "block":
                  this._subscribe("block", [
                      "newHeads"
                  ], (result)=>{
                      const blockNumber = (0, _bignumber.BigNumber).from(result.number).toNumber();
                      this._emitted.block = blockNumber;
                      this.emit("block", blockNumber);
                  });
                  break;
              case "pending":
                  this._subscribe("pending", [
                      "newPendingTransactions"
                  ], (result)=>{
                      this.emit("pending", result);
                  });
                  break;
              case "filter":
                  this._subscribe(event.tag, [
                      "logs",
                      this._getFilter(event.filter)
                  ], (result)=>{
                      if (result.removed == null) result.removed = false;
                      this.emit(event.filter, this.formatter.filterLog(result));
                  });
                  break;
              case "tx":
                  {
                      const emitReceipt = (event)=>{
                          const hash = event.hash;
                          this.getTransactionReceipt(hash).then((receipt)=>{
                              if (!receipt) return;
                              this.emit(hash, receipt);
                          });
                      };
                      // In case it is already mined
                      emitReceipt(event);
                      // To keep things simple, we start up a single newHeads subscription
                      // to keep an eye out for transactions we are watching for.
                      // Starting a subscription for an event (i.e. "tx") that is already
                      // running is (basically) a nop.
                      this._subscribe("tx", [
                          "newHeads"
                      ], (result)=>{
                          this._events.filter((e)=>e.type === "tx").forEach(emitReceipt);
                      });
                      break;
                  }
              // Nothing is needed
              case "debug":
              case "poll":
              case "willPoll":
              case "didPoll":
              case "error":
                  break;
              default:
                  console.log("unhandled:", event);
                  break;
          }
      }
      _stopEvent(event) {
          let tag = event.tag;
          if (event.type === "tx") {
              // There are remaining transaction event listeners
              if (this._events.filter((e)=>e.type === "tx").length) return;
              tag = "tx";
          } else if (this.listenerCount(event.event)) // There are remaining event listeners
          return;
          const subId = this._subIds[tag];
          if (!subId) return;
          delete this._subIds[tag];
          subId.then((subId)=>{
              if (!this._subs[subId]) return;
              delete this._subs[subId];
              this.send("eth_unsubscribe", [
                  subId
              ]);
          });
      }
      destroy() {
          return __awaiter(this, void 0, void 0, function*() {
              // Wait until we have connected before trying to disconnect
              if (this.websocket.readyState === (0, _ws.WebSocket).CONNECTING) yield new Promise((resolve)=>{
                  this.websocket.onopen = function() {
                      resolve(true);
                  };
                  this.websocket.onerror = function() {
                      resolve(false);
                  };
              });
              // Hangup
              // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes
              this.websocket.close(1000);
          });
      }
  }
  
  },{"@ethersproject/bignumber":"ckYYW","@ethersproject/properties":"h3GJb","./json-rpc-provider":"1sWtk","./ws":"d41Wa","@ethersproject/logger":"hLvB2","./_version":"6PYAk","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"1sWtk":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "JsonRpcSigner", ()=>JsonRpcSigner);
  parcelHelpers.export(exports, "JsonRpcProvider", ()=>JsonRpcProvider);
  var _abstractSigner = require("@ethersproject/abstract-signer");
  var _bignumber = require("@ethersproject/bignumber");
  var _bytes = require("@ethersproject/bytes");
  var _hash = require("@ethersproject/hash");
  var _properties = require("@ethersproject/properties");
  var _strings = require("@ethersproject/strings");
  var _transactions = require("@ethersproject/transactions");
  var _web = require("@ethersproject/web");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  var _baseProvider = require("./base-provider");
  "use strict";
  var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
          });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
              try {
                  step(generator.next(value));
              } catch (e) {
                  reject(e);
              }
          }
          function rejected(value) {
              try {
                  step(generator["throw"](value));
              } catch (e) {
                  reject(e);
              }
          }
          function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const logger = new (0, _logger.Logger)((0, _version.version));
  const errorGas = [
      "call",
      "estimateGas"
  ];
  function spelunk(value, requireData) {
      if (value == null) return null;
      // These *are* the droids we're looking for.
      if (typeof value.message === "string" && value.message.match("reverted")) {
          const data = (0, _bytes.isHexString)(value.data) ? value.data : null;
          if (!requireData || data) return {
              message: value.message,
              data
          };
      }
      // Spelunk further...
      if (typeof value === "object") {
          for(const key in value){
              const result = spelunk(value[key], requireData);
              if (result) return result;
          }
          return null;
      }
      // Might be a JSON string we can further descend...
      if (typeof value === "string") try {
          return spelunk(JSON.parse(value), requireData);
      } catch (error) {}
      return null;
  }
  function checkError(method, error, params) {
      const transaction = params.transaction || params.signedTransaction;
      // Undo the "convenience" some nodes are attempting to prevent backwards
      // incompatibility; maybe for v6 consider forwarding reverts as errors
      if (method === "call") {
          const result = spelunk(error, true);
          if (result) return result.data;
          // Nothing descriptive..
          logger.throwError("missing revert data in call exception; Transaction reverted without a reason string", (0, _logger.Logger).errors.CALL_EXCEPTION, {
              data: "0x",
              transaction,
              error
          });
      }
      if (method === "estimateGas") {
          // Try to find something, with a preference on SERVER_ERROR body
          let result = spelunk(error.body, false);
          if (result == null) result = spelunk(error, false);
          // Found "reverted", this is a CALL_EXCEPTION
          if (result) logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", (0, _logger.Logger).errors.UNPREDICTABLE_GAS_LIMIT, {
              reason: result.message,
              method,
              transaction,
              error
          });
      }
      // @TODO: Should we spelunk for message too?
      let message = error.message;
      if (error.code === (0, _logger.Logger).errors.SERVER_ERROR && error.error && typeof error.error.message === "string") message = error.error.message;
      else if (typeof error.body === "string") message = error.body;
      else if (typeof error.responseText === "string") message = error.responseText;
      message = (message || "").toLowerCase();
      // "insufficient funds for gas * price + value + cost(data)"
      if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) logger.throwError("insufficient funds for intrinsic transaction cost", (0, _logger.Logger).errors.INSUFFICIENT_FUNDS, {
          error,
          method,
          transaction
      });
      // "nonce too low"
      if (message.match(/nonce (is )?too low/i)) logger.throwError("nonce has already been used", (0, _logger.Logger).errors.NONCE_EXPIRED, {
          error,
          method,
          transaction
      });
      // "replacement transaction underpriced"
      if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) logger.throwError("replacement fee too low", (0, _logger.Logger).errors.REPLACEMENT_UNDERPRICED, {
          error,
          method,
          transaction
      });
      // "replacement transaction underpriced"
      if (message.match(/only replay-protected/i)) logger.throwError("legacy pre-eip-155 transactions not supported", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
          error,
          method,
          transaction
      });
      if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", (0, _logger.Logger).errors.UNPREDICTABLE_GAS_LIMIT, {
          error,
          method,
          transaction
      });
      throw error;
  }
  function timer(timeout) {
      return new Promise(function(resolve) {
          setTimeout(resolve, timeout);
      });
  }
  function getResult(payload) {
      if (payload.error) {
          // @TODO: not any
          const error = new Error(payload.error.message);
          error.code = payload.error.code;
          error.data = payload.error.data;
          throw error;
      }
      return payload.result;
  }
  function getLowerCase(value) {
      if (value) return value.toLowerCase();
      return value;
  }
  const _constructorGuard = {};
  class JsonRpcSigner extends (0, _abstractSigner.Signer) {
      constructor(constructorGuard, provider, addressOrIndex){
          super();
          if (constructorGuard !== _constructorGuard) throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
          (0, _properties.defineReadOnly)(this, "provider", provider);
          if (addressOrIndex == null) addressOrIndex = 0;
          if (typeof addressOrIndex === "string") {
              (0, _properties.defineReadOnly)(this, "_address", this.provider.formatter.address(addressOrIndex));
              (0, _properties.defineReadOnly)(this, "_index", null);
          } else if (typeof addressOrIndex === "number") {
              (0, _properties.defineReadOnly)(this, "_index", addressOrIndex);
              (0, _properties.defineReadOnly)(this, "_address", null);
          } else logger.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
      }
      connect(provider) {
          return logger.throwError("cannot alter JSON-RPC Signer connection", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
              operation: "connect"
          });
      }
      connectUnchecked() {
          return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);
      }
      getAddress() {
          if (this._address) return Promise.resolve(this._address);
          return this.provider.send("eth_accounts", []).then((accounts)=>{
              if (accounts.length <= this._index) logger.throwError("unknown account #" + this._index, (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                  operation: "getAddress"
              });
              return this.provider.formatter.address(accounts[this._index]);
          });
      }
      sendUncheckedTransaction(transaction) {
          transaction = (0, _properties.shallowCopy)(transaction);
          const fromAddress = this.getAddress().then((address)=>{
              if (address) address = address.toLowerCase();
              return address;
          });
          // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user
          // wishes to use this, it is easy to specify explicitly, otherwise
          // we look it up for them.
          if (transaction.gasLimit == null) {
              const estimate = (0, _properties.shallowCopy)(transaction);
              estimate.from = fromAddress;
              transaction.gasLimit = this.provider.estimateGas(estimate);
          }
          if (transaction.to != null) transaction.to = Promise.resolve(transaction.to).then((to)=>__awaiter(this, void 0, void 0, function*() {
                  if (to == null) return null;
                  const address = yield this.provider.resolveName(to);
                  if (address == null) logger.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                  return address;
              }));
          return (0, _properties.resolveProperties)({
              tx: (0, _properties.resolveProperties)(transaction),
              sender: fromAddress
          }).then(({ tx , sender  })=>{
              if (tx.from != null) {
                  if (tx.from.toLowerCase() !== sender) logger.throwArgumentError("from address mismatch", "transaction", transaction);
              } else tx.from = sender;
              const hexTx = this.provider.constructor.hexlifyTransaction(tx, {
                  from: true
              });
              return this.provider.send("eth_sendTransaction", [
                  hexTx
              ]).then((hash)=>{
                  return hash;
              }, (error)=>{
                  if (typeof error.message === "string" && error.message.match(/user denied/i)) logger.throwError("user rejected transaction", (0, _logger.Logger).errors.ACTION_REJECTED, {
                      action: "sendTransaction",
                      transaction: tx
                  });
                  return checkError("sendTransaction", error, hexTx);
              });
          });
      }
      signTransaction(transaction) {
          return logger.throwError("signing transactions is unsupported", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
              operation: "signTransaction"
          });
      }
      sendTransaction(transaction) {
          return __awaiter(this, void 0, void 0, function*() {
              // This cannot be mined any earlier than any recent block
              const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);
              // Send the transaction
              const hash = yield this.sendUncheckedTransaction(transaction);
              try {
                  // Unfortunately, JSON-RPC only provides and opaque transaction hash
                  // for a response, and we need the actual transaction, so we poll
                  // for it; it should show up very quickly
                  return yield (0, _web.poll)(()=>__awaiter(this, void 0, void 0, function*() {
                          const tx = yield this.provider.getTransaction(hash);
                          if (tx === null) return undefined;
                          return this.provider._wrapTransaction(tx, hash, blockNumber);
                      }), {
                      oncePoll: this.provider
                  });
              } catch (error) {
                  error.transactionHash = hash;
                  throw error;
              }
          });
      }
      signMessage(message) {
          return __awaiter(this, void 0, void 0, function*() {
              const data = typeof message === "string" ? (0, _strings.toUtf8Bytes)(message) : message;
              const address = yield this.getAddress();
              try {
                  return yield this.provider.send("personal_sign", [
                      (0, _bytes.hexlify)(data),
                      address.toLowerCase()
                  ]);
              } catch (error) {
                  if (typeof error.message === "string" && error.message.match(/user denied/i)) logger.throwError("user rejected signing", (0, _logger.Logger).errors.ACTION_REJECTED, {
                      action: "signMessage",
                      from: address,
                      messageData: message
                  });
                  throw error;
              }
          });
      }
      _legacySignMessage(message) {
          return __awaiter(this, void 0, void 0, function*() {
              const data = typeof message === "string" ? (0, _strings.toUtf8Bytes)(message) : message;
              const address = yield this.getAddress();
              try {
                  // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
                  return yield this.provider.send("eth_sign", [
                      address.toLowerCase(),
                      (0, _bytes.hexlify)(data)
                  ]);
              } catch (error) {
                  if (typeof error.message === "string" && error.message.match(/user denied/i)) logger.throwError("user rejected signing", (0, _logger.Logger).errors.ACTION_REJECTED, {
                      action: "_legacySignMessage",
                      from: address,
                      messageData: message
                  });
                  throw error;
              }
          });
      }
      _signTypedData(domain, types, value) {
          return __awaiter(this, void 0, void 0, function*() {
              // Populate any ENS names (in-place)
              const populated = yield (0, _hash._TypedDataEncoder).resolveNames(domain, types, value, (name)=>{
                  return this.provider.resolveName(name);
              });
              const address = yield this.getAddress();
              try {
                  return yield this.provider.send("eth_signTypedData_v4", [
                      address.toLowerCase(),
                      JSON.stringify((0, _hash._TypedDataEncoder).getPayload(populated.domain, types, populated.value))
                  ]);
              } catch (error) {
                  if (typeof error.message === "string" && error.message.match(/user denied/i)) logger.throwError("user rejected signing", (0, _logger.Logger).errors.ACTION_REJECTED, {
                      action: "_signTypedData",
                      from: address,
                      messageData: {
                          domain: populated.domain,
                          types,
                          value: populated.value
                      }
                  });
                  throw error;
              }
          });
      }
      unlock(password) {
          return __awaiter(this, void 0, void 0, function*() {
              const provider = this.provider;
              const address = yield this.getAddress();
              return provider.send("personal_unlockAccount", [
                  address.toLowerCase(),
                  password,
                  null
              ]);
          });
      }
  }
  class UncheckedJsonRpcSigner extends JsonRpcSigner {
      sendTransaction(transaction) {
          return this.sendUncheckedTransaction(transaction).then((hash)=>{
              return {
                  hash: hash,
                  nonce: null,
                  gasLimit: null,
                  gasPrice: null,
                  data: null,
                  value: null,
                  chainId: null,
                  confirmations: 0,
                  from: null,
                  wait: (confirmations)=>{
                      return this.provider.waitForTransaction(hash, confirmations);
                  }
              };
          });
      }
  }
  const allowedTransactionKeys = {
      chainId: true,
      data: true,
      gasLimit: true,
      gasPrice: true,
      nonce: true,
      to: true,
      value: true,
      type: true,
      accessList: true,
      maxFeePerGas: true,
      maxPriorityFeePerGas: true
  };
  class JsonRpcProvider extends (0, _baseProvider.BaseProvider) {
      constructor(url, network){
          let networkOrReady = network;
          // The network is unknown, query the JSON-RPC for it
          if (networkOrReady == null) networkOrReady = new Promise((resolve, reject)=>{
              setTimeout(()=>{
                  this.detectNetwork().then((network)=>{
                      resolve(network);
                  }, (error)=>{
                      reject(error);
                  });
              }, 0);
          });
          super(networkOrReady);
          // Default URL
          if (!url) url = (0, _properties.getStatic)(this.constructor, "defaultUrl")();
          if (typeof url === "string") (0, _properties.defineReadOnly)(this, "connection", Object.freeze({
              url: url
          }));
          else (0, _properties.defineReadOnly)(this, "connection", Object.freeze((0, _properties.shallowCopy)(url)));
          this._nextId = 42;
      }
      get _cache() {
          if (this._eventLoopCache == null) this._eventLoopCache = {};
          return this._eventLoopCache;
      }
      static defaultUrl() {
          return "http://localhost:8545";
      }
      detectNetwork() {
          if (!this._cache["detectNetwork"]) {
              this._cache["detectNetwork"] = this._uncachedDetectNetwork();
              // Clear this cache at the beginning of the next event loop
              setTimeout(()=>{
                  this._cache["detectNetwork"] = null;
              }, 0);
          }
          return this._cache["detectNetwork"];
      }
      _uncachedDetectNetwork() {
          return __awaiter(this, void 0, void 0, function*() {
              yield timer(0);
              let chainId = null;
              try {
                  chainId = yield this.send("eth_chainId", []);
              } catch (error) {
                  try {
                      chainId = yield this.send("net_version", []);
                  } catch (error) {}
              }
              if (chainId != null) {
                  const getNetwork = (0, _properties.getStatic)(this.constructor, "getNetwork");
                  try {
                      return getNetwork((0, _bignumber.BigNumber).from(chainId).toNumber());
                  } catch (error) {
                      return logger.throwError("could not detect network", (0, _logger.Logger).errors.NETWORK_ERROR, {
                          chainId: chainId,
                          event: "invalidNetwork",
                          serverError: error
                      });
                  }
              }
              return logger.throwError("could not detect network", (0, _logger.Logger).errors.NETWORK_ERROR, {
                  event: "noNetwork"
              });
          });
      }
      getSigner(addressOrIndex) {
          return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);
      }
      getUncheckedSigner(addressOrIndex) {
          return this.getSigner(addressOrIndex).connectUnchecked();
      }
      listAccounts() {
          return this.send("eth_accounts", []).then((accounts)=>{
              return accounts.map((a)=>this.formatter.address(a));
          });
      }
      send(method, params) {
          const request = {
              method: method,
              params: params,
              id: this._nextId++,
              jsonrpc: "2.0"
          };
          this.emit("debug", {
              action: "request",
              request: (0, _properties.deepCopy)(request),
              provider: this
          });
          // We can expand this in the future to any call, but for now these
          // are the biggest wins and do not require any serializing parameters.
          const cache = [
              "eth_chainId",
              "eth_blockNumber"
          ].indexOf(method) >= 0;
          if (cache && this._cache[method]) return this._cache[method];
          const result = (0, _web.fetchJson)(this.connection, JSON.stringify(request), getResult).then((result)=>{
              this.emit("debug", {
                  action: "response",
                  request: request,
                  response: result,
                  provider: this
              });
              return result;
          }, (error)=>{
              this.emit("debug", {
                  action: "response",
                  error: error,
                  request: request,
                  provider: this
              });
              throw error;
          });
          // Cache the fetch, but clear it on the next event loop
          if (cache) {
              this._cache[method] = result;
              setTimeout(()=>{
                  this._cache[method] = null;
              }, 0);
          }
          return result;
      }
      prepareRequest(method, params) {
          switch(method){
              case "getBlockNumber":
                  return [
                      "eth_blockNumber",
                      []
                  ];
              case "getGasPrice":
                  return [
                      "eth_gasPrice",
                      []
                  ];
              case "getBalance":
                  return [
                      "eth_getBalance",
                      [
                          getLowerCase(params.address),
                          params.blockTag
                      ]
                  ];
              case "getTransactionCount":
                  return [
                      "eth_getTransactionCount",
                      [
                          getLowerCase(params.address),
                          params.blockTag
                      ]
                  ];
              case "getCode":
                  return [
                      "eth_getCode",
                      [
                          getLowerCase(params.address),
                          params.blockTag
                      ]
                  ];
              case "getStorageAt":
                  return [
                      "eth_getStorageAt",
                      [
                          getLowerCase(params.address),
                          (0, _bytes.hexZeroPad)(params.position, 32),
                          params.blockTag
                      ]
                  ];
              case "sendTransaction":
                  return [
                      "eth_sendRawTransaction",
                      [
                          params.signedTransaction
                      ]
                  ];
              case "getBlock":
                  if (params.blockTag) return [
                      "eth_getBlockByNumber",
                      [
                          params.blockTag,
                          !!params.includeTransactions
                      ]
                  ];
                  else if (params.blockHash) return [
                      "eth_getBlockByHash",
                      [
                          params.blockHash,
                          !!params.includeTransactions
                      ]
                  ];
                  return null;
              case "getTransaction":
                  return [
                      "eth_getTransactionByHash",
                      [
                          params.transactionHash
                      ]
                  ];
              case "getTransactionReceipt":
                  return [
                      "eth_getTransactionReceipt",
                      [
                          params.transactionHash
                      ]
                  ];
              case "call":
                  {
                      const hexlifyTransaction = (0, _properties.getStatic)(this.constructor, "hexlifyTransaction");
                      return [
                          "eth_call",
                          [
                              hexlifyTransaction(params.transaction, {
                                  from: true
                              }),
                              params.blockTag
                          ]
                      ];
                  }
              case "estimateGas":
                  {
                      const hexlifyTransaction = (0, _properties.getStatic)(this.constructor, "hexlifyTransaction");
                      return [
                          "eth_estimateGas",
                          [
                              hexlifyTransaction(params.transaction, {
                                  from: true
                              })
                          ]
                      ];
                  }
              case "getLogs":
                  if (params.filter && params.filter.address != null) params.filter.address = getLowerCase(params.filter.address);
                  return [
                      "eth_getLogs",
                      [
                          params.filter
                      ]
                  ];
              default:
                  break;
          }
          return null;
      }
      perform(method, params) {
          return __awaiter(this, void 0, void 0, function*() {
              // Legacy networks do not like the type field being passed along (which
              // is fair), so we delete type if it is 0 and a non-EIP-1559 network
              if (method === "call" || method === "estimateGas") {
                  const tx = params.transaction;
                  if (tx && tx.type != null && (0, _bignumber.BigNumber).from(tx.type).isZero()) // If there are no EIP-1559 properties, it might be non-EIP-1559
                  {
                      if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
                          const feeData = yield this.getFeeData();
                          if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                              // Network doesn't know about EIP-1559 (and hence type)
                              params = (0, _properties.shallowCopy)(params);
                              params.transaction = (0, _properties.shallowCopy)(tx);
                              delete params.transaction.type;
                          }
                      }
                  }
              }
              const args = this.prepareRequest(method, params);
              if (args == null) logger.throwError(method + " not implemented", (0, _logger.Logger).errors.NOT_IMPLEMENTED, {
                  operation: method
              });
              try {
                  return yield this.send(args[0], args[1]);
              } catch (error) {
                  return checkError(method, error, params);
              }
          });
      }
      _startEvent(event) {
          if (event.tag === "pending") this._startPending();
          super._startEvent(event);
      }
      _startPending() {
          if (this._pendingFilter != null) return;
          const self = this;
          const pendingFilter = this.send("eth_newPendingTransactionFilter", []);
          this._pendingFilter = pendingFilter;
          pendingFilter.then(function(filterId) {
              function poll() {
                  self.send("eth_getFilterChanges", [
                      filterId
                  ]).then(function(hashes) {
                      if (self._pendingFilter != pendingFilter) return null;
                      let seq = Promise.resolve();
                      hashes.forEach(function(hash) {
                          // @TODO: This should be garbage collected at some point... How? When?
                          self._emitted["t:" + hash.toLowerCase()] = "pending";
                          seq = seq.then(function() {
                              return self.getTransaction(hash).then(function(tx) {
                                  self.emit("pending", tx);
                                  return null;
                              });
                          });
                      });
                      return seq.then(function() {
                          return timer(1000);
                      });
                  }).then(function() {
                      if (self._pendingFilter != pendingFilter) {
                          self.send("eth_uninstallFilter", [
                              filterId
                          ]);
                          return;
                      }
                      setTimeout(function() {
                          poll();
                      }, 0);
                      return null;
                  }).catch((error)=>{});
              }
              poll();
              return filterId;
          }).catch((error)=>{});
      }
      _stopEvent(event) {
          if (event.tag === "pending" && this.listenerCount("pending") === 0) this._pendingFilter = null;
          super._stopEvent(event);
      }
      // Convert an ethers.js transaction into a JSON-RPC transaction
      //  - gasLimit => gas
      //  - All values hexlified
      //  - All numeric values zero-striped
      //  - All addresses are lowercased
      // NOTE: This allows a TransactionRequest, but all values should be resolved
      //       before this is called
      // @TODO: This will likely be removed in future versions and prepareRequest
      //        will be the preferred method for this.
      static hexlifyTransaction(transaction, allowExtra) {
          // Check only allowed properties are given
          const allowed = (0, _properties.shallowCopy)(allowedTransactionKeys);
          if (allowExtra) {
              for(const key in allowExtra)if (allowExtra[key]) allowed[key] = true;
          }
          (0, _properties.checkProperties)(transaction, allowed);
          const result = {};
          // JSON-RPC now requires numeric values to be "quantity" values
          [
              "chainId",
              "gasLimit",
              "gasPrice",
              "type",
              "maxFeePerGas",
              "maxPriorityFeePerGas",
              "nonce",
              "value"
          ].forEach(function(key) {
              if (transaction[key] == null) return;
              const value = (0, _bytes.hexValue)((0, _bignumber.BigNumber).from(transaction[key]));
              if (key === "gasLimit") key = "gas";
              result[key] = value;
          });
          [
              "from",
              "to",
              "data"
          ].forEach(function(key) {
              if (transaction[key] == null) return;
              result[key] = (0, _bytes.hexlify)(transaction[key]);
          });
          if (transaction.accessList) result["accessList"] = (0, _transactions.accessListify)(transaction.accessList);
          return result;
      }
  }
  
  },{"@ethersproject/abstract-signer":"g9Ey5","@ethersproject/bignumber":"ckYYW","@ethersproject/bytes":"htrqZ","@ethersproject/hash":"7JYPm","@ethersproject/properties":"h3GJb","@ethersproject/strings":"5TGFZ","@ethersproject/transactions":"d1ust","@ethersproject/web":"5yjI3","@ethersproject/logger":"hLvB2","./_version":"6PYAk","./base-provider":"7OFAa","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"g9Ey5":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "Signer", ()=>Signer);
  parcelHelpers.export(exports, "VoidSigner", ()=>VoidSigner);
  var _properties = require("@ethersproject/properties");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  "use strict";
  var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
          });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
              try {
                  step(generator.next(value));
              } catch (e) {
                  reject(e);
              }
          }
          function rejected(value) {
              try {
                  step(generator["throw"](value));
              } catch (e) {
                  reject(e);
              }
          }
          function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const logger = new (0, _logger.Logger)((0, _version.version));
  const allowedTransactionKeys = [
      "accessList",
      "ccipReadEnabled",
      "chainId",
      "customData",
      "data",
      "from",
      "gasLimit",
      "gasPrice",
      "maxFeePerGas",
      "maxPriorityFeePerGas",
      "nonce",
      "to",
      "type",
      "value"
  ];
  const forwardErrors = [
      (0, _logger.Logger).errors.INSUFFICIENT_FUNDS,
      (0, _logger.Logger).errors.NONCE_EXPIRED,
      (0, _logger.Logger).errors.REPLACEMENT_UNDERPRICED
  ];
  class Signer {
      ///////////////////
      // Sub-classes MUST call super
      constructor(){
          logger.checkAbstract(new.target, Signer);
          (0, _properties.defineReadOnly)(this, "_isSigner", true);
      }
      ///////////////////
      // Sub-classes MAY override these
      getBalance(blockTag) {
          return __awaiter(this, void 0, void 0, function*() {
              this._checkProvider("getBalance");
              return yield this.provider.getBalance(this.getAddress(), blockTag);
          });
      }
      getTransactionCount(blockTag) {
          return __awaiter(this, void 0, void 0, function*() {
              this._checkProvider("getTransactionCount");
              return yield this.provider.getTransactionCount(this.getAddress(), blockTag);
          });
      }
      // Populates "from" if unspecified, and estimates the gas for the transaction
      estimateGas(transaction) {
          return __awaiter(this, void 0, void 0, function*() {
              this._checkProvider("estimateGas");
              const tx = yield (0, _properties.resolveProperties)(this.checkTransaction(transaction));
              return yield this.provider.estimateGas(tx);
          });
      }
      // Populates "from" if unspecified, and calls with the transaction
      call(transaction, blockTag) {
          return __awaiter(this, void 0, void 0, function*() {
              this._checkProvider("call");
              const tx = yield (0, _properties.resolveProperties)(this.checkTransaction(transaction));
              return yield this.provider.call(tx, blockTag);
          });
      }
      // Populates all fields in a transaction, signs it and sends it to the network
      sendTransaction(transaction) {
          return __awaiter(this, void 0, void 0, function*() {
              this._checkProvider("sendTransaction");
              const tx = yield this.populateTransaction(transaction);
              const signedTx = yield this.signTransaction(tx);
              return yield this.provider.sendTransaction(signedTx);
          });
      }
      getChainId() {
          return __awaiter(this, void 0, void 0, function*() {
              this._checkProvider("getChainId");
              const network = yield this.provider.getNetwork();
              return network.chainId;
          });
      }
      getGasPrice() {
          return __awaiter(this, void 0, void 0, function*() {
              this._checkProvider("getGasPrice");
              return yield this.provider.getGasPrice();
          });
      }
      getFeeData() {
          return __awaiter(this, void 0, void 0, function*() {
              this._checkProvider("getFeeData");
              return yield this.provider.getFeeData();
          });
      }
      resolveName(name) {
          return __awaiter(this, void 0, void 0, function*() {
              this._checkProvider("resolveName");
              return yield this.provider.resolveName(name);
          });
      }
      // Checks a transaction does not contain invalid keys and if
      // no "from" is provided, populates it.
      // - does NOT require a provider
      // - adds "from" is not present
      // - returns a COPY (safe to mutate the result)
      // By default called from: (overriding these prevents it)
      //   - call
      //   - estimateGas
      //   - populateTransaction (and therefor sendTransaction)
      checkTransaction(transaction) {
          for(const key in transaction)if (allowedTransactionKeys.indexOf(key) === -1) logger.throwArgumentError("invalid transaction key: " + key, "transaction", transaction);
          const tx = (0, _properties.shallowCopy)(transaction);
          if (tx.from == null) tx.from = this.getAddress();
          else // Make sure any provided address matches this signer
          tx.from = Promise.all([
              Promise.resolve(tx.from),
              this.getAddress()
          ]).then((result)=>{
              if (result[0].toLowerCase() !== result[1].toLowerCase()) logger.throwArgumentError("from address mismatch", "transaction", transaction);
              return result[0];
          });
          return tx;
      }
      // Populates ALL keys for a transaction and checks that "from" matches
      // this Signer. Should be used by sendTransaction but NOT by signTransaction.
      // By default called from: (overriding these prevents it)
      //   - sendTransaction
      //
      // Notes:
      //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas
      populateTransaction(transaction) {
          return __awaiter(this, void 0, void 0, function*() {
              const tx = yield (0, _properties.resolveProperties)(this.checkTransaction(transaction));
              if (tx.to != null) {
                  tx.to = Promise.resolve(tx.to).then((to)=>__awaiter(this, void 0, void 0, function*() {
                          if (to == null) return null;
                          const address = yield this.resolveName(to);
                          if (address == null) logger.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                          return address;
                      }));
                  // Prevent this error from causing an UnhandledPromiseException
                  tx.to.catch((error)=>{});
              }
              // Do not allow mixing pre-eip-1559 and eip-1559 properties
              const hasEip1559 = tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;
              if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) logger.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", transaction);
              else if ((tx.type === 0 || tx.type === 1) && hasEip1559) logger.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", transaction);
              if ((tx.type === 2 || tx.type == null) && tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null) // Fully-formed EIP-1559 transaction (skip getFeeData)
              tx.type = 2;
              else if (tx.type === 0 || tx.type === 1) // Explicit Legacy or EIP-2930 transaction
              // Populate missing gasPrice
              {
                  if (tx.gasPrice == null) tx.gasPrice = this.getGasPrice();
              } else {
                  // We need to get fee data to determine things
                  const feeData = yield this.getFeeData();
                  if (tx.type == null) {
                      // We need to auto-detect the intended type of this transaction...
                      if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
                          // The network supports EIP-1559!
                          // Upgrade transaction from null to eip-1559
                          tx.type = 2;
                          if (tx.gasPrice != null) {
                              // Using legacy gasPrice property on an eip-1559 network,
                              // so use gasPrice as both fee properties
                              const gasPrice = tx.gasPrice;
                              delete tx.gasPrice;
                              tx.maxFeePerGas = gasPrice;
                              tx.maxPriorityFeePerGas = gasPrice;
                          } else {
                              // Populate missing fee data
                              if (tx.maxFeePerGas == null) tx.maxFeePerGas = feeData.maxFeePerGas;
                              if (tx.maxPriorityFeePerGas == null) tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                          }
                      } else if (feeData.gasPrice != null) {
                          // Network doesn't support EIP-1559...
                          // ...but they are trying to use EIP-1559 properties
                          if (hasEip1559) logger.throwError("network does not support EIP-1559", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                              operation: "populateTransaction"
                          });
                          // Populate missing fee data
                          if (tx.gasPrice == null) tx.gasPrice = feeData.gasPrice;
                          // Explicitly set untyped transaction to legacy
                          tx.type = 0;
                      } else // getFeeData has failed us.
                      logger.throwError("failed to get consistent fee data", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                          operation: "signer.getFeeData"
                      });
                  } else if (tx.type === 2) {
                      // Explicitly using EIP-1559
                      // Populate missing fee data
                      if (tx.maxFeePerGas == null) tx.maxFeePerGas = feeData.maxFeePerGas;
                      if (tx.maxPriorityFeePerGas == null) tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                  }
              }
              if (tx.nonce == null) tx.nonce = this.getTransactionCount("pending");
              if (tx.gasLimit == null) tx.gasLimit = this.estimateGas(tx).catch((error)=>{
                  if (forwardErrors.indexOf(error.code) >= 0) throw error;
                  return logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", (0, _logger.Logger).errors.UNPREDICTABLE_GAS_LIMIT, {
                      error: error,
                      tx: tx
                  });
              });
              if (tx.chainId == null) tx.chainId = this.getChainId();
              else tx.chainId = Promise.all([
                  Promise.resolve(tx.chainId),
                  this.getChainId()
              ]).then((results)=>{
                  if (results[1] !== 0 && results[0] !== results[1]) logger.throwArgumentError("chainId address mismatch", "transaction", transaction);
                  return results[0];
              });
              return yield (0, _properties.resolveProperties)(tx);
          });
      }
      ///////////////////
      // Sub-classes SHOULD leave these alone
      _checkProvider(operation) {
          if (!this.provider) logger.throwError("missing provider", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
              operation: operation || "_checkProvider"
          });
      }
      static isSigner(value) {
          return !!(value && value._isSigner);
      }
  }
  class VoidSigner extends Signer {
      constructor(address, provider){
          super();
          (0, _properties.defineReadOnly)(this, "address", address);
          (0, _properties.defineReadOnly)(this, "provider", provider || null);
      }
      getAddress() {
          return Promise.resolve(this.address);
      }
      _fail(message, operation) {
          return Promise.resolve().then(()=>{
              logger.throwError(message, (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                  operation: operation
              });
          });
      }
      signMessage(message) {
          return this._fail("VoidSigner cannot sign messages", "signMessage");
      }
      signTransaction(transaction) {
          return this._fail("VoidSigner cannot sign transactions", "signTransaction");
      }
      _signTypedData(domain, types, value) {
          return this._fail("VoidSigner cannot sign typed data", "signTypedData");
      }
      connect(provider) {
          return new VoidSigner(this.address, provider);
      }
  }
  
  },{"@ethersproject/properties":"h3GJb","@ethersproject/logger":"hLvB2","./_version":"jstYZ","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"jstYZ":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "version", ()=>version);
  const version = "abstract-signer/5.7.0";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"d41Wa":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  //export default WS;
  //module.exports = WS;
  parcelHelpers.export(exports, "WebSocket", ()=>WS);
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  "use strict";
  let WS = null;
  try {
      WS = WebSocket;
      if (WS == null) throw new Error("inject please");
  } catch (error) {
      const logger = new (0, _logger.Logger)((0, _version.version));
      WS = function() {
          logger.throwError("WebSockets not supported in this environment", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
              operation: "new WebSocket()"
          });
      };
  }
  
  },{"@ethersproject/logger":"hLvB2","./_version":"6PYAk","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"9CTqA":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  // A StaticJsonRpcProvider is useful when you *know* for certain that
  // the backend will never change, as it never calls eth_chainId to
  // verify its backend. However, if the backend does change, the effects
  // are undefined and may include:
  // - inconsistent results
  // - locking up the UI
  // - block skew warnings
  // - wrong results
  // If the network is not explicit (i.e. auto-detection is expected), the
  // node MUST be running and available to respond to requests BEFORE this
  // is instantiated.
  parcelHelpers.export(exports, "StaticJsonRpcProvider", ()=>StaticJsonRpcProvider);
  parcelHelpers.export(exports, "UrlJsonRpcProvider", ()=>UrlJsonRpcProvider);
  var _properties = require("@ethersproject/properties");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  var _jsonRpcProvider = require("./json-rpc-provider");
  "use strict";
  var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
          });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
              try {
                  step(generator.next(value));
              } catch (e) {
                  reject(e);
              }
          }
          function rejected(value) {
              try {
                  step(generator["throw"](value));
              } catch (e) {
                  reject(e);
              }
          }
          function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const logger = new (0, _logger.Logger)((0, _version.version));
  class StaticJsonRpcProvider extends (0, _jsonRpcProvider.JsonRpcProvider) {
      detectNetwork() {
          const _super = Object.create(null, {
              detectNetwork: {
                  get: ()=>super.detectNetwork
              }
          });
          return __awaiter(this, void 0, void 0, function*() {
              let network = this.network;
              if (network == null) {
                  network = yield _super.detectNetwork.call(this);
                  if (!network) logger.throwError("no network detected", (0, _logger.Logger).errors.UNKNOWN_ERROR, {});
                  // If still not set, set it
                  if (this._network == null) {
                      // A static network does not support "any"
                      (0, _properties.defineReadOnly)(this, "_network", network);
                      this.emit("network", network, null);
                  }
              }
              return network;
          });
      }
  }
  class UrlJsonRpcProvider extends StaticJsonRpcProvider {
      constructor(network, apiKey){
          logger.checkAbstract(new.target, UrlJsonRpcProvider);
          // Normalize the Network and API Key
          network = (0, _properties.getStatic)(new.target, "getNetwork")(network);
          apiKey = (0, _properties.getStatic)(new.target, "getApiKey")(apiKey);
          const connection = (0, _properties.getStatic)(new.target, "getUrl")(network, apiKey);
          super(connection, network);
          if (typeof apiKey === "string") (0, _properties.defineReadOnly)(this, "apiKey", apiKey);
          else if (apiKey != null) Object.keys(apiKey).forEach((key)=>{
              (0, _properties.defineReadOnly)(this, key, apiKey[key]);
          });
      }
      _startPending() {
          logger.warn("WARNING: API provider does not support pending filters");
      }
      isCommunityResource() {
          return false;
      }
      getSigner(address) {
          return logger.throwError("API provider does not support signing", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
              operation: "getSigner"
          });
      }
      listAccounts() {
          return Promise.resolve([]);
      }
      // Return a defaultApiKey if null, otherwise validate the API key
      static getApiKey(apiKey) {
          return apiKey;
      }
      // Returns the url or connection for the given network and API key. The
      // API key will have been sanitized by the getApiKey first, so any validation
      // or transformations can be done there.
      static getUrl(network, apiKey) {
          return logger.throwError("not implemented; sub-classes must override getUrl", (0, _logger.Logger).errors.NOT_IMPLEMENTED, {
              operation: "getUrl"
          });
      }
  }
  
  },{"@ethersproject/properties":"h3GJb","@ethersproject/logger":"hLvB2","./_version":"6PYAk","./json-rpc-provider":"1sWtk","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"cKap1":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "AnkrProvider", ()=>AnkrProvider);
  var _formatter = require("./formatter");
  var _urlJsonRpcProvider = require("./url-json-rpc-provider");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  const logger = new (0, _logger.Logger)((0, _version.version));
  const defaultApiKey = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
  function getHost(name) {
      switch(name){
          case "homestead":
              return "rpc.ankr.com/eth/";
          case "ropsten":
              return "rpc.ankr.com/eth_ropsten/";
          case "rinkeby":
              return "rpc.ankr.com/eth_rinkeby/";
          case "goerli":
              return "rpc.ankr.com/eth_goerli/";
          case "matic":
              return "rpc.ankr.com/polygon/";
          case "arbitrum":
              return "rpc.ankr.com/arbitrum/";
      }
      return logger.throwArgumentError("unsupported network", "name", name);
  }
  class AnkrProvider extends (0, _urlJsonRpcProvider.UrlJsonRpcProvider) {
      isCommunityResource() {
          return this.apiKey === defaultApiKey;
      }
      static getApiKey(apiKey) {
          if (apiKey == null) return defaultApiKey;
          return apiKey;
      }
      static getUrl(network, apiKey) {
          if (apiKey == null) apiKey = defaultApiKey;
          const connection = {
              allowGzip: true,
              url: "https://" + getHost(network.name) + apiKey,
              throttleCallback: (attempt, url)=>{
                  if (apiKey.apiKey === defaultApiKey) (0, _formatter.showThrottleMessage)();
                  return Promise.resolve(true);
              }
          };
          if (apiKey.projectSecret != null) {
              connection.user = "";
              connection.password = apiKey.projectSecret;
          }
          return connection;
      }
  }
  
  },{"./formatter":"ZfOHh","./url-json-rpc-provider":"9CTqA","@ethersproject/logger":"hLvB2","./_version":"6PYAk","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"9VKg2":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "CloudflareProvider", ()=>CloudflareProvider);
  var _urlJsonRpcProvider = require("./url-json-rpc-provider");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  "use strict";
  var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
          });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
              try {
                  step(generator.next(value));
              } catch (e) {
                  reject(e);
              }
          }
          function rejected(value) {
              try {
                  step(generator["throw"](value));
              } catch (e) {
                  reject(e);
              }
          }
          function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const logger = new (0, _logger.Logger)((0, _version.version));
  class CloudflareProvider extends (0, _urlJsonRpcProvider.UrlJsonRpcProvider) {
      static getApiKey(apiKey) {
          if (apiKey != null) logger.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
          return null;
      }
      static getUrl(network, apiKey) {
          let host = null;
          switch(network.name){
              case "homestead":
                  host = "https://cloudflare-eth.com/";
                  break;
              default:
                  logger.throwArgumentError("unsupported network", "network", arguments[0]);
          }
          return host;
      }
      perform(method, params) {
          const _super = Object.create(null, {
              perform: {
                  get: ()=>super.perform
              }
          });
          return __awaiter(this, void 0, void 0, function*() {
              // The Cloudflare provider does not support eth_blockNumber,
              // so we get the latest block and pull it from that
              if (method === "getBlockNumber") {
                  const block = yield _super.perform.call(this, "getBlock", {
                      blockTag: "latest"
                  });
                  return block.number;
              }
              return _super.perform.call(this, method, params);
          });
      }
  }
  
  },{"./url-json-rpc-provider":"9CTqA","@ethersproject/logger":"hLvB2","./_version":"6PYAk","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"arYKc":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "EtherscanProvider", ()=>EtherscanProvider);
  var _bytes = require("@ethersproject/bytes");
  var _properties = require("@ethersproject/properties");
  var _transactions = require("@ethersproject/transactions");
  var _web = require("@ethersproject/web");
  var _formatter = require("./formatter");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  var _baseProvider = require("./base-provider");
  "use strict";
  var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
          });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
              try {
                  step(generator.next(value));
              } catch (e) {
                  reject(e);
              }
          }
          function rejected(value) {
              try {
                  step(generator["throw"](value));
              } catch (e) {
                  reject(e);
              }
          }
          function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const logger = new (0, _logger.Logger)((0, _version.version));
  // The transaction has already been sanitized by the calls in Provider
  function getTransactionPostData(transaction) {
      const result = {};
      for(let key in transaction){
          if (transaction[key] == null) continue;
          let value = transaction[key];
          if (key === "type" && value === 0) continue;
          // Quantity-types require no leading zero, unless 0
          if (({
              type: true,
              gasLimit: true,
              gasPrice: true,
              maxFeePerGs: true,
              maxPriorityFeePerGas: true,
              nonce: true,
              value: true
          })[key]) value = (0, _bytes.hexValue)((0, _bytes.hexlify)(value));
          else if (key === "accessList") value = "[" + (0, _transactions.accessListify)(value).map((set)=>{
              return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
          }).join(",") + "]";
          else value = (0, _bytes.hexlify)(value);
          result[key] = value;
      }
      return result;
  }
  function getResult(result) {
      // getLogs, getHistory have weird success responses
      if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) return result.result;
      if (result.status != 1 || typeof result.message !== "string" || !result.message.match(/^OK/)) {
          const error = new Error("invalid response");
          error.result = JSON.stringify(result);
          if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) error.throttleRetry = true;
          throw error;
      }
      return result.result;
  }
  function getJsonResult(result) {
      // This response indicates we are being throttled
      if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
          const error = new Error("throttled response");
          error.result = JSON.stringify(result);
          error.throttleRetry = true;
          throw error;
      }
      if (result.jsonrpc != "2.0") {
          // @TODO: not any
          const error = new Error("invalid response");
          error.result = JSON.stringify(result);
          throw error;
      }
      if (result.error) {
          // @TODO: not any
          const error = new Error(result.error.message || "unknown error");
          if (result.error.code) error.code = result.error.code;
          if (result.error.data) error.data = result.error.data;
          throw error;
      }
      return result.result;
  }
  // The blockTag was normalized as a string by the Provider pre-perform operations
  function checkLogTag(blockTag) {
      if (blockTag === "pending") throw new Error("pending not supported");
      if (blockTag === "latest") return blockTag;
      return parseInt(blockTag.substring(2), 16);
  }
  function checkError(method, error, transaction) {
      // Undo the "convenience" some nodes are attempting to prevent backwards
      // incompatibility; maybe for v6 consider forwarding reverts as errors
      if (method === "call" && error.code === (0, _logger.Logger).errors.SERVER_ERROR) {
          const e = error.error;
          // Etherscan keeps changing their string
          if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {
              // Etherscan prefixes the data like "Reverted 0x1234"
              let data = e.data;
              if (data) data = "0x" + data.replace(/^.*0x/i, "");
              if ((0, _bytes.isHexString)(data)) return data;
              logger.throwError("missing revert data in call exception", (0, _logger.Logger).errors.CALL_EXCEPTION, {
                  error,
                  data: "0x"
              });
          }
      }
      // Get the message from any nested error structure
      let message = error.message;
      if (error.code === (0, _logger.Logger).errors.SERVER_ERROR) {
          if (error.error && typeof error.error.message === "string") message = error.error.message;
          else if (typeof error.body === "string") message = error.body;
          else if (typeof error.responseText === "string") message = error.responseText;
      }
      message = (message || "").toLowerCase();
      // "Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0"
      if (message.match(/insufficient funds/)) logger.throwError("insufficient funds for intrinsic transaction cost", (0, _logger.Logger).errors.INSUFFICIENT_FUNDS, {
          error,
          method,
          transaction
      });
      // "Transaction with the same hash was already imported."
      if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) logger.throwError("nonce has already been used", (0, _logger.Logger).errors.NONCE_EXPIRED, {
          error,
          method,
          transaction
      });
      // "Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce."
      if (message.match(/another transaction with same nonce/)) logger.throwError("replacement fee too low", (0, _logger.Logger).errors.REPLACEMENT_UNDERPRICED, {
          error,
          method,
          transaction
      });
      if (message.match(/execution failed due to an exception|execution reverted/)) logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", (0, _logger.Logger).errors.UNPREDICTABLE_GAS_LIMIT, {
          error,
          method,
          transaction
      });
      throw error;
  }
  class EtherscanProvider extends (0, _baseProvider.BaseProvider) {
      constructor(network, apiKey){
          super(network);
          (0, _properties.defineReadOnly)(this, "baseUrl", this.getBaseUrl());
          (0, _properties.defineReadOnly)(this, "apiKey", apiKey || null);
      }
      getBaseUrl() {
          switch(this.network ? this.network.name : "invalid"){
              case "homestead":
                  return "https://api.etherscan.io";
              case "goerli":
                  return "https://api-goerli.etherscan.io";
              case "sepolia":
                  return "https://api-sepolia.etherscan.io";
              case "matic":
                  return "https://api.polygonscan.com";
              case "maticmum":
                  return "https://api-testnet.polygonscan.com";
              case "arbitrum":
                  return "https://api.arbiscan.io";
              case "arbitrum-goerli":
                  return "https://api-goerli.arbiscan.io";
              case "optimism":
                  return "https://api-optimistic.etherscan.io";
              case "optimism-goerli":
                  return "https://api-goerli-optimistic.etherscan.io";
              default:
          }
          return logger.throwArgumentError("unsupported network", "network", this.network.name);
      }
      getUrl(module, params) {
          const query = Object.keys(params).reduce((accum, key)=>{
              const value = params[key];
              if (value != null) accum += `&${key}=${value}`;
              return accum;
          }, "");
          const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : "";
          return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;
      }
      getPostUrl() {
          return `${this.baseUrl}/api`;
      }
      getPostData(module, params) {
          params.module = module;
          params.apikey = this.apiKey;
          return params;
      }
      fetch(module, params, post) {
          return __awaiter(this, void 0, void 0, function*() {
              const url = post ? this.getPostUrl() : this.getUrl(module, params);
              const payload = post ? this.getPostData(module, params) : null;
              const procFunc = module === "proxy" ? getJsonResult : getResult;
              this.emit("debug", {
                  action: "request",
                  request: url,
                  provider: this
              });
              const connection = {
                  url: url,
                  throttleSlotInterval: 1000,
                  throttleCallback: (attempt, url)=>{
                      if (this.isCommunityResource()) (0, _formatter.showThrottleMessage)();
                      return Promise.resolve(true);
                  }
              };
              let payloadStr = null;
              if (payload) {
                  connection.headers = {
                      "content-type": "application/x-www-form-urlencoded; charset=UTF-8"
                  };
                  payloadStr = Object.keys(payload).map((key)=>{
                      return `${key}=${payload[key]}`;
                  }).join("&");
              }
              const result = yield (0, _web.fetchJson)(connection, payloadStr, procFunc || getJsonResult);
              this.emit("debug", {
                  action: "response",
                  request: url,
                  response: (0, _properties.deepCopy)(result),
                  provider: this
              });
              return result;
          });
      }
      detectNetwork() {
          return __awaiter(this, void 0, void 0, function*() {
              return this.network;
          });
      }
      perform(method, params) {
          const _super = Object.create(null, {
              perform: {
                  get: ()=>super.perform
              }
          });
          return __awaiter(this, void 0, void 0, function*() {
              switch(method){
                  case "getBlockNumber":
                      return this.fetch("proxy", {
                          action: "eth_blockNumber"
                      });
                  case "getGasPrice":
                      return this.fetch("proxy", {
                          action: "eth_gasPrice"
                      });
                  case "getBalance":
                      // Returns base-10 result
                      return this.fetch("account", {
                          action: "balance",
                          address: params.address,
                          tag: params.blockTag
                      });
                  case "getTransactionCount":
                      return this.fetch("proxy", {
                          action: "eth_getTransactionCount",
                          address: params.address,
                          tag: params.blockTag
                      });
                  case "getCode":
                      return this.fetch("proxy", {
                          action: "eth_getCode",
                          address: params.address,
                          tag: params.blockTag
                      });
                  case "getStorageAt":
                      return this.fetch("proxy", {
                          action: "eth_getStorageAt",
                          address: params.address,
                          position: params.position,
                          tag: params.blockTag
                      });
                  case "sendTransaction":
                      return this.fetch("proxy", {
                          action: "eth_sendRawTransaction",
                          hex: params.signedTransaction
                      }, true).catch((error)=>{
                          return checkError("sendTransaction", error, params.signedTransaction);
                      });
                  case "getBlock":
                      if (params.blockTag) return this.fetch("proxy", {
                          action: "eth_getBlockByNumber",
                          tag: params.blockTag,
                          boolean: params.includeTransactions ? "true" : "false"
                      });
                      throw new Error("getBlock by blockHash not implemented");
                  case "getTransaction":
                      return this.fetch("proxy", {
                          action: "eth_getTransactionByHash",
                          txhash: params.transactionHash
                      });
                  case "getTransactionReceipt":
                      return this.fetch("proxy", {
                          action: "eth_getTransactionReceipt",
                          txhash: params.transactionHash
                      });
                  case "call":
                      {
                          if (params.blockTag !== "latest") throw new Error("EtherscanProvider does not support blockTag for call");
                          const postData = getTransactionPostData(params.transaction);
                          postData.module = "proxy";
                          postData.action = "eth_call";
                          try {
                              return yield this.fetch("proxy", postData, true);
                          } catch (error) {
                              return checkError("call", error, params.transaction);
                          }
                      }
                  case "estimateGas":
                      {
                          const postData = getTransactionPostData(params.transaction);
                          postData.module = "proxy";
                          postData.action = "eth_estimateGas";
                          try {
                              return yield this.fetch("proxy", postData, true);
                          } catch (error) {
                              return checkError("estimateGas", error, params.transaction);
                          }
                      }
                  case "getLogs":
                      {
                          const args = {
                              action: "getLogs"
                          };
                          if (params.filter.fromBlock) args.fromBlock = checkLogTag(params.filter.fromBlock);
                          if (params.filter.toBlock) args.toBlock = checkLogTag(params.filter.toBlock);
                          if (params.filter.address) args.address = params.filter.address;
                          // @TODO: We can handle slightly more complicated logs using the logs API
                          if (params.filter.topics && params.filter.topics.length > 0) {
                              if (params.filter.topics.length > 1) logger.throwError("unsupported topic count", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                                  topics: params.filter.topics
                              });
                              if (params.filter.topics.length === 1) {
                                  const topic0 = params.filter.topics[0];
                                  if (typeof topic0 !== "string" || topic0.length !== 66) logger.throwError("unsupported topic format", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                                      topic0: topic0
                                  });
                                  args.topic0 = topic0;
                              }
                          }
                          const logs = yield this.fetch("logs", args);
                          // Cache txHash => blockHash
                          let blocks = {};
                          // Add any missing blockHash to the logs
                          for(let i = 0; i < logs.length; i++){
                              const log = logs[i];
                              if (log.blockHash != null) continue;
                              if (blocks[log.blockNumber] == null) {
                                  const block = yield this.getBlock(log.blockNumber);
                                  if (block) blocks[log.blockNumber] = block.hash;
                              }
                              log.blockHash = blocks[log.blockNumber];
                          }
                          return logs;
                      }
                  case "getEtherPrice":
                      if (this.network.name !== "homestead") return 0.0;
                      return parseFloat((yield this.fetch("stats", {
                          action: "ethprice"
                      })).ethusd);
                  default:
                      break;
              }
              return _super.perform.call(this, method, params);
          });
      }
      // Note: The `page` page parameter only allows pagination within the
      //       10,000 window available without a page and offset parameter
      //       Error: Result window is too large, PageNo x Offset size must
      //              be less than or equal to 10000
      getHistory(addressOrName, startBlock, endBlock) {
          return __awaiter(this, void 0, void 0, function*() {
              const params = {
                  action: "txlist",
                  address: yield this.resolveName(addressOrName),
                  startblock: startBlock == null ? 0 : startBlock,
                  endblock: endBlock == null ? 99999999 : endBlock,
                  sort: "asc"
              };
              const result = yield this.fetch("account", params);
              return result.map((tx)=>{
                  [
                      "contractAddress",
                      "to"
                  ].forEach(function(key) {
                      if (tx[key] == "") delete tx[key];
                  });
                  if (tx.creates == null && tx.contractAddress != null) tx.creates = tx.contractAddress;
                  const item = this.formatter.transactionResponse(tx);
                  if (tx.timeStamp) item.timestamp = parseInt(tx.timeStamp);
                  return item;
              });
          });
      }
      isCommunityResource() {
          return this.apiKey == null;
      }
  }
  
  },{"@ethersproject/bytes":"htrqZ","@ethersproject/properties":"h3GJb","@ethersproject/transactions":"d1ust","@ethersproject/web":"5yjI3","./formatter":"ZfOHh","@ethersproject/logger":"hLvB2","./_version":"6PYAk","./base-provider":"7OFAa","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"2wNFK":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "FallbackProvider", ()=>FallbackProvider);
  var _abstractProvider = require("@ethersproject/abstract-provider");
  var _bignumber = require("@ethersproject/bignumber");
  var _bytes = require("@ethersproject/bytes");
  var _properties = require("@ethersproject/properties");
  var _random = require("@ethersproject/random");
  var _web = require("@ethersproject/web");
  var _baseProvider = require("./base-provider");
  var _formatter = require("./formatter");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  "use strict";
  var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
          });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
              try {
                  step(generator.next(value));
              } catch (e) {
                  reject(e);
              }
          }
          function rejected(value) {
              try {
                  step(generator["throw"](value));
              } catch (e) {
                  reject(e);
              }
          }
          function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  };
  const logger = new (0, _logger.Logger)((0, _version.version));
  function now() {
      return new Date().getTime();
  }
  // Returns to network as long as all agree, or null if any is null.
  // Throws an error if any two networks do not match.
  function checkNetworks(networks) {
      let result = null;
      for(let i = 0; i < networks.length; i++){
          const network = networks[i];
          // Null! We do not know our network; bail.
          if (network == null) return null;
          if (result) // Make sure the network matches the previous networks
          {
              if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) logger.throwArgumentError("provider mismatch", "networks", networks);
          } else result = network;
      }
      return result;
  }
  function median(values, maxDelta) {
      values = values.slice().sort();
      const middle = Math.floor(values.length / 2);
      // Odd length; take the middle
      if (values.length % 2) return values[middle];
      // Even length; take the average of the two middle
      const a = values[middle - 1], b = values[middle];
      if (maxDelta != null && Math.abs(a - b) > maxDelta) return null;
      return (a + b) / 2;
  }
  function serialize(value) {
      if (value === null) return "null";
      else if (typeof value === "number" || typeof value === "boolean") return JSON.stringify(value);
      else if (typeof value === "string") return value;
      else if ((0, _bignumber.BigNumber).isBigNumber(value)) return value.toString();
      else if (Array.isArray(value)) return JSON.stringify(value.map((i)=>serialize(i)));
      else if (typeof value === "object") {
          const keys = Object.keys(value);
          keys.sort();
          return "{" + keys.map((key)=>{
              let v = value[key];
              if (typeof v === "function") v = "[function]";
              else v = serialize(v);
              return JSON.stringify(key) + ":" + v;
          }).join(",") + "}";
      }
      throw new Error("unknown value type: " + typeof value);
  }
  // Next request ID to use for emitting debug info
  let nextRid = 1;
  function stall(duration) {
      let cancel = null;
      let timer = null;
      let promise = new Promise((resolve)=>{
          cancel = function() {
              if (timer) {
                  clearTimeout(timer);
                  timer = null;
              }
              resolve();
          };
          timer = setTimeout(cancel, duration);
      });
      const wait = (func)=>{
          promise = promise.then(func);
          return promise;
      };
      function getPromise() {
          return promise;
      }
      return {
          cancel,
          getPromise,
          wait
      };
  }
  const ForwardErrors = [
      (0, _logger.Logger).errors.CALL_EXCEPTION,
      (0, _logger.Logger).errors.INSUFFICIENT_FUNDS,
      (0, _logger.Logger).errors.NONCE_EXPIRED,
      (0, _logger.Logger).errors.REPLACEMENT_UNDERPRICED,
      (0, _logger.Logger).errors.UNPREDICTABLE_GAS_LIMIT
  ];
  const ForwardProperties = [
      "address",
      "args",
      "errorArgs",
      "errorSignature",
      "method",
      "transaction"
  ];
  function exposeDebugConfig(config, now) {
      const result = {
          weight: config.weight
      };
      Object.defineProperty(result, "provider", {
          get: ()=>config.provider
      });
      if (config.start) result.start = config.start;
      if (now) result.duration = now - config.start;
      if (config.done) {
          if (config.error) result.error = config.error;
          else result.result = config.result || null;
      }
      return result;
  }
  function normalizedTally(normalize, quorum) {
      return function(configs) {
          // Count the votes for each result
          const tally = {};
          configs.forEach((c)=>{
              const value = normalize(c.result);
              if (!tally[value]) tally[value] = {
                  count: 0,
                  result: c.result
              };
              tally[value].count++;
          });
          // Check for a quorum on any given result
          const keys = Object.keys(tally);
          for(let i = 0; i < keys.length; i++){
              const check = tally[keys[i]];
              if (check.count >= quorum) return check.result;
          }
          // No quroum
          return undefined;
      };
  }
  function getProcessFunc(provider, method, params) {
      let normalize = serialize;
      switch(method){
          case "getBlockNumber":
              // Return the median value, unless there is (median + 1) is also
              // present, in which case that is probably true and the median
              // is going to be stale soon. In the event of a malicious node,
              // the lie will be true soon enough.
              return function(configs) {
                  const values = configs.map((c)=>c.result);
                  // Get the median block number
                  let blockNumber = median(configs.map((c)=>c.result), 2);
                  if (blockNumber == null) return undefined;
                  blockNumber = Math.ceil(blockNumber);
                  // If the next block height is present, its prolly safe to use
                  if (values.indexOf(blockNumber + 1) >= 0) blockNumber++;
                  // Don't ever roll back the blockNumber
                  if (blockNumber >= provider._highestBlockNumber) provider._highestBlockNumber = blockNumber;
                  return provider._highestBlockNumber;
              };
          case "getGasPrice":
              // Return the middle (round index up) value, similar to median
              // but do not average even entries and choose the higher.
              // Malicious actors must compromise 50% of the nodes to lie.
              return function(configs) {
                  const values = configs.map((c)=>c.result);
                  values.sort();
                  return values[Math.floor(values.length / 2)];
              };
          case "getEtherPrice":
              // Returns the median price. Malicious actors must compromise at
              // least 50% of the nodes to lie (in a meaningful way).
              return function(configs) {
                  return median(configs.map((c)=>c.result));
              };
          // No additional normalizing required; serialize is enough
          case "getBalance":
          case "getTransactionCount":
          case "getCode":
          case "getStorageAt":
          case "call":
          case "estimateGas":
          case "getLogs":
              break;
          // We drop the confirmations from transactions as it is approximate
          case "getTransaction":
          case "getTransactionReceipt":
              normalize = function(tx) {
                  if (tx == null) return null;
                  tx = (0, _properties.shallowCopy)(tx);
                  tx.confirmations = -1;
                  return serialize(tx);
              };
              break;
          // We drop the confirmations from transactions as it is approximate
          case "getBlock":
              // We drop the confirmations from transactions as it is approximate
              if (params.includeTransactions) normalize = function(block) {
                  if (block == null) return null;
                  block = (0, _properties.shallowCopy)(block);
                  block.transactions = block.transactions.map((tx)=>{
                      tx = (0, _properties.shallowCopy)(tx);
                      tx.confirmations = -1;
                      return tx;
                  });
                  return serialize(block);
              };
              else normalize = function(block) {
                  if (block == null) return null;
                  return serialize(block);
              };
              break;
          default:
              throw new Error("unknown method: " + method);
      }
      // Return the result if and only if the expected quorum is
      // satisfied and agreed upon for the final result.
      return normalizedTally(normalize, provider.quorum);
  }
  // If we are doing a blockTag query, we need to make sure the backend is
  // caught up to the FallbackProvider, before sending a request to it.
  function waitForSync(config, blockNumber) {
      return __awaiter(this, void 0, void 0, function*() {
          const provider = config.provider;
          if (provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1) return provider;
          return (0, _web.poll)(()=>{
              return new Promise((resolve, reject)=>{
                  setTimeout(function() {
                      // We are synced
                      if (provider.blockNumber >= blockNumber) return resolve(provider);
                      // We're done; just quit
                      if (config.cancelled) return resolve(null);
                      // Try again, next block
                      return resolve(undefined);
                  }, 0);
              });
          }, {
              oncePoll: provider
          });
      });
  }
  function getRunner(config, currentBlockNumber, method, params) {
      return __awaiter(this, void 0, void 0, function*() {
          let provider = config.provider;
          switch(method){
              case "getBlockNumber":
              case "getGasPrice":
                  return provider[method]();
              case "getEtherPrice":
                  if (provider.getEtherPrice) return provider.getEtherPrice();
                  break;
              case "getBalance":
              case "getTransactionCount":
              case "getCode":
                  if (params.blockTag && (0, _bytes.isHexString)(params.blockTag)) provider = yield waitForSync(config, currentBlockNumber);
                  return provider[method](params.address, params.blockTag || "latest");
              case "getStorageAt":
                  if (params.blockTag && (0, _bytes.isHexString)(params.blockTag)) provider = yield waitForSync(config, currentBlockNumber);
                  return provider.getStorageAt(params.address, params.position, params.blockTag || "latest");
              case "getBlock":
                  if (params.blockTag && (0, _bytes.isHexString)(params.blockTag)) provider = yield waitForSync(config, currentBlockNumber);
                  return provider[params.includeTransactions ? "getBlockWithTransactions" : "getBlock"](params.blockTag || params.blockHash);
              case "call":
              case "estimateGas":
                  if (params.blockTag && (0, _bytes.isHexString)(params.blockTag)) provider = yield waitForSync(config, currentBlockNumber);
                  if (method === "call" && params.blockTag) return provider[method](params.transaction, params.blockTag);
                  return provider[method](params.transaction);
              case "getTransaction":
              case "getTransactionReceipt":
                  return provider[method](params.transactionHash);
              case "getLogs":
                  {
                      let filter = params.filter;
                      if (filter.fromBlock && (0, _bytes.isHexString)(filter.fromBlock) || filter.toBlock && (0, _bytes.isHexString)(filter.toBlock)) provider = yield waitForSync(config, currentBlockNumber);
                      return provider.getLogs(filter);
                  }
          }
          return logger.throwError("unknown method error", (0, _logger.Logger).errors.UNKNOWN_ERROR, {
              method: method,
              params: params
          });
      });
  }
  class FallbackProvider extends (0, _baseProvider.BaseProvider) {
      constructor(providers, quorum){
          if (providers.length === 0) logger.throwArgumentError("missing providers", "providers", providers);
          const providerConfigs = providers.map((configOrProvider, index)=>{
              if ((0, _abstractProvider.Provider).isProvider(configOrProvider)) {
                  const stallTimeout = (0, _formatter.isCommunityResource)(configOrProvider) ? 2000 : 750;
                  const priority = 1;
                  return Object.freeze({
                      provider: configOrProvider,
                      weight: 1,
                      stallTimeout,
                      priority
                  });
              }
              const config = (0, _properties.shallowCopy)(configOrProvider);
              if (config.priority == null) config.priority = 1;
              if (config.stallTimeout == null) config.stallTimeout = (0, _formatter.isCommunityResource)(configOrProvider) ? 2000 : 750;
              if (config.weight == null) config.weight = 1;
              const weight = config.weight;
              if (weight % 1 || weight > 512 || weight < 1) logger.throwArgumentError("invalid weight; must be integer in [1, 512]", `providers[${index}].weight`, weight);
              return Object.freeze(config);
          });
          const total = providerConfigs.reduce((accum, c)=>accum + c.weight, 0);
          if (quorum == null) quorum = total / 2;
          else if (quorum > total) logger.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
          // Are all providers' networks are known
          let networkOrReady = checkNetworks(providerConfigs.map((c)=>c.provider.network));
          // Not all networks are known; we must stall
          if (networkOrReady == null) networkOrReady = new Promise((resolve, reject)=>{
              setTimeout(()=>{
                  this.detectNetwork().then(resolve, reject);
              }, 0);
          });
          super(networkOrReady);
          // Preserve a copy, so we do not get mutated
          (0, _properties.defineReadOnly)(this, "providerConfigs", Object.freeze(providerConfigs));
          (0, _properties.defineReadOnly)(this, "quorum", quorum);
          this._highestBlockNumber = -1;
      }
      detectNetwork() {
          return __awaiter(this, void 0, void 0, function*() {
              const networks = yield Promise.all(this.providerConfigs.map((c)=>c.provider.getNetwork()));
              return checkNetworks(networks);
          });
      }
      perform(method, params) {
          return __awaiter(this, void 0, void 0, function*() {
              // Sending transactions is special; always broadcast it to all backends
              if (method === "sendTransaction") {
                  const results = yield Promise.all(this.providerConfigs.map((c)=>{
                      return c.provider.sendTransaction(params.signedTransaction).then((result)=>{
                          return result.hash;
                      }, (error)=>{
                          return error;
                      });
                  }));
                  // Any success is good enough (other errors are likely "already seen" errors
                  for(let i = 0; i < results.length; i++){
                      const result = results[i];
                      if (typeof result === "string") return result;
                  }
                  // They were all an error; pick the first error
                  throw results[0];
              }
              // We need to make sure we are in sync with our backends, so we need
              // to know this before we can make a lot of calls
              if (this._highestBlockNumber === -1 && method !== "getBlockNumber") yield this.getBlockNumber();
              const processFunc = getProcessFunc(this, method, params);
              // Shuffle the providers and then sort them by their priority; we
              // shallowCopy them since we will store the result in them too
              const configs = (0, _random.shuffled)(this.providerConfigs.map((0, _properties.shallowCopy)));
              configs.sort((a, b)=>a.priority - b.priority);
              const currentBlockNumber = this._highestBlockNumber;
              let i = 0;
              let first = true;
              while(true){
                  const t0 = now();
                  // Compute the inflight weight (exclude anything past)
                  let inflightWeight = configs.filter((c)=>c.runner && t0 - c.start < c.stallTimeout).reduce((accum, c)=>accum + c.weight, 0);
                  // Start running enough to meet quorum
                  while(inflightWeight < this.quorum && i < configs.length){
                      const config = configs[i++];
                      const rid = nextRid++;
                      config.start = now();
                      config.staller = stall(config.stallTimeout);
                      config.staller.wait(()=>{
                          config.staller = null;
                      });
                      config.runner = getRunner(config, currentBlockNumber, method, params).then((result)=>{
                          config.done = true;
                          config.result = result;
                          if (this.listenerCount("debug")) this.emit("debug", {
                              action: "request",
                              rid: rid,
                              backend: exposeDebugConfig(config, now()),
                              request: {
                                  method: method,
                                  params: (0, _properties.deepCopy)(params)
                              },
                              provider: this
                          });
                      }, (error)=>{
                          config.done = true;
                          config.error = error;
                          if (this.listenerCount("debug")) this.emit("debug", {
                              action: "request",
                              rid: rid,
                              backend: exposeDebugConfig(config, now()),
                              request: {
                                  method: method,
                                  params: (0, _properties.deepCopy)(params)
                              },
                              provider: this
                          });
                      });
                      if (this.listenerCount("debug")) this.emit("debug", {
                          action: "request",
                          rid: rid,
                          backend: exposeDebugConfig(config, null),
                          request: {
                              method: method,
                              params: (0, _properties.deepCopy)(params)
                          },
                          provider: this
                      });
                      inflightWeight += config.weight;
                  }
                  // Wait for anything meaningful to finish or stall out
                  const waiting = [];
                  configs.forEach((c)=>{
                      if (c.done || !c.runner) return;
                      waiting.push(c.runner);
                      if (c.staller) waiting.push(c.staller.getPromise());
                  });
                  if (waiting.length) yield Promise.race(waiting);
                  // Check the quorum and process the results; the process function
                  // may additionally decide the quorum is not met
                  const results = configs.filter((c)=>c.done && c.error == null);
                  if (results.length >= this.quorum) {
                      const result = processFunc(results);
                      if (result !== undefined) {
                          // Shut down any stallers
                          configs.forEach((c)=>{
                              if (c.staller) c.staller.cancel();
                              c.cancelled = true;
                          });
                          return result;
                      }
                      if (!first) yield stall(100).getPromise();
                      first = false;
                  }
                  // No result, check for errors that should be forwarded
                  const errors = configs.reduce((accum, c)=>{
                      if (!c.done || c.error == null) return accum;
                      const code = c.error.code;
                      if (ForwardErrors.indexOf(code) >= 0) {
                          if (!accum[code]) accum[code] = {
                              error: c.error,
                              weight: 0
                          };
                          accum[code].weight += c.weight;
                      }
                      return accum;
                  }, {});
                  Object.keys(errors).forEach((errorCode)=>{
                      const tally = errors[errorCode];
                      if (tally.weight < this.quorum) return;
                      // Shut down any stallers
                      configs.forEach((c)=>{
                          if (c.staller) c.staller.cancel();
                          c.cancelled = true;
                      });
                      const e = tally.error;
                      const props = {};
                      ForwardProperties.forEach((name)=>{
                          if (e[name] == null) return;
                          props[name] = e[name];
                      });
                      logger.throwError(e.reason || e.message, errorCode, props);
                  });
                  // All configs have run to completion; we will never get more data
                  if (configs.filter((c)=>!c.done).length === 0) break;
              }
              // Shut down any stallers; shouldn't be any
              configs.forEach((c)=>{
                  if (c.staller) c.staller.cancel();
                  c.cancelled = true;
              });
              return logger.throwError("failed to meet quorum", (0, _logger.Logger).errors.SERVER_ERROR, {
                  method: method,
                  params: params,
                  //results: configs.map((c) => c.result),
                  //errors: configs.map((c) => c.error),
                  results: configs.map((c)=>exposeDebugConfig(c)),
                  provider: this
              });
          });
      }
  }
  
  },{"@ethersproject/abstract-provider":"g1jr1","@ethersproject/bignumber":"ckYYW","@ethersproject/bytes":"htrqZ","@ethersproject/properties":"h3GJb","@ethersproject/random":"7myQM","@ethersproject/web":"5yjI3","./base-provider":"7OFAa","./formatter":"ZfOHh","@ethersproject/logger":"hLvB2","./_version":"6PYAk","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"7myQM":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "randomBytes", ()=>(0, _random.randomBytes));
  parcelHelpers.export(exports, "shuffled", ()=>(0, _shuffle.shuffled));
  var _random = require("./random");
  var _shuffle = require("./shuffle");
  "use strict";
  
  },{"./random":"h26nx","./shuffle":"aDkFd","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"h26nx":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "randomBytes", ()=>randomBytes);
  var _bytes = require("@ethersproject/bytes");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  var global = arguments[3];
  "use strict";
  const logger = new (0, _logger.Logger)((0, _version.version));
  // Debugging line for testing browser lib in node
  //const window = { crypto: { getRandomValues: () => { } } };
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis
  function getGlobal() {
      if (typeof self !== "undefined") return self;
      if (typeof window !== "undefined") return window;
      if (typeof global !== "undefined") return global;
      throw new Error("unable to locate global object");
  }
  const anyGlobal = getGlobal();
  let crypto = anyGlobal.crypto || anyGlobal.msCrypto;
  if (!crypto || !crypto.getRandomValues) {
      logger.warn("WARNING: Missing strong random number source");
      crypto = {
          getRandomValues: function(buffer) {
              return logger.throwError("no secure random source avaialble", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                  operation: "crypto.getRandomValues"
              });
          }
      };
  }
  function randomBytes(length) {
      if (length <= 0 || length > 1024 || length % 1 || length != length) logger.throwArgumentError("invalid length", "length", length);
      const result = new Uint8Array(length);
      crypto.getRandomValues(result);
      return (0, _bytes.arrayify)(result);
  }
  
  },{"@ethersproject/bytes":"htrqZ","@ethersproject/logger":"hLvB2","./_version":"dxTsA","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"dxTsA":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "version", ()=>version);
  const version = "random/5.7.0";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"aDkFd":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "shuffled", ()=>shuffled);
  "use strict";
  function shuffled(array) {
      array = array.slice();
      for(let i = array.length - 1; i > 0; i--){
          const j = Math.floor(Math.random() * (i + 1));
          const tmp = array[i];
          array[i] = array[j];
          array[j] = tmp;
      }
      return array;
  }
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"6WQjk":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "IpcProvider", ()=>IpcProvider);
  "use strict";
  const IpcProvider = null;
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"iqlOM":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "InfuraWebSocketProvider", ()=>InfuraWebSocketProvider);
  parcelHelpers.export(exports, "InfuraProvider", ()=>InfuraProvider);
  var _properties = require("@ethersproject/properties");
  var _websocketProvider = require("./websocket-provider");
  var _formatter = require("./formatter");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  var _urlJsonRpcProvider = require("./url-json-rpc-provider");
  "use strict";
  const logger = new (0, _logger.Logger)((0, _version.version));
  const defaultProjectId = "84842078b09946638c03157f83405213";
  class InfuraWebSocketProvider extends (0, _websocketProvider.WebSocketProvider) {
      constructor(network, apiKey){
          const provider = new InfuraProvider(network, apiKey);
          const connection = provider.connection;
          if (connection.password) logger.throwError("INFURA WebSocket project secrets unsupported", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
              operation: "InfuraProvider.getWebSocketProvider()"
          });
          const url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
          super(url, network);
          (0, _properties.defineReadOnly)(this, "apiKey", provider.projectId);
          (0, _properties.defineReadOnly)(this, "projectId", provider.projectId);
          (0, _properties.defineReadOnly)(this, "projectSecret", provider.projectSecret);
      }
      isCommunityResource() {
          return this.projectId === defaultProjectId;
      }
  }
  class InfuraProvider extends (0, _urlJsonRpcProvider.UrlJsonRpcProvider) {
      static getWebSocketProvider(network, apiKey) {
          return new InfuraWebSocketProvider(network, apiKey);
      }
      static getApiKey(apiKey) {
          const apiKeyObj = {
              apiKey: defaultProjectId,
              projectId: defaultProjectId,
              projectSecret: null
          };
          if (apiKey == null) return apiKeyObj;
          if (typeof apiKey === "string") apiKeyObj.projectId = apiKey;
          else if (apiKey.projectSecret != null) {
              logger.assertArgument(typeof apiKey.projectId === "string", "projectSecret requires a projectId", "projectId", apiKey.projectId);
              logger.assertArgument(typeof apiKey.projectSecret === "string", "invalid projectSecret", "projectSecret", "[REDACTED]");
              apiKeyObj.projectId = apiKey.projectId;
              apiKeyObj.projectSecret = apiKey.projectSecret;
          } else if (apiKey.projectId) apiKeyObj.projectId = apiKey.projectId;
          apiKeyObj.apiKey = apiKeyObj.projectId;
          return apiKeyObj;
      }
      static getUrl(network, apiKey) {
          let host = null;
          switch(network ? network.name : "unknown"){
              case "homestead":
                  host = "mainnet.infura.io";
                  break;
              case "goerli":
                  host = "goerli.infura.io";
                  break;
              case "sepolia":
                  host = "sepolia.infura.io";
                  break;
              case "matic":
                  host = "polygon-mainnet.infura.io";
                  break;
              case "maticmum":
                  host = "polygon-mumbai.infura.io";
                  break;
              case "optimism":
                  host = "optimism-mainnet.infura.io";
                  break;
              case "optimism-goerli":
                  host = "optimism-goerli.infura.io";
                  break;
              case "arbitrum":
                  host = "arbitrum-mainnet.infura.io";
                  break;
              case "arbitrum-goerli":
                  host = "arbitrum-goerli.infura.io";
                  break;
              default:
                  logger.throwError("unsupported network", (0, _logger.Logger).errors.INVALID_ARGUMENT, {
                      argument: "network",
                      value: network
                  });
          }
          const connection = {
              allowGzip: true,
              url: "https://" + host + "/v3/" + apiKey.projectId,
              throttleCallback: (attempt, url)=>{
                  if (apiKey.projectId === defaultProjectId) (0, _formatter.showThrottleMessage)();
                  return Promise.resolve(true);
              }
          };
          if (apiKey.projectSecret != null) {
              connection.user = "";
              connection.password = apiKey.projectSecret;
          }
          return connection;
      }
      isCommunityResource() {
          return this.projectId === defaultProjectId;
      }
  }
  
  },{"@ethersproject/properties":"h3GJb","./websocket-provider":"9KF9f","./formatter":"ZfOHh","@ethersproject/logger":"hLvB2","./_version":"6PYAk","./url-json-rpc-provider":"9CTqA","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"hGNo4":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  // Experimental
  parcelHelpers.export(exports, "JsonRpcBatchProvider", ()=>JsonRpcBatchProvider);
  var _properties = require("@ethersproject/properties");
  var _web = require("@ethersproject/web");
  var _jsonRpcProvider = require("./json-rpc-provider");
  class JsonRpcBatchProvider extends (0, _jsonRpcProvider.JsonRpcProvider) {
      send(method, params) {
          const request = {
              method: method,
              params: params,
              id: this._nextId++,
              jsonrpc: "2.0"
          };
          if (this._pendingBatch == null) this._pendingBatch = [];
          const inflightRequest = {
              request,
              resolve: null,
              reject: null
          };
          const promise = new Promise((resolve, reject)=>{
              inflightRequest.resolve = resolve;
              inflightRequest.reject = reject;
          });
          this._pendingBatch.push(inflightRequest);
          if (!this._pendingBatchAggregator) // Schedule batch for next event loop + short duration
          this._pendingBatchAggregator = setTimeout(()=>{
              // Get teh current batch and clear it, so new requests
              // go into the next batch
              const batch = this._pendingBatch;
              this._pendingBatch = null;
              this._pendingBatchAggregator = null;
              // Get the request as an array of requests
              const request = batch.map((inflight)=>inflight.request);
              this.emit("debug", {
                  action: "requestBatch",
                  request: (0, _properties.deepCopy)(request),
                  provider: this
              });
              return (0, _web.fetchJson)(this.connection, JSON.stringify(request)).then((result)=>{
                  this.emit("debug", {
                      action: "response",
                      request: request,
                      response: result,
                      provider: this
                  });
                  // For each result, feed it to the correct Promise, depending
                  // on whether it was a success or error
                  batch.forEach((inflightRequest, index)=>{
                      const payload = result[index];
                      if (payload.error) {
                          const error = new Error(payload.error.message);
                          error.code = payload.error.code;
                          error.data = payload.error.data;
                          inflightRequest.reject(error);
                      } else inflightRequest.resolve(payload.result);
                  });
              }, (error)=>{
                  this.emit("debug", {
                      action: "response",
                      error: error,
                      request: request,
                      provider: this
                  });
                  batch.forEach((inflightRequest)=>{
                      inflightRequest.reject(error);
                  });
              });
          }, 10);
          return promise;
      }
  }
  
  },{"@ethersproject/properties":"h3GJb","@ethersproject/web":"5yjI3","./json-rpc-provider":"1sWtk","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"8l5lW":[function(require,module,exports) {
  /* istanbul ignore file */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "NodesmithProvider", ()=>NodesmithProvider);
  var _urlJsonRpcProvider = require("./url-json-rpc-provider");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  "use strict";
  const logger = new (0, _logger.Logger)((0, _version.version));
  // Special API key provided by Nodesmith for ethers.js
  const defaultApiKey = "ETHERS_JS_SHARED";
  class NodesmithProvider extends (0, _urlJsonRpcProvider.UrlJsonRpcProvider) {
      static getApiKey(apiKey) {
          if (apiKey && typeof apiKey !== "string") logger.throwArgumentError("invalid apiKey", "apiKey", apiKey);
          return apiKey || defaultApiKey;
      }
      static getUrl(network, apiKey) {
          logger.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
          let host = null;
          switch(network.name){
              case "homestead":
                  host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
                  break;
              case "ropsten":
                  host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
                  break;
              case "rinkeby":
                  host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
                  break;
              case "goerli":
                  host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
                  break;
              case "kovan":
                  host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
                  break;
              default:
                  logger.throwArgumentError("unsupported network", "network", arguments[0]);
          }
          return host + "?apiKey=" + apiKey;
      }
  }
  
  },{"./url-json-rpc-provider":"9CTqA","@ethersproject/logger":"hLvB2","./_version":"6PYAk","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"3a8Ys":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "PocketProvider", ()=>PocketProvider);
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  var _urlJsonRpcProvider = require("./url-json-rpc-provider");
  "use strict";
  const logger = new (0, _logger.Logger)((0, _version.version));
  const defaultApplicationId = "62e1ad51b37b8e00394bda3b";
  class PocketProvider extends (0, _urlJsonRpcProvider.UrlJsonRpcProvider) {
      static getApiKey(apiKey) {
          const apiKeyObj = {
              applicationId: null,
              loadBalancer: true,
              applicationSecretKey: null
          };
          // Parse applicationId and applicationSecretKey
          if (apiKey == null) apiKeyObj.applicationId = defaultApplicationId;
          else if (typeof apiKey === "string") apiKeyObj.applicationId = apiKey;
          else if (apiKey.applicationSecretKey != null) {
              apiKeyObj.applicationId = apiKey.applicationId;
              apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
          } else if (apiKey.applicationId) apiKeyObj.applicationId = apiKey.applicationId;
          else logger.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
          return apiKeyObj;
      }
      static getUrl(network, apiKey) {
          let host = null;
          switch(network ? network.name : "unknown"){
              case "goerli":
                  host = "eth-goerli.gateway.pokt.network";
                  break;
              case "homestead":
                  host = "eth-mainnet.gateway.pokt.network";
                  break;
              case "kovan":
                  host = "poa-kovan.gateway.pokt.network";
                  break;
              case "matic":
                  host = "poly-mainnet.gateway.pokt.network";
                  break;
              case "maticmum":
                  host = "polygon-mumbai-rpc.gateway.pokt.network";
                  break;
              case "rinkeby":
                  host = "eth-rinkeby.gateway.pokt.network";
                  break;
              case "ropsten":
                  host = "eth-ropsten.gateway.pokt.network";
                  break;
              default:
                  logger.throwError("unsupported network", (0, _logger.Logger).errors.INVALID_ARGUMENT, {
                      argument: "network",
                      value: network
                  });
          }
          const url = `https:/\/${host}/v1/lb/${apiKey.applicationId}`;
          const connection = {
              headers: {},
              url
          };
          if (apiKey.applicationSecretKey != null) {
              connection.user = "";
              connection.password = apiKey.applicationSecretKey;
          }
          return connection;
      }
      isCommunityResource() {
          return this.applicationId === defaultApplicationId;
      }
  }
  
  },{"@ethersproject/logger":"hLvB2","./_version":"6PYAk","./url-json-rpc-provider":"9CTqA","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"cIjQb":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "Web3Provider", ()=>Web3Provider);
  var _properties = require("@ethersproject/properties");
  var _logger = require("@ethersproject/logger");
  var _version = require("./_version");
  var _jsonRpcProvider = require("./json-rpc-provider");
  "use strict";
  const logger = new (0, _logger.Logger)((0, _version.version));
  let _nextId = 1;
  function buildWeb3LegacyFetcher(provider, sendFunc) {
      const fetcher = "Web3LegacyFetcher";
      return function(method, params) {
          const request = {
              method: method,
              params: params,
              id: _nextId++,
              jsonrpc: "2.0"
          };
          return new Promise((resolve, reject)=>{
              this.emit("debug", {
                  action: "request",
                  fetcher,
                  request: (0, _properties.deepCopy)(request),
                  provider: this
              });
              sendFunc(request, (error, response)=>{
                  if (error) {
                      this.emit("debug", {
                          action: "response",
                          fetcher,
                          error,
                          request,
                          provider: this
                      });
                      return reject(error);
                  }
                  this.emit("debug", {
                      action: "response",
                      fetcher,
                      request,
                      response,
                      provider: this
                  });
                  if (response.error) {
                      const error = new Error(response.error.message);
                      error.code = response.error.code;
                      error.data = response.error.data;
                      return reject(error);
                  }
                  resolve(response.result);
              });
          });
      };
  }
  function buildEip1193Fetcher(provider) {
      return function(method, params) {
          if (params == null) params = [];
          const request = {
              method,
              params
          };
          this.emit("debug", {
              action: "request",
              fetcher: "Eip1193Fetcher",
              request: (0, _properties.deepCopy)(request),
              provider: this
          });
          return provider.request(request).then((response)=>{
              this.emit("debug", {
                  action: "response",
                  fetcher: "Eip1193Fetcher",
                  request,
                  response,
                  provider: this
              });
              return response;
          }, (error)=>{
              this.emit("debug", {
                  action: "response",
                  fetcher: "Eip1193Fetcher",
                  request,
                  error,
                  provider: this
              });
              throw error;
          });
      };
  }
  class Web3Provider extends (0, _jsonRpcProvider.JsonRpcProvider) {
      constructor(provider, network){
          if (provider == null) logger.throwArgumentError("missing provider", "provider", provider);
          let path = null;
          let jsonRpcFetchFunc = null;
          let subprovider = null;
          if (typeof provider === "function") {
              path = "unknown:";
              jsonRpcFetchFunc = provider;
          } else {
              path = provider.host || provider.path || "";
              if (!path && provider.isMetaMask) path = "metamask";
              subprovider = provider;
              if (provider.request) {
                  if (path === "") path = "eip-1193:";
                  jsonRpcFetchFunc = buildEip1193Fetcher(provider);
              } else if (provider.sendAsync) jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
              else if (provider.send) jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
              else logger.throwArgumentError("unsupported provider", "provider", provider);
              if (!path) path = "unknown:";
          }
          super(path, network);
          (0, _properties.defineReadOnly)(this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
          (0, _properties.defineReadOnly)(this, "provider", subprovider);
      }
      send(method, params) {
          return this.jsonRpcFetchFunc(method, params);
      }
  }
  
  },{"@ethersproject/properties":"h3GJb","@ethersproject/logger":"hLvB2","./_version":"6PYAk","./json-rpc-provider":"1sWtk","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"hdHML":[function(require,module,exports) {
  /**
   *  The Application Programming Interface (API) is the collection of
   *  functions, classes and types offered by the Ethers library.
   *
   *  @_section: api:Application Programming Interface  [about-api]
   *  @_navTitle: API
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "ethers", ()=>_ethersJs);
  var _ethersJs = require("./ethers.js");
  parcelHelpers.exportAll(_ethersJs, exports);
  
  },{"./ethers.js":"LOU4X","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"LOU4X":[function(require,module,exports) {
  /////////////////////////////
  //
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "version", ()=>(0, _versionJs.version));
  parcelHelpers.export(exports, "decodeBytes32String", ()=>(0, _indexJs.decodeBytes32String));
  parcelHelpers.export(exports, "encodeBytes32String", ()=>(0, _indexJs.encodeBytes32String));
  parcelHelpers.export(exports, "AbiCoder", ()=>(0, _indexJs.AbiCoder));
  parcelHelpers.export(exports, "ConstructorFragment", ()=>(0, _indexJs.ConstructorFragment));
  parcelHelpers.export(exports, "ErrorFragment", ()=>(0, _indexJs.ErrorFragment));
  parcelHelpers.export(exports, "EventFragment", ()=>(0, _indexJs.EventFragment));
  parcelHelpers.export(exports, "Fragment", ()=>(0, _indexJs.Fragment));
  parcelHelpers.export(exports, "FallbackFragment", ()=>(0, _indexJs.FallbackFragment));
  parcelHelpers.export(exports, "FunctionFragment", ()=>(0, _indexJs.FunctionFragment));
  parcelHelpers.export(exports, "NamedFragment", ()=>(0, _indexJs.NamedFragment));
  parcelHelpers.export(exports, "ParamType", ()=>(0, _indexJs.ParamType));
  parcelHelpers.export(exports, "StructFragment", ()=>(0, _indexJs.StructFragment));
  parcelHelpers.export(exports, "checkResultErrors", ()=>(0, _indexJs.checkResultErrors));
  parcelHelpers.export(exports, "ErrorDescription", ()=>(0, _indexJs.ErrorDescription));
  parcelHelpers.export(exports, "Indexed", ()=>(0, _indexJs.Indexed));
  parcelHelpers.export(exports, "Interface", ()=>(0, _indexJs.Interface));
  parcelHelpers.export(exports, "LogDescription", ()=>(0, _indexJs.LogDescription));
  parcelHelpers.export(exports, "Result", ()=>(0, _indexJs.Result));
  parcelHelpers.export(exports, "TransactionDescription", ()=>(0, _indexJs.TransactionDescription));
  parcelHelpers.export(exports, "Typed", ()=>(0, _indexJs.Typed));
  parcelHelpers.export(exports, "getAddress", ()=>(0, _indexJs1.getAddress));
  parcelHelpers.export(exports, "getIcapAddress", ()=>(0, _indexJs1.getIcapAddress));
  parcelHelpers.export(exports, "getCreateAddress", ()=>(0, _indexJs1.getCreateAddress));
  parcelHelpers.export(exports, "getCreate2Address", ()=>(0, _indexJs1.getCreate2Address));
  parcelHelpers.export(exports, "isAddressable", ()=>(0, _indexJs1.isAddressable));
  parcelHelpers.export(exports, "isAddress", ()=>(0, _indexJs1.isAddress));
  parcelHelpers.export(exports, "resolveAddress", ()=>(0, _indexJs1.resolveAddress));
  parcelHelpers.export(exports, "ZeroAddress", ()=>(0, _indexJs2.ZeroAddress));
  parcelHelpers.export(exports, "WeiPerEther", ()=>(0, _indexJs2.WeiPerEther));
  parcelHelpers.export(exports, "MaxUint256", ()=>(0, _indexJs2.MaxUint256));
  parcelHelpers.export(exports, "MinInt256", ()=>(0, _indexJs2.MinInt256));
  parcelHelpers.export(exports, "MaxInt256", ()=>(0, _indexJs2.MaxInt256));
  parcelHelpers.export(exports, "N", ()=>(0, _indexJs2.N));
  parcelHelpers.export(exports, "ZeroHash", ()=>(0, _indexJs2.ZeroHash));
  parcelHelpers.export(exports, "EtherSymbol", ()=>(0, _indexJs2.EtherSymbol));
  parcelHelpers.export(exports, "MessagePrefix", ()=>(0, _indexJs2.MessagePrefix));
  parcelHelpers.export(exports, "BaseContract", ()=>(0, _indexJs3.BaseContract));
  parcelHelpers.export(exports, "Contract", ()=>(0, _indexJs3.Contract));
  parcelHelpers.export(exports, "ContractFactory", ()=>(0, _indexJs3.ContractFactory));
  parcelHelpers.export(exports, "ContractEventPayload", ()=>(0, _indexJs3.ContractEventPayload));
  parcelHelpers.export(exports, "ContractTransactionReceipt", ()=>(0, _indexJs3.ContractTransactionReceipt));
  parcelHelpers.export(exports, "ContractTransactionResponse", ()=>(0, _indexJs3.ContractTransactionResponse));
  parcelHelpers.export(exports, "ContractUnknownEventPayload", ()=>(0, _indexJs3.ContractUnknownEventPayload));
  parcelHelpers.export(exports, "EventLog", ()=>(0, _indexJs3.EventLog));
  parcelHelpers.export(exports, "computeHmac", ()=>(0, _indexJs4.computeHmac));
  parcelHelpers.export(exports, "randomBytes", ()=>(0, _indexJs4.randomBytes));
  parcelHelpers.export(exports, "keccak256", ()=>(0, _indexJs4.keccak256));
  parcelHelpers.export(exports, "ripemd160", ()=>(0, _indexJs4.ripemd160));
  parcelHelpers.export(exports, "sha256", ()=>(0, _indexJs4.sha256));
  parcelHelpers.export(exports, "sha512", ()=>(0, _indexJs4.sha512));
  parcelHelpers.export(exports, "pbkdf2", ()=>(0, _indexJs4.pbkdf2));
  parcelHelpers.export(exports, "scrypt", ()=>(0, _indexJs4.scrypt));
  parcelHelpers.export(exports, "scryptSync", ()=>(0, _indexJs4.scryptSync));
  parcelHelpers.export(exports, "lock", ()=>(0, _indexJs4.lock));
  parcelHelpers.export(exports, "Signature", ()=>(0, _indexJs4.Signature));
  parcelHelpers.export(exports, "SigningKey", ()=>(0, _indexJs4.SigningKey));
  parcelHelpers.export(exports, "id", ()=>(0, _indexJs5.id));
  parcelHelpers.export(exports, "ensNormalize", ()=>(0, _indexJs5.ensNormalize));
  parcelHelpers.export(exports, "isValidName", ()=>(0, _indexJs5.isValidName));
  parcelHelpers.export(exports, "namehash", ()=>(0, _indexJs5.namehash));
  parcelHelpers.export(exports, "dnsEncode", ()=>(0, _indexJs5.dnsEncode));
  parcelHelpers.export(exports, "hashMessage", ()=>(0, _indexJs5.hashMessage));
  parcelHelpers.export(exports, "verifyMessage", ()=>(0, _indexJs5.verifyMessage));
  parcelHelpers.export(exports, "solidityPacked", ()=>(0, _indexJs5.solidityPacked));
  parcelHelpers.export(exports, "solidityPackedKeccak256", ()=>(0, _indexJs5.solidityPackedKeccak256));
  parcelHelpers.export(exports, "solidityPackedSha256", ()=>(0, _indexJs5.solidityPackedSha256));
  parcelHelpers.export(exports, "TypedDataEncoder", ()=>(0, _indexJs5.TypedDataEncoder));
  parcelHelpers.export(exports, "verifyTypedData", ()=>(0, _indexJs5.verifyTypedData));
  parcelHelpers.export(exports, "getDefaultProvider", ()=>(0, _indexJs6.getDefaultProvider));
  parcelHelpers.export(exports, "Block", ()=>(0, _indexJs6.Block));
  parcelHelpers.export(exports, "FeeData", ()=>(0, _indexJs6.FeeData));
  parcelHelpers.export(exports, "Log", ()=>(0, _indexJs6.Log));
  parcelHelpers.export(exports, "TransactionReceipt", ()=>(0, _indexJs6.TransactionReceipt));
  parcelHelpers.export(exports, "TransactionResponse", ()=>(0, _indexJs6.TransactionResponse));
  parcelHelpers.export(exports, "AbstractSigner", ()=>(0, _indexJs6.AbstractSigner));
  parcelHelpers.export(exports, "NonceManager", ()=>(0, _indexJs6.NonceManager));
  parcelHelpers.export(exports, "VoidSigner", ()=>(0, _indexJs6.VoidSigner));
  parcelHelpers.export(exports, "AbstractProvider", ()=>(0, _indexJs6.AbstractProvider));
  parcelHelpers.export(exports, "FallbackProvider", ()=>(0, _indexJs6.FallbackProvider));
  parcelHelpers.export(exports, "JsonRpcApiProvider", ()=>(0, _indexJs6.JsonRpcApiProvider));
  parcelHelpers.export(exports, "JsonRpcProvider", ()=>(0, _indexJs6.JsonRpcProvider));
  parcelHelpers.export(exports, "JsonRpcSigner", ()=>(0, _indexJs6.JsonRpcSigner));
  parcelHelpers.export(exports, "BrowserProvider", ()=>(0, _indexJs6.BrowserProvider));
  parcelHelpers.export(exports, "AlchemyProvider", ()=>(0, _indexJs6.AlchemyProvider));
  parcelHelpers.export(exports, "AnkrProvider", ()=>(0, _indexJs6.AnkrProvider));
  parcelHelpers.export(exports, "CloudflareProvider", ()=>(0, _indexJs6.CloudflareProvider));
  parcelHelpers.export(exports, "EtherscanProvider", ()=>(0, _indexJs6.EtherscanProvider));
  parcelHelpers.export(exports, "InfuraProvider", ()=>(0, _indexJs6.InfuraProvider));
  parcelHelpers.export(exports, "InfuraWebSocketProvider", ()=>(0, _indexJs6.InfuraWebSocketProvider));
  parcelHelpers.export(exports, "PocketProvider", ()=>(0, _indexJs6.PocketProvider));
  parcelHelpers.export(exports, "QuickNodeProvider", ()=>(0, _indexJs6.QuickNodeProvider));
  parcelHelpers.export(exports, "IpcSocketProvider", ()=>(0, _indexJs6.IpcSocketProvider));
  parcelHelpers.export(exports, "SocketProvider", ()=>(0, _indexJs6.SocketProvider));
  parcelHelpers.export(exports, "WebSocketProvider", ()=>(0, _indexJs6.WebSocketProvider));
  parcelHelpers.export(exports, "EnsResolver", ()=>(0, _indexJs6.EnsResolver));
  parcelHelpers.export(exports, "Network", ()=>(0, _indexJs6.Network));
  parcelHelpers.export(exports, "EnsPlugin", ()=>(0, _indexJs6.EnsPlugin));
  parcelHelpers.export(exports, "EtherscanPlugin", ()=>(0, _indexJs6.EtherscanPlugin));
  parcelHelpers.export(exports, "FeeDataNetworkPlugin", ()=>(0, _indexJs6.FeeDataNetworkPlugin));
  parcelHelpers.export(exports, "GasCostPlugin", ()=>(0, _indexJs6.GasCostPlugin));
  parcelHelpers.export(exports, "NetworkPlugin", ()=>(0, _indexJs6.NetworkPlugin));
  parcelHelpers.export(exports, "SocketBlockSubscriber", ()=>(0, _indexJs6.SocketBlockSubscriber));
  parcelHelpers.export(exports, "SocketEventSubscriber", ()=>(0, _indexJs6.SocketEventSubscriber));
  parcelHelpers.export(exports, "SocketPendingSubscriber", ()=>(0, _indexJs6.SocketPendingSubscriber));
  parcelHelpers.export(exports, "SocketSubscriber", ()=>(0, _indexJs6.SocketSubscriber));
  parcelHelpers.export(exports, "UnmanagedSubscriber", ()=>(0, _indexJs6.UnmanagedSubscriber));
  parcelHelpers.export(exports, "copyRequest", ()=>(0, _indexJs6.copyRequest));
  parcelHelpers.export(exports, "showThrottleMessage", ()=>(0, _indexJs6.showThrottleMessage));
  parcelHelpers.export(exports, "accessListify", ()=>(0, _indexJs7.accessListify));
  parcelHelpers.export(exports, "computeAddress", ()=>(0, _indexJs7.computeAddress));
  parcelHelpers.export(exports, "recoverAddress", ()=>(0, _indexJs7.recoverAddress));
  parcelHelpers.export(exports, "Transaction", ()=>(0, _indexJs7.Transaction));
  parcelHelpers.export(exports, "decodeBase58", ()=>(0, _indexJs8.decodeBase58));
  parcelHelpers.export(exports, "encodeBase58", ()=>(0, _indexJs8.encodeBase58));
  parcelHelpers.export(exports, "decodeBase64", ()=>(0, _indexJs8.decodeBase64));
  parcelHelpers.export(exports, "encodeBase64", ()=>(0, _indexJs8.encodeBase64));
  parcelHelpers.export(exports, "concat", ()=>(0, _indexJs8.concat));
  parcelHelpers.export(exports, "dataLength", ()=>(0, _indexJs8.dataLength));
  parcelHelpers.export(exports, "dataSlice", ()=>(0, _indexJs8.dataSlice));
  parcelHelpers.export(exports, "getBytes", ()=>(0, _indexJs8.getBytes));
  parcelHelpers.export(exports, "getBytesCopy", ()=>(0, _indexJs8.getBytesCopy));
  parcelHelpers.export(exports, "hexlify", ()=>(0, _indexJs8.hexlify));
  parcelHelpers.export(exports, "isHexString", ()=>(0, _indexJs8.isHexString));
  parcelHelpers.export(exports, "isBytesLike", ()=>(0, _indexJs8.isBytesLike));
  parcelHelpers.export(exports, "stripZerosLeft", ()=>(0, _indexJs8.stripZerosLeft));
  parcelHelpers.export(exports, "zeroPadBytes", ()=>(0, _indexJs8.zeroPadBytes));
  parcelHelpers.export(exports, "zeroPadValue", ()=>(0, _indexJs8.zeroPadValue));
  parcelHelpers.export(exports, "defineProperties", ()=>(0, _indexJs8.defineProperties));
  parcelHelpers.export(exports, "resolveProperties", ()=>(0, _indexJs8.resolveProperties));
  parcelHelpers.export(exports, "assert", ()=>(0, _indexJs8.assert));
  parcelHelpers.export(exports, "assertArgument", ()=>(0, _indexJs8.assertArgument));
  parcelHelpers.export(exports, "assertArgumentCount", ()=>(0, _indexJs8.assertArgumentCount));
  parcelHelpers.export(exports, "assertNormalize", ()=>(0, _indexJs8.assertNormalize));
  parcelHelpers.export(exports, "assertPrivate", ()=>(0, _indexJs8.assertPrivate));
  parcelHelpers.export(exports, "makeError", ()=>(0, _indexJs8.makeError));
  parcelHelpers.export(exports, "isCallException", ()=>(0, _indexJs8.isCallException));
  parcelHelpers.export(exports, "isError", ()=>(0, _indexJs8.isError));
  parcelHelpers.export(exports, "EventPayload", ()=>(0, _indexJs8.EventPayload));
  parcelHelpers.export(exports, "FetchRequest", ()=>(0, _indexJs8.FetchRequest));
  parcelHelpers.export(exports, "FetchResponse", ()=>(0, _indexJs8.FetchResponse));
  parcelHelpers.export(exports, "FetchCancelSignal", ()=>(0, _indexJs8.FetchCancelSignal));
  parcelHelpers.export(exports, "FixedNumber", ()=>(0, _indexJs8.FixedNumber));
  parcelHelpers.export(exports, "getBigInt", ()=>(0, _indexJs8.getBigInt));
  parcelHelpers.export(exports, "getNumber", ()=>(0, _indexJs8.getNumber));
  parcelHelpers.export(exports, "getUint", ()=>(0, _indexJs8.getUint));
  parcelHelpers.export(exports, "toBeArray", ()=>(0, _indexJs8.toBeArray));
  parcelHelpers.export(exports, "toBigInt", ()=>(0, _indexJs8.toBigInt));
  parcelHelpers.export(exports, "toBeHex", ()=>(0, _indexJs8.toBeHex));
  parcelHelpers.export(exports, "toNumber", ()=>(0, _indexJs8.toNumber));
  parcelHelpers.export(exports, "toQuantity", ()=>(0, _indexJs8.toQuantity));
  parcelHelpers.export(exports, "fromTwos", ()=>(0, _indexJs8.fromTwos));
  parcelHelpers.export(exports, "toTwos", ()=>(0, _indexJs8.toTwos));
  parcelHelpers.export(exports, "mask", ()=>(0, _indexJs8.mask));
  parcelHelpers.export(exports, "formatEther", ()=>(0, _indexJs8.formatEther));
  parcelHelpers.export(exports, "parseEther", ()=>(0, _indexJs8.parseEther));
  parcelHelpers.export(exports, "formatUnits", ()=>(0, _indexJs8.formatUnits));
  parcelHelpers.export(exports, "parseUnits", ()=>(0, _indexJs8.parseUnits));
  parcelHelpers.export(exports, "toUtf8Bytes", ()=>(0, _indexJs8.toUtf8Bytes));
  parcelHelpers.export(exports, "toUtf8CodePoints", ()=>(0, _indexJs8.toUtf8CodePoints));
  parcelHelpers.export(exports, "toUtf8String", ()=>(0, _indexJs8.toUtf8String));
  parcelHelpers.export(exports, "Utf8ErrorFuncs", ()=>(0, _indexJs8.Utf8ErrorFuncs));
  parcelHelpers.export(exports, "decodeRlp", ()=>(0, _indexJs8.decodeRlp));
  parcelHelpers.export(exports, "encodeRlp", ()=>(0, _indexJs8.encodeRlp));
  parcelHelpers.export(exports, "uuidV4", ()=>(0, _indexJs8.uuidV4));
  parcelHelpers.export(exports, "Mnemonic", ()=>(0, _indexJs9.Mnemonic));
  parcelHelpers.export(exports, "BaseWallet", ()=>(0, _indexJs9.BaseWallet));
  parcelHelpers.export(exports, "HDNodeWallet", ()=>(0, _indexJs9.HDNodeWallet));
  parcelHelpers.export(exports, "HDNodeVoidWallet", ()=>(0, _indexJs9.HDNodeVoidWallet));
  parcelHelpers.export(exports, "Wallet", ()=>(0, _indexJs9.Wallet));
  parcelHelpers.export(exports, "defaultPath", ()=>(0, _indexJs9.defaultPath));
  parcelHelpers.export(exports, "getAccountPath", ()=>(0, _indexJs9.getAccountPath));
  parcelHelpers.export(exports, "getIndexedAccountPath", ()=>(0, _indexJs9.getIndexedAccountPath));
  parcelHelpers.export(exports, "isCrowdsaleJson", ()=>(0, _indexJs9.isCrowdsaleJson));
  parcelHelpers.export(exports, "isKeystoreJson", ()=>(0, _indexJs9.isKeystoreJson));
  parcelHelpers.export(exports, "decryptCrowdsaleJson", ()=>(0, _indexJs9.decryptCrowdsaleJson));
  parcelHelpers.export(exports, "decryptKeystoreJsonSync", ()=>(0, _indexJs9.decryptKeystoreJsonSync));
  parcelHelpers.export(exports, "decryptKeystoreJson", ()=>(0, _indexJs9.decryptKeystoreJson));
  parcelHelpers.export(exports, "encryptKeystoreJson", ()=>(0, _indexJs9.encryptKeystoreJson));
  parcelHelpers.export(exports, "encryptKeystoreJsonSync", ()=>(0, _indexJs9.encryptKeystoreJsonSync));
  parcelHelpers.export(exports, "Wordlist", ()=>(0, _indexJs10.Wordlist));
  parcelHelpers.export(exports, "LangEn", ()=>(0, _indexJs10.LangEn));
  parcelHelpers.export(exports, "WordlistOwl", ()=>(0, _indexJs10.WordlistOwl));
  parcelHelpers.export(exports, "WordlistOwlA", ()=>(0, _indexJs10.WordlistOwlA));
  parcelHelpers.export(exports, "wordlists", ()=>(0, _indexJs10.wordlists));
  var _versionJs = require("./_version.js");
  var _indexJs = require("./abi/index.js");
  var _indexJs1 = require("./address/index.js");
  var _indexJs2 = require("./constants/index.js");
  var _indexJs3 = require("./contract/index.js");
  var _indexJs4 = require("./crypto/index.js");
  var _indexJs5 = require("./hash/index.js");
  var _indexJs6 = require("./providers/index.js");
  var _indexJs7 = require("./transaction/index.js");
  var _indexJs8 = require("./utils/index.js");
  var _indexJs9 = require("./wallet/index.js");
  var _indexJs10 = require("./wordlists/index.js");
  
  },{"./_version.js":"aosLW","./abi/index.js":"3U93s","./address/index.js":"cuJ87","./constants/index.js":"lNX00","./contract/index.js":"3yTtn","./crypto/index.js":"4oi1q","./hash/index.js":"bTSS2","./providers/index.js":"62nP6","./transaction/index.js":"cOUq6","./utils/index.js":"jGhd9","./wallet/index.js":"dugB1","./wordlists/index.js":"3hO2f","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"aosLW":[function(require,module,exports) {
  /* Do NOT modify this file; see /src.ts/_admin/update-version.ts */ /**
   *  The current version of Ethers.
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "version", ()=>version);
  const version = "6.3.0";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"3U93s":[function(require,module,exports) {
  /**
   *  Explain about ABI here...
   *
   *  @_section api/abi:Application Binary Interface  [about-abi]
   *  @_navTitle: ABI
   */ //////
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "AbiCoder", ()=>(0, _abiCoderJs.AbiCoder));
  parcelHelpers.export(exports, "decodeBytes32String", ()=>(0, _bytes32Js.decodeBytes32String));
  parcelHelpers.export(exports, "encodeBytes32String", ()=>(0, _bytes32Js.encodeBytes32String));
  parcelHelpers.export(exports, "ConstructorFragment", ()=>(0, _fragmentsJs.ConstructorFragment));
  parcelHelpers.export(exports, "ErrorFragment", ()=>(0, _fragmentsJs.ErrorFragment));
  parcelHelpers.export(exports, "EventFragment", ()=>(0, _fragmentsJs.EventFragment));
  parcelHelpers.export(exports, "FallbackFragment", ()=>(0, _fragmentsJs.FallbackFragment));
  parcelHelpers.export(exports, "Fragment", ()=>(0, _fragmentsJs.Fragment));
  parcelHelpers.export(exports, "FunctionFragment", ()=>(0, _fragmentsJs.FunctionFragment));
  parcelHelpers.export(exports, "NamedFragment", ()=>(0, _fragmentsJs.NamedFragment));
  parcelHelpers.export(exports, "ParamType", ()=>(0, _fragmentsJs.ParamType));
  parcelHelpers.export(exports, "StructFragment", ()=>(0, _fragmentsJs.StructFragment));
  parcelHelpers.export(exports, "checkResultErrors", ()=>(0, _interfaceJs.checkResultErrors));
  parcelHelpers.export(exports, "Indexed", ()=>(0, _interfaceJs.Indexed));
  parcelHelpers.export(exports, "Interface", ()=>(0, _interfaceJs.Interface));
  parcelHelpers.export(exports, "ErrorDescription", ()=>(0, _interfaceJs.ErrorDescription));
  parcelHelpers.export(exports, "LogDescription", ()=>(0, _interfaceJs.LogDescription));
  parcelHelpers.export(exports, "TransactionDescription", ()=>(0, _interfaceJs.TransactionDescription));
  parcelHelpers.export(exports, "Result", ()=>(0, _interfaceJs.Result));
  parcelHelpers.export(exports, "Typed", ()=>(0, _typedJs.Typed));
  var _abiCoderJs = require("./abi-coder.js");
  var _bytes32Js = require("./bytes32.js");
  var _fragmentsJs = require("./fragments.js");
  var _interfaceJs = require("./interface.js");
  var _typedJs = require("./typed.js");
  
  },{"./abi-coder.js":"1sOdq","./bytes32.js":"kHtrk","./fragments.js":"hcAow","./interface.js":"gxP5E","./typed.js":"6W7uu","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"1sOdq":[function(require,module,exports) {
  /**
   *  When sending values to or receiving values from a [[Contract]], the
   *  data is generally encoded using the [ABI standard](link-solc-abi).
   *
   *  The AbiCoder provides a utility to encode values to ABI data and
   *  decode values from ABI data.
   *
   *  Most of the time, developers should favour the [[Contract]] class,
   *  which further abstracts a lot of the finer details of ABI data.
   *
   *  @_section api/abi/abi-coder:ABI Encoding
   */ // See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
    * About AbiCoder
    */ parcelHelpers.export(exports, "AbiCoder", ()=>AbiCoder);
  var _indexJs = require("../utils/index.js");
  var _abstractCoderJs = require("./coders/abstract-coder.js");
  var _addressJs = require("./coders/address.js");
  var _arrayJs = require("./coders/array.js");
  var _booleanJs = require("./coders/boolean.js");
  var _bytesJs = require("./coders/bytes.js");
  var _fixedBytesJs = require("./coders/fixed-bytes.js");
  var _nullJs = require("./coders/null.js");
  var _numberJs = require("./coders/number.js");
  var _stringJs = require("./coders/string.js");
  var _tupleJs = require("./coders/tuple.js");
  var _fragmentsJs = require("./fragments.js");
  var _indexJs1 = require("../address/index.js");
  // https://docs.soliditylang.org/en/v0.8.17/control-structures.html
  const PanicReasons = new Map();
  PanicReasons.set(0x00, "GENERIC_PANIC");
  PanicReasons.set(0x01, "ASSERT_FALSE");
  PanicReasons.set(0x11, "OVERFLOW");
  PanicReasons.set(0x12, "DIVIDE_BY_ZERO");
  PanicReasons.set(0x21, "ENUM_RANGE_ERROR");
  PanicReasons.set(0x22, "BAD_STORAGE_DATA");
  PanicReasons.set(0x31, "STACK_UNDERFLOW");
  PanicReasons.set(0x32, "ARRAY_RANGE_ERROR");
  PanicReasons.set(0x41, "OUT_OF_MEMORY");
  PanicReasons.set(0x51, "UNINITIALIZED_FUNCTION_CALL");
  const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
  const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
  let defaultCoder = null;
  function getBuiltinCallException(action, tx, data, abiCoder) {
      let message = "missing revert data";
      let reason = null;
      const invocation = null;
      let revert = null;
      if (data) {
          message = "execution reverted";
          const bytes = (0, _indexJs.getBytes)(data);
          data = (0, _indexJs.hexlify)(data);
          if (bytes.length === 0) {
              message += " (no data present; likely require(false) occurred";
              reason = "require(false)";
          } else if (bytes.length % 32 !== 4) message += " (could not decode reason; invalid data length)";
          else if ((0, _indexJs.hexlify)(bytes.slice(0, 4)) === "0x08c379a0") // Error(string)
          try {
              reason = abiCoder.decode([
                  "string"
              ], bytes.slice(4))[0];
              revert = {
                  signature: "Error(string)",
                  name: "Error",
                  args: [
                      reason
                  ]
              };
              message += `: ${JSON.stringify(reason)}`;
          } catch (error) {
              message += " (could not decode reason; invalid string data)";
          }
          else if ((0, _indexJs.hexlify)(bytes.slice(0, 4)) === "0x4e487b71") // Panic(uint256)
          try {
              const code = Number(abiCoder.decode([
                  "uint256"
              ], bytes.slice(4))[0]);
              revert = {
                  signature: "Panic(uint256)",
                  name: "Panic",
                  args: [
                      code
                  ]
              };
              reason = `Panic due to ${PanicReasons.get(code) || "UNKNOWN"}(${code})`;
              message += `: ${reason}`;
          } catch (error) {
              message += " (could not decode panic code)";
          }
          else message += " (unknown custom error)";
      }
      const transaction = {
          to: tx.to ? (0, _indexJs1.getAddress)(tx.to) : null,
          data: tx.data || "0x"
      };
      if (tx.from) transaction.from = (0, _indexJs1.getAddress)(tx.from);
      return (0, _indexJs.makeError)(message, "CALL_EXCEPTION", {
          action,
          data,
          reason,
          transaction,
          invocation,
          revert
      });
  }
  class AbiCoder {
      #getCoder(param) {
          if (param.isArray()) return new (0, _arrayJs.ArrayCoder)(this.#getCoder(param.arrayChildren), param.arrayLength, param.name);
          if (param.isTuple()) return new (0, _tupleJs.TupleCoder)(param.components.map((c)=>this.#getCoder(c)), param.name);
          switch(param.baseType){
              case "address":
                  return new (0, _addressJs.AddressCoder)(param.name);
              case "bool":
                  return new (0, _booleanJs.BooleanCoder)(param.name);
              case "string":
                  return new (0, _stringJs.StringCoder)(param.name);
              case "bytes":
                  return new (0, _bytesJs.BytesCoder)(param.name);
              case "":
                  return new (0, _nullJs.NullCoder)(param.name);
          }
          // u?int[0-9]*
          let match = param.type.match(paramTypeNumber);
          if (match) {
              let size = parseInt(match[2] || "256");
              (0, _indexJs.assertArgument)(size !== 0 && size <= 256 && size % 8 === 0, "invalid " + match[1] + " bit length", "param", param);
              return new (0, _numberJs.NumberCoder)(size / 8, match[1] === "int", param.name);
          }
          // bytes[0-9]+
          match = param.type.match(paramTypeBytes);
          if (match) {
              let size = parseInt(match[1]);
              (0, _indexJs.assertArgument)(size !== 0 && size <= 32, "invalid bytes length", "param", param);
              return new (0, _fixedBytesJs.FixedBytesCoder)(size, param.name);
          }
          (0, _indexJs.assertArgument)(false, "invalid type", "type", param.type);
      }
      /**
       *  Get the default values for the given %%types%%.
       *
       *  For example, a ``uint`` is by default ``0`` and ``bool``
       *  is by default ``false``.
       */ getDefaultValue(types) {
          const coders = types.map((type)=>this.#getCoder((0, _fragmentsJs.ParamType).from(type)));
          const coder = new (0, _tupleJs.TupleCoder)(coders, "_");
          return coder.defaultValue();
      }
      /**
       *  Encode the %%values%% as the %%types%% into ABI data.
       *
       *  @returns DataHexstring
       */ encode(types, values) {
          (0, _indexJs.assertArgumentCount)(values.length, types.length, "types/values length mismatch");
          const coders = types.map((type)=>this.#getCoder((0, _fragmentsJs.ParamType).from(type)));
          const coder = new (0, _tupleJs.TupleCoder)(coders, "_");
          const writer = new (0, _abstractCoderJs.Writer)();
          coder.encode(writer, values);
          return writer.data;
      }
      /**
       *  Decode the ABI %%data%% as the %%types%% into values.
       *
       *  If %%loose%% decoding is enabled, then strict padding is
       *  not enforced. Some older versions of Solidity incorrectly
       *  padded event data emitted from ``external`` functions.
       */ decode(types, data, loose) {
          const coders = types.map((type)=>this.#getCoder((0, _fragmentsJs.ParamType).from(type)));
          const coder = new (0, _tupleJs.TupleCoder)(coders, "_");
          return coder.decode(new (0, _abstractCoderJs.Reader)(data, loose));
      }
      /**
       *  Returns the shared singleton instance of a default [[AbiCoder]].
       *
       *  On the first call, the instance is created internally.
       */ static defaultAbiCoder() {
          if (defaultCoder == null) defaultCoder = new AbiCoder();
          return defaultCoder;
      }
      /**
       *  Returns an ethers-compatible [[CallExceptionError]] Error for the given
       *  result %%data%% for the [[CallExceptionAction]] %%action%% against
       *  the Transaction %%tx%%.
       */ static getBuiltinCallException(action, tx, data) {
          return getBuiltinCallException(action, tx, data, AbiCoder.defaultAbiCoder());
      }
  }
  
  },{"../utils/index.js":"jGhd9","./coders/abstract-coder.js":"7wibj","./coders/address.js":"10blX","./coders/array.js":"5zy70","./coders/boolean.js":"el6Fi","./coders/bytes.js":"kW01a","./coders/fixed-bytes.js":"as9D6","./coders/null.js":"jCQSU","./coders/number.js":"ic9Sg","./coders/string.js":"5GRt5","./coders/tuple.js":"4lb0d","./fragments.js":"hcAow","../address/index.js":"cuJ87","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"jGhd9":[function(require,module,exports) {
  /**
   *  There are many simple utilities required to interact with
   *  Ethereum and to simplify the library, without increasing
   *  the library dependencies for simple functions.
   *
   *  @_section api/utils:Utilities  [about-utils]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "decodeBase58", ()=>(0, _base58Js.decodeBase58));
  parcelHelpers.export(exports, "encodeBase58", ()=>(0, _base58Js.encodeBase58));
  parcelHelpers.export(exports, "decodeBase64", ()=>(0, _base64Js.decodeBase64));
  parcelHelpers.export(exports, "encodeBase64", ()=>(0, _base64Js.encodeBase64));
  parcelHelpers.export(exports, "getBytes", ()=>(0, _dataJs.getBytes));
  parcelHelpers.export(exports, "getBytesCopy", ()=>(0, _dataJs.getBytesCopy));
  parcelHelpers.export(exports, "isHexString", ()=>(0, _dataJs.isHexString));
  parcelHelpers.export(exports, "isBytesLike", ()=>(0, _dataJs.isBytesLike));
  parcelHelpers.export(exports, "hexlify", ()=>(0, _dataJs.hexlify));
  parcelHelpers.export(exports, "concat", ()=>(0, _dataJs.concat));
  parcelHelpers.export(exports, "dataLength", ()=>(0, _dataJs.dataLength));
  parcelHelpers.export(exports, "dataSlice", ()=>(0, _dataJs.dataSlice));
  parcelHelpers.export(exports, "stripZerosLeft", ()=>(0, _dataJs.stripZerosLeft));
  parcelHelpers.export(exports, "zeroPadValue", ()=>(0, _dataJs.zeroPadValue));
  parcelHelpers.export(exports, "zeroPadBytes", ()=>(0, _dataJs.zeroPadBytes));
  parcelHelpers.export(exports, "isCallException", ()=>(0, _errorsJs.isCallException));
  parcelHelpers.export(exports, "isError", ()=>(0, _errorsJs.isError));
  parcelHelpers.export(exports, "assert", ()=>(0, _errorsJs.assert));
  parcelHelpers.export(exports, "assertArgument", ()=>(0, _errorsJs.assertArgument));
  parcelHelpers.export(exports, "assertArgumentCount", ()=>(0, _errorsJs.assertArgumentCount));
  parcelHelpers.export(exports, "assertPrivate", ()=>(0, _errorsJs.assertPrivate));
  parcelHelpers.export(exports, "assertNormalize", ()=>(0, _errorsJs.assertNormalize));
  parcelHelpers.export(exports, "makeError", ()=>(0, _errorsJs.makeError));
  parcelHelpers.export(exports, "EventPayload", ()=>(0, _eventsJs.EventPayload));
  parcelHelpers.export(exports, "FetchRequest", ()=>(0, _fetchJs.FetchRequest));
  parcelHelpers.export(exports, "FetchResponse", ()=>(0, _fetchJs.FetchResponse));
  parcelHelpers.export(exports, "FetchCancelSignal", ()=>(0, _fetchJs.FetchCancelSignal));
  parcelHelpers.export(exports, "FixedNumber", ()=>(0, _fixednumberJs.FixedNumber));
  parcelHelpers.export(exports, "fromTwos", ()=>(0, _mathsJs.fromTwos));
  parcelHelpers.export(exports, "toTwos", ()=>(0, _mathsJs.toTwos));
  parcelHelpers.export(exports, "mask", ()=>(0, _mathsJs.mask));
  parcelHelpers.export(exports, "getBigInt", ()=>(0, _mathsJs.getBigInt));
  parcelHelpers.export(exports, "getNumber", ()=>(0, _mathsJs.getNumber));
  parcelHelpers.export(exports, "getUint", ()=>(0, _mathsJs.getUint));
  parcelHelpers.export(exports, "toBigInt", ()=>(0, _mathsJs.toBigInt));
  parcelHelpers.export(exports, "toNumber", ()=>(0, _mathsJs.toNumber));
  parcelHelpers.export(exports, "toBeHex", ()=>(0, _mathsJs.toBeHex));
  parcelHelpers.export(exports, "toBeArray", ()=>(0, _mathsJs.toBeArray));
  parcelHelpers.export(exports, "toQuantity", ()=>(0, _mathsJs.toQuantity));
  parcelHelpers.export(exports, "resolveProperties", ()=>(0, _propertiesJs.resolveProperties));
  parcelHelpers.export(exports, "defineProperties", ()=>(0, _propertiesJs.defineProperties));
  parcelHelpers.export(exports, "decodeRlp", ()=>(0, _rlpDecodeJs.decodeRlp));
  parcelHelpers.export(exports, "encodeRlp", ()=>(0, _rlpEncodeJs.encodeRlp));
  parcelHelpers.export(exports, "formatEther", ()=>(0, _unitsJs.formatEther));
  parcelHelpers.export(exports, "parseEther", ()=>(0, _unitsJs.parseEther));
  parcelHelpers.export(exports, "formatUnits", ()=>(0, _unitsJs.formatUnits));
  parcelHelpers.export(exports, "parseUnits", ()=>(0, _unitsJs.parseUnits));
  parcelHelpers.export(exports, "toUtf8Bytes", ()=>(0, _utf8Js.toUtf8Bytes));
  parcelHelpers.export(exports, "toUtf8CodePoints", ()=>(0, _utf8Js.toUtf8CodePoints));
  parcelHelpers.export(exports, "toUtf8String", ()=>(0, _utf8Js.toUtf8String));
  parcelHelpers.export(exports, "Utf8ErrorFuncs", ()=>(0, _utf8Js.Utf8ErrorFuncs));
  parcelHelpers.export(exports, "uuidV4", ()=>(0, _uuidJs.uuidV4));
  var _base58Js = require("./base58.js");
  var _base64Js = require("./base64.js");
  var _dataJs = require("./data.js");
  var _errorsJs = require("./errors.js");
  var _eventsJs = require("./events.js");
  var _fetchJs = require("./fetch.js");
  var _fixednumberJs = require("./fixednumber.js");
  var _mathsJs = require("./maths.js");
  var _propertiesJs = require("./properties.js");
  var _rlpDecodeJs = require("./rlp-decode.js");
  var _rlpEncodeJs = require("./rlp-encode.js");
  var _unitsJs = require("./units.js");
  var _utf8Js = require("./utf8.js");
  var _uuidJs = require("./uuid.js");
  
  },{"./base58.js":"ijbKK","./base64.js":"jemaG","./data.js":"1m6OK","./errors.js":"fKiIl","./events.js":"eVKca","./fetch.js":"8AFDQ","./fixednumber.js":"bb854","./maths.js":"hMe74","./properties.js":"axai0","./rlp-decode.js":"aFhko","./rlp-encode.js":"xaUwa","./units.js":"VhiTO","./utf8.js":"fOXOv","./uuid.js":"fV8jd","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"ijbKK":[function(require,module,exports) {
  /**
   *  The [Base58 Encoding](link-base58) scheme allows a **numeric** value
   *  to be encoded as a compact string using a radix of 58 using only
   *  alpha-numeric characters. Confusingly similar characters are omitted
   *  (i.e. ``"l0O"``).
   *
   *  Note that Base58 encodes a **numeric** value, not arbitrary bytes,
   *  since any zero-bytes on the left would get removed. To mitigate this
   *  issue most schemes that use Base58 choose specific high-order values
   *  to ensure non-zero prefixes.
   *
   *  @_subsection: api/utils:Base58 Encoding [about-base58]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Encode %%value%% as a Base58-encoded string.
   */ parcelHelpers.export(exports, "encodeBase58", ()=>encodeBase58);
  /**
   *  Decode the Base58-encoded %%value%%.
   */ parcelHelpers.export(exports, "decodeBase58", ()=>decodeBase58);
  var _dataJs = require("./data.js");
  var _errorsJs = require("./errors.js");
  var _mathsJs = require("./maths.js");
  const Alphabet = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
  let Lookup = null;
  function getAlpha(letter) {
      if (Lookup == null) {
          Lookup = {};
          for(let i = 0; i < Alphabet.length; i++)Lookup[Alphabet[i]] = BigInt(i);
      }
      const result = Lookup[letter];
      (0, _errorsJs.assertArgument)(result != null, `invalid base58 value`, "letter", letter);
      return result;
  }
  const BN_0 = BigInt(0);
  const BN_58 = BigInt(58);
  function encodeBase58(_value) {
      let value = (0, _mathsJs.toBigInt)((0, _dataJs.getBytes)(_value));
      let result = "";
      while(value){
          result = Alphabet[Number(value % BN_58)] + result;
          value /= BN_58;
      }
      return result;
  }
  function decodeBase58(value) {
      let result = BN_0;
      for(let i = 0; i < value.length; i++){
          result *= BN_58;
          result += getAlpha(value[i]);
      }
      return result;
  }
  
  },{"./data.js":"1m6OK","./errors.js":"fKiIl","./maths.js":"hMe74","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"1m6OK":[function(require,module,exports) {
  /**
   *  Some data helpers.
   *
   *
   *  @_subsection api/utils:Data Helpers  [about-data]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Get a typed Uint8Array for %%value%%. If already a Uint8Array
   *  the original %%value%% is returned; if a copy is required use
   *  [[getBytesCopy]].
   *
   *  @see: getBytesCopy
   */ parcelHelpers.export(exports, "getBytes", ()=>getBytes);
  /**
   *  Get a typed Uint8Array for %%value%%, creating a copy if necessary
   *  to prevent any modifications of the returned value from being
   *  reflected elsewhere.
   *
   *  @see: getBytes
   */ parcelHelpers.export(exports, "getBytesCopy", ()=>getBytesCopy);
  /**
   *  Returns true if %%value%% is a valid [[HexString]].
   *
   *  If %%length%% is ``true`` or a //number//, it also checks that
   *  %%value%% is a valid [[DataHexString]] of %%length%% (if a //number//)
   *  bytes of data (e.g. ``0x1234`` is 2 bytes).
   */ parcelHelpers.export(exports, "isHexString", ()=>isHexString);
  /**
   *  Returns true if %%value%% is a valid representation of arbitrary
   *  data (i.e. a valid [[DataHexString]] or a Uint8Array).
   */ parcelHelpers.export(exports, "isBytesLike", ()=>isBytesLike);
  /**
   *  Returns a [[DataHexString]] representation of %%data%%.
   */ parcelHelpers.export(exports, "hexlify", ()=>hexlify);
  /**
   *  Returns a [[DataHexString]] by concatenating all values
   *  within %%data%%.
   */ parcelHelpers.export(exports, "concat", ()=>concat);
  /**
   *  Returns the length of %%data%%, in bytes.
   */ parcelHelpers.export(exports, "dataLength", ()=>dataLength);
  /**
   *  Returns a [[DataHexString]] by slicing %%data%% from the %%start%%
   *  offset to the %%end%% offset.
   *
   *  By default %%start%% is 0 and %%end%% is the length of %%data%%.
   */ parcelHelpers.export(exports, "dataSlice", ()=>dataSlice);
  /**
   *  Return the [[DataHexString]] result by stripping all **leading**
   ** zero bytes from %%data%%.
   */ parcelHelpers.export(exports, "stripZerosLeft", ()=>stripZerosLeft);
  /**
   *  Return the [[DataHexString]] of %%data%% padded on the **left**
   *  to %%length%% bytes.
   *
   *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is
   *  thrown.
   *
   *  This pads data the same as **values** are in Solidity
   *  (e.g. ``uint128``).
   */ parcelHelpers.export(exports, "zeroPadValue", ()=>zeroPadValue);
  /**
   *  Return the [[DataHexString]] of %%data%% padded on the **right**
   *  to %%length%% bytes.
   *
   *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is
   *  thrown.
   *
   *  This pads data the same as **bytes** are in Solidity
   *  (e.g. ``bytes16``).
   */ parcelHelpers.export(exports, "zeroPadBytes", ()=>zeroPadBytes);
  var _errorsJs = require("./errors.js");
  function _getBytes(value, name, copy) {
      if (value instanceof Uint8Array) {
          if (copy) return new Uint8Array(value);
          return value;
      }
      if (typeof value === "string" && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {
          const result = new Uint8Array((value.length - 2) / 2);
          let offset = 2;
          for(let i = 0; i < result.length; i++){
              result[i] = parseInt(value.substring(offset, offset + 2), 16);
              offset += 2;
          }
          return result;
      }
      (0, _errorsJs.assertArgument)(false, "invalid BytesLike value", name || "value", value);
  }
  function getBytes(value, name) {
      return _getBytes(value, name, false);
  }
  function getBytesCopy(value, name) {
      return _getBytes(value, name, true);
  }
  function isHexString(value, length) {
      if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) return false;
      if (typeof length === "number" && value.length !== 2 + 2 * length) return false;
      if (length === true && value.length % 2 !== 0) return false;
      return true;
  }
  function isBytesLike(value) {
      return isHexString(value, true) || value instanceof Uint8Array;
  }
  const HexCharacters = "0123456789abcdef";
  function hexlify(data) {
      const bytes = getBytes(data);
      let result = "0x";
      for(let i = 0; i < bytes.length; i++){
          const v = bytes[i];
          result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
      }
      return result;
  }
  function concat(datas) {
      return "0x" + datas.map((d)=>hexlify(d).substring(2)).join("");
  }
  function dataLength(data) {
      if (isHexString(data, true)) return (data.length - 2) / 2;
      return getBytes(data).length;
  }
  function dataSlice(data, start, end) {
      const bytes = getBytes(data);
      if (end != null && end > bytes.length) (0, _errorsJs.assert)(false, "cannot slice beyond data bounds", "BUFFER_OVERRUN", {
          buffer: bytes,
          length: bytes.length,
          offset: end
      });
      return hexlify(bytes.slice(start == null ? 0 : start, end == null ? bytes.length : end));
  }
  function stripZerosLeft(data) {
      let bytes = hexlify(data).substring(2);
      while(bytes.startsWith("00"))bytes = bytes.substring(2);
      return "0x" + bytes;
  }
  function zeroPad(data, length, left) {
      const bytes = getBytes(data);
      (0, _errorsJs.assert)(length >= bytes.length, "padding exceeds data length", "BUFFER_OVERRUN", {
          buffer: new Uint8Array(bytes),
          length: length,
          offset: length + 1
      });
      const result = new Uint8Array(length);
      result.fill(0);
      if (left) result.set(bytes, length - bytes.length);
      else result.set(bytes, 0);
      return hexlify(result);
  }
  function zeroPadValue(data, length) {
      return zeroPad(data, length, true);
  }
  function zeroPadBytes(data, length) {
      return zeroPad(data, length, false);
  }
  
  },{"./errors.js":"fKiIl","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"fKiIl":[function(require,module,exports) {
  /**
   *  About Errors.
   *
   *  @_section: api/utils/errors:Errors  [about-errors]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Returns true if the %%error%% matches an error thrown by ethers
   *  that matches the error %%code%%.
   *
   *  In TypeScript envornoments, this can be used to check that %%error%%
   *  matches an EthersError type, which means the expected properties will
   *  be set.
   *
   *  @See [ErrorCodes](api:ErrorCode)
   *  @example
   *    try {
   *      // code....
   *    } catch (e) {
   *      if (isError(e, "CALL_EXCEPTION")) {
   *          // The Type Guard has validated this object
   *          console.log(e.data);
   *      }
   *    }
   */ parcelHelpers.export(exports, "isError", ()=>isError);
  /**
   *  Returns true if %%error%% is a [[CallExceptionError].
   */ parcelHelpers.export(exports, "isCallException", ()=>isCallException);
  /**
   *  Returns a new Error configured to the format ethers emits errors, with
   *  the %%message%%, [[api:ErrorCode]] %%code%% and additioanl properties
   *  for the corresponding EthersError.
   *
   *  Each error in ethers includes the version of ethers, a
   *  machine-readable [[ErrorCode]], and depneding on %%code%%, additional
   *  required properties. The error message will also include the %%meeage%%,
   *  ethers version, %%code%% and all aditional properties, serialized.
   */ parcelHelpers.export(exports, "makeError", ()=>makeError);
  /**
   *  Throws an EthersError with %%message%%, %%code%% and additional error
   *  %%info%% when %%check%% is falsish..
   *
   *  @see [[api:makeError]]
   */ parcelHelpers.export(exports, "assert", ()=>assert);
  /**
   *  A simple helper to simply ensuring provided arguments match expected
   *  constraints, throwing if not.
   *
   *  In TypeScript environments, the %%check%% has been asserted true, so
   *  any further code does not need additional compile-time checks.
   */ parcelHelpers.export(exports, "assertArgument", ()=>assertArgument);
  parcelHelpers.export(exports, "assertArgumentCount", ()=>assertArgumentCount);
  /**
   *  Throws if the normalization %%form%% is not supported.
   */ parcelHelpers.export(exports, "assertNormalize", ()=>assertNormalize);
  /**
   *  Many classes use file-scoped values to guard the constructor,
   *  making it effectively private. This facilitates that pattern
   *  by ensuring the %%givenGaurd%% matches the file-scoped %%guard%%,
   *  throwing if not, indicating the %%className%% if provided.
   */ parcelHelpers.export(exports, "assertPrivate", ()=>assertPrivate);
  var _versionJs = require("../_version.js");
  var _propertiesJs = require("./properties.js");
  function stringify(value) {
      if (value == null) return "null";
      if (Array.isArray(value)) return "[ " + value.map(stringify).join(", ") + " ]";
      if (value instanceof Uint8Array) {
          const HEX = "0123456789abcdef";
          let result = "0x";
          for(let i = 0; i < value.length; i++){
              result += HEX[value[i] >> 4];
              result += HEX[value[i] & 0xf];
          }
          return result;
      }
      if (typeof value === "object" && typeof value.toJSON === "function") return stringify(value.toJSON());
      switch(typeof value){
          case "boolean":
          case "symbol":
              return value.toString();
          case "bigint":
              return BigInt(value).toString();
          case "number":
              return value.toString();
          case "string":
              return JSON.stringify(value);
          case "object":
              {
                  const keys = Object.keys(value);
                  keys.sort();
                  return "{ " + keys.map((k)=>`${stringify(k)}: ${stringify(value[k])}`).join(", ") + " }";
              }
      }
      return `[ COULD NOT SERIALIZE ]`;
  }
  function isError(error, code) {
      return error && error.code === code;
  }
  function isCallException(error) {
      return isError(error, "CALL_EXCEPTION");
  }
  function makeError(message, code, info) {
      {
          const details = [];
          if (info) {
              if ("message" in info || "code" in info || "name" in info) throw new Error(`value will overwrite populated values: ${stringify(info)}`);
              for(const key in info){
                  const value = info[key];
                  //                try {
                  details.push(key + "=" + stringify(value));
              //                } catch (error: any) {
              //                console.log("MMM", error.message);
              //                    details.push(key + "=[could not serialize object]");
              //                }
              }
          }
          details.push(`code=${code}`);
          details.push(`version=${(0, _versionJs.version)}`);
          if (details.length) message += " (" + details.join(", ") + ")";
      }
      let error;
      switch(code){
          case "INVALID_ARGUMENT":
              error = new TypeError(message);
              break;
          case "NUMERIC_FAULT":
          case "BUFFER_OVERRUN":
              error = new RangeError(message);
              break;
          default:
              error = new Error(message);
      }
      (0, _propertiesJs.defineProperties)(error, {
          code
      });
      if (info) Object.assign(error, info);
      return error;
  }
  function assert(check, message, code, info) {
      if (!check) throw makeError(message, code, info);
  }
  function assertArgument(check, message, name, value) {
      assert(check, message, "INVALID_ARGUMENT", {
          argument: name,
          value: value
      });
  }
  function assertArgumentCount(count, expectedCount, message) {
      if (message == null) message = "";
      if (message) message = ": " + message;
      assert(count >= expectedCount, "missing arguemnt" + message, "MISSING_ARGUMENT", {
          count: count,
          expectedCount: expectedCount
      });
      assert(count <= expectedCount, "too many arguemnts" + message, "UNEXPECTED_ARGUMENT", {
          count: count,
          expectedCount: expectedCount
      });
  }
  const _normalizeForms = [
      "NFD",
      "NFC",
      "NFKD",
      "NFKC"
  ].reduce((accum, form)=>{
      try {
          // General test for normalize
          /* c8 ignore start */ if ("test".normalize(form) !== "test") throw new Error("bad");
          /* c8 ignore stop */ if (form === "NFD") {
              const check = String.fromCharCode(0xe9).normalize("NFD");
              const expected = String.fromCharCode(0x65, 0x0301);
              /* c8 ignore start */ if (check !== expected) throw new Error("broken");
          /* c8 ignore stop */ }
          accum.push(form);
      } catch (error) {}
      return accum;
  }, []);
  function assertNormalize(form) {
      assert(_normalizeForms.indexOf(form) >= 0, "platform missing String.prototype.normalize", "UNSUPPORTED_OPERATION", {
          operation: "String.prototype.normalize",
          info: {
              form
          }
      });
  }
  function assertPrivate(givenGuard, guard, className) {
      if (className == null) className = "";
      if (givenGuard !== guard) {
          let method = className, operation = "new";
          if (className) {
              method += ".";
              operation += " " + className;
          }
          assert(false, `private constructor; use ${method}from* methods`, "UNSUPPORTED_OPERATION", {
              operation
          });
      }
  }
  
  },{"../_version.js":"aosLW","./properties.js":"axai0","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"axai0":[function(require,module,exports) {
  /**
   *  Property helper functions.
   *
   *  @_subsection api/utils:Properties  [about-properties]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Resolves to a new object that is a copy of %%value%%, but with all
   *  values resolved.
   */ parcelHelpers.export(exports, "resolveProperties", ()=>resolveProperties);
  /**
   *  Assigns the %%values%% to %%target%% as read-only values.
   *
   *  It %%types%% is specified, the values are checked.
   */ parcelHelpers.export(exports, "defineProperties", ()=>defineProperties);
  function checkType(value, type, name) {
      const types = type.split("|").map((t)=>t.trim());
      for(let i = 0; i < types.length; i++)switch(type){
          case "any":
              return;
          case "bigint":
          case "boolean":
          case "number":
          case "string":
              if (typeof value === type) return;
      }
      const error = new Error(`invalid value for type ${type}`);
      error.code = "INVALID_ARGUMENT";
      error.argument = `value.${name}`;
      error.value = value;
      throw error;
  }
  async function resolveProperties(value) {
      const keys = Object.keys(value);
      const results = await Promise.all(keys.map((k)=>Promise.resolve(value[k])));
      return results.reduce((accum, v, index)=>{
          accum[keys[index]] = v;
          return accum;
      }, {});
  }
  function defineProperties(target, values, types) {
      for(let key in values){
          let value = values[key];
          const type = types ? types[key] : null;
          if (type) checkType(value, type, key);
          Object.defineProperty(target, key, {
              enumerable: true,
              value,
              writable: false
          });
      }
  }
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"hMe74":[function(require,module,exports) {
  /**
   *  Some mathematic operations.
   *
   *  @_subsection: api/utils:Math Helpers  [about-maths]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Convert %%value%% from a twos-compliment representation of %%width%%
   *  bits to its value.
   *
   *  If the highest bit is ``1``, the result will be negative.
   */ parcelHelpers.export(exports, "fromTwos", ()=>fromTwos);
  /**
   *  Convert %%value%% to a twos-compliment representation of
   *  %%width%% bits.
   *
   *  The result will always be positive.
   */ parcelHelpers.export(exports, "toTwos", ()=>toTwos);
  /**
   *  Mask %%value%% with a bitmask of %%bits%% ones.
   */ parcelHelpers.export(exports, "mask", ()=>mask);
  /**
   *  Gets a BigInt from %%value%%. If it is an invalid value for
   *  a BigInt, then an ArgumentError will be thrown for %%name%%.
   */ parcelHelpers.export(exports, "getBigInt", ()=>getBigInt);
  parcelHelpers.export(exports, "getUint", ()=>getUint);
  /*
   * Converts %%value%% to a BigInt. If %%value%% is a Uint8Array, it
   * is treated as Big Endian data.
   */ parcelHelpers.export(exports, "toBigInt", ()=>toBigInt);
  /**
   *  Gets a //number// from %%value%%. If it is an invalid value for
   *  a //number//, then an ArgumentError will be thrown for %%name%%.
   */ parcelHelpers.export(exports, "getNumber", ()=>getNumber);
  /**
   *  Converts %%value%% to a number. If %%value%% is a Uint8Array, it
   *  is treated as Big Endian data. Throws if the value is not safe.
   */ parcelHelpers.export(exports, "toNumber", ()=>toNumber);
  /**
   *  Converts %%value%% to a Big Endian hexstring, optionally padded to
   *  %%width%% bytes.
   */ parcelHelpers.export(exports, "toBeHex", ()=>toBeHex);
  /**
   *  Converts %%value%% to a Big Endian Uint8Array.
   */ parcelHelpers.export(exports, "toBeArray", ()=>toBeArray);
  /**
   *  Returns a [[HexString]] for %%value%% safe to use as a //Quantity//.
   *
   *  A //Quantity// does not have and leading 0 values unless the value is
   *  the literal value `0x0`. This is most commonly used for JSSON-RPC
   *  numeric values.
   */ parcelHelpers.export(exports, "toQuantity", ()=>toQuantity);
  var _dataJs = require("./data.js");
  var _errorsJs = require("./errors.js");
  const BN_0 = BigInt(0);
  const BN_1 = BigInt(1);
  //const BN_Max256 = (BN_1 << BigInt(256)) - BN_1;
  // IEEE 754 support 53-bits of mantissa
  const maxValue = 0x1fffffffffffff;
  function fromTwos(_value, _width) {
      const value = getUint(_value, "value");
      const width = BigInt(getNumber(_width, "width"));
      (0, _errorsJs.assert)(value >> width === BN_0, "overflow", "NUMERIC_FAULT", {
          operation: "fromTwos",
          fault: "overflow",
          value: _value
      });
      // Top bit set; treat as a negative value
      if (value >> width - BN_1) {
          const mask = (BN_1 << width) - BN_1;
          return -((~value & mask) + BN_1);
      }
      return value;
  }
  function toTwos(_value, _width) {
      let value = getBigInt(_value, "value");
      const width = BigInt(getNumber(_width, "width"));
      const limit = BN_1 << width - BN_1;
      if (value < BN_0) {
          value = -value;
          (0, _errorsJs.assert)(value <= limit, "too low", "NUMERIC_FAULT", {
              operation: "toTwos",
              fault: "overflow",
              value: _value
          });
          const mask = (BN_1 << width) - BN_1;
          return (~value & mask) + BN_1;
      } else (0, _errorsJs.assert)(value < limit, "too high", "NUMERIC_FAULT", {
          operation: "toTwos",
          fault: "overflow",
          value: _value
      });
      return value;
  }
  function mask(_value, _bits) {
      const value = getUint(_value, "value");
      const bits = BigInt(getNumber(_bits, "bits"));
      return value & (BN_1 << bits) - BN_1;
  }
  function getBigInt(value, name) {
      switch(typeof value){
          case "bigint":
              return value;
          case "number":
              (0, _errorsJs.assertArgument)(Number.isInteger(value), "underflow", name || "value", value);
              (0, _errorsJs.assertArgument)(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
              return BigInt(value);
          case "string":
              try {
                  if (value === "") throw new Error("empty string");
                  if (value[0] === "-" && value[1] !== "-") return -BigInt(value.substring(1));
                  return BigInt(value);
              } catch (e) {
                  (0, _errorsJs.assertArgument)(false, `invalid BigNumberish string: ${e.message}`, name || "value", value);
              }
      }
      (0, _errorsJs.assertArgument)(false, "invalid BigNumberish value", name || "value", value);
  }
  function getUint(value, name) {
      const result = getBigInt(value, name);
      (0, _errorsJs.assert)(result >= BN_0, "unsigned value cannot be negative", "NUMERIC_FAULT", {
          fault: "overflow",
          operation: "getUint",
          value
      });
      return result;
  }
  const Nibbles = "0123456789abcdef";
  function toBigInt(value) {
      if (value instanceof Uint8Array) {
          let result = "0x0";
          for (const v of value){
              result += Nibbles[v >> 4];
              result += Nibbles[v & 0x0f];
          }
          return BigInt(result);
      }
      return getBigInt(value);
  }
  function getNumber(value, name) {
      switch(typeof value){
          case "bigint":
              (0, _errorsJs.assertArgument)(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
              return Number(value);
          case "number":
              (0, _errorsJs.assertArgument)(Number.isInteger(value), "underflow", name || "value", value);
              (0, _errorsJs.assertArgument)(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
              return value;
          case "string":
              try {
                  if (value === "") throw new Error("empty string");
                  return getNumber(BigInt(value), name);
              } catch (e) {
                  (0, _errorsJs.assertArgument)(false, `invalid numeric string: ${e.message}`, name || "value", value);
              }
      }
      (0, _errorsJs.assertArgument)(false, "invalid numeric value", name || "value", value);
  }
  function toNumber(value) {
      return getNumber(toBigInt(value));
  }
  function toBeHex(_value, _width) {
      const value = getUint(_value, "value");
      let result = value.toString(16);
      if (_width == null) // Ensure the value is of even length
      {
          if (result.length % 2) result = "0" + result;
      } else {
          const width = getNumber(_width, "width");
          (0, _errorsJs.assert)(width * 2 >= result.length, `value exceeds width (${width} bits)`, "NUMERIC_FAULT", {
              operation: "toBeHex",
              fault: "overflow",
              value: _value
          });
          // Pad the value to the required width
          while(result.length < width * 2)result = "0" + result;
      }
      return "0x" + result;
  }
  function toBeArray(_value) {
      const value = getUint(_value, "value");
      if (value === BN_0) return new Uint8Array([]);
      let hex = value.toString(16);
      if (hex.length % 2) hex = "0" + hex;
      const result = new Uint8Array(hex.length / 2);
      for(let i = 0; i < result.length; i++){
          const offset = i * 2;
          result[i] = parseInt(hex.substring(offset, offset + 2), 16);
      }
      return result;
  }
  function toQuantity(value) {
      let result = (0, _dataJs.hexlify)((0, _dataJs.isBytesLike)(value) ? value : toBeArray(value)).substring(2);
      while(result.startsWith("0"))result = result.substring(1);
      if (result === "") result = "0";
      return "0x" + result;
  }
  
  },{"./data.js":"1m6OK","./errors.js":"fKiIl","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"jemaG":[function(require,module,exports) {
  // utils/base64-browser
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "decodeBase64", ()=>decodeBase64);
  parcelHelpers.export(exports, "encodeBase64", ()=>encodeBase64);
  var _dataJs = require("./data.js");
  function decodeBase64(textData) {
      textData = atob(textData);
      const data = new Uint8Array(textData.length);
      for(let i = 0; i < textData.length; i++)data[i] = textData.charCodeAt(i);
      return (0, _dataJs.getBytes)(data);
  }
  function encodeBase64(_data) {
      const data = (0, _dataJs.getBytes)(_data);
      let textData = "";
      for(let i = 0; i < data.length; i++)textData += String.fromCharCode(data[i]);
      return btoa(textData);
  }
  
  },{"./data.js":"1m6OK","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"eVKca":[function(require,module,exports) {
  /**
   *  Explain events...
   *
   *  @_section api/utils/events:Events  [about-events]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  When an [[EventEmitterable]] triggers a [[Listener]], the
   *  callback always ahas one additional argument passed, which is
   *  an **EventPayload**.
   */ parcelHelpers.export(exports, "EventPayload", ()=>EventPayload);
  var _propertiesJs = require("./properties.js");
  class EventPayload {
      /**
       *  The event filter.
       */ filter;
      /**
       *  The **EventEmitterable**.
       */ emitter;
      #listener;
      /**
       *  Create a new **EventPayload** for %%emitter%% with
       *  the %%listener%% and for %%filter%%.
       */ constructor(emitter, listener, filter){
          this.#listener = listener;
          (0, _propertiesJs.defineProperties)(this, {
              emitter,
              filter
          });
      }
      /**
       *  Unregister the triggered listener for future events.
       */ async removeListener() {
          if (this.#listener == null) return;
          await this.emitter.off(this.filter, this.#listener);
      }
  }
  
  },{"./properties.js":"axai0","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"8AFDQ":[function(require,module,exports) {
  /**
   *  Explain fetching here...
   *
   *  @_section api/utils/fetching:Fetching Web Content  [about-fetch]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  @_ignore
   */ parcelHelpers.export(exports, "FetchCancelSignal", ()=>FetchCancelSignal);
  /**
   *  Represents a request for a resource using a URI.
   *
   *  By default, the supported schemes are ``HTTP``, ``HTTPS``, ``data:``,
   *  and ``IPFS:``.
   *
   *  Additional schemes can be added globally using [[registerGateway]].
   *
   *  @example:
   *    req = new FetchRequest("https://www.ricmoo.com")
   *    resp = await req.send()
   *    resp.body.length
   *    //_result:
   */ parcelHelpers.export(exports, "FetchRequest", ()=>FetchRequest);
  /**
   *  The response for a FetchREquest.
   */ parcelHelpers.export(exports, "FetchResponse", ()=>FetchResponse);
  var _base64Js = require("./base64.js");
  var _dataJs = require("./data.js");
  var _errorsJs = require("./errors.js");
  var _propertiesJs = require("./properties.js");
  var _utf8Js = require("./utf8.js");
  var _geturlJs = require("./geturl.js");
  const MAX_ATTEMPTS = 12;
  const SLOT_INTERVAL = 250;
  // The global FetchGetUrlFunc implementation.
  let getUrlFunc = (0, _geturlJs.getUrl);
  const reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
  const reIpfs = new RegExp("^ipfs://(ipfs/)?(.*)$", "i");
  // If locked, new Gateways cannot be added
  let locked = false;
  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs
  async function dataGatewayFunc(url, signal) {
      try {
          const match = url.match(reData);
          if (!match) throw new Error("invalid data");
          return new FetchResponse(200, "OK", {
              "content-type": match[1] || "text/plain"
          }, match[2] ? (0, _base64Js.decodeBase64)(match[3]) : unpercent(match[3]));
      } catch (error) {
          return new FetchResponse(599, "BAD REQUEST (invalid data: URI)", {}, null, new FetchRequest(url));
      }
  }
  /**
   *  Returns a [[FetchGatewayFunc]] for fetching content from a standard
   *  IPFS gateway hosted at %%baseUrl%%.
   */ function getIpfsGatewayFunc(baseUrl) {
      async function gatewayIpfs(url, signal) {
          try {
              const match = url.match(reIpfs);
              if (!match) throw new Error("invalid link");
              return new FetchRequest(`${baseUrl}${match[2]}`);
          } catch (error) {
              return new FetchResponse(599, "BAD REQUEST (invalid IPFS URI)", {}, null, new FetchRequest(url));
          }
      }
      return gatewayIpfs;
  }
  const Gateways = {
      "data": dataGatewayFunc,
      "ipfs": getIpfsGatewayFunc("https://gateway.ipfs.io/ipfs/")
  };
  const fetchSignals = new WeakMap();
  class FetchCancelSignal {
      #listeners;
      #cancelled;
      constructor(request){
          this.#listeners = [];
          this.#cancelled = false;
          fetchSignals.set(request, ()=>{
              if (this.#cancelled) return;
              this.#cancelled = true;
              for (const listener of this.#listeners)setTimeout(()=>{
                  listener();
              }, 0);
              this.#listeners = [];
          });
      }
      addListener(listener) {
          (0, _errorsJs.assert)(!this.#cancelled, "singal already cancelled", "UNSUPPORTED_OPERATION", {
              operation: "fetchCancelSignal.addCancelListener"
          });
          this.#listeners.push(listener);
      }
      get cancelled() {
          return this.#cancelled;
      }
      checkSignal() {
          (0, _errorsJs.assert)(!this.cancelled, "cancelled", "CANCELLED", {});
      }
  }
  // Check the signal, throwing if it is cancelled
  function checkSignal(signal) {
      if (signal == null) throw new Error("missing signal; should not happen");
      signal.checkSignal();
      return signal;
  }
  class FetchRequest {
      #allowInsecure;
      #gzip;
      #headers;
      #method;
      #timeout;
      #url;
      #body;
      #bodyType;
      #creds;
      // Hooks
      #preflight;
      #process;
      #retry;
      #signal;
      #throttle;
      /**
       *  The fetch URI to requrest.
       */ get url() {
          return this.#url;
      }
      set url(url) {
          this.#url = String(url);
      }
      /**
       *  The fetch body, if any, to send as the request body. //(default: null)//
       *
       *  When setting a body, the intrinsic ``Content-Type`` is automatically
       *  set and will be used if **not overridden** by setting a custom
       *  header.
       *
       *  If %%body%% is null, the body is cleared (along with the
       *  intrinsic ``Content-Type``) and the .
       *
       *  If %%body%% is a string, the intrincis ``Content-Type`` is set to
       *  ``text/plain``.
       *
       *  If %%body%% is a Uint8Array, the intrincis ``Content-Type`` is set to
       *  ``application/octet-stream``.
       *
       *  If %%body%% is any other object, the intrincis ``Content-Type`` is
       *  set to ``application/json``.
       */ get body() {
          if (this.#body == null) return null;
          return new Uint8Array(this.#body);
      }
      set body(body) {
          if (body == null) {
              this.#body = undefined;
              this.#bodyType = undefined;
          } else if (typeof body === "string") {
              this.#body = (0, _utf8Js.toUtf8Bytes)(body);
              this.#bodyType = "text/plain";
          } else if (body instanceof Uint8Array) {
              this.#body = body;
              this.#bodyType = "application/octet-stream";
          } else if (typeof body === "object") {
              this.#body = (0, _utf8Js.toUtf8Bytes)(JSON.stringify(body));
              this.#bodyType = "application/json";
          } else throw new Error("invalid body");
      }
      /**
       *  Returns true if the request has a body.
       */ hasBody() {
          return this.#body != null;
      }
      /**
       *  The HTTP method to use when requesting the URI. If no method
       *  has been explicitly set, then ``GET`` is used if the body is
       *  null and ``POST`` otherwise.
       */ get method() {
          if (this.#method) return this.#method;
          if (this.hasBody()) return "POST";
          return "GET";
      }
      set method(method) {
          if (method == null) method = "";
          this.#method = String(method).toUpperCase();
      }
      /**
       *  The headers that will be used when requesting the URI. All
       *  keys are lower-case.
       *
       *  This object is a copy, so any chnages will **NOT** be reflected
       *  in the ``FetchRequest``.
       *
       *  To set a header entry, use the ``setHeader`` method.
       */ get headers() {
          const headers = Object.assign({}, this.#headers);
          if (this.#creds) headers["authorization"] = `Basic ${(0, _base64Js.encodeBase64)((0, _utf8Js.toUtf8Bytes)(this.#creds))}`;
          if (this.allowGzip) headers["accept-encoding"] = "gzip";
          if (headers["content-type"] == null && this.#bodyType) headers["content-type"] = this.#bodyType;
          if (this.body) headers["content-length"] = String(this.body.length);
          return headers;
      }
      /**
       *  Get the header for %%key%%, ignoring case.
       */ getHeader(key) {
          return this.headers[key.toLowerCase()];
      }
      /**
       *  Set the header for %%key%% to %%value%%. All values are coerced
       *  to a string.
       */ setHeader(key, value) {
          this.#headers[String(key).toLowerCase()] = String(value);
      }
      /**
       *  Clear all headers, resetting all intrinsic headers.
       */ clearHeaders() {
          this.#headers = {};
      }
      [Symbol.iterator]() {
          const headers = this.headers;
          const keys = Object.keys(headers);
          let index = 0;
          return {
              next: ()=>{
                  if (index < keys.length) {
                      const key = keys[index++];
                      return {
                          value: [
                              key,
                              headers[key]
                          ],
                          done: false
                      };
                  }
                  return {
                      value: undefined,
                      done: true
                  };
              }
          };
      }
      /**
       *  The value that will be sent for the ``Authorization`` header.
       *
       *  To set the credentials, use the ``setCredentials`` method.
       */ get credentials() {
          return this.#creds || null;
      }
      /**
       *  Sets an ``Authorization`` for %%username%% with %%password%%.
       */ setCredentials(username, password) {
          (0, _errorsJs.assertArgument)(!username.match(/:/), "invalid basic authentication username", "username", "[REDACTED]");
          this.#creds = `${username}:${password}`;
      }
      /**
       *  Enable and request gzip-encoded responses. The response will
       *  automatically be decompressed. //(default: true)//
       */ get allowGzip() {
          return this.#gzip;
      }
      set allowGzip(value) {
          this.#gzip = !!value;
      }
      /**
       *  Allow ``Authentication`` credentials to be sent over insecure
       *  channels. //(default: false)//
       */ get allowInsecureAuthentication() {
          return !!this.#allowInsecure;
      }
      set allowInsecureAuthentication(value) {
          this.#allowInsecure = !!value;
      }
      /**
       *  The timeout (in milliseconds) to wait for a complere response.
       *  //(default: 5 minutes)//
       */ get timeout() {
          return this.#timeout;
      }
      set timeout(timeout) {
          (0, _errorsJs.assertArgument)(timeout >= 0, "timeout must be non-zero", "timeout", timeout);
          this.#timeout = timeout;
      }
      /**
       *  This function is called prior to each request, for example
       *  during a redirection or retry in case of server throttling.
       *
       *  This offers an opportunity to populate headers or update
       *  content before sending a request.
       */ get preflightFunc() {
          return this.#preflight || null;
      }
      set preflightFunc(preflight) {
          this.#preflight = preflight;
      }
      /**
       *  This function is called after each response, offering an
       *  opportunity to provide client-level throttling or updating
       *  response data.
       *
       *  Any error thrown in this causes the ``send()`` to throw.
       *
       *  To schedule a retry attempt (assuming the maximum retry limit
       *  has not been reached), use [[response.throwThrottleError]].
       */ get processFunc() {
          return this.#process || null;
      }
      set processFunc(process) {
          this.#process = process;
      }
      /**
       *  This function is called on each retry attempt.
       */ get retryFunc() {
          return this.#retry || null;
      }
      set retryFunc(retry) {
          this.#retry = retry;
      }
      /**
       *  Create a new FetchRequest instance with default values.
       *
       *  Once created, each property may be set before issuing a
       *  ``.send()`` to make the request.
       */ constructor(url){
          this.#url = String(url);
          this.#allowInsecure = false;
          this.#gzip = true;
          this.#headers = {};
          this.#method = "";
          this.#timeout = 300000;
          this.#throttle = {
              slotInterval: SLOT_INTERVAL,
              maxAttempts: MAX_ATTEMPTS
          };
      }
      toString() {
          return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${this.#body ? (0, _dataJs.hexlify)(this.#body) : "null"}>`;
      }
      /**
       *  Update the throttle parameters used to determine maximum
       *  attempts and exponential-backoff properties.
       */ setThrottleParams(params) {
          if (params.slotInterval != null) this.#throttle.slotInterval = params.slotInterval;
          if (params.maxAttempts != null) this.#throttle.maxAttempts = params.maxAttempts;
      }
      async #send(attempt, expires, delay, _request, _response) {
          if (attempt >= this.#throttle.maxAttempts) return _response.makeServerError("exceeded maximum retry limit");
          (0, _errorsJs.assert)(getTime() <= expires, "timeout", "TIMEOUT", {
              operation: "request.send",
              reason: "timeout",
              request: _request
          });
          if (delay > 0) await wait(delay);
          let req = this.clone();
          const scheme = (req.url.split(":")[0] || "").toLowerCase();
          // Process any Gateways
          if (scheme in Gateways) {
              const result = await Gateways[scheme](req.url, checkSignal(_request.#signal));
              if (result instanceof FetchResponse) {
                  let response = result;
                  if (this.processFunc) {
                      checkSignal(_request.#signal);
                      try {
                          response = await this.processFunc(req, response);
                      } catch (error) {
                          // Something went wrong during processing; throw a 5xx server error
                          if (error.throttle == null || typeof error.stall !== "number") response.makeServerError("error in post-processing function", error).assertOk();
                      // Ignore throttling
                      }
                  }
                  return response;
              }
              req = result;
          }
          // We have a preflight function; update the request
          if (this.preflightFunc) req = await this.preflightFunc(req);
          const resp = await getUrlFunc(req, checkSignal(_request.#signal));
          let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request);
          if (response.statusCode === 301 || response.statusCode === 302) {
              // Redirect
              try {
                  const location = response.headers.location || "";
                  return req.redirect(location).#send(attempt + 1, expires, 0, _request, response);
              } catch (error) {}
              // Things won't get any better on another attempt; abort
              return response;
          } else if (response.statusCode === 429) // Throttle
          {
              if (this.retryFunc == null || await this.retryFunc(req, response, attempt)) {
                  const retryAfter = response.headers["retry-after"];
                  let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
                  if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) delay = parseInt(retryAfter);
                  return req.clone().#send(attempt + 1, expires, delay, _request, response);
              }
          }
          if (this.processFunc) {
              checkSignal(_request.#signal);
              try {
                  response = await this.processFunc(req, response);
              } catch (error) {
                  // Something went wrong during processing; throw a 5xx server error
                  if (error.throttle == null || typeof error.stall !== "number") response.makeServerError("error in post-processing function", error).assertOk();
                  // Throttle
                  let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
                  if (error.stall >= 0) delay = error.stall;
                  return req.clone().#send(attempt + 1, expires, delay, _request, response);
              }
          }
          return response;
      }
      /**
       *  Resolves to the response by sending the request.
       */ send() {
          (0, _errorsJs.assert)(this.#signal == null, "request already sent", "UNSUPPORTED_OPERATION", {
              operation: "fetchRequest.send"
          });
          this.#signal = new FetchCancelSignal(this);
          return this.#send(0, getTime() + this.timeout, 0, this, new FetchResponse(0, "", {}, null, this));
      }
      /**
       *  Cancels the inflight response, causing a ``CANCELLED``
       *  error to be rejected from the [[send]].
       */ cancel() {
          (0, _errorsJs.assert)(this.#signal != null, "request has not been sent", "UNSUPPORTED_OPERATION", {
              operation: "fetchRequest.cancel"
          });
          const signal = fetchSignals.get(this);
          if (!signal) throw new Error("missing signal; should not happen");
          signal();
      }
      /**
       *  Returns a new [[FetchRequest]] that represents the redirection
       *  to %%location%%.
       */ redirect(location) {
          // Redirection; for now we only support absolute locataions
          const current = this.url.split(":")[0].toLowerCase();
          const target = location.split(":")[0].toLowerCase();
          // Don't allow redirecting:
          // - non-GET requests
          // - downgrading the security (e.g. https => http)
          // - to non-HTTP (or non-HTTPS) protocols [this could be relaxed?]
          (0, _errorsJs.assert)(this.method === "GET" && (current !== "https" || target !== "http") && location.match(/^https?:/), `unsupported redirect`, "UNSUPPORTED_OPERATION", {
              operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(location)})`
          });
          // Create a copy of this request, with a new URL
          const req = new FetchRequest(location);
          req.method = "GET";
          req.allowGzip = this.allowGzip;
          req.timeout = this.timeout;
          req.#headers = Object.assign({}, this.#headers);
          if (this.#body) req.#body = new Uint8Array(this.#body);
          req.#bodyType = this.#bodyType;
          // Do not forward credentials unless on the same domain; only absolute
          //req.allowInsecure = false;
          // paths are currently supported; may want a way to specify to forward?
          //setStore(req.#props, "creds", getStore(this.#pros, "creds"));
          return req;
      }
      /**
       *  Create a new copy of this request.
       */ clone() {
          const clone = new FetchRequest(this.url);
          // Preserve "default method" (i.e. null)
          clone.#method = this.#method;
          // Preserve "default body" with type, copying the Uint8Array is present
          if (this.#body) clone.#body = this.#body;
          clone.#bodyType = this.#bodyType;
          // Preserve "default headers"
          clone.#headers = Object.assign({}, this.#headers);
          // Credentials is readonly, so we copy internally
          clone.#creds = this.#creds;
          if (this.allowGzip) clone.allowGzip = true;
          clone.timeout = this.timeout;
          if (this.allowInsecureAuthentication) clone.allowInsecureAuthentication = true;
          clone.#preflight = this.#preflight;
          clone.#process = this.#process;
          clone.#retry = this.#retry;
          return clone;
      }
      /**
       *  Locks all static configuration for gateways and FetchGetUrlFunc
       *  registration.
       */ static lockConfig() {
          locked = true;
      }
      /**
       *  Get the current Gateway function for %%scheme%%.
       */ static getGateway(scheme) {
          return Gateways[scheme.toLowerCase()] || null;
      }
      /**
       *  Use the %%func%% when fetching URIs using %%scheme%%.
       *
       *  This method affects all requests globally.
       *
       *  If [[lockConfig]] has been called, no change is made and this
       *  throws.
       */ static registerGateway(scheme, func) {
          scheme = scheme.toLowerCase();
          if (scheme === "http" || scheme === "https") throw new Error(`cannot intercept ${scheme}; use registerGetUrl`);
          if (locked) throw new Error("gateways locked");
          Gateways[scheme] = func;
      }
      /**
       *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.
       *
       *  This method affects all requests globally.
       *
       *  If [[lockConfig]] has been called, no change is made and this
       *  throws.
       */ static registerGetUrl(getUrl) {
          if (locked) throw new Error("gateways locked");
          getUrlFunc = getUrl;
      }
      /**
       *  Creates a function that can "fetch" data URIs.
       *
       *  Note that this is automatically done internally to support
       *  data URIs, so it is not necessary to register it.
       *
       *  This is not generally something that is needed, but may
       *  be useful in a wrapper to perfom custom data URI functionality.
       */ static createDataGateway() {
          return dataGatewayFunc;
      }
      /**
       *  Creates a function that will fetch IPFS (unvalidated) from
       *  a custom gateway baseUrl.
       *
       *  The default IPFS gateway used internally is
       *  ``"https:/\/gateway.ipfs.io/ipfs/"``.
       */ static createIpfsGatewayFunc(baseUrl) {
          return getIpfsGatewayFunc(baseUrl);
      }
  }
  class FetchResponse {
      #statusCode;
      #statusMessage;
      #headers;
      #body;
      #request;
      #error;
      toString() {
          return `<FetchResponse status=${this.statusCode} body=${this.#body ? (0, _dataJs.hexlify)(this.#body) : "null"}>`;
      }
      /**
       *  The response status code.
       */ get statusCode() {
          return this.#statusCode;
      }
      /**
       *  The response status message.
       */ get statusMessage() {
          return this.#statusMessage;
      }
      /**
       *  The response headers. All keys are lower-case.
       */ get headers() {
          return Object.assign({}, this.#headers);
      }
      /**
       *  The response body, or ``null`` if there was no body.
       */ get body() {
          return this.#body == null ? null : new Uint8Array(this.#body);
      }
      /**
       *  The response body as a UTF-8 encoded string, or the empty
       *  string (i.e. ``""``) if there was no body.
       *
       *  An error is thrown if the body is invalid UTF-8 data.
       */ get bodyText() {
          try {
              return this.#body == null ? "" : (0, _utf8Js.toUtf8String)(this.#body);
          } catch (error) {
              (0, _errorsJs.assert)(false, "response body is not valid UTF-8 data", "UNSUPPORTED_OPERATION", {
                  operation: "bodyText",
                  info: {
                      response: this
                  }
              });
          }
      }
      /**
       *  The response body, decoded as JSON.
       *
       *  An error is thrown if the body is invalid JSON-encoded data
       *  or if there was no body.
       */ get bodyJson() {
          try {
              return JSON.parse(this.bodyText);
          } catch (error) {
              (0, _errorsJs.assert)(false, "response body is not valid JSON", "UNSUPPORTED_OPERATION", {
                  operation: "bodyJson",
                  info: {
                      response: this
                  }
              });
          }
      }
      [Symbol.iterator]() {
          const headers = this.headers;
          const keys = Object.keys(headers);
          let index = 0;
          return {
              next: ()=>{
                  if (index < keys.length) {
                      const key = keys[index++];
                      return {
                          value: [
                              key,
                              headers[key]
                          ],
                          done: false
                      };
                  }
                  return {
                      value: undefined,
                      done: true
                  };
              }
          };
      }
      constructor(statusCode, statusMessage, headers, body, request){
          this.#statusCode = statusCode;
          this.#statusMessage = statusMessage;
          this.#headers = Object.keys(headers).reduce((accum, k)=>{
              accum[k.toLowerCase()] = String(headers[k]);
              return accum;
          }, {});
          this.#body = body == null ? null : new Uint8Array(body);
          this.#request = request || null;
          this.#error = {
              message: ""
          };
      }
      /**
       *  Return a Response with matching headers and body, but with
       *  an error status code (i.e. 599) and %%message%% with an
       *  optional %%error%%.
       */ makeServerError(message, error) {
          let statusMessage;
          if (!message) {
              message = `${this.statusCode} ${this.statusMessage}`;
              statusMessage = `CLIENT ESCALATED SERVER ERROR (${message})`;
          } else statusMessage = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${message})`;
          const response = new FetchResponse(599, statusMessage, this.headers, this.body, this.#request || undefined);
          response.#error = {
              message,
              error
          };
          return response;
      }
      /**
       *  If called within a [request.processFunc](FetchRequest-processFunc)
       *  call, causes the request to retry as if throttled for %%stall%%
       *  milliseconds.
       */ throwThrottleError(message, stall) {
          if (stall == null) stall = -1;
          else (0, _errorsJs.assertArgument)(Number.isInteger(stall) && stall >= 0, "invalid stall timeout", "stall", stall);
          const error = new Error(message || "throttling requests");
          (0, _propertiesJs.defineProperties)(error, {
              stall,
              throttle: true
          });
          throw error;
      }
      /**
       *  Get the header value for %%key%%, ignoring case.
       */ getHeader(key) {
          return this.headers[key.toLowerCase()];
      }
      /**
       *  Returns true of the response has a body.
       */ hasBody() {
          return this.#body != null;
      }
      /**
       *  The request made for this response.
       */ get request() {
          return this.#request;
      }
      /**
       *  Returns true if this response was a success statusCode.
       */ ok() {
          return this.#error.message === "" && this.statusCode >= 200 && this.statusCode < 300;
      }
      /**
       *  Throws a ``SERVER_ERROR`` if this response is not ok.
       */ assertOk() {
          if (this.ok()) return;
          let { message , error  } = this.#error;
          if (message === "") message = `server response ${this.statusCode} ${this.statusMessage}`;
          (0, _errorsJs.assert)(false, message, "SERVER_ERROR", {
              request: this.request || "unknown request",
              response: this,
              error
          });
      }
  }
  function getTime() {
      return new Date().getTime();
  }
  function unpercent(value) {
      return (0, _utf8Js.toUtf8Bytes)(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code)=>{
          return String.fromCharCode(parseInt(code, 16));
      }));
  }
  function wait(delay) {
      return new Promise((resolve)=>setTimeout(resolve, delay));
  }
  
  },{"./base64.js":"jemaG","./data.js":"1m6OK","./errors.js":"fKiIl","./properties.js":"axai0","./utf8.js":"fOXOv","./geturl.js":"bTQt7","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"fOXOv":[function(require,module,exports) {
  /**
   *  Using strings in Ethereum (or any security-basd system) requires
   *  additional care. These utilities attempt to mitigate some of the
   *  safety issues as well as provide the ability to recover and analyse
   *  strings.
   *
   *  @_subsection api/utils:Strings and UTF-8  [about-strings]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "Utf8ErrorFuncs", ()=>Utf8ErrorFuncs);
  // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
  /**
   *  Returns the UTF-8 byte representation of %%str%%.
   *
   *  If %%form%% is specified, the string is normalized.
   */ parcelHelpers.export(exports, "toUtf8Bytes", ()=>toUtf8Bytes);
  /**
   *  Returns the string represented by the UTF-8 data %%bytes%%.
   *
   *  When %%onError%% function is specified, it is called on UTF-8
   *  errors allowing recovery using the [[Utf8ErrorFunc]] API.
   *  (default: [error](Utf8ErrorFuncs))
   */ parcelHelpers.export(exports, "toUtf8String", ()=>toUtf8String);
  /**
   *  Returns the UTF-8 code-points for %%str%%.
   *
   *  If %%form%% is specified, the string is normalized.
   */ parcelHelpers.export(exports, "toUtf8CodePoints", ()=>toUtf8CodePoints);
  var _dataJs = require("./data.js");
  var _errorsJs = require("./errors.js");
  function errorFunc(reason, offset, bytes, output, badCodepoint) {
      (0, _errorsJs.assertArgument)(false, `invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
  }
  function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
      // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
      if (reason === "BAD_PREFIX" || reason === "UNEXPECTED_CONTINUE") {
          let i = 0;
          for(let o = offset + 1; o < bytes.length; o++){
              if (bytes[o] >> 6 !== 0x02) break;
              i++;
          }
          return i;
      }
      // This byte runs us past the end of the string, so just jump to the end
      // (but the first byte was read already read and therefore skipped)
      if (reason === "OVERRUN") return bytes.length - offset - 1;
      // Nothing to skip
      return 0;
  }
  function replaceFunc(reason, offset, bytes, output, badCodepoint) {
      // Overlong representations are otherwise "valid" code points; just non-deistingtished
      if (reason === "OVERLONG") {
          (0, _errorsJs.assertArgument)(typeof badCodepoint === "number", "invalid bad code point for replacement", "badCodepoint", badCodepoint);
          output.push(badCodepoint);
          return 0;
      }
      // Put the replacement character into the output
      output.push(0xfffd);
      // Otherwise, process as if ignoring errors
      return ignoreFunc(reason, offset, bytes, output, badCodepoint);
  }
  const Utf8ErrorFuncs = Object.freeze({
      error: errorFunc,
      ignore: ignoreFunc,
      replace: replaceFunc
  });
  // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
  function getUtf8CodePoints(_bytes, onError) {
      if (onError == null) onError = Utf8ErrorFuncs.error;
      const bytes = (0, _dataJs.getBytes)(_bytes, "bytes");
      const result = [];
      let i = 0;
      // Invalid bytes are ignored
      while(i < bytes.length){
          const c = bytes[i++];
          // 0xxx xxxx
          if (c >> 7 === 0) {
              result.push(c);
              continue;
          }
          // Multibyte; how many bytes left for this character?
          let extraLength = null;
          let overlongMask = null;
          // 110x xxxx 10xx xxxx
          if ((c & 0xe0) === 0xc0) {
              extraLength = 1;
              overlongMask = 0x7f;
          // 1110 xxxx 10xx xxxx 10xx xxxx
          } else if ((c & 0xf0) === 0xe0) {
              extraLength = 2;
              overlongMask = 0x7ff;
          // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
          } else if ((c & 0xf8) === 0xf0) {
              extraLength = 3;
              overlongMask = 0xffff;
          } else {
              if ((c & 0xc0) === 0x80) i += onError("UNEXPECTED_CONTINUE", i - 1, bytes, result);
              else i += onError("BAD_PREFIX", i - 1, bytes, result);
              continue;
          }
          // Do we have enough bytes in our data?
          if (i - 1 + extraLength >= bytes.length) {
              i += onError("OVERRUN", i - 1, bytes, result);
              continue;
          }
          // Remove the length prefix from the char
          let res = c & (1 << 8 - extraLength - 1) - 1;
          for(let j = 0; j < extraLength; j++){
              let nextChar = bytes[i];
              // Invalid continuation byte
              if ((nextChar & 0xc0) != 0x80) {
                  i += onError("MISSING_CONTINUE", i, bytes, result);
                  res = null;
                  break;
              }
              res = res << 6 | nextChar & 0x3f;
              i++;
          }
          // See above loop for invalid continuation byte
          if (res === null) continue;
          // Maximum code point
          if (res > 0x10ffff) {
              i += onError("OUT_OF_RANGE", i - 1 - extraLength, bytes, result, res);
              continue;
          }
          // Reserved for UTF-16 surrogate halves
          if (res >= 0xd800 && res <= 0xdfff) {
              i += onError("UTF16_SURROGATE", i - 1 - extraLength, bytes, result, res);
              continue;
          }
          // Check for overlong sequences (more bytes than needed)
          if (res <= overlongMask) {
              i += onError("OVERLONG", i - 1 - extraLength, bytes, result, res);
              continue;
          }
          result.push(res);
      }
      return result;
  }
  function toUtf8Bytes(str, form) {
      if (form != null) {
          (0, _errorsJs.assertNormalize)(form);
          str = str.normalize(form);
      }
      let result = [];
      for(let i = 0; i < str.length; i++){
          const c = str.charCodeAt(i);
          if (c < 0x80) result.push(c);
          else if (c < 0x800) {
              result.push(c >> 6 | 0xc0);
              result.push(c & 0x3f | 0x80);
          } else if ((c & 0xfc00) == 0xd800) {
              i++;
              const c2 = str.charCodeAt(i);
              (0, _errorsJs.assertArgument)(i < str.length && (c2 & 0xfc00) === 0xdc00, "invalid surrogate pair", "str", str);
              // Surrogate Pair
              const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
              result.push(pair >> 18 | 0xf0);
              result.push(pair >> 12 & 0x3f | 0x80);
              result.push(pair >> 6 & 0x3f | 0x80);
              result.push(pair & 0x3f | 0x80);
          } else {
              result.push(c >> 12 | 0xe0);
              result.push(c >> 6 & 0x3f | 0x80);
              result.push(c & 0x3f | 0x80);
          }
      }
      return new Uint8Array(result);
  }
  //export 
  function _toUtf8String(codePoints) {
      return codePoints.map((codePoint)=>{
          if (codePoint <= 0xffff) return String.fromCharCode(codePoint);
          codePoint -= 0x10000;
          return String.fromCharCode((codePoint >> 10 & 0x3ff) + 0xd800, (codePoint & 0x3ff) + 0xdc00);
      }).join("");
  }
  function toUtf8String(bytes, onError) {
      return _toUtf8String(getUtf8CodePoints(bytes, onError));
  }
  function toUtf8CodePoints(str, form) {
      return getUtf8CodePoints(toUtf8Bytes(str, form));
  }
  
  },{"./data.js":"1m6OK","./errors.js":"fKiIl","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"bTQt7":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  // @TODO: timeout is completely ignored; start a Promise.any with a reject?
  parcelHelpers.export(exports, "getUrl", ()=>getUrl);
  var _errorsJs = require("./errors.js");
  async function getUrl(req, _signal) {
      const protocol = req.url.split(":")[0].toLowerCase();
      (0, _errorsJs.assert)(protocol === "http" || protocol === "https", `unsupported protocol ${protocol}`, "UNSUPPORTED_OPERATION", {
          info: {
              protocol
          },
          operation: "request"
      });
      (0, _errorsJs.assert)(protocol === "https" || !req.credentials || req.allowInsecureAuthentication, "insecure authorized connections unsupported", "UNSUPPORTED_OPERATION", {
          operation: "request"
      });
      let signal = undefined;
      if (_signal) {
          const controller = new AbortController();
          signal = controller.signal;
          _signal.addListener(()=>{
              controller.abort();
          });
      }
      const init = {
          method: req.method,
          headers: new Headers(Array.from(req)),
          body: req.body || undefined,
          signal
      };
      const resp = await fetch(req.url, init);
      const headers = {};
      resp.headers.forEach((value, key)=>{
          headers[key.toLowerCase()] = value;
      });
      const respBody = await resp.arrayBuffer();
      const body = respBody == null ? null : new Uint8Array(respBody);
      return {
          statusCode: resp.status,
          statusMessage: resp.statusText,
          headers,
          body
      };
  }
  
  },{"./errors.js":"fKiIl","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"bb854":[function(require,module,exports) {
  /**
   *  About fixed-point math...
   *
   *  @_section: api/utils/fixed-point-math:Fixed-Point Maths  [about-fixed-point-math]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  A FixedNumber represents a value over its [[FixedFormat]]
   *  arithmetic field.
   *
   *  A FixedNumber can be used to perform math, losslessly, on
   *  values which have decmial places.
   *
   *  A FixedNumber has a fixed bit-width to store values in, and stores all
   *  values internally by multiplying the value by 10 raised to the power of
   *  %%decimals%%.
   *
   *  If operations are performed that cause a value to grow too high (close to
   *  positive infinity) or too low (close to negative infinity), the value
   *  is said to //overflow//.
   *
   *  For example, an 8-bit signed value, with 0 decimals may only be within
   *  the range ``-128`` to ``127``; so ``-128 - 1`` will overflow and become
   *  ``127``. Likewise, ``127 + 1`` will overflow and become ``-127``.
   *
   *  Many operation have a normal and //unsafe// variant. The normal variant
   *  will throw a [[NumericFaultError]] on any overflow, while the //unsafe//
   *  variant will silently allow overflow, corrupting its value value.
   *
   *  If operations are performed that cause a value to become too small
   *  (close to zero), the value loses precison and is said to //underflow//.
   *
   *  For example, an value with 1 decimal place may store a number as small
   *  as ``0.1``, but the value of ``0.1 / 2`` is ``0.05``, which cannot fit
   *  into 1 decimal place, so underflow occurs which means precision is lost
   *  and the value becomes ``0``.
   *
   *  Some operations have a normal and //signalling// variant. The normal
   *  variant will silently ignore underflow, while the //signalling// variant
   *  will thow a [[NumericFaultError]] on underflow.
   */ parcelHelpers.export(exports, "FixedNumber", ()=>FixedNumber) //const f1 = FixedNumber.fromString("12.56", "fixed16x2");
   //const f2 = FixedNumber.fromString("0.3", "fixed16x2");
   //console.log(f1.divSignal(f2));
   //const BUMP = FixedNumber.from("0.5");
  ;
  var _dataJs = require("./data.js");
  var _errorsJs = require("./errors.js");
  var _mathsJs = require("./maths.js");
  var _propertiesJs = require("./properties.js");
  const BN_N1 = BigInt(-1);
  const BN_0 = BigInt(0);
  const BN_1 = BigInt(1);
  const BN_5 = BigInt(5);
  const _guard = {};
  // Constant to pull zeros from for multipliers
  let Zeros = "0000";
  while(Zeros.length < 80)Zeros += Zeros;
  // Returns a string "1" followed by decimal "0"s
  function getTens(decimals) {
      let result = Zeros;
      while(result.length < decimals)result += result;
      return BigInt("1" + result.substring(0, decimals));
  }
  function checkValue(val, format, safeOp) {
      const width = BigInt(format.width);
      if (format.signed) {
          const limit = BN_1 << width - BN_1;
          (0, _errorsJs.assert)(safeOp == null || val >= -limit && val < limit, "overflow", "NUMERIC_FAULT", {
              operation: safeOp,
              fault: "overflow",
              value: val
          });
          if (val > BN_0) val = (0, _mathsJs.fromTwos)((0, _mathsJs.mask)(val, width), width);
          else val = -(0, _mathsJs.fromTwos)((0, _mathsJs.mask)(-val, width), width);
      } else {
          const limit = BN_1 << width;
          (0, _errorsJs.assert)(safeOp == null || val >= 0 && val < limit, "overflow", "NUMERIC_FAULT", {
              operation: safeOp,
              fault: "overflow",
              value: val
          });
          val = (val % limit + limit) % limit & limit - BN_1;
      }
      return val;
  }
  function getFormat(value) {
      if (typeof value === "number") value = `fixed128x${value}`;
      let signed = true;
      let width = 128;
      let decimals = 18;
      if (typeof value === "string") {
          // Parse the format string
          if (value === "fixed") ;
          else if (value === "ufixed") signed = false;
          else {
              const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
              (0, _errorsJs.assertArgument)(match, "invalid fixed format", "format", value);
              signed = match[1] !== "u";
              width = parseInt(match[2]);
              decimals = parseInt(match[3]);
          }
      } else if (value) {
          // Extract the values from the object
          const v = value;
          const check = (key, type, defaultValue)=>{
              if (v[key] == null) return defaultValue;
              (0, _errorsJs.assertArgument)(typeof v[key] === type, "invalid fixed format (" + key + " not " + type + ")", "format." + key, v[key]);
              return v[key];
          };
          signed = check("signed", "boolean", signed);
          width = check("width", "number", width);
          decimals = check("decimals", "number", decimals);
      }
      (0, _errorsJs.assertArgument)(width % 8 === 0, "invalid FixedNumber width (not byte aligned)", "format.width", width);
      (0, _errorsJs.assertArgument)(decimals <= 80, "invalid FixedNumber decimals (too large)", "format.decimals", decimals);
      const name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
      return {
          signed,
          width,
          decimals,
          name
      };
  }
  function toString(val, decimals) {
      let negative = "";
      if (val < BN_0) {
          negative = "-";
          val *= BN_N1;
      }
      let str = val.toString();
      // No decimal point for whole values
      if (decimals === 0) return negative + str;
      // Pad out to the whole component (including a whole digit)
      while(str.length <= decimals)str = Zeros + str;
      // Insert the decimal point
      const index = str.length - decimals;
      str = str.substring(0, index) + "." + str.substring(index);
      // Trim the whole component (leaving at least one 0)
      while(str[0] === "0" && str[1] !== ".")str = str.substring(1);
      // Trim the decimal component (leaving at least one 0)
      while(str[str.length - 1] === "0" && str[str.length - 2] !== ".")str = str.substring(0, str.length - 1);
      return negative + str;
  }
  class FixedNumber {
      /**
       *  The specific fixed-point arithmetic field for this value.
       */ format;
      #format;
      // The actual value (accounting for decimals)
      #val;
      // A base-10 value to multiple values by to maintain the magnitude
      #tens;
      /**
       *  This is a property so console.log shows a human-meaningful value.
       *
       *  @private
       */ _value;
      // Use this when changing this file to get some typing info,
      // but then switch to any to mask the internal type
      //constructor(guard: any, value: bigint, format: _FixedFormat) {
      /**
       *  @private
       */ constructor(guard, value, format){
          (0, _errorsJs.assertPrivate)(guard, _guard, "FixedNumber");
          this.#val = value;
          this.#format = format;
          const _value = toString(value, format.decimals);
          (0, _propertiesJs.defineProperties)(this, {
              format: format.name,
              _value
          });
          this.#tens = getTens(format.decimals);
      }
      /**
       *  If true, negative values are permitted, otherwise only
       *  positive values and zero are allowed.
       */ get signed() {
          return this.#format.signed;
      }
      /**
       *  The number of bits available to store the value.
       */ get width() {
          return this.#format.width;
      }
      /**
       *  The number of decimal places in the fixed-point arithment field.
       */ get decimals() {
          return this.#format.decimals;
      }
      /**
       *  The value as an integer, based on the smallest unit the
       *  [[decimals]] allow.
       */ get value() {
          return this.#val;
      }
      #checkFormat(other) {
          (0, _errorsJs.assertArgument)(this.format === other.format, "incompatible format; use fixedNumber.toFormat", "other", other);
      }
      #checkValue(val, safeOp) {
          /*
                  const width = BigInt(this.width);
                  if (this.signed) {
                      const limit = (BN_1 << (width - BN_1));
                      assert(safeOp == null || (val >= -limit  && val < limit), "overflow", "NUMERIC_FAULT", {
                          operation: <string>safeOp, fault: "overflow", value: val
                      });
          
                      if (val > BN_0) {
                          val = fromTwos(mask(val, width), width);
                      } else {
                          val = -fromTwos(mask(-val, width), width);
                      }
          
                  } else {
                      const masked = mask(val, width);
                      assert(safeOp == null || (val >= 0 && val === masked), "overflow", "NUMERIC_FAULT", {
                          operation: <string>safeOp, fault: "overflow", value: val
                      });
                      val = masked;
                  }
          */ val = checkValue(val, this.#format, safeOp);
          return new FixedNumber(_guard, val, this.#format);
      }
      #add(o, safeOp1) {
          this.#checkFormat(o);
          return this.#checkValue(this.#val + o.#val, safeOp1);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% added
       *  to %%other%%, ignoring overflow.
       */ addUnsafe(other) {
          return this.#add(other);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% added
       *  to %%other%%. A [[NumericFaultError]] is thrown if overflow
       *  occurs.
       */ add(other) {
          return this.#add(other, "add");
      }
      #sub(o1, safeOp2) {
          this.#checkFormat(o1);
          return this.#checkValue(this.#val - o1.#val, safeOp2);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted
       *  from %%this%%, ignoring overflow.
       */ subUnsafe(other) {
          return this.#sub(other);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted
       *  from %%this%%. A [[NumericFaultError]] is thrown if overflow
       *  occurs.
       */ sub(other) {
          return this.#sub(other, "sub");
      }
      #mul(o2, safeOp3) {
          this.#checkFormat(o2);
          return this.#checkValue(this.#val * o2.#val / this.#tens, safeOp3);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
       *  by %%other%%, ignoring overflow and underflow (precision loss).
       */ mulUnsafe(other) {
          return this.#mul(other);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
       *  by %%other%%. A [[NumericFaultError]] is thrown if overflow
       *  occurs.
       */ mul(other) {
          return this.#mul(other, "mul");
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
       *  by %%other%%. A [[NumericFaultError]] is thrown if overflow
       *  occurs or if underflow (precision loss) occurs.
       */ mulSignal(other) {
          this.#checkFormat(other);
          const value = this.#val * other.#val;
          (0, _errorsJs.assert)(value % this.#tens === BN_0, "precision lost during signalling mul", "NUMERIC_FAULT", {
              operation: "mulSignal",
              fault: "underflow",
              value: this
          });
          return this.#checkValue(value / this.#tens, "mulSignal");
      }
      #div(o3, safeOp4) {
          (0, _errorsJs.assert)(o3.#val !== BN_0, "division by zero", "NUMERIC_FAULT", {
              operation: "div",
              fault: "divide-by-zero",
              value: this
          });
          this.#checkFormat(o3);
          return this.#checkValue(this.#val * this.#tens / o3.#val, safeOp4);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% divided
       *  by %%other%%, ignoring underflow (precision loss). A
       *  [[NumericFaultError]] is thrown if overflow occurs.
       */ divUnsafe(other) {
          return this.#div(other);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% divided
       *  by %%other%%, ignoring underflow (precision loss). A
       *  [[NumericFaultError]] is thrown if overflow occurs.
       */ div(other) {
          return this.#div(other, "div");
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% divided
       *  by %%other%%. A [[NumericFaultError]] is thrown if underflow
       *  (precision loss) occurs.
       */ divSignal(other) {
          (0, _errorsJs.assert)(other.#val !== BN_0, "division by zero", "NUMERIC_FAULT", {
              operation: "div",
              fault: "divide-by-zero",
              value: this
          });
          this.#checkFormat(other);
          const value = this.#val * this.#tens;
          (0, _errorsJs.assert)(value % other.#val === BN_0, "precision lost during signalling div", "NUMERIC_FAULT", {
              operation: "divSignal",
              fault: "underflow",
              value: this
          });
          return this.#checkValue(value / other.#val, "divSignal");
      }
      /**
       *  Returns a comparison result between %%this%% and %%other%%.
       *
       *  This is suitable for use in sorting, where ``-1`` implies %%this%%
       *  is smaller, ``1`` implies %%other%% is larger and ``0`` implies
       *  both are equal.
       */ cmp(other) {
          let a = this.value, b = other.value;
          // Coerce a and b to the same magnitude
          const delta = this.decimals - other.decimals;
          if (delta > 0) b *= getTens(delta);
          else if (delta < 0) a *= getTens(-delta);
          // Comnpare
          if (a < b) return -1;
          if (a > b) return -1;
          return 0;
      }
      /**
       *  Returns true if %%other%% is equal to %%this%%.
       */ eq(other) {
          return this.cmp(other) === 0;
      }
      /**
       *  Returns true if %%other%% is less than to %%this%%.
       */ lt(other) {
          return this.cmp(other) < 0;
      }
      /**
       *  Returns true if %%other%% is less than or equal to %%this%%.
       */ lte(other) {
          return this.cmp(other) <= 0;
      }
      /**
       *  Returns true if %%other%% is greater than to %%this%%.
       */ gt(other) {
          return this.cmp(other) > 0;
      }
      /**
       *  Returns true if %%other%% is greater than or equal to %%this%%.
       */ gte(other) {
          return this.cmp(other) >= 0;
      }
      /**
       *  Returns a new [[FixedNumber]] which is the largest **integer**
       *  that is less than or equal to %%this%%.
       *
       *  The decimal component of the result will always be ``0``.
       */ floor() {
          let val = this.#val;
          if (this.#val < BN_0) val -= this.#tens - BN_1;
          val = this.#val / this.#tens * this.#tens;
          return this.#checkValue(val, "floor");
      }
      /**
       *  Returns a new [[FixedNumber]] which is the smallest **integer**
       *  that is greater than or equal to %%this%%.
       *
       *  The decimal component of the result will always be ``0``.
       */ ceiling() {
          let val = this.#val;
          if (this.#val > BN_0) val += this.#tens - BN_1;
          val = this.#val / this.#tens * this.#tens;
          return this.#checkValue(val, "ceiling");
      }
      /**
       *  Returns a new [[FixedNumber]] with the decimal component
       *  rounded up on ties at %%decimals%% places.
       */ round(decimals) {
          if (decimals == null) decimals = 0;
          // Not enough precision to not already be rounded
          if (decimals >= this.decimals) return this;
          const delta = this.decimals - decimals;
          const bump = BN_5 * getTens(delta - 1);
          let value = this.value + bump;
          const tens = getTens(delta);
          value = value / tens * tens;
          checkValue(value, this.#format, "round");
          return new FixedNumber(_guard, value, this.#format);
      }
      /**
       *  Returns true if %%this%% is equal to ``0``.
       */ isZero() {
          return this.#val === BN_0;
      }
      /**
       *  Returns true if %%this%% is less than ``0``.
       */ isNegative() {
          return this.#val < BN_0;
      }
      /**
       *  Returns the string representation of %%this%%.
       */ toString() {
          return this._value;
      }
      /**
       *  Returns a float approximation.
       *
       *  Due to IEEE 754 precission (or lack thereof), this function
       *  can only return an approximation and most values will contain
       *  rounding errors.
       */ toUnsafeFloat() {
          return parseFloat(this.toString());
      }
      /**
       *  Return a new [[FixedNumber]] with the same value but has had
       *  its field set to %%format%%.
       *
       *  This will throw if the value cannot fit into %%format%%.
       */ toFormat(format) {
          return FixedNumber.fromString(this.toString(), format);
      }
      /**
       *  Creates a new [[FixedNumber]] for %%value%% divided by
       *  %%decimal%% places with %%format%%.
       *
       *  This will throw a [[NumericFaultError]] if %%value%% (once adjusted
       *  for %%decimals%%) cannot fit in %%format%%, either due to overflow
       *  or underflow (precision loss).
       */ static fromValue(_value, decimals, _format) {
          if (decimals == null) decimals = 0;
          const format = getFormat(_format);
          let value = (0, _mathsJs.getBigInt)(_value, "value");
          const delta = decimals - format.decimals;
          if (delta > 0) {
              const tens = getTens(delta);
              (0, _errorsJs.assert)(value % tens === BN_0, "value loses precision for format", "NUMERIC_FAULT", {
                  operation: "fromValue",
                  fault: "underflow",
                  value: _value
              });
              value /= tens;
          } else if (delta < 0) value *= getTens(-delta);
          checkValue(value, format, "fromValue");
          return new FixedNumber(_guard, value, format);
      }
      /**
       *  Creates a new [[FixedNumber]] for %%value%% with %%format%%.
       *
       *  This will throw a [[NumericFaultError]] if %%value%% cannot fit
       *  in %%format%%, either due to overflow or underflow (precision loss).
       */ static fromString(_value, _format) {
          const match = _value.match(/^(-?)([0-9]*)\.?([0-9]*)$/);
          (0, _errorsJs.assertArgument)(match && match[2].length + match[3].length > 0, "invalid FixedNumber string value", "value", _value);
          const format = getFormat(_format);
          let whole = match[2] || "0", decimal = match[3] || "";
          // Pad out the decimals
          while(decimal.length < format.decimals)decimal += Zeros;
          // Check precision is safe
          (0, _errorsJs.assert)(decimal.substring(format.decimals).match(/^0*$/), "too many decimals for format", "NUMERIC_FAULT", {
              operation: "fromString",
              fault: "underflow",
              value: _value
          });
          // Remove extra padding
          decimal = decimal.substring(0, format.decimals);
          const value = BigInt(match[1] + whole + decimal);
          checkValue(value, format, "fromString");
          return new FixedNumber(_guard, value, format);
      }
      /**
       *  Creates a new [[FixedNumber]] with the big-endian representation
       *  %%value%% with %%format%%.
       *
       *  This will throw a [[NumericFaultError]] if %%value%% cannot fit
       *  in %%format%% due to overflow.
       */ static fromBytes(_value, _format) {
          let value = (0, _mathsJs.toBigInt)((0, _dataJs.getBytes)(_value, "value"));
          const format = getFormat(_format);
          if (format.signed) value = (0, _mathsJs.fromTwos)(value, format.width);
          checkValue(value, format, "fromBytes");
          return new FixedNumber(_guard, value, format);
      }
  }
  
  },{"./data.js":"1m6OK","./errors.js":"fKiIl","./maths.js":"hMe74","./properties.js":"axai0","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"aFhko":[function(require,module,exports) {
  //See: https://github.com/ethereum/wiki/wiki/RLP
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Decodes %%data%% into the structured data it represents.
   */ parcelHelpers.export(exports, "decodeRlp", ()=>decodeRlp);
  var _dataJs = require("./data.js");
  var _errorsJs = require("./errors.js");
  function hexlifyByte(value) {
      let result = value.toString(16);
      while(result.length < 2)result = "0" + result;
      return "0x" + result;
  }
  function unarrayifyInteger(data, offset, length) {
      let result = 0;
      for(let i = 0; i < length; i++)result = result * 256 + data[offset + i];
      return result;
  }
  function _decodeChildren(data, offset, childOffset, length) {
      const result = [];
      while(childOffset < offset + 1 + length){
          const decoded = _decode(data, childOffset);
          result.push(decoded.result);
          childOffset += decoded.consumed;
          (0, _errorsJs.assert)(childOffset <= offset + 1 + length, "child data too short", "BUFFER_OVERRUN", {
              buffer: data,
              length,
              offset
          });
      }
      return {
          consumed: 1 + length,
          result: result
      };
  }
  // returns { consumed: number, result: Object }
  function _decode(data, offset) {
      (0, _errorsJs.assert)(data.length !== 0, "data too short", "BUFFER_OVERRUN", {
          buffer: data,
          length: 0,
          offset: 1
      });
      const checkOffset = (offset)=>{
          (0, _errorsJs.assert)(offset <= data.length, "data short segment too short", "BUFFER_OVERRUN", {
              buffer: data,
              length: data.length,
              offset
          });
      };
      // Array with extra length prefix
      if (data[offset] >= 0xf8) {
          const lengthLength = data[offset] - 0xf7;
          checkOffset(offset + 1 + lengthLength);
          const length = unarrayifyInteger(data, offset + 1, lengthLength);
          checkOffset(offset + 1 + lengthLength + length);
          return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
      } else if (data[offset] >= 0xc0) {
          const length = data[offset] - 0xc0;
          checkOffset(offset + 1 + length);
          return _decodeChildren(data, offset, offset + 1, length);
      } else if (data[offset] >= 0xb8) {
          const lengthLength = data[offset] - 0xb7;
          checkOffset(offset + 1 + lengthLength);
          const length = unarrayifyInteger(data, offset + 1, lengthLength);
          checkOffset(offset + 1 + lengthLength + length);
          const result = (0, _dataJs.hexlify)(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
          return {
              consumed: 1 + lengthLength + length,
              result: result
          };
      } else if (data[offset] >= 0x80) {
          const length = data[offset] - 0x80;
          checkOffset(offset + 1 + length);
          const result = (0, _dataJs.hexlify)(data.slice(offset + 1, offset + 1 + length));
          return {
              consumed: 1 + length,
              result: result
          };
      }
      return {
          consumed: 1,
          result: hexlifyByte(data[offset])
      };
  }
  function decodeRlp(_data) {
      const data = (0, _dataJs.getBytes)(_data, "data");
      const decoded = _decode(data, 0);
      (0, _errorsJs.assertArgument)(decoded.consumed === data.length, "unexpected junk after rlp payload", "data", _data);
      return decoded.result;
  }
  
  },{"./data.js":"1m6OK","./errors.js":"fKiIl","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"xaUwa":[function(require,module,exports) {
  //See: https://github.com/ethereum/wiki/wiki/RLP
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Encodes %%object%% as an RLP-encoded [[DataHexString]].
   */ parcelHelpers.export(exports, "encodeRlp", ()=>encodeRlp);
  var _dataJs = require("./data.js");
  function arrayifyInteger(value) {
      const result = [];
      while(value){
          result.unshift(value & 0xff);
          value >>= 8;
      }
      return result;
  }
  function _encode(object) {
      if (Array.isArray(object)) {
          let payload = [];
          object.forEach(function(child) {
              payload = payload.concat(_encode(child));
          });
          if (payload.length <= 55) {
              payload.unshift(0xc0 + payload.length);
              return payload;
          }
          const length = arrayifyInteger(payload.length);
          length.unshift(0xf7 + length.length);
          return length.concat(payload);
      }
      const data = Array.prototype.slice.call((0, _dataJs.getBytes)(object, "object"));
      if (data.length === 1 && data[0] <= 0x7f) return data;
      else if (data.length <= 55) {
          data.unshift(0x80 + data.length);
          return data;
      }
      const length = arrayifyInteger(data.length);
      length.unshift(0xb7 + length.length);
      return length.concat(data);
  }
  const nibbles = "0123456789abcdef";
  function encodeRlp(object) {
      let result = "0x";
      for (const v of _encode(object)){
          result += nibbles[v >> 4];
          result += nibbles[v & 0xf];
      }
      return result;
  }
  
  },{"./data.js":"1m6OK","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"VhiTO":[function(require,module,exports) {
  /**
   *  Most interactions with Ethereum requires integer values, which use
   *  the smallest magnitude unit.
   *
   *  For example, imagine dealing with dollars and cents. Since dollars
   *  are divisible, non-integer values are possible, such as ``$10.77``.
   *  By using the smallest indivisible unit (i.e. cents), the value can
   *  be kept as the integer ``1077``.
   *
   *  When receiving decimal input from the user (as a decimal string),
   *  the value should be converted to an integer and when showing a user
   *  a value, the integer value should be converted to a decimal string.
   *
   *  This creates a clear distinction, between values to be used by code
   *  (integers) and values used for display logic to users (decimals).
   *
   *  The native unit in Ethereum, //ether// is divisible to 18 decimal places,
   *  where each individual unit is called a //wei//.
   *
   *  @_subsection api/utils:Unit Conversion  [about-units]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Converts %%value%% into a //decimal string//, assuming %%unit%% decimal
   *  places. The %%unit%% may be the number of decimal places or the name of
   *  a unit (e.g. ``"gwei"`` for 9 decimal places).
   *
   */ parcelHelpers.export(exports, "formatUnits", ()=>formatUnits);
  /**
   *  Converts the //decimal string// %%value%% to a BigInt, assuming
   *  %%unit%% decimal places. The %%unit%% may the number of decimal places
   *  or the name of a unit (e.g. ``"gwei"`` for 9 decimal places).
   */ parcelHelpers.export(exports, "parseUnits", ()=>parseUnits);
  /**
   *  Converts %%value%% into a //decimal string// using 18 decimal places.
   */ parcelHelpers.export(exports, "formatEther", ()=>formatEther);
  /**
   *  Converts the //decimal string// %%ether%% to a BigInt, using 18
   *  decimal places.
   */ parcelHelpers.export(exports, "parseEther", ()=>parseEther);
  var _errorsJs = require("./errors.js");
  var _fixednumberJs = require("./fixednumber.js");
  var _mathsJs = require("./maths.js");
  const names = [
      "wei",
      "kwei",
      "mwei",
      "gwei",
      "szabo",
      "finney",
      "ether"
  ];
  function formatUnits(value, unit) {
      let decimals = 18;
      if (typeof unit === "string") {
          const index = names.indexOf(unit);
          (0, _errorsJs.assertArgument)(index >= 0, "invalid unit", "unit", unit);
          decimals = 3 * index;
      } else if (unit != null) decimals = (0, _mathsJs.getNumber)(unit, "unit");
      return (0, _fixednumberJs.FixedNumber).fromValue(value, decimals, {
          decimals
      }).toString();
  }
  function parseUnits(value, unit) {
      (0, _errorsJs.assertArgument)(typeof value === "string", "value must be a string", "value", value);
      let decimals = 18;
      if (typeof unit === "string") {
          const index = names.indexOf(unit);
          (0, _errorsJs.assertArgument)(index >= 0, "invalid unit", "unit", unit);
          decimals = 3 * index;
      } else if (unit != null) decimals = (0, _mathsJs.getNumber)(unit, "unit");
      return (0, _fixednumberJs.FixedNumber).fromString(value, {
          decimals
      }).value;
  }
  function formatEther(wei) {
      return formatUnits(wei, 18);
  }
  function parseEther(ether) {
      return parseUnits(ether, 18);
  }
  
  },{"./errors.js":"fKiIl","./fixednumber.js":"bb854","./maths.js":"hMe74","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"fV8jd":[function(require,module,exports) {
  /**
   *  Explain UUID and link to RFC here.
   *
   *  @_subsection: api/utils:UUID  [about-uuid]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Returns the version 4 [[link-uuid]] for the %%randomBytes%%.
   *
   *  @see: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)
   */ parcelHelpers.export(exports, "uuidV4", ()=>uuidV4);
  var _dataJs = require("./data.js");
  function uuidV4(randomBytes) {
      const bytes = (0, _dataJs.getBytes)(randomBytes, "randomBytes");
      // Section: 4.1.3:
      // - time_hi_and_version[12:16] = 0b0100
      bytes[6] = bytes[6] & 0x0f | 0x40;
      // Section 4.4
      // - clock_seq_hi_and_reserved[6] = 0b0
      // - clock_seq_hi_and_reserved[7] = 0b1
      bytes[8] = bytes[8] & 0x3f | 0x80;
      const value = (0, _dataJs.hexlify)(bytes);
      return [
          value.substring(2, 10),
          value.substring(10, 14),
          value.substring(14, 18),
          value.substring(18, 22),
          value.substring(22, 34)
      ].join("-");
  }
  
  },{"./data.js":"1m6OK","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"7wibj":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "WordSize", ()=>WordSize);
  /**
   *  A [[Result]] is a sub-class of Array, which allows accessing any
   *  of its values either positionally by its index or, if keys are
   *  provided by its name.
   *
   *  @_docloc: api/abi
   */ parcelHelpers.export(exports, "Result", ()=>Result);
  /**
   *  Returns all errors found in a [[Result]].
   *
   *  Since certain errors encountered when creating a [[Result]] do
   *  not impact the ability to continue parsing data, they are
   *  deferred until they are actually accessed. Hence a faulty string
   *  in an Event that is never used does not impact the program flow.
   *
   *  However, sometimes it may be useful to access, identify or
   *  validate correctness of a [[Result]].
   *
   *  @_docloc api/abi
   */ parcelHelpers.export(exports, "checkResultErrors", ()=>checkResultErrors);
  /**
   *  @_ignore
   */ parcelHelpers.export(exports, "Coder", ()=>Coder);
  /**
   *  @_ignore
   */ parcelHelpers.export(exports, "Writer", ()=>Writer);
  /**
   *  @_ignore
   */ parcelHelpers.export(exports, "Reader", ()=>Reader);
  var _indexJs = require("../../utils/index.js");
  const WordSize = 32;
  const Padding = new Uint8Array(WordSize);
  // Properties used to immediate pass through to the underlying object
  // - `then` is used to detect if an object is a Promise for await
  const passProperties = [
      "then"
  ];
  const _guard = {};
  function throwError(name, error) {
      const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);
      wrapped.error = error;
      throw wrapped;
  }
  class Result extends Array {
      #names;
      /**
       *  @private
       */ constructor(...args){
          // To properly sub-class Array so the other built-in
          // functions work, the constructor has to behave fairly
          // well. So, in the event we are created via fromItems()
          // we build the read-only Result object we want, but on
          // any other input, we use the default constructor
          // constructor(guard: any, items: Array<any>, keys?: Array<null | string>);
          const guard = args[0];
          let items = args[1];
          let names = (args[2] || []).slice();
          let wrap = true;
          if (guard !== _guard) {
              items = args;
              names = [];
              wrap = false;
          }
          // Can't just pass in ...items since an array of length 1
          // is a special case in the super.
          super(items.length);
          items.forEach((item, index)=>{
              this[index] = item;
          });
          // Find all unique keys
          const nameCounts = names.reduce((accum, name)=>{
              if (typeof name === "string") accum.set(name, (accum.get(name) || 0) + 1);
              return accum;
          }, new Map());
          // Remove any key thats not unique
          this.#names = Object.freeze(items.map((item, index)=>{
              const name = names[index];
              if (name != null && nameCounts.get(name) === 1) return name;
              return null;
          }));
          if (!wrap) return;
          // A wrapped Result is immutable
          Object.freeze(this);
          // Proxy indices and names so we can trap deferred errors
          return new Proxy(this, {
              get: (target, prop, receiver)=>{
                  if (typeof prop === "string") {
                      // Index accessor
                      if (prop.match(/^[0-9]+$/)) {
                          const index = (0, _indexJs.getNumber)(prop, "%index");
                          if (index < 0 || index >= this.length) throw new RangeError("out of result range");
                          const item = target[index];
                          if (item instanceof Error) throwError(`index ${index}`, item);
                          return item;
                      }
                      // Pass important checks (like `then` for Promise) through
                      if (passProperties.indexOf(prop) >= 0) return Reflect.get(target, prop, receiver);
                      const value = target[prop];
                      if (value instanceof Function) // Make sure functions work with private variables
                      // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#no_private_property_forwarding
                      return function(...args) {
                          return value.apply(this === receiver ? target : this, args);
                      };
                      else if (!(prop in target)) // Possible name accessor
                      return target.getValue.apply(this === receiver ? target : this, [
                          prop
                      ]);
                  }
                  return Reflect.get(target, prop, receiver);
              }
          });
      }
      /**
       *  Returns the Result as a normal Array.
       *
       *  This will throw if there are any outstanding deferred
       *  errors.
       */ toArray() {
          const result = [];
          this.forEach((item, index)=>{
              if (item instanceof Error) throwError(`index ${index}`, item);
              result.push(item);
          });
          return result;
      }
      /**
       *  Returns the Result as an Object with each name-value pair.
       *
       *  This will throw if any value is unnamed, or if there are
       *  any outstanding deferred errors.
       */ toObject() {
          return this.#names.reduce((accum, name, index)=>{
              (0, _indexJs.assert)(name != null, "value at index ${ index } unnamed", "UNSUPPORTED_OPERATION", {
                  operation: "toObject()"
              });
              // Add values for names that don't conflict
              if (!(name in accum)) accum[name] = this.getValue(name);
              return accum;
          }, {});
      }
      /**
       *  @_ignore
       */ slice(start, end) {
          if (start == null) start = 0;
          if (start < 0) {
              start += this.length;
              if (start < 0) start = 0;
          }
          if (end == null) end = this.length;
          if (end < 0) {
              end += this.length;
              if (end < 0) end = 0;
          }
          if (end > this.length) end = this.length;
          const result = [], names = [];
          for(let i = start; i < end; i++){
              result.push(this[i]);
              names.push(this.#names[i]);
          }
          return new Result(_guard, result, names);
      }
      /**
       *  @_ignore
       */ filter(callback, thisArg) {
          const result = [], names = [];
          for(let i = 0; i < this.length; i++){
              const item = this[i];
              if (item instanceof Error) throwError(`index ${i}`, item);
              if (callback.call(thisArg, item, i, this)) {
                  result.push(item);
                  names.push(this.#names[i]);
              }
          }
          return new Result(_guard, result, names);
      }
      /**
       *  Returns the value for %%name%%.
       *
       *  Since it is possible to have a key whose name conflicts with
       *  a method on a [[Result]] or its superclass Array, or any
       *  JavaScript keyword, this ensures all named values are still
       *  accessible by name.
       */ getValue(name) {
          const index = this.#names.indexOf(name);
          if (index === -1) return undefined;
          const value = this[index];
          if (value instanceof Error) throwError(`property ${JSON.stringify(name)}`, value.error);
          return value;
      }
      /**
       *  Creates a new [[Result]] for %%items%% with each entry
       *  also accessible by its corresponding name in %%keys%%.
       */ static fromItems(items, keys) {
          return new Result(_guard, items, keys);
      }
  }
  function checkResultErrors(result) {
      // Find the first error (if any)
      const errors = [];
      const checkErrors = function(path, object) {
          if (!Array.isArray(object)) return;
          for(let key in object){
              const childPath = path.slice();
              childPath.push(key);
              try {
                  checkErrors(childPath, object[key]);
              } catch (error) {
                  errors.push({
                      path: childPath,
                      error: error
                  });
              }
          }
      };
      checkErrors([], result);
      return errors;
  }
  function getValue(value) {
      let bytes = (0, _indexJs.toBeArray)(value);
      (0, _indexJs.assert)(bytes.length <= WordSize, "value out-of-bounds", "BUFFER_OVERRUN", {
          buffer: bytes,
          length: WordSize,
          offset: bytes.length
      });
      if (bytes.length !== WordSize) bytes = (0, _indexJs.getBytesCopy)((0, _indexJs.concat)([
          Padding.slice(bytes.length % WordSize),
          bytes
      ]));
      return bytes;
  }
  class Coder {
      // The coder name:
      //   - address, uint256, tuple, array, etc.
      name;
      // The fully expanded type, including composite types:
      //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.
      type;
      // The localName bound in the signature, in this example it is "baz":
      //   - tuple(address foo, uint bar) baz
      localName;
      // Whether this type is dynamic:
      //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.
      //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)
      dynamic;
      constructor(name, type, localName, dynamic){
          (0, _indexJs.defineProperties)(this, {
              name,
              type,
              localName,
              dynamic
          }, {
              name: "string",
              type: "string",
              localName: "string",
              dynamic: "boolean"
          });
      }
      _throwError(message, value) {
          (0, _indexJs.assertArgument)(false, message, this.localName, value);
      }
  }
  class Writer {
      // An array of WordSize lengthed objects to concatenation
      #data;
      #dataLength;
      constructor(){
          this.#data = [];
          this.#dataLength = 0;
      }
      get data() {
          return (0, _indexJs.concat)(this.#data);
      }
      get length() {
          return this.#dataLength;
      }
      #writeData(data) {
          this.#data.push(data);
          this.#dataLength += data.length;
          return data.length;
      }
      appendWriter(writer) {
          return this.#writeData((0, _indexJs.getBytesCopy)(writer.data));
      }
      // Arrayish item; pad on the right to *nearest* WordSize
      writeBytes(value) {
          let bytes = (0, _indexJs.getBytesCopy)(value);
          const paddingOffset = bytes.length % WordSize;
          if (paddingOffset) bytes = (0, _indexJs.getBytesCopy)((0, _indexJs.concat)([
              bytes,
              Padding.slice(paddingOffset)
          ]));
          return this.#writeData(bytes);
      }
      // Numeric item; pad on the left *to* WordSize
      writeValue(value) {
          return this.#writeData(getValue(value));
      }
      // Inserts a numeric place-holder, returning a callback that can
      // be used to asjust the value later
      writeUpdatableValue() {
          const offset = this.#data.length;
          this.#data.push(Padding);
          this.#dataLength += WordSize;
          return (value)=>{
              this.#data[offset] = getValue(value);
          };
      }
  }
  class Reader {
      // Allows incomplete unpadded data to be read; otherwise an error
      // is raised if attempting to overrun the buffer. This is required
      // to deal with an old Solidity bug, in which event data for
      // external (not public thoguh) was tightly packed.
      allowLoose;
      #data;
      #offset;
      constructor(data, allowLoose){
          (0, _indexJs.defineProperties)(this, {
              allowLoose: !!allowLoose
          });
          this.#data = (0, _indexJs.getBytesCopy)(data);
          this.#offset = 0;
      }
      get data() {
          return (0, _indexJs.hexlify)(this.#data);
      }
      get dataLength() {
          return this.#data.length;
      }
      get consumed() {
          return this.#offset;
      }
      get bytes() {
          return new Uint8Array(this.#data);
      }
      #peekBytes(offset, length, loose) {
          let alignedLength = Math.ceil(length / WordSize) * WordSize;
          if (this.#offset + alignedLength > this.#data.length) {
              if (this.allowLoose && loose && this.#offset + length <= this.#data.length) alignedLength = length;
              else (0, _indexJs.assert)(false, "data out-of-bounds", "BUFFER_OVERRUN", {
                  buffer: (0, _indexJs.getBytesCopy)(this.#data),
                  length: this.#data.length,
                  offset: this.#offset + alignedLength
              });
          }
          return this.#data.slice(this.#offset, this.#offset + alignedLength);
      }
      // Create a sub-reader with the same underlying data, but offset
      subReader(offset) {
          return new Reader(this.#data.slice(this.#offset + offset), this.allowLoose);
      }
      // Read bytes
      readBytes(length, loose) {
          let bytes = this.#peekBytes(0, length, !!loose);
          this.#offset += bytes.length;
          // @TODO: Make sure the length..end bytes are all 0?
          return bytes.slice(0, length);
      }
      // Read a numeric values
      readValue() {
          return (0, _indexJs.toBigInt)(this.readBytes(WordSize));
      }
      readIndex() {
          return (0, _indexJs.toNumber)(this.readBytes(WordSize));
      }
  }
  
  },{"../../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"10blX":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  @_ignore
   */ parcelHelpers.export(exports, "AddressCoder", ()=>AddressCoder);
  var _indexJs = require("../../address/index.js");
  var _mathsJs = require("../../utils/maths.js");
  var _typedJs = require("../typed.js");
  var _abstractCoderJs = require("./abstract-coder.js");
  class AddressCoder extends (0, _abstractCoderJs.Coder) {
      constructor(localName){
          super("address", "address", localName, false);
      }
      defaultValue() {
          return "0x0000000000000000000000000000000000000000";
      }
      encode(writer, _value) {
          let value = (0, _typedJs.Typed).dereference(_value, "string");
          try {
              value = (0, _indexJs.getAddress)(value);
          } catch (error) {
              return this._throwError(error.message, _value);
          }
          return writer.writeValue(value);
      }
      decode(reader) {
          return (0, _indexJs.getAddress)((0, _mathsJs.toBeHex)(reader.readValue(), 20));
      }
  }
  
  },{"../../address/index.js":"cuJ87","../../utils/maths.js":"hMe74","../typed.js":"6W7uu","./abstract-coder.js":"7wibj","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"cuJ87":[function(require,module,exports) {
  /**
   *  Addresses are a fundamental part of interacting with Ethereum. They
   *  represent the gloabal identity of Externally Owned Accounts (accounts
   *  backed by a private key) and contracts.
   *
   *  The Ethereum Naming Service (ENS) provides an interconnected ecosystem
   *  of contracts, standards and libraries which enable looking up an
   *  address for an ENS name.
   *
   *  These functions help convert between various formats, validate
   *  addresses and safely resolve ENS names.
   *
   *  @_section: api/address:Addresses  [about-addresses]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "getAddress", ()=>(0, _addressJs.getAddress));
  parcelHelpers.export(exports, "getIcapAddress", ()=>(0, _addressJs.getIcapAddress));
  parcelHelpers.export(exports, "getCreateAddress", ()=>(0, _contractAddressJs.getCreateAddress));
  parcelHelpers.export(exports, "getCreate2Address", ()=>(0, _contractAddressJs.getCreate2Address));
  parcelHelpers.export(exports, "isAddressable", ()=>(0, _checksJs.isAddressable));
  parcelHelpers.export(exports, "isAddress", ()=>(0, _checksJs.isAddress));
  parcelHelpers.export(exports, "resolveAddress", ()=>(0, _checksJs.resolveAddress));
  var _addressJs = require("./address.js");
  var _contractAddressJs = require("./contract-address.js");
  var _checksJs = require("./checks.js");
  
  },{"./address.js":"6vLVl","./contract-address.js":"d0FMG","./checks.js":"k8tPM","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"6vLVl":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Returns a normalized and checksumed address for %%address%%.
   *  This accepts non-checksum addresses, checksum addresses and
   *  [[getIcapAddress]] formats.
   *
   *  The checksum in Ethereum uses the capitalization (upper-case
   *  vs lower-case) of the characters within an address to encode
   *  its checksum, which offers, on average, a checksum of 15-bits.
   *
   *  If %%address%% contains both upper-case and lower-case, it is
   *  assumed to already be a checksum address and its checksum is
   *  validated, and if the address fails its expected checksum an
   *  error is thrown.
   *
   *  If you wish the checksum of %%address%% to be ignore, it should
   *  be converted to lower-case (i.e. ``.toLowercase()``) before
   *  being passed in. This should be a very rare situation though,
   *  that you wish to bypass the safegaurds in place to protect
   *  against an address that has been incorrectly copied from another
   *  source.
   *
   *  @example:
   *    // Adds the checksum (via upper-casing specific letters)
   *    getAddress("0x8ba1f109551bd432803012645ac136ddd64dba72")
   *    //_result:
   *
   *    // Converts ICAP address and adds checksum
   *    getAddress("XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36");
   *    //_result:
   *
   *    // Throws an error if an address contains mixed case,
   *    // but the checksum fails
   *    getAddress("0x8Ba1f109551bD432803012645Ac136ddd64DBA72")
   *    //_error:
   */ parcelHelpers.export(exports, "getAddress", ()=>getAddress);
  /**
   *  The [ICAP Address format](link-icap) format is an early checksum
   *  format which attempts to be compatible with the banking
   *  industry [IBAN format](link-wiki-iban) for bank accounts.
   *
   *  It is no longer common or a recommended format.
   *
   *  @example:
   *    getIcapAddress("0x8ba1f109551bd432803012645ac136ddd64dba72");
   *    //_result:
   *
   *    getIcapAddress("XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36");
   *    //_result:
   *
   *    // Throws an error if the ICAP checksum is wrong
   *    getIcapAddress("XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK37");
   *    //_error:
   */ parcelHelpers.export(exports, "getIcapAddress", ()=>getIcapAddress);
  var _indexJs = require("../crypto/index.js");
  var _indexJs1 = require("../utils/index.js");
  const BN_0 = BigInt(0);
  const BN_36 = BigInt(36);
  function getChecksumAddress(address) {
      //    if (!isHexString(address, 20)) {
      //        logger.throwArgumentError("invalid address", "address", address);
      //    }
      address = address.toLowerCase();
      const chars = address.substring(2).split("");
      const expanded = new Uint8Array(40);
      for(let i = 0; i < 40; i++)expanded[i] = chars[i].charCodeAt(0);
      const hashed = (0, _indexJs1.getBytes)((0, _indexJs.keccak256)(expanded));
      for(let i = 0; i < 40; i += 2){
          if (hashed[i >> 1] >> 4 >= 8) chars[i] = chars[i].toUpperCase();
          if ((hashed[i >> 1] & 0x0f) >= 8) chars[i + 1] = chars[i + 1].toUpperCase();
      }
      return "0x" + chars.join("");
  }
  // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
  // Create lookup table
  const ibanLookup = {};
  for(let i = 0; i < 10; i++)ibanLookup[String(i)] = String(i);
  for(let i = 0; i < 26; i++)ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
  // How many decimal digits can we process? (for 64-bit float, this is 15)
  // i.e. Math.floor(Math.log10(Number.MAX_SAFE_INTEGER));
  const safeDigits = 15;
  function ibanChecksum(address) {
      address = address.toUpperCase();
      address = address.substring(4) + address.substring(0, 2) + "00";
      let expanded = address.split("").map((c)=>{
          return ibanLookup[c];
      }).join("");
      // Javascript can handle integers safely up to 15 (decimal) digits
      while(expanded.length >= safeDigits){
          let block = expanded.substring(0, safeDigits);
          expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
      }
      let checksum = String(98 - parseInt(expanded, 10) % 97);
      while(checksum.length < 2)checksum = "0" + checksum;
      return checksum;
  }
  const Base36 = function() {
      const result = {};
      for(let i = 0; i < 36; i++){
          const key = "0123456789abcdefghijklmnopqrstuvwxyz"[i];
          result[key] = BigInt(i);
      }
      return result;
  }();
  function fromBase36(value) {
      value = value.toLowerCase();
      let result = BN_0;
      for(let i = 0; i < value.length; i++)result = result * BN_36 + Base36[value[i]];
      return result;
  }
  function getAddress(address) {
      (0, _indexJs1.assertArgument)(typeof address === "string", "invalid address", "address", address);
      if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
          // Missing the 0x prefix
          if (!address.startsWith("0x")) address = "0x" + address;
          const result = getChecksumAddress(address);
          // It is a checksummed address with a bad checksum
          (0, _indexJs1.assertArgument)(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, "bad address checksum", "address", address);
          return result;
      }
      // Maybe ICAP? (we only support direct mode)
      if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
          // It is an ICAP address with a bad checksum
          (0, _indexJs1.assertArgument)(address.substring(2, 4) === ibanChecksum(address), "bad icap checksum", "address", address);
          let result = fromBase36(address.substring(4)).toString(16);
          while(result.length < 40)result = "0" + result;
          return getChecksumAddress("0x" + result);
      }
      (0, _indexJs1.assertArgument)(false, "invalid address", "address", address);
  }
  function getIcapAddress(address) {
      //let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();
      let base36 = BigInt(getAddress(address)).toString(36).toUpperCase();
      while(base36.length < 30)base36 = "0" + base36;
      return "XE" + ibanChecksum("XE00" + base36) + base36;
  }
  
  },{"../crypto/index.js":"4oi1q","../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"4oi1q":[function(require,module,exports) {
  /**
   *  A fundamental building block of Ethereum is the underlying
   *  cryptographic primitives.
   *
   *  @_section: api/crypto:Cryptographic Functions   [about-crypto]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "SigningKey", ()=>(0, _signingKeyJs.SigningKey));
  parcelHelpers.export(exports, "Signature", ()=>(0, _signatureJs.Signature));
  parcelHelpers.export(exports, "computeHmac", ()=>(0, _hmacJs.computeHmac));
  parcelHelpers.export(exports, "randomBytes", ()=>(0, _randomJs.randomBytes));
  parcelHelpers.export(exports, "keccak256", ()=>(0, _keccakJs.keccak256));
  parcelHelpers.export(exports, "ripemd160", ()=>(0, _ripemd160Js.ripemd160));
  parcelHelpers.export(exports, "sha256", ()=>(0, _sha2Js.sha256));
  parcelHelpers.export(exports, "sha512", ()=>(0, _sha2Js.sha512));
  parcelHelpers.export(exports, "pbkdf2", ()=>(0, _pbkdf2Js.pbkdf2));
  parcelHelpers.export(exports, "scrypt", ()=>(0, _scryptJs.scrypt));
  parcelHelpers.export(exports, "scryptSync", ()=>(0, _scryptJs.scryptSync));
  parcelHelpers.export(exports, "lock", ()=>lock);
  // We import all these so we can export lock()
  var _hmacJs = require("./hmac.js");
  var _keccakJs = require("./keccak.js");
  var _ripemd160Js = require("./ripemd160.js");
  var _pbkdf2Js = require("./pbkdf2.js");
  var _randomJs = require("./random.js");
  var _scryptJs = require("./scrypt.js");
  var _sha2Js = require("./sha2.js");
  var _signingKeyJs = require("./signing-key.js");
  var _signatureJs = require("./signature.js");
  function lock() {
      (0, _hmacJs.computeHmac).lock();
      (0, _keccakJs.keccak256).lock();
      (0, _pbkdf2Js.pbkdf2).lock();
      (0, _randomJs.randomBytes).lock();
      (0, _ripemd160Js.ripemd160).lock();
      (0, _scryptJs.scrypt).lock();
      (0, _scryptJs.scryptSync).lock();
      (0, _sha2Js.sha256).lock();
      (0, _sha2Js.sha512).lock();
      (0, _randomJs.randomBytes).lock();
  }
  
  },{"./hmac.js":"cADRs","./keccak.js":"dP6LI","./ripemd160.js":"6LPAD","./pbkdf2.js":"e3GwR","./random.js":"gAm8d","./scrypt.js":"7IHXp","./sha2.js":"3xX9x","./signing-key.js":"3eoRn","./signature.js":"dd3XO","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"cADRs":[function(require,module,exports) {
  /**
   *  An **HMAC** enables verification that a given key was used
   *  to authenticate a payload.
   *
   *  See: [[link-wiki-hmac]]
   *
   *  @_subsection: api/crypto:HMAC  [about-hmac]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Return the HMAC for %%data%% using the %%key%% key with the underlying
   *  %%algo%% used for compression.
   *
   *  @example:
   *    key = id("some-secret")
   *
   *    // Compute the HMAC
   *    computeHmac("sha256", key, "0x1337")
   *    //_result:
   *
   *    // To compute the HMAC of UTF-8 data, the data must be
   *    // converted to UTF-8 bytes
   *    computeHmac("sha256", key, toUtf8Bytes("Hello World"))
   *    //_result:
   *
   */ parcelHelpers.export(exports, "computeHmac", ()=>computeHmac);
  var _cryptoJs = require("./crypto.js");
  var _indexJs = require("../utils/index.js");
  let locked = false;
  const _computeHmac = function(algorithm, key, data) {
      return (0, _cryptoJs.createHmac)(algorithm, key).update(data).digest();
  };
  let __computeHmac = _computeHmac;
  function computeHmac(algorithm, _key, _data) {
      const key = (0, _indexJs.getBytes)(_key, "key");
      const data = (0, _indexJs.getBytes)(_data, "data");
      return (0, _indexJs.hexlify)(__computeHmac(algorithm, key, data));
  }
  computeHmac._ = _computeHmac;
  computeHmac.lock = function() {
      locked = true;
  };
  computeHmac.register = function(func) {
      if (locked) throw new Error("computeHmac is locked");
      __computeHmac = func;
  };
  Object.freeze(computeHmac);
  
  },{"./crypto.js":"baApz","../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"baApz":[function(require,module,exports) {
  /* Browser Crypto Shims */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "createHash", ()=>createHash);
  parcelHelpers.export(exports, "createHmac", ()=>createHmac);
  parcelHelpers.export(exports, "pbkdf2Sync", ()=>pbkdf2Sync);
  parcelHelpers.export(exports, "randomBytes", ()=>randomBytes);
  var _hmac = require("@noble/hashes/hmac");
  var _pbkdf2 = require("@noble/hashes/pbkdf2");
  var _sha256 = require("@noble/hashes/sha256");
  var _sha512 = require("@noble/hashes/sha512");
  var _indexJs = require("../utils/index.js");
  var global = arguments[3];
  function getGlobal() {
      if (typeof self !== "undefined") return self;
      if (typeof window !== "undefined") return window;
      if (typeof global !== "undefined") return global;
      throw new Error("unable to locate global object");
  }
  const anyGlobal = getGlobal();
  const crypto = anyGlobal.crypto || anyGlobal.msCrypto;
  function createHash(algo) {
      switch(algo){
          case "sha256":
              return (0, _sha256.sha256).create();
          case "sha512":
              return (0, _sha512.sha512).create();
      }
      (0, _indexJs.assertArgument)(false, "invalid hashing algorithm name", "algorithm", algo);
  }
  function createHmac(_algo, key) {
      const algo = {
          sha256: (0, _sha256.sha256),
          sha512: (0, _sha512.sha512)
      }[_algo];
      (0, _indexJs.assertArgument)(algo != null, "invalid hmac algorithm", "algorithm", _algo);
      return (0, _hmac.hmac).create(algo, key);
  }
  function pbkdf2Sync(password, salt, iterations, keylen, _algo) {
      const algo = {
          sha256: (0, _sha256.sha256),
          sha512: (0, _sha512.sha512)
      }[_algo];
      (0, _indexJs.assertArgument)(algo != null, "invalid pbkdf2 algorithm", "algorithm", _algo);
      return (0, _pbkdf2.pbkdf2)(algo, password, salt, {
          c: iterations,
          dkLen: keylen
      });
  }
  function randomBytes(length) {
      (0, _indexJs.assert)(crypto != null, "platform does not support secure random numbers", "UNSUPPORTED_OPERATION", {
          operation: "randomBytes"
      });
      (0, _indexJs.assertArgument)(Number.isInteger(length) && length > 0 && length <= 1024, "invalid length", "length", length);
      const result = new Uint8Array(length);
      crypto.getRandomValues(result);
      return result;
  }
  
  },{"@noble/hashes/hmac":"3IfCc","@noble/hashes/pbkdf2":"c4hz5","@noble/hashes/sha256":"JjjO8","@noble/hashes/sha512":"jlH7E","../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"3IfCc":[function(require,module,exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.hmac = void 0;
  const _assert_js_1 = require("c2f49f6a3d3edf22");
  const utils_js_1 = require("90a60373d2f9a5f6");
  // HMAC (RFC 2104)
  class HMAC extends utils_js_1.Hash {
      constructor(hash, _key){
          super();
          this.finished = false;
          this.destroyed = false;
          _assert_js_1.default.hash(hash);
          const key = (0, utils_js_1.toBytes)(_key);
          this.iHash = hash.create();
          if (!(this.iHash instanceof utils_js_1.Hash)) throw new TypeError("Expected instance of class which extends utils.Hash");
          const blockLen = this.blockLen = this.iHash.blockLen;
          this.outputLen = this.iHash.outputLen;
          const pad = new Uint8Array(blockLen);
          // blockLen can be bigger than outputLen
          pad.set(key.length > this.iHash.blockLen ? hash.create().update(key).digest() : key);
          for(let i = 0; i < pad.length; i++)pad[i] ^= 0x36;
          this.iHash.update(pad);
          // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
          this.oHash = hash.create();
          // Undo internal XOR && apply outer XOR
          for(let i = 0; i < pad.length; i++)pad[i] ^= 106;
          this.oHash.update(pad);
          pad.fill(0);
      }
      update(buf) {
          _assert_js_1.default.exists(this);
          this.iHash.update(buf);
          return this;
      }
      digestInto(out) {
          _assert_js_1.default.exists(this);
          _assert_js_1.default.bytes(out, this.outputLen);
          this.finished = true;
          this.iHash.digestInto(out);
          this.oHash.update(out);
          this.oHash.digestInto(out);
          this.destroy();
      }
      digest() {
          const out = new Uint8Array(this.oHash.outputLen);
          this.digestInto(out);
          return out;
      }
      _cloneInto(to) {
          // Create new instance without calling constructor since key already in state and we don't know it.
          to || (to = Object.create(Object.getPrototypeOf(this), {}));
          const { oHash , iHash , finished , destroyed , blockLen , outputLen  } = this;
          to;
          to.finished = finished;
          to.destroyed = destroyed;
          to.blockLen = blockLen;
          to.outputLen = outputLen;
          to.oHash = oHash._cloneInto(to.oHash);
          to.iHash = iHash._cloneInto(to.iHash);
          return to;
      }
      destroy() {
          this.destroyed = true;
          this.oHash.destroy();
          this.iHash.destroy();
      }
  }
  /**
   * HMAC: RFC2104 message authentication code.
   * @param hash - function that would be used e.g. sha256
   * @param key - message key
   * @param message - message data
   */ const hmac = (hash, key, message)=>new HMAC(hash, key).update(message).digest();
  exports.hmac = hmac;
  exports.hmac.create = (hash, key)=>new HMAC(hash, key);
  
  },{"c2f49f6a3d3edf22":"BFdql","90a60373d2f9a5f6":"2ehgp"}],"BFdql":[function(require,module,exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;
  function number(n) {
      if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);
  }
  exports.number = number;
  function bool(b) {
      if (typeof b !== "boolean") throw new Error(`Expected boolean, not ${b}`);
  }
  exports.bool = bool;
  function bytes(b, ...lengths) {
      if (!(b instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
      if (lengths.length > 0 && !lengths.includes(b.length)) throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
  }
  exports.bytes = bytes;
  function hash(hash) {
      if (typeof hash !== "function" || typeof hash.create !== "function") throw new Error("Hash should be wrapped by utils.wrapConstructor");
      number(hash.outputLen);
      number(hash.blockLen);
  }
  exports.hash = hash;
  function exists(instance, checkFinished = true) {
      if (instance.destroyed) throw new Error("Hash instance has been destroyed");
      if (checkFinished && instance.finished) throw new Error("Hash#digest() has already been called");
  }
  exports.exists = exists;
  function output(out, instance) {
      bytes(out);
      const min = instance.outputLen;
      if (out.length < min) throw new Error(`digestInto() expects output buffer of length at least ${min}`);
  }
  exports.output = output;
  const assert = {
      number,
      bool,
      bytes,
      hash,
      exists,
      output
  };
  exports.default = assert;
  
  },{}],"2ehgp":[function(require,module,exports) {
  "use strict";
  /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */ Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;
  // The import here is via the package name. This is to ensure
  // that exports mapping/resolution does fall into place.
  const crypto_1 = require("77fdad4f7a43df63");
  // Cast array to different type
  const u8 = (arr)=>new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
  exports.u8 = u8;
  const u32 = (arr)=>new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
  exports.u32 = u32;
  // Cast array to view
  const createView = (arr)=>new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
  exports.createView = createView;
  // The rotate right (circular right shift) operation for uint32
  const rotr = (word, shift)=>word << 32 - shift | word >>> shift;
  exports.rotr = rotr;
  exports.isLE = new Uint8Array(new Uint32Array([
      0x11223344
  ]).buffer)[0] === 0x44;
  // There is almost no big endian hardware, but js typed arrays uses platform specific endianness.
  // So, just to be sure not to corrupt anything.
  if (!exports.isLE) throw new Error("Non little-endian hardware is not supported");
  const hexes = Array.from({
      length: 256
  }, (v, i)=>i.toString(16).padStart(2, "0"));
  /**
   * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))
   */ function bytesToHex(uint8a) {
      // pre-caching improves the speed 6x
      if (!(uint8a instanceof Uint8Array)) throw new Error("Uint8Array expected");
      let hex = "";
      for(let i = 0; i < uint8a.length; i++)hex += hexes[uint8a[i]];
      return hex;
  }
  exports.bytesToHex = bytesToHex;
  /**
   * @example hexToBytes('deadbeef')
   */ function hexToBytes(hex) {
      if (typeof hex !== "string") throw new TypeError("hexToBytes: expected string, got " + typeof hex);
      if (hex.length % 2) throw new Error("hexToBytes: received invalid unpadded hex");
      const array = new Uint8Array(hex.length / 2);
      for(let i = 0; i < array.length; i++){
          const j = i * 2;
          const hexByte = hex.slice(j, j + 2);
          const byte = Number.parseInt(hexByte, 16);
          if (Number.isNaN(byte) || byte < 0) throw new Error("Invalid byte sequence");
          array[i] = byte;
      }
      return array;
  }
  exports.hexToBytes = hexToBytes;
  // There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise
  // which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.
  const nextTick = async ()=>{};
  exports.nextTick = nextTick;
  // Returns control to thread each 'tick' ms to avoid blocking
  async function asyncLoop(iters, tick, cb) {
      let ts = Date.now();
      for(let i = 0; i < iters; i++){
          cb(i);
          // Date.now() is not monotonic, so in case if clock goes backwards we return return control too
          const diff = Date.now() - ts;
          if (diff >= 0 && diff < tick) continue;
          await (0, exports.nextTick)();
          ts += diff;
      }
  }
  exports.asyncLoop = asyncLoop;
  function utf8ToBytes(str) {
      if (typeof str !== "string") throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);
      return new TextEncoder().encode(str);
  }
  exports.utf8ToBytes = utf8ToBytes;
  function toBytes(data) {
      if (typeof data === "string") data = utf8ToBytes(data);
      if (!(data instanceof Uint8Array)) throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);
      return data;
  }
  exports.toBytes = toBytes;
  /**
   * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`
   * @example concatBytes(buf1, buf2)
   */ function concatBytes(...arrays) {
      if (!arrays.every((a)=>a instanceof Uint8Array)) throw new Error("Uint8Array list expected");
      if (arrays.length === 1) return arrays[0];
      const length = arrays.reduce((a, arr)=>a + arr.length, 0);
      const result = new Uint8Array(length);
      for(let i = 0, pad = 0; i < arrays.length; i++){
          const arr = arrays[i];
          result.set(arr, pad);
          pad += arr.length;
      }
      return result;
  }
  exports.concatBytes = concatBytes;
  // For runtime check if class implements interface
  class Hash {
      // Safe version that clones internal state
      clone() {
          return this._cloneInto();
      }
  }
  exports.Hash = Hash;
  // Check if object doens't have custom constructor (like Uint8Array/Array)
  const isPlainObject = (obj)=>Object.prototype.toString.call(obj) === "[object Object]" && obj.constructor === Object;
  function checkOpts(defaults, opts) {
      if (opts !== undefined && (typeof opts !== "object" || !isPlainObject(opts))) throw new TypeError("Options should be object or undefined");
      const merged = Object.assign(defaults, opts);
      return merged;
  }
  exports.checkOpts = checkOpts;
  function wrapConstructor(hashConstructor) {
      const hashC = (message)=>hashConstructor().update(toBytes(message)).digest();
      const tmp = hashConstructor();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = ()=>hashConstructor();
      return hashC;
  }
  exports.wrapConstructor = wrapConstructor;
  function wrapConstructorWithOpts(hashCons) {
      const hashC = (msg, opts)=>hashCons(opts).update(toBytes(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts)=>hashCons(opts);
      return hashC;
  }
  exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
  /**
   * Secure PRNG
   */ function randomBytes(bytesLength = 32) {
      if (crypto_1.crypto.web) return crypto_1.crypto.web.getRandomValues(new Uint8Array(bytesLength));
      else if (crypto_1.crypto.node) return new Uint8Array(crypto_1.crypto.node.randomBytes(bytesLength).buffer);
      else throw new Error("The environment doesn't have randomBytes function");
  }
  exports.randomBytes = randomBytes;
  
  },{"77fdad4f7a43df63":"7XNEy"}],"7XNEy":[function(require,module,exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.crypto = void 0;
  exports.crypto = {
      node: undefined,
      web: typeof self === "object" && "crypto" in self ? self.crypto : undefined
  };
  
  },{}],"c4hz5":[function(require,module,exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.pbkdf2Async = exports.pbkdf2 = void 0;
  const _assert_js_1 = require("f9f67b4d2ad4ebf0");
  const hmac_js_1 = require("9957fcd6348c41e8");
  const utils_js_1 = require("1bea809b0e8378ec");
  // Common prologue and epilogue for sync/async functions
  function pbkdf2Init(hash, _password, _salt, _opts) {
      _assert_js_1.default.hash(hash);
      const opts = (0, utils_js_1.checkOpts)({
          dkLen: 32,
          asyncTick: 10
      }, _opts);
      const { c , dkLen , asyncTick  } = opts;
      _assert_js_1.default.number(c);
      _assert_js_1.default.number(dkLen);
      _assert_js_1.default.number(asyncTick);
      if (c < 1) throw new Error("PBKDF2: iterations (c) should be >= 1");
      const password = (0, utils_js_1.toBytes)(_password);
      const salt = (0, utils_js_1.toBytes)(_salt);
      // DK = PBKDF2(PRF, Password, Salt, c, dkLen);
      const DK = new Uint8Array(dkLen);
      // U1 = PRF(Password, Salt + INT_32_BE(i))
      const PRF = hmac_js_1.hmac.create(hash, password);
      const PRFSalt = PRF._cloneInto().update(salt);
      return {
          c,
          dkLen,
          asyncTick,
          DK,
          PRF,
          PRFSalt
      };
  }
  function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
      PRF.destroy();
      PRFSalt.destroy();
      if (prfW) prfW.destroy();
      u.fill(0);
      return DK;
  }
  /**
   * PBKDF2-HMAC: RFC 2898 key derivation function
   * @param hash - hash function that would be used e.g. sha256
   * @param password - password from which a derived key is generated
   * @param salt - cryptographic salt
   * @param opts - {c, dkLen} where c is work factor and dkLen is output message size
   */ function pbkdf2(hash, password, salt, opts) {
      const { c , dkLen , DK , PRF , PRFSalt  } = pbkdf2Init(hash, password, salt, opts);
      let prfW; // Working copy
      const arr = new Uint8Array(4);
      const view = (0, utils_js_1.createView)(arr);
      const u = new Uint8Array(PRF.outputLen);
      // DK = T1 + T2 + ⋯ + Tdklen/hlen
      for(let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen){
          // Ti = F(Password, Salt, c, i)
          const Ti = DK.subarray(pos, pos + PRF.outputLen);
          view.setInt32(0, ti, false);
          // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
          // U1 = PRF(Password, Salt + INT_32_BE(i))
          (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
          Ti.set(u.subarray(0, Ti.length));
          for(let ui = 1; ui < c; ui++){
              // Uc = PRF(Password, Uc−1)
              PRF._cloneInto(prfW).update(u).digestInto(u);
              for(let i = 0; i < Ti.length; i++)Ti[i] ^= u[i];
          }
      }
      return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
  }
  exports.pbkdf2 = pbkdf2;
  async function pbkdf2Async(hash, password, salt, opts) {
      const { c , dkLen , asyncTick , DK , PRF , PRFSalt  } = pbkdf2Init(hash, password, salt, opts);
      let prfW; // Working copy
      const arr = new Uint8Array(4);
      const view = (0, utils_js_1.createView)(arr);
      const u = new Uint8Array(PRF.outputLen);
      // DK = T1 + T2 + ⋯ + Tdklen/hlen
      for(let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen){
          // Ti = F(Password, Salt, c, i)
          const Ti = DK.subarray(pos, pos + PRF.outputLen);
          view.setInt32(0, ti, false);
          // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
          // U1 = PRF(Password, Salt + INT_32_BE(i))
          (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
          Ti.set(u.subarray(0, Ti.length));
          await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, (i)=>{
              // Uc = PRF(Password, Uc−1)
              PRF._cloneInto(prfW).update(u).digestInto(u);
              for(let i = 0; i < Ti.length; i++)Ti[i] ^= u[i];
          });
      }
      return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
  }
  exports.pbkdf2Async = pbkdf2Async;
  
  },{"f9f67b4d2ad4ebf0":"BFdql","9957fcd6348c41e8":"3IfCc","1bea809b0e8378ec":"2ehgp"}],"JjjO8":[function(require,module,exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.sha256 = void 0;
  const _sha2_js_1 = require("f77517f652342b97");
  const utils_js_1 = require("1d9534fe9303bf54");
  // Choice: a ? b : c
  const Chi = (a, b, c)=>a & b ^ ~a & c;
  // Majority function, true if any two inpust is true
  const Maj = (a, b, c)=>a & b ^ a & c ^ b & c;
  // Round constants:
  // first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
  // prettier-ignore
  const SHA256_K = new Uint32Array([
      0x428a2f98,
      0x71374491,
      0xb5c0fbcf,
      0xe9b5dba5,
      0x3956c25b,
      0x59f111f1,
      0x923f82a4,
      0xab1c5ed5,
      0xd807aa98,
      0x12835b01,
      0x243185be,
      0x550c7dc3,
      0x72be5d74,
      0x80deb1fe,
      0x9bdc06a7,
      0xc19bf174,
      0xe49b69c1,
      0xefbe4786,
      0x0fc19dc6,
      0x240ca1cc,
      0x2de92c6f,
      0x4a7484aa,
      0x5cb0a9dc,
      0x76f988da,
      0x983e5152,
      0xa831c66d,
      0xb00327c8,
      0xbf597fc7,
      0xc6e00bf3,
      0xd5a79147,
      0x06ca6351,
      0x14292967,
      0x27b70a85,
      0x2e1b2138,
      0x4d2c6dfc,
      0x53380d13,
      0x650a7354,
      0x766a0abb,
      0x81c2c92e,
      0x92722c85,
      0xa2bfe8a1,
      0xa81a664b,
      0xc24b8b70,
      0xc76c51a3,
      0xd192e819,
      0xd6990624,
      0xf40e3585,
      0x106aa070,
      0x19a4c116,
      0x1e376c08,
      0x2748774c,
      0x34b0bcb5,
      0x391c0cb3,
      0x4ed8aa4a,
      0x5b9cca4f,
      0x682e6ff3,
      0x748f82ee,
      0x78a5636f,
      0x84c87814,
      0x8cc70208,
      0x90befffa,
      0xa4506ceb,
      0xbef9a3f7,
      0xc67178f2
  ]);
  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
  // prettier-ignore
  const IV = new Uint32Array([
      0x6a09e667,
      0xbb67ae85,
      0x3c6ef372,
      0xa54ff53a,
      0x510e527f,
      0x9b05688c,
      0x1f83d9ab,
      0x5be0cd19
  ]);
  // Temporary buffer, not used to store anything between runs
  // Named this way because it matches specification.
  const SHA256_W = new Uint32Array(64);
  class SHA256 extends _sha2_js_1.SHA2 {
      constructor(){
          super(64, 32, 8, false);
          // We cannot use array here since array allows indexing by variable
          // which means optimizer/compiler cannot use registers.
          this.A = IV[0] | 0;
          this.B = IV[1] | 0;
          this.C = IV[2] | 0;
          this.D = IV[3] | 0;
          this.E = IV[4] | 0;
          this.F = IV[5] | 0;
          this.G = IV[6] | 0;
          this.H = IV[7] | 0;
      }
      get() {
          const { A , B , C , D , E , F , G , H  } = this;
          return [
              A,
              B,
              C,
              D,
              E,
              F,
              G,
              H
          ];
      }
      // prettier-ignore
      set(A, B, C, D, E, F, G, H) {
          this.A = A | 0;
          this.B = B | 0;
          this.C = C | 0;
          this.D = D | 0;
          this.E = E | 0;
          this.F = F | 0;
          this.G = G | 0;
          this.H = H | 0;
      }
      process(view, offset) {
          // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
          for(let i = 0; i < 16; i++, offset += 4)SHA256_W[i] = view.getUint32(offset, false);
          for(let i = 16; i < 64; i++){
              const W15 = SHA256_W[i - 15];
              const W2 = SHA256_W[i - 2];
              const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ W15 >>> 3;
              const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ W2 >>> 10;
              SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
          }
          // Compression function main loop, 64 rounds
          let { A , B , C , D , E , F , G , H  } = this;
          for(let i = 0; i < 64; i++){
              const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);
              const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
              const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);
              const T2 = sigma0 + Maj(A, B, C) | 0;
              H = G;
              G = F;
              F = E;
              E = D + T1 | 0;
              D = C;
              C = B;
              B = A;
              A = T1 + T2 | 0;
          }
          // Add the compressed chunk to the current hash value
          A = A + this.A | 0;
          B = B + this.B | 0;
          C = C + this.C | 0;
          D = D + this.D | 0;
          E = E + this.E | 0;
          F = F + this.F | 0;
          G = G + this.G | 0;
          H = H + this.H | 0;
          this.set(A, B, C, D, E, F, G, H);
      }
      roundClean() {
          SHA256_W.fill(0);
      }
      destroy() {
          this.set(0, 0, 0, 0, 0, 0, 0, 0);
          this.buffer.fill(0);
      }
  }
  /**
   * SHA2-256 hash function
   * @param message - data that would be hashed
   */ exports.sha256 = (0, utils_js_1.wrapConstructor)(()=>new SHA256());
  
  },{"f77517f652342b97":"6HKeB","1d9534fe9303bf54":"2ehgp"}],"6HKeB":[function(require,module,exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.SHA2 = void 0;
  const _assert_js_1 = require("a7adce3b91dacd73");
  const utils_js_1 = require("c92c7706c27ad00e");
  // Polyfill for Safari 14
  function setBigUint64(view, byteOffset, value, isLE) {
      if (typeof view.setBigUint64 === "function") return view.setBigUint64(byteOffset, value, isLE);
      const _32n = BigInt(32);
      const _u32_max = BigInt(0xffffffff);
      const wh = Number(value >> _32n & _u32_max);
      const wl = Number(value & _u32_max);
      const h = isLE ? 4 : 0;
      const l = isLE ? 0 : 4;
      view.setUint32(byteOffset + h, wh, isLE);
      view.setUint32(byteOffset + l, wl, isLE);
  }
  // Base SHA2 class (RFC 6234)
  class SHA2 extends utils_js_1.Hash {
      constructor(blockLen, outputLen, padOffset, isLE){
          super();
          this.blockLen = blockLen;
          this.outputLen = outputLen;
          this.padOffset = padOffset;
          this.isLE = isLE;
          this.finished = false;
          this.length = 0;
          this.pos = 0;
          this.destroyed = false;
          this.buffer = new Uint8Array(blockLen);
          this.view = (0, utils_js_1.createView)(this.buffer);
      }
      update(data) {
          _assert_js_1.default.exists(this);
          const { view , buffer , blockLen  } = this;
          data = (0, utils_js_1.toBytes)(data);
          const len = data.length;
          for(let pos = 0; pos < len;){
              const take = Math.min(blockLen - this.pos, len - pos);
              // Fast path: we have at least one block in input, cast it to view and process
              if (take === blockLen) {
                  const dataView = (0, utils_js_1.createView)(data);
                  for(; blockLen <= len - pos; pos += blockLen)this.process(dataView, pos);
                  continue;
              }
              buffer.set(data.subarray(pos, pos + take), this.pos);
              this.pos += take;
              pos += take;
              if (this.pos === blockLen) {
                  this.process(view, 0);
                  this.pos = 0;
              }
          }
          this.length += data.length;
          this.roundClean();
          return this;
      }
      digestInto(out) {
          _assert_js_1.default.exists(this);
          _assert_js_1.default.output(out, this);
          this.finished = true;
          // Padding
          // We can avoid allocation of buffer for padding completely if it
          // was previously not allocated here. But it won't change performance.
          const { buffer , view , blockLen , isLE  } = this;
          let { pos  } = this;
          // append the bit '1' to the message
          buffer[pos++] = 128;
          this.buffer.subarray(pos).fill(0);
          // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again
          if (this.padOffset > blockLen - pos) {
              this.process(view, 0);
              pos = 0;
          }
          // Pad until full block byte with zeros
          for(let i = pos; i < blockLen; i++)buffer[i] = 0;
          // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
          // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
          // So we just write lowest 64 bits of that value.
          setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
          this.process(view, 0);
          const oview = (0, utils_js_1.createView)(out);
          this.get().forEach((v, i)=>oview.setUint32(4 * i, v, isLE));
      }
      digest() {
          const { buffer , outputLen  } = this;
          this.digestInto(buffer);
          const res = buffer.slice(0, outputLen);
          this.destroy();
          return res;
      }
      _cloneInto(to) {
          to || (to = new this.constructor());
          to.set(...this.get());
          const { blockLen , buffer , length , finished , destroyed , pos  } = this;
          to.length = length;
          to.pos = pos;
          to.finished = finished;
          to.destroyed = destroyed;
          if (length % blockLen) to.buffer.set(buffer);
          return to;
      }
  }
  exports.SHA2 = SHA2;
  
  },{"a7adce3b91dacd73":"BFdql","c92c7706c27ad00e":"2ehgp"}],"jlH7E":[function(require,module,exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.sha384 = exports.sha512_256 = exports.sha512 = exports.SHA512 = void 0;
  const _sha2_js_1 = require("ceb6fdcd757901eb");
  const _u64_js_1 = require("ca6479fa5187c8ba");
  const utils_js_1 = require("f3ada1ab7a16abc7");
  // Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):
  // prettier-ignore
  const [SHA512_Kh, SHA512_Kl] = _u64_js_1.default.split([
      "0x428a2f98d728ae22",
      "0x7137449123ef65cd",
      "0xb5c0fbcfec4d3b2f",
      "0xe9b5dba58189dbbc",
      "0x3956c25bf348b538",
      "0x59f111f1b605d019",
      "0x923f82a4af194f9b",
      "0xab1c5ed5da6d8118",
      "0xd807aa98a3030242",
      "0x12835b0145706fbe",
      "0x243185be4ee4b28c",
      "0x550c7dc3d5ffb4e2",
      "0x72be5d74f27b896f",
      "0x80deb1fe3b1696b1",
      "0x9bdc06a725c71235",
      "0xc19bf174cf692694",
      "0xe49b69c19ef14ad2",
      "0xefbe4786384f25e3",
      "0x0fc19dc68b8cd5b5",
      "0x240ca1cc77ac9c65",
      "0x2de92c6f592b0275",
      "0x4a7484aa6ea6e483",
      "0x5cb0a9dcbd41fbd4",
      "0x76f988da831153b5",
      "0x983e5152ee66dfab",
      "0xa831c66d2db43210",
      "0xb00327c898fb213f",
      "0xbf597fc7beef0ee4",
      "0xc6e00bf33da88fc2",
      "0xd5a79147930aa725",
      "0x06ca6351e003826f",
      "0x142929670a0e6e70",
      "0x27b70a8546d22ffc",
      "0x2e1b21385c26c926",
      "0x4d2c6dfc5ac42aed",
      "0x53380d139d95b3df",
      "0x650a73548baf63de",
      "0x766a0abb3c77b2a8",
      "0x81c2c92e47edaee6",
      "0x92722c851482353b",
      "0xa2bfe8a14cf10364",
      "0xa81a664bbc423001",
      "0xc24b8b70d0f89791",
      "0xc76c51a30654be30",
      "0xd192e819d6ef5218",
      "0xd69906245565a910",
      "0xf40e35855771202a",
      "0x106aa07032bbd1b8",
      "0x19a4c116b8d2d0c8",
      "0x1e376c085141ab53",
      "0x2748774cdf8eeb99",
      "0x34b0bcb5e19b48a8",
      "0x391c0cb3c5c95a63",
      "0x4ed8aa4ae3418acb",
      "0x5b9cca4f7763e373",
      "0x682e6ff3d6b2b8a3",
      "0x748f82ee5defb2fc",
      "0x78a5636f43172f60",
      "0x84c87814a1f0ab72",
      "0x8cc702081a6439ec",
      "0x90befffa23631e28",
      "0xa4506cebde82bde9",
      "0xbef9a3f7b2c67915",
      "0xc67178f2e372532b",
      "0xca273eceea26619c",
      "0xd186b8c721c0c207",
      "0xeada7dd6cde0eb1e",
      "0xf57d4f7fee6ed178",
      "0x06f067aa72176fba",
      "0x0a637dc5a2c898a6",
      "0x113f9804bef90dae",
      "0x1b710b35131c471b",
      "0x28db77f523047d84",
      "0x32caab7b40c72493",
      "0x3c9ebe0a15c9bebc",
      "0x431d67c49c100d4c",
      "0x4cc5d4becb3e42b6",
      "0x597f299cfc657e2a",
      "0x5fcb6fab3ad6faec",
      "0x6c44198c4a475817"
  ].map((n)=>BigInt(n)));
  // Temporary buffer, not used to store anything between runs
  const SHA512_W_H = new Uint32Array(80);
  const SHA512_W_L = new Uint32Array(80);
  class SHA512 extends _sha2_js_1.SHA2 {
      constructor(){
          super(128, 64, 16, false);
          // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.
          // Also looks cleaner and easier to verify with spec.
          // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
          // h -- high 32 bits, l -- low 32 bits
          this.Ah = 1779033703;
          this.Al = -205731576;
          this.Bh = -1150833019;
          this.Bl = -2067093701;
          this.Ch = 1013904242;
          this.Cl = -23791573;
          this.Dh = -1521486534;
          this.Dl = 1595750129;
          this.Eh = 1359893119;
          this.El = -1377402159;
          this.Fh = -1694144372;
          this.Fl = 725511199;
          this.Gh = 528734635;
          this.Gl = -79577749;
          this.Hh = 1541459225;
          this.Hl = 327033209;
      }
      // prettier-ignore
      get() {
          const { Ah , Al , Bh , Bl , Ch , Cl , Dh , Dl , Eh , El , Fh , Fl , Gh , Gl , Hh , Hl  } = this;
          return [
              Ah,
              Al,
              Bh,
              Bl,
              Ch,
              Cl,
              Dh,
              Dl,
              Eh,
              El,
              Fh,
              Fl,
              Gh,
              Gl,
              Hh,
              Hl
          ];
      }
      // prettier-ignore
      set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
          this.Ah = Ah | 0;
          this.Al = Al | 0;
          this.Bh = Bh | 0;
          this.Bl = Bl | 0;
          this.Ch = Ch | 0;
          this.Cl = Cl | 0;
          this.Dh = Dh | 0;
          this.Dl = Dl | 0;
          this.Eh = Eh | 0;
          this.El = El | 0;
          this.Fh = Fh | 0;
          this.Fl = Fl | 0;
          this.Gh = Gh | 0;
          this.Gl = Gl | 0;
          this.Hh = Hh | 0;
          this.Hl = Hl | 0;
      }
      process(view, offset) {
          // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array
          for(let i = 0; i < 16; i++, offset += 4){
              SHA512_W_H[i] = view.getUint32(offset);
              SHA512_W_L[i] = view.getUint32(offset += 4);
          }
          for(let i = 16; i < 80; i++){
              // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)
              const W15h = SHA512_W_H[i - 15] | 0;
              const W15l = SHA512_W_L[i - 15] | 0;
              const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);
              const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);
              // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)
              const W2h = SHA512_W_H[i - 2] | 0;
              const W2l = SHA512_W_L[i - 2] | 0;
              const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);
              const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);
              // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];
              const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
              const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
              SHA512_W_H[i] = SUMh | 0;
              SHA512_W_L[i] = SUMl | 0;
          }
          let { Ah , Al , Bh , Bl , Ch , Cl , Dh , Dl , Eh , El , Fh , Fl , Gh , Gl , Hh , Hl  } = this;
          // Compression function main loop, 80 rounds
          for(let i = 0; i < 80; i++){
              // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)
              const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);
              const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);
              //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
              const CHIh = Eh & Fh ^ ~Eh & Gh;
              const CHIl = El & Fl ^ ~El & Gl;
              // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]
              // prettier-ignore
              const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
              const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
              const T1l = T1ll | 0;
              // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)
              const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);
              const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);
              const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
              const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
              Hh = Gh | 0;
              Hl = Gl | 0;
              Gh = Fh | 0;
              Gl = Fl | 0;
              Fh = Eh | 0;
              Fl = El | 0;
              ({ h: Eh , l: El  } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
              Dh = Ch | 0;
              Dl = Cl | 0;
              Ch = Bh | 0;
              Cl = Bl | 0;
              Bh = Ah | 0;
              Bl = Al | 0;
              const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);
              Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);
              Al = All | 0;
          }
          // Add the compressed chunk to the current hash value
          ({ h: Ah , l: Al  } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
          ({ h: Bh , l: Bl  } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
          ({ h: Ch , l: Cl  } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
          ({ h: Dh , l: Dl  } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
          ({ h: Eh , l: El  } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
          ({ h: Fh , l: Fl  } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
          ({ h: Gh , l: Gl  } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
          ({ h: Hh , l: Hl  } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
          this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
      }
      roundClean() {
          SHA512_W_H.fill(0);
          SHA512_W_L.fill(0);
      }
      destroy() {
          this.buffer.fill(0);
          this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      }
  }
  exports.SHA512 = SHA512;
  class SHA512_256 extends SHA512 {
      constructor(){
          super();
          // h -- high 32 bits, l -- low 32 bits
          this.Ah = 573645204;
          this.Al = -64227540;
          this.Bh = -1621794909;
          this.Bl = -934517566;
          this.Ch = 596883563;
          this.Cl = 1867755857;
          this.Dh = -1774684391;
          this.Dl = 1497426621;
          this.Eh = -1775747358;
          this.El = -1467023389;
          this.Fh = -1101128155;
          this.Fl = 1401305490;
          this.Gh = 721525244;
          this.Gl = 746961066;
          this.Hh = 246885852;
          this.Hl = -2117784414;
          this.outputLen = 32;
      }
  }
  class SHA384 extends SHA512 {
      constructor(){
          super();
          // h -- high 32 bits, l -- low 32 bits
          this.Ah = -876896931;
          this.Al = -1056596264;
          this.Bh = 1654270250;
          this.Bl = 914150663;
          this.Ch = -1856437926;
          this.Cl = 812702999;
          this.Dh = 355462360;
          this.Dl = -150054599;
          this.Eh = 1731405415;
          this.El = -4191439;
          this.Fh = -1900787065;
          this.Fl = 1750603025;
          this.Gh = -619958771;
          this.Gl = 1694076839;
          this.Hh = 1203062813;
          this.Hl = -1090891868;
          this.outputLen = 48;
      }
  }
  exports.sha512 = (0, utils_js_1.wrapConstructor)(()=>new SHA512());
  exports.sha512_256 = (0, utils_js_1.wrapConstructor)(()=>new SHA512_256());
  exports.sha384 = (0, utils_js_1.wrapConstructor)(()=>new SHA384());
  
  },{"ceb6fdcd757901eb":"6HKeB","ca6479fa5187c8ba":"8TbxJ","f3ada1ab7a16abc7":"2ehgp"}],"8TbxJ":[function(require,module,exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.add = exports.toBig = exports.split = exports.fromBig = void 0;
  const U32_MASK64 = BigInt(2 ** 32 - 1);
  const _32n = BigInt(32);
  // We are not using BigUint64Array, because they are extremely slow as per 2022
  function fromBig(n, le = false) {
      if (le) return {
          h: Number(n & U32_MASK64),
          l: Number(n >> _32n & U32_MASK64)
      };
      return {
          h: Number(n >> _32n & U32_MASK64) | 0,
          l: Number(n & U32_MASK64) | 0
      };
  }
  exports.fromBig = fromBig;
  function split(lst, le = false) {
      let Ah = new Uint32Array(lst.length);
      let Al = new Uint32Array(lst.length);
      for(let i = 0; i < lst.length; i++){
          const { h , l  } = fromBig(lst[i], le);
          [Ah[i], Al[i]] = [
              h,
              l
          ];
      }
      return [
          Ah,
          Al
      ];
  }
  exports.split = split;
  const toBig = (h, l)=>BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
  exports.toBig = toBig;
  // for Shift in [0, 32)
  const shrSH = (h, l, s)=>h >>> s;
  const shrSL = (h, l, s)=>h << 32 - s | l >>> s;
  // Right rotate for Shift in [1, 32)
  const rotrSH = (h, l, s)=>h >>> s | l << 32 - s;
  const rotrSL = (h, l, s)=>h << 32 - s | l >>> s;
  // Right rotate for Shift in (32, 64), NOTE: 32 is special case.
  const rotrBH = (h, l, s)=>h << 64 - s | l >>> s - 32;
  const rotrBL = (h, l, s)=>h >>> s - 32 | l << 64 - s;
  // Right rotate for shift===32 (just swaps l&h)
  const rotr32H = (h, l)=>l;
  const rotr32L = (h, l)=>h;
  // Left rotate for Shift in [1, 32)
  const rotlSH = (h, l, s)=>h << s | l >>> 32 - s;
  const rotlSL = (h, l, s)=>l << s | h >>> 32 - s;
  // Left rotate for Shift in (32, 64), NOTE: 32 is special case.
  const rotlBH = (h, l, s)=>l << s - 32 | h >>> 64 - s;
  const rotlBL = (h, l, s)=>h << s - 32 | l >>> 64 - s;
  // JS uses 32-bit signed integers for bitwise operations which means we cannot
  // simple take carry out of low bit sum by shift, we need to use division.
  // Removing "export" has 5% perf penalty -_-
  function add(Ah, Al, Bh, Bl) {
      const l = (Al >>> 0) + (Bl >>> 0);
      return {
          h: Ah + Bh + (l / 2 ** 32 | 0) | 0,
          l: l | 0
      };
  }
  exports.add = add;
  // Addition with more than 2 elements
  const add3L = (Al, Bl, Cl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
  const add3H = (low, Ah, Bh, Ch)=>Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
  const add4L = (Al, Bl, Cl, Dl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
  const add4H = (low, Ah, Bh, Ch, Dh)=>Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
  const add5L = (Al, Bl, Cl, Dl, El)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
  const add5H = (low, Ah, Bh, Ch, Dh, Eh)=>Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
  // prettier-ignore
  const u64 = {
      fromBig,
      split,
      toBig: exports.toBig,
      shrSH,
      shrSL,
      rotrSH,
      rotrSL,
      rotrBH,
      rotrBL,
      rotr32H,
      rotr32L,
      rotlSH,
      rotlSL,
      rotlBH,
      rotlBL,
      add,
      add3L,
      add3H,
      add4L,
      add4H,
      add5H,
      add5L
  };
  exports.default = u64;
  
  },{}],"dP6LI":[function(require,module,exports) {
  /**
   *  Cryptographic hashing functions
   *
   *  @_subsection: api/crypto:Hash Functions [about-crypto-hashing]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Compute the cryptographic KECCAK256 hash of %%data%%.
   *
   *  The %%data%% **must** be a data representation, to compute the
   *  hash of UTF-8 data use the [[id]] function.
   *
   *  @returns DataHexstring
   *  @example:
   *    keccak256("0x")
   *    //_result:
   *
   *    keccak256("0x1337")
   *    //_result:
   *
   *    keccak256(new Uint8Array([ 0x13, 0x37 ]))
   *    //_result:
   *
   *    // Strings are assumed to be DataHexString, otherwise it will
   *    // throw. To hash UTF-8 data, see the note above.
   *    keccak256("Hello World")
   *    //_error:
   */ parcelHelpers.export(exports, "keccak256", ()=>keccak256);
  var _sha3 = require("@noble/hashes/sha3");
  var _indexJs = require("../utils/index.js");
  let locked = false;
  const _keccak256 = function(data) {
      return (0, _sha3.keccak_256)(data);
  };
  let __keccak256 = _keccak256;
  function keccak256(_data) {
      const data = (0, _indexJs.getBytes)(_data, "data");
      return (0, _indexJs.hexlify)(__keccak256(data));
  }
  keccak256._ = _keccak256;
  keccak256.lock = function() {
      locked = true;
  };
  keccak256.register = function(func) {
      if (locked) throw new TypeError("keccak256 is locked");
      __keccak256 = func;
  };
  Object.freeze(keccak256);
  
  },{"@noble/hashes/sha3":"7YJSg","../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"7YJSg":[function(require,module,exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;
  const _assert_js_1 = require("ddaff4e009cd681d");
  const _u64_js_1 = require("a7fc5a90b8991724");
  const utils_js_1 = require("7da1d4d938c59fcd");
  // Various per round constants calculations
  const [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [
      [],
      [],
      []
  ];
  const _0n = BigInt(0);
  const _1n = BigInt(1);
  const _2n = BigInt(2);
  const _7n = BigInt(7);
  const _256n = BigInt(256);
  const _0x71n = BigInt(0x71);
  for(let round = 0, R = _1n, x = 1, y = 0; round < 24; round++){
      // Pi
      [x, y] = [
          y,
          (2 * x + 3 * y) % 5
      ];
      SHA3_PI.push(2 * (5 * y + x));
      // Rotational
      SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
      // Iota
      let t = _0n;
      for(let j = 0; j < 7; j++){
          R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
          if (R & _2n) t ^= _1n << (_1n << BigInt(j)) - _1n;
      }
      _SHA3_IOTA.push(t);
  }
  const [SHA3_IOTA_H, SHA3_IOTA_L] = _u64_js_1.default.split(_SHA3_IOTA, true);
  // Left rotation (without 0, 32, 64)
  const rotlH = (h, l, s)=>s > 32 ? _u64_js_1.default.rotlBH(h, l, s) : _u64_js_1.default.rotlSH(h, l, s);
  const rotlL = (h, l, s)=>s > 32 ? _u64_js_1.default.rotlBL(h, l, s) : _u64_js_1.default.rotlSL(h, l, s);
  // Same as keccakf1600, but allows to skip some rounds
  function keccakP(s, rounds = 24) {
      const B = new Uint32Array(10);
      // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)
      for(let round = 24 - rounds; round < 24; round++){
          // Theta θ
          for(let x = 0; x < 10; x++)B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
          for(let x = 0; x < 10; x += 2){
              const idx1 = (x + 8) % 10;
              const idx0 = (x + 2) % 10;
              const B0 = B[idx0];
              const B1 = B[idx0 + 1];
              const Th = rotlH(B0, B1, 1) ^ B[idx1];
              const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
              for(let y = 0; y < 50; y += 10){
                  s[x + y] ^= Th;
                  s[x + y + 1] ^= Tl;
              }
          }
          // Rho (ρ) and Pi (π)
          let curH = s[2];
          let curL = s[3];
          for(let t = 0; t < 24; t++){
              const shift = SHA3_ROTL[t];
              const Th = rotlH(curH, curL, shift);
              const Tl = rotlL(curH, curL, shift);
              const PI = SHA3_PI[t];
              curH = s[PI];
              curL = s[PI + 1];
              s[PI] = Th;
              s[PI + 1] = Tl;
          }
          // Chi (χ)
          for(let y = 0; y < 50; y += 10){
              for(let x = 0; x < 10; x++)B[x] = s[y + x];
              for(let x = 0; x < 10; x++)s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
          }
          // Iota (ι)
          s[0] ^= SHA3_IOTA_H[round];
          s[1] ^= SHA3_IOTA_L[round];
      }
      B.fill(0);
  }
  exports.keccakP = keccakP;
  class Keccak extends utils_js_1.Hash {
      // NOTE: we accept arguments in bytes instead of bits here.
      constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24){
          super();
          this.blockLen = blockLen;
          this.suffix = suffix;
          this.outputLen = outputLen;
          this.enableXOF = enableXOF;
          this.rounds = rounds;
          this.pos = 0;
          this.posOut = 0;
          this.finished = false;
          this.destroyed = false;
          // Can be passed from user as dkLen
          _assert_js_1.default.number(outputLen);
          // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes
          if (0 >= this.blockLen || this.blockLen >= 200) throw new Error("Sha3 supports only keccak-f1600 function");
          this.state = new Uint8Array(200);
          this.state32 = (0, utils_js_1.u32)(this.state);
      }
      keccak() {
          keccakP(this.state32, this.rounds);
          this.posOut = 0;
          this.pos = 0;
      }
      update(data) {
          _assert_js_1.default.exists(this);
          const { blockLen , state  } = this;
          data = (0, utils_js_1.toBytes)(data);
          const len = data.length;
          for(let pos = 0; pos < len;){
              const take = Math.min(blockLen - this.pos, len - pos);
              for(let i = 0; i < take; i++)state[this.pos++] ^= data[pos++];
              if (this.pos === blockLen) this.keccak();
          }
          return this;
      }
      finish() {
          if (this.finished) return;
          this.finished = true;
          const { state , suffix , pos , blockLen  } = this;
          // Do the padding
          state[pos] ^= suffix;
          if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();
          state[blockLen - 1] ^= 0x80;
          this.keccak();
      }
      writeInto(out) {
          _assert_js_1.default.exists(this, false);
          _assert_js_1.default.bytes(out);
          this.finish();
          const bufferOut = this.state;
          const { blockLen  } = this;
          for(let pos = 0, len = out.length; pos < len;){
              if (this.posOut >= blockLen) this.keccak();
              const take = Math.min(blockLen - this.posOut, len - pos);
              out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
              this.posOut += take;
              pos += take;
          }
          return out;
      }
      xofInto(out) {
          // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
          if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
          return this.writeInto(out);
      }
      xof(bytes) {
          _assert_js_1.default.number(bytes);
          return this.xofInto(new Uint8Array(bytes));
      }
      digestInto(out) {
          _assert_js_1.default.output(out, this);
          if (this.finished) throw new Error("digest() was already called");
          this.writeInto(out);
          this.destroy();
          return out;
      }
      digest() {
          return this.digestInto(new Uint8Array(this.outputLen));
      }
      destroy() {
          this.destroyed = true;
          this.state.fill(0);
      }
      _cloneInto(to) {
          const { blockLen , suffix , outputLen , rounds , enableXOF  } = this;
          to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
          to.state32.set(this.state32);
          to.pos = this.pos;
          to.posOut = this.posOut;
          to.finished = this.finished;
          to.rounds = rounds;
          // Suffix can change in cSHAKE
          to.suffix = suffix;
          to.outputLen = outputLen;
          to.enableXOF = enableXOF;
          to.destroyed = this.destroyed;
          return to;
      }
  }
  exports.Keccak = Keccak;
  const gen = (suffix, blockLen, outputLen)=>(0, utils_js_1.wrapConstructor)(()=>new Keccak(blockLen, suffix, outputLen));
  exports.sha3_224 = gen(0x06, 144, 28);
  /**
   * SHA3-256 hash function
   * @param message - that would be hashed
   */ exports.sha3_256 = gen(0x06, 136, 32);
  exports.sha3_384 = gen(0x06, 104, 48);
  exports.sha3_512 = gen(0x06, 72, 64);
  exports.keccak_224 = gen(0x01, 144, 28);
  /**
   * keccak-256 hash function. Different from SHA3-256.
   * @param message - that would be hashed
   */ exports.keccak_256 = gen(0x01, 136, 32);
  exports.keccak_384 = gen(0x01, 104, 48);
  exports.keccak_512 = gen(0x01, 72, 64);
  const genShake = (suffix, blockLen, outputLen)=>(0, utils_js_1.wrapConstructorWithOpts)((opts = {})=>new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));
  exports.shake128 = genShake(0x1f, 168, 16);
  exports.shake256 = genShake(0x1f, 136, 32);
  
  },{"ddaff4e009cd681d":"BFdql","a7fc5a90b8991724":"8TbxJ","7da1d4d938c59fcd":"2ehgp"}],"6LPAD":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Compute the cryptographic RIPEMD-160 hash of %%data%%.
   *
   *  @_docloc: api/crypto:Hash Functions
   *  @returns DataHexstring
   *
   *  @example:
   *    ripemd160("0x")
   *    //_result:
   *
   *    ripemd160("0x1337")
   *    //_result:
   *
   *    ripemd160(new Uint8Array([ 0x13, 0x37 ]))
   *    //_result:
   *
   */ parcelHelpers.export(exports, "ripemd160", ()=>ripemd160);
  var _ripemd160 = require("@noble/hashes/ripemd160");
  var _indexJs = require("../utils/index.js");
  let locked = false;
  const _ripemd1601 = function(data) {
      return (0, _ripemd160.ripemd160)(data);
  };
  let __ripemd160 = _ripemd1601;
  function ripemd160(_data) {
      const data = (0, _indexJs.getBytes)(_data, "data");
      return (0, _indexJs.hexlify)(__ripemd160(data));
  }
  ripemd160._ = _ripemd1601;
  ripemd160.lock = function() {
      locked = true;
  };
  ripemd160.register = function(func) {
      if (locked) throw new TypeError("ripemd160 is locked");
      __ripemd160 = func;
  };
  Object.freeze(ripemd160);
  
  },{"@noble/hashes/ripemd160":"hb7Go","../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"hb7Go":[function(require,module,exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.ripemd160 = exports.RIPEMD160 = void 0;
  const _sha2_js_1 = require("cc8a7f04474ff0f");
  const utils_js_1 = require("a0f77aa5b62b1a02");
  // https://homes.esat.kuleuven.be/~bosselae/ripemd160.html
  // https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf
  const Rho = new Uint8Array([
      7,
      4,
      13,
      1,
      10,
      6,
      15,
      3,
      12,
      0,
      9,
      5,
      2,
      14,
      11,
      8
  ]);
  const Id = Uint8Array.from({
      length: 16
  }, (_, i)=>i);
  const Pi = Id.map((i)=>(9 * i + 5) % 16);
  let idxL = [
      Id
  ];
  let idxR = [
      Pi
  ];
  for(let i = 0; i < 4; i++)for (let j of [
      idxL,
      idxR
  ])j.push(j[i].map((k)=>Rho[k]));
  const shifts = [
      [
          11,
          14,
          15,
          12,
          5,
          8,
          7,
          9,
          11,
          13,
          14,
          15,
          6,
          7,
          9,
          8
      ],
      [
          12,
          13,
          11,
          15,
          6,
          9,
          9,
          7,
          12,
          15,
          11,
          13,
          7,
          8,
          7,
          7
      ],
      [
          13,
          15,
          14,
          11,
          7,
          7,
          6,
          8,
          13,
          14,
          13,
          12,
          5,
          5,
          6,
          9
      ],
      [
          14,
          11,
          12,
          14,
          8,
          6,
          5,
          5,
          15,
          12,
          15,
          14,
          9,
          9,
          8,
          6
      ],
      [
          15,
          12,
          13,
          13,
          9,
          5,
          8,
          6,
          14,
          11,
          12,
          11,
          8,
          6,
          5,
          5
      ]
  ].map((i)=>new Uint8Array(i));
  const shiftsL = idxL.map((idx, i)=>idx.map((j)=>shifts[i][j]));
  const shiftsR = idxR.map((idx, i)=>idx.map((j)=>shifts[i][j]));
  const Kl = new Uint32Array([
      0x00000000,
      0x5a827999,
      0x6ed9eba1,
      0x8f1bbcdc,
      0xa953fd4e
  ]);
  const Kr = new Uint32Array([
      0x50a28be6,
      0x5c4dd124,
      0x6d703ef3,
      0x7a6d76e9,
      0x00000000
  ]);
  // The rotate left (circular left shift) operation for uint32
  const rotl = (word, shift)=>word << shift | word >>> 32 - shift;
  // It's called f() in spec.
  function f(group, x, y, z) {
      if (group === 0) return x ^ y ^ z;
      else if (group === 1) return x & y | ~x & z;
      else if (group === 2) return (x | ~y) ^ z;
      else if (group === 3) return x & z | y & ~z;
      else return x ^ (y | ~z);
  }
  // Temporary buffer, not used to store anything between runs
  const BUF = new Uint32Array(16);
  class RIPEMD160 extends _sha2_js_1.SHA2 {
      constructor(){
          super(64, 20, 8, true);
          this.h0 = 1732584193;
          this.h1 = -271733879;
          this.h2 = -1732584194;
          this.h3 = 271733878;
          this.h4 = -1009589776;
      }
      get() {
          const { h0 , h1 , h2 , h3 , h4  } = this;
          return [
              h0,
              h1,
              h2,
              h3,
              h4
          ];
      }
      set(h0, h1, h2, h3, h4) {
          this.h0 = h0 | 0;
          this.h1 = h1 | 0;
          this.h2 = h2 | 0;
          this.h3 = h3 | 0;
          this.h4 = h4 | 0;
      }
      process(view, offset) {
          for(let i = 0; i < 16; i++, offset += 4)BUF[i] = view.getUint32(offset, true);
          // prettier-ignore
          let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
          // Instead of iterating 0 to 80, we split it into 5 groups
          // And use the groups in constants, functions, etc. Much simpler
          for(let group = 0; group < 5; group++){
              const rGroup = 4 - group;
              const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore
              const rl = idxL[group], rr = idxR[group]; // prettier-ignore
              const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore
              for(let i = 0; i < 16; i++){
                  const tl = rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el | 0;
                  al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore
              }
              // 2 loops are 10% faster
              for(let i = 0; i < 16; i++){
                  const tr = rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er | 0;
                  ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore
              }
          }
          // Add the compressed chunk to the current hash value
          this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
      }
      roundClean() {
          BUF.fill(0);
      }
      destroy() {
          this.destroyed = true;
          this.buffer.fill(0);
          this.set(0, 0, 0, 0, 0);
      }
  }
  exports.RIPEMD160 = RIPEMD160;
  /**
   * RIPEMD-160 - a hash function from 1990s.
   * @param message - msg that would be hashed
   */ exports.ripemd160 = (0, utils_js_1.wrapConstructor)(()=>new RIPEMD160());
  
  },{"cc8a7f04474ff0f":"6HKeB","a0f77aa5b62b1a02":"2ehgp"}],"e3GwR":[function(require,module,exports) {
  /**
   *  A **Password-Based Key-Derivation Function** is designed to create
   *  a sequence of bytes suitible as a **key** from a human-rememberable
   *  password.
   *
   *  @_subsection: api/crypto:Passwords  [about-pbkdf]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Return the [[link-pbkdf2]] for %%keylen%% bytes for %%password%% using
   *  the %%salt%% and using %%iterations%% of %%algo%%.
   *
   *  This PBKDF is outdated and should not be used in new projects, but is
   *  required to decrypt older files.
   *
   *  @example:
   *    // The password must be converted to bytes, and it is generally
   *    // best practices to ensure the string has been normalized. Many
   *    // formats explicitly indicate the normalization form to use.
   *    password = "hello"
   *    passwordBytes = toUtf8Bytes(password, "NFKC")
   *
   *    salt = id("some-salt")
   *
   *    // Compute the PBKDF2
   *    pbkdf2(passwordBytes, salt, 1024, 16, "sha256")
   *    //_result:
   */ parcelHelpers.export(exports, "pbkdf2", ()=>pbkdf2);
  var _cryptoJs = require("./crypto.js");
  var _indexJs = require("../utils/index.js");
  let locked = false;
  const _pbkdf2 = function(password, salt, iterations, keylen, algo) {
      return (0, _cryptoJs.pbkdf2Sync)(password, salt, iterations, keylen, algo);
  };
  let __pbkdf2 = _pbkdf2;
  function pbkdf2(_password, _salt, iterations, keylen, algo) {
      const password = (0, _indexJs.getBytes)(_password, "password");
      const salt = (0, _indexJs.getBytes)(_salt, "salt");
      return (0, _indexJs.hexlify)(__pbkdf2(password, salt, iterations, keylen, algo));
  }
  pbkdf2._ = _pbkdf2;
  pbkdf2.lock = function() {
      locked = true;
  };
  pbkdf2.register = function(func) {
      if (locked) throw new Error("pbkdf2 is locked");
      __pbkdf2 = func;
  };
  Object.freeze(pbkdf2);
  
  },{"./crypto.js":"baApz","../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"gAm8d":[function(require,module,exports) {
  /**
   *  A **Cryptographically Secure Random Value** is one that has been
   *  generated with additional care take to prevent side-channels
   *  from allowing others to detect it and prevent others from through
   *  coincidence generate the same values.
   *
   *  @_subsection: api/crypto:Random Values  [about-crypto-random]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Return %%length%% bytes of cryptographically secure random data.
   *
   *  @example:
   *    randomBytes(8)
   *    //_result:
   */ parcelHelpers.export(exports, "randomBytes", ()=>randomBytes);
  var _cryptoJs = require("./crypto.js");
  let locked = false;
  const _randomBytes = function(length) {
      return new Uint8Array((0, _cryptoJs.randomBytes)(length));
  };
  let __randomBytes = _randomBytes;
  function randomBytes(length) {
      return __randomBytes(length);
  }
  randomBytes._ = _randomBytes;
  randomBytes.lock = function() {
      locked = true;
  };
  randomBytes.register = function(func) {
      if (locked) throw new Error("randomBytes is locked");
      __randomBytes = func;
  };
  Object.freeze(randomBytes);
  
  },{"./crypto.js":"baApz","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"7IHXp":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  The [[link-wiki-scrypt]] uses a memory and cpu hard method of
   *  derivation to increase the resource cost to brute-force a password
   *  for a given key.
   *
   *  This means this algorithm is intentionally slow, and can be tuned to
   *  become slower. As computation and memory speed improve over time,
   *  increasing the difficulty maintains the cost of an attacker.
   *
   *  For example, if a target time of 5 seconds is used, a legitimate user
   *  which knows their password requires only 5 seconds to unlock their
   *  account. A 6 character password has 68 billion possibilities, which
   *  would require an attacker to invest over 10,000 years of CPU time. This
   *  is of course a crude example (as password generally aren't random),
   *  but demonstrates to value of imposing large costs to decryption.
   *
   *  For this reason, if building a UI which involved decrypting or
   *  encrypting datsa using scrypt, it is recommended to use a
   *  [[ProgressCallback]] (as event short periods can seem lik an eternity
   *  if the UI freezes). Including the phrase //"decrypting"// in the UI
   *  can also help, assuring the user their waiting is for a good reason.
   *
   *  @_docloc: api/crypto:Passwords
   *
   *  @example:
   *    // The password must be converted to bytes, and it is generally
   *    // best practices to ensure the string has been normalized. Many
   *    // formats explicitly indicate the normalization form to use.
   *    password = "hello"
   *    passwordBytes = toUtf8Bytes(password, "NFKC")
   *
   *    salt = id("some-salt")
   *
   *    // Compute the scrypt
   *    scrypt(passwordBytes, salt, 1024, 8, 1, 16)
   *    //_result:
   */ parcelHelpers.export(exports, "scrypt", ()=>scrypt);
  /**
   *  Provides a synchronous variant of [[scrypt]].
   *
   *  This will completely lock up and freeze the UI in a browser and will
   *  prevent any event loop from progressing. For this reason, it is
   *  preferred to use the [async variant](scrypt).
   *
   *  @_docloc: api/crypto:Passwords
   *
   *  @example:
   *    // The password must be converted to bytes, and it is generally
   *    // best practices to ensure the string has been normalized. Many
   *    // formats explicitly indicate the normalization form to use.
   *    password = "hello"
   *    passwordBytes = toUtf8Bytes(password, "NFKC")
   *
   *    salt = id("some-salt")
   *
   *    // Compute the scrypt
   *    scryptSync(passwordBytes, salt, 1024, 8, 1, 16)
   *    //_result:
   */ parcelHelpers.export(exports, "scryptSync", ()=>scryptSync);
  var _scrypt = require("@noble/hashes/scrypt");
  var _indexJs = require("../utils/index.js");
  let lockedSync = false, lockedAsync = false;
  const _scryptAsync = async function(passwd, salt, N, r, p, dkLen, onProgress) {
      return await (0, _scrypt.scryptAsync)(passwd, salt, {
          N,
          r,
          p,
          dkLen,
          onProgress
      });
  };
  const _scryptSync = function(passwd, salt, N, r, p, dkLen) {
      return (0, _scrypt.scrypt)(passwd, salt, {
          N,
          r,
          p,
          dkLen
      });
  };
  let __scryptAsync = _scryptAsync;
  let __scryptSync = _scryptSync;
  async function scrypt(_passwd, _salt, N, r, p, dkLen, progress) {
      const passwd = (0, _indexJs.getBytes)(_passwd, "passwd");
      const salt = (0, _indexJs.getBytes)(_salt, "salt");
      return (0, _indexJs.hexlify)(await __scryptAsync(passwd, salt, N, r, p, dkLen, progress));
  }
  scrypt._ = _scryptAsync;
  scrypt.lock = function() {
      lockedAsync = true;
  };
  scrypt.register = function(func) {
      if (lockedAsync) throw new Error("scrypt is locked");
      __scryptAsync = func;
  };
  Object.freeze(scrypt);
  function scryptSync(_passwd, _salt, N, r, p, dkLen) {
      const passwd = (0, _indexJs.getBytes)(_passwd, "passwd");
      const salt = (0, _indexJs.getBytes)(_salt, "salt");
      return (0, _indexJs.hexlify)(__scryptSync(passwd, salt, N, r, p, dkLen));
  }
  scryptSync._ = _scryptSync;
  scryptSync.lock = function() {
      lockedSync = true;
  };
  scryptSync.register = function(func) {
      if (lockedSync) throw new Error("scryptSync is locked");
      __scryptSync = func;
  };
  Object.freeze(scryptSync);
  
  },{"@noble/hashes/scrypt":"aamGB","../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"aamGB":[function(require,module,exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.scryptAsync = exports.scrypt = void 0;
  const _assert_js_1 = require("e5eb2b7eef25c301");
  const sha256_js_1 = require("6d7e953076b905");
  const pbkdf2_js_1 = require("adca5ebdc4a802b6");
  const utils_js_1 = require("26aea367a43dd33");
  // RFC 7914 Scrypt KDF
  // Left rotate for uint32
  const rotl = (a, b)=>a << b | a >>> 32 - b;
  // The main Scrypt loop: uses Salsa extensively.
  // Six versions of the function were tried, this is the fastest one.
  // prettier-ignore
  function XorAndSalsa(prev, pi, input, ii, out, oi) {
      // Based on https://cr.yp.to/salsa20.html
      // Xor blocks
      let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
      let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
      let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
      let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
      let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
      let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
      let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
      let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
      // Save state to temporary variables (salsa)
      let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
      // Main loop (salsa)
      for(let i = 0; i < 8; i += 2){
          x04 ^= rotl(x00 + x12 | 0, 7);
          x08 ^= rotl(x04 + x00 | 0, 9);
          x12 ^= rotl(x08 + x04 | 0, 13);
          x00 ^= rotl(x12 + x08 | 0, 18);
          x09 ^= rotl(x05 + x01 | 0, 7);
          x13 ^= rotl(x09 + x05 | 0, 9);
          x01 ^= rotl(x13 + x09 | 0, 13);
          x05 ^= rotl(x01 + x13 | 0, 18);
          x14 ^= rotl(x10 + x06 | 0, 7);
          x02 ^= rotl(x14 + x10 | 0, 9);
          x06 ^= rotl(x02 + x14 | 0, 13);
          x10 ^= rotl(x06 + x02 | 0, 18);
          x03 ^= rotl(x15 + x11 | 0, 7);
          x07 ^= rotl(x03 + x15 | 0, 9);
          x11 ^= rotl(x07 + x03 | 0, 13);
          x15 ^= rotl(x11 + x07 | 0, 18);
          x01 ^= rotl(x00 + x03 | 0, 7);
          x02 ^= rotl(x01 + x00 | 0, 9);
          x03 ^= rotl(x02 + x01 | 0, 13);
          x00 ^= rotl(x03 + x02 | 0, 18);
          x06 ^= rotl(x05 + x04 | 0, 7);
          x07 ^= rotl(x06 + x05 | 0, 9);
          x04 ^= rotl(x07 + x06 | 0, 13);
          x05 ^= rotl(x04 + x07 | 0, 18);
          x11 ^= rotl(x10 + x09 | 0, 7);
          x08 ^= rotl(x11 + x10 | 0, 9);
          x09 ^= rotl(x08 + x11 | 0, 13);
          x10 ^= rotl(x09 + x08 | 0, 18);
          x12 ^= rotl(x15 + x14 | 0, 7);
          x13 ^= rotl(x12 + x15 | 0, 9);
          x14 ^= rotl(x13 + x12 | 0, 13);
          x15 ^= rotl(x14 + x13 | 0, 18);
      }
      // Write output (salsa)
      out[oi++] = y00 + x00 | 0;
      out[oi++] = y01 + x01 | 0;
      out[oi++] = y02 + x02 | 0;
      out[oi++] = y03 + x03 | 0;
      out[oi++] = y04 + x04 | 0;
      out[oi++] = y05 + x05 | 0;
      out[oi++] = y06 + x06 | 0;
      out[oi++] = y07 + x07 | 0;
      out[oi++] = y08 + x08 | 0;
      out[oi++] = y09 + x09 | 0;
      out[oi++] = y10 + x10 | 0;
      out[oi++] = y11 + x11 | 0;
      out[oi++] = y12 + x12 | 0;
      out[oi++] = y13 + x13 | 0;
      out[oi++] = y14 + x14 | 0;
      out[oi++] = y15 + x15 | 0;
  }
  function BlockMix(input, ii, out, oi, r) {
      // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)
      let head = oi + 0;
      let tail = oi + 16 * r;
      for(let i = 0; i < 16; i++)out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]
      for(let i = 0; i < r; i++, head += 16, ii += 16){
          // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1
          XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])
          if (i > 0) tail += 16; // First iteration overwrites tmp value in tail
          XorAndSalsa(out, head, input, ii += 16, out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])
      }
  }
  // Common prologue and epilogue for sync/async functions
  function scryptInit(password, salt, _opts) {
      // Maxmem - 1GB+1KB by default
      const opts = (0, utils_js_1.checkOpts)({
          dkLen: 32,
          asyncTick: 10,
          maxmem: 1024 ** 3 + 1024
      }, _opts);
      const { N , r , p , dkLen , asyncTick , maxmem , onProgress  } = opts;
      _assert_js_1.default.number(N);
      _assert_js_1.default.number(r);
      _assert_js_1.default.number(p);
      _assert_js_1.default.number(dkLen);
      _assert_js_1.default.number(asyncTick);
      _assert_js_1.default.number(maxmem);
      if (onProgress !== undefined && typeof onProgress !== "function") throw new Error("progressCb should be function");
      const blockSize = 128 * r;
      const blockSize32 = blockSize / 4;
      if (N <= 1 || (N & N - 1) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function
      // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.
      throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
      if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
      if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
      const memUsed = blockSize * (N + p);
      if (memUsed > maxmem) throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
      // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)
      // Since it has only one iteration there is no reason to use async variant
      const B = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, salt, {
          c: 1,
          dkLen: blockSize * p
      });
      const B32 = (0, utils_js_1.u32)(B);
      // Re-used between parallel iterations. Array(iterations) of B
      const V = (0, utils_js_1.u32)(new Uint8Array(blockSize * N));
      const tmp = (0, utils_js_1.u32)(new Uint8Array(blockSize));
      let blockMixCb = ()=>{};
      if (onProgress) {
          const totalBlockMix = 2 * N * p;
          // Invoke callback if progress changes from 10.01 to 10.02
          // Allows to draw smooth progress bar on up to 8K screen
          const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);
          let blockMixCnt = 0;
          blockMixCb = ()=>{
              blockMixCnt++;
              if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix)) onProgress(blockMixCnt / totalBlockMix);
          };
      }
      return {
          N,
          r,
          p,
          dkLen,
          blockSize32,
          V,
          B32,
          B,
          tmp,
          blockMixCb,
          asyncTick
      };
  }
  function scryptOutput(password, dkLen, B, V, tmp) {
      const res = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, B, {
          c: 1,
          dkLen
      });
      B.fill(0);
      V.fill(0);
      tmp.fill(0);
      return res;
  }
  /**
   * Scrypt KDF from RFC 7914.
   * @param password - pass
   * @param salt - salt
   * @param opts - parameters
   * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)
   * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance
   * - `p` is parallelization factor (1 is common)
   * - `dkLen` is output key length in bytes e.g. 32.
   * - `asyncTick` - (default: 10) max time in ms for which async function can block execution
   * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt
   * - `onProgress` - callback function that would be executed for progress report
   * @returns Derived key
   */ function scrypt(password, salt, opts) {
      const { N , r , p , dkLen , blockSize32 , V , B32 , B , tmp , blockMixCb  } = scryptInit(password, salt, opts);
      for(let pi = 0; pi < p; pi++){
          const Pi = blockSize32 * pi;
          for(let i = 0; i < blockSize32; i++)V[i] = B32[Pi + i]; // V[0] = B[i]
          for(let i = 0, pos = 0; i < N - 1; i++){
              BlockMix(V, pos, V, pos += blockSize32, r); // V[i] = BlockMix(V[i-1]);
              blockMixCb();
          }
          BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element
          blockMixCb();
          for(let i = 0; i < N; i++){
              // First u32 of the last 64-byte block (u32 is LE)
              const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations
              for(let k = 0; k < blockSize32; k++)tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]
              BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])
              blockMixCb();
          }
      }
      return scryptOutput(password, dkLen, B, V, tmp);
  }
  exports.scrypt = scrypt;
  /**
   * Scrypt KDF from RFC 7914.
   */ async function scryptAsync(password, salt, opts) {
      const { N , r , p , dkLen , blockSize32 , V , B32 , B , tmp , blockMixCb , asyncTick  } = scryptInit(password, salt, opts);
      for(let pi = 0; pi < p; pi++){
          const Pi = blockSize32 * pi;
          for(let i = 0; i < blockSize32; i++)V[i] = B32[Pi + i]; // V[0] = B[i]
          let pos = 0;
          await (0, utils_js_1.asyncLoop)(N - 1, asyncTick, (i)=>{
              BlockMix(V, pos, V, pos += blockSize32, r); // V[i] = BlockMix(V[i-1]);
              blockMixCb();
          });
          BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element
          blockMixCb();
          await (0, utils_js_1.asyncLoop)(N, asyncTick, (i)=>{
              // First u32 of the last 64-byte block (u32 is LE)
              const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations
              for(let k = 0; k < blockSize32; k++)tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]
              BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])
              blockMixCb();
          });
      }
      return scryptOutput(password, dkLen, B, V, tmp);
  }
  exports.scryptAsync = scryptAsync;
  
  },{"e5eb2b7eef25c301":"BFdql","6d7e953076b905":"JjjO8","adca5ebdc4a802b6":"c4hz5","26aea367a43dd33":"2ehgp"}],"3xX9x":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Compute the cryptographic SHA2-256 hash of %%data%%.
   *
   *  @_docloc: api/crypto:Hash Functions
   *  @returns DataHexstring
   *
   *  @example:
   *    sha256("0x")
   *    //_result:
   *
   *    sha256("0x1337")
   *    //_result:
   *
   *    sha256(new Uint8Array([ 0x13, 0x37 ]))
   *    //_result:
   *
   */ parcelHelpers.export(exports, "sha256", ()=>sha256);
  /**
   *  Compute the cryptographic SHA2-512 hash of %%data%%.
   *
   *  @_docloc: api/crypto:Hash Functions
   *  @returns DataHexstring
   *
   *  @example:
   *    sha512("0x")
   *    //_result:
   *
   *    sha512("0x1337")
   *    //_result:
   *
   *    sha512(new Uint8Array([ 0x13, 0x37 ]))
   *    //_result:
   */ parcelHelpers.export(exports, "sha512", ()=>sha512);
  var _cryptoJs = require("./crypto.js");
  var _indexJs = require("../utils/index.js");
  const _sha256 = function(data) {
      return (0, _cryptoJs.createHash)("sha256").update(data).digest();
  };
  const _sha512 = function(data) {
      return (0, _cryptoJs.createHash)("sha512").update(data).digest();
  };
  let __sha256 = _sha256;
  let __sha512 = _sha512;
  let locked256 = false, locked512 = false;
  function sha256(_data) {
      const data = (0, _indexJs.getBytes)(_data, "data");
      return (0, _indexJs.hexlify)(__sha256(data));
  }
  sha256._ = _sha256;
  sha256.lock = function() {
      locked256 = true;
  };
  sha256.register = function(func) {
      if (locked256) throw new Error("sha256 is locked");
      __sha256 = func;
  };
  Object.freeze(sha256);
  function sha512(_data) {
      const data = (0, _indexJs.getBytes)(_data, "data");
      return (0, _indexJs.hexlify)(__sha512(data));
  }
  sha512._ = _sha512;
  sha512.lock = function() {
      locked512 = true;
  };
  sha512.register = function(func) {
      if (locked512) throw new Error("sha512 is locked");
      __sha512 = func;
  };
  Object.freeze(sha256);
  
  },{"./crypto.js":"baApz","../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"3eoRn":[function(require,module,exports) {
  /**
   *  Add details about signing here.
   *
   *  @_subsection: api/crypto:Signing  [about-signing]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  A **SigningKey** provides high-level access to the elliptic curve
   *  cryptography (ECC) operations and key management.
   */ parcelHelpers.export(exports, "SigningKey", ()=>SigningKey);
  var _secp256K1 = require("@noble/secp256k1");
  var _indexJs = require("../utils/index.js");
  var _hmacJs = require("./hmac.js");
  var _signatureJs = require("./signature.js");
  //const N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
  // Make noble-secp256k1 sync
  _secp256K1.utils.hmacSha256Sync = function(key, ...messages) {
      return (0, _indexJs.getBytes)((0, _hmacJs.computeHmac)("sha256", key, (0, _indexJs.concat)(messages)));
  };
  class SigningKey {
      #privateKey;
      /**
       *  Creates a new **SigningKey** for %%privateKey%%.
       */ constructor(privateKey){
          (0, _indexJs.assertArgument)((0, _indexJs.dataLength)(privateKey) === 32, "invalid private key", "privateKey", "[REDACTED]");
          this.#privateKey = (0, _indexJs.hexlify)(privateKey);
      }
      /**
       *  The private key.
       */ get privateKey() {
          return this.#privateKey;
      }
      /**
       *  The uncompressed public key.
       *
       * This will always begin with the prefix ``0x04`` and be 132
       * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).
       */ get publicKey() {
          return SigningKey.computePublicKey(this.#privateKey);
      }
      /**
       *  The compressed public key.
       *
       *  This will always begin with either the prefix ``0x02`` or ``0x03``
       *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal
       *  nibbles)
       */ get compressedPublicKey() {
          return SigningKey.computePublicKey(this.#privateKey, true);
      }
      /**
       *  Return the signature of the signed %%digest%%.
       */ sign(digest) {
          (0, _indexJs.assertArgument)((0, _indexJs.dataLength)(digest) === 32, "invalid digest length", "digest", digest);
          const [sigDer, recid] = _secp256K1.signSync((0, _indexJs.getBytesCopy)(digest), (0, _indexJs.getBytesCopy)(this.#privateKey), {
              recovered: true,
              canonical: true
          });
          const sig = _secp256K1.Signature.fromHex(sigDer);
          return (0, _signatureJs.Signature).from({
              r: (0, _indexJs.toBeHex)("0x" + sig.r.toString(16), 32),
              s: (0, _indexJs.toBeHex)("0x" + sig.s.toString(16), 32),
              v: recid ? 0x1c : 0x1b
          });
      }
      /**
       *  Returns the [[link-wiki-ecdh]] shared secret between this
       *  private key and the %%other%% key.
       *
       *  The %%other%% key may be any type of key, a raw public key,
       *  a compressed/uncompressed pubic key or aprivate key.
       *
       *  Best practice is usually to use a cryptographic hash on the
       *  returned value before using it as a symetric secret.
       *
       *  @example:
       *    sign1 = new SigningKey(id("some-secret-1"))
       *    sign2 = new SigningKey(id("some-secret-2"))
       *
       *    // Notice that privA.computeSharedSecret(pubB)...
       *    sign1.computeSharedSecret(sign2.publicKey)
       *    //_result:
       *
       *    // ...is equal to privB.computeSharedSecret(pubA).
       *    sign2.computeSharedSecret(sign1.publicKey)
       *    //_result:
       */ computeSharedSecret(other) {
          const pubKey = SigningKey.computePublicKey(other);
          console.log(pubKey);
          return (0, _indexJs.hexlify)(_secp256K1.getSharedSecret((0, _indexJs.getBytesCopy)(this.#privateKey), (0, _indexJs.getBytes)(pubKey)));
      }
      /**
       *  Compute the public key for %%key%%, optionally %%compressed%%.
       *
       *  The %%key%% may be any type of key, a raw public key, a
       *  compressed/uncompressed public key or private key.
       *
       *  @example:
       *    sign = new SigningKey(id("some-secret"));
       *
       *    // Compute the uncompressed public key for a private key
       *    SigningKey.computePublicKey(sign.privateKey)
       *    //_result:
       *
       *    // Compute the compressed public key for a private key
       *    SigningKey.computePublicKey(sign.privateKey, true)
       *    //_result:
       *
       *    // Compute the uncompressed public key
       *    SigningKey.computePublicKey(sign.publicKey, false);
       *    //_result:
       *
       *    // Compute the Compressed a public key
       *    SigningKey.computePublicKey(sign.publicKey, true);
       *    //_result:
       */ static computePublicKey(key, compressed) {
          let bytes = (0, _indexJs.getBytes)(key, "key");
          // private key
          if (bytes.length === 32) {
              const pubKey = _secp256K1.getPublicKey(bytes, !!compressed);
              return (0, _indexJs.hexlify)(pubKey);
          }
          // raw public key; use uncompressed key with 0x04 prefix
          if (bytes.length === 64) {
              const pub = new Uint8Array(65);
              pub[0] = 0x04;
              pub.set(bytes, 1);
              bytes = pub;
          }
          const point = _secp256K1.Point.fromHex(bytes);
          return (0, _indexJs.hexlify)(point.toRawBytes(compressed));
      }
      /**
       *  Returns the public key for the private key which produced the
       *  %%signature%% for the given %%digest%%.
       *
       *  @example:
       *    key = new SigningKey(id("some-secret"))
       *    digest = id("hello world")
       *    sig = key.sign(digest)
       *
       *    // Notice the signer public key...
       *    key.publicKey
       *    //_result:
       *
       *    // ...is equal to the recovered public key
       *    SigningKey.recoverPublicKey(digest, sig)
       *    //_result:
       *
       */ static recoverPublicKey(digest, signature) {
          (0, _indexJs.assertArgument)((0, _indexJs.dataLength)(digest) === 32, "invalid digest length", "digest", digest);
          const sig = (0, _signatureJs.Signature).from(signature);
          const der = _secp256K1.Signature.fromCompact((0, _indexJs.getBytesCopy)((0, _indexJs.concat)([
              sig.r,
              sig.s
          ]))).toDERRawBytes();
          const pubKey = _secp256K1.recoverPublicKey((0, _indexJs.getBytesCopy)(digest), der, sig.yParity);
          (0, _indexJs.assertArgument)(pubKey != null, "invalid signautre for digest", "signature", signature);
          return (0, _indexJs.hexlify)(pubKey);
      }
      /**
       *  Returns the point resulting from adding the ellipic curve points
       *  %%p0%% and %%p1%%.
       *
       *  This is not a common function most developers should require, but
       *  can be useful for certain privacy-specific techniques.
       *
       *  For example, it is used by [[HDNodeWallet]] to compute child
       *  addresses from parent public keys and chain codes.
       */ static addPoints(p0, p1, compressed) {
          const pub0 = _secp256K1.Point.fromHex(SigningKey.computePublicKey(p0).substring(2));
          const pub1 = _secp256K1.Point.fromHex(SigningKey.computePublicKey(p1).substring(2));
          return "0x" + pub0.add(pub1).toHex(!!compressed);
      }
  }
  
  },{"@noble/secp256k1":"eyYsH","../utils/index.js":"jGhd9","./hmac.js":"cADRs","./signature.js":"dd3XO","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"eyYsH":[function(require,module,exports) {
  /*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "CURVE", ()=>CURVE);
  parcelHelpers.export(exports, "Point", ()=>Point);
  parcelHelpers.export(exports, "Signature", ()=>Signature);
  parcelHelpers.export(exports, "getPublicKey", ()=>getPublicKey);
  parcelHelpers.export(exports, "recoverPublicKey", ()=>recoverPublicKey);
  parcelHelpers.export(exports, "getSharedSecret", ()=>getSharedSecret);
  parcelHelpers.export(exports, "sign", ()=>sign);
  parcelHelpers.export(exports, "signSync", ()=>signSync);
  parcelHelpers.export(exports, "verify", ()=>verify);
  parcelHelpers.export(exports, "schnorr", ()=>schnorr);
  parcelHelpers.export(exports, "utils", ()=>utils);
  var _crypto = require("crypto");
  const _0n = BigInt(0);
  const _1n = BigInt(1);
  const _2n = BigInt(2);
  const _3n = BigInt(3);
  const _8n = BigInt(8);
  const CURVE = Object.freeze({
      a: _0n,
      b: BigInt(7),
      P: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),
      n: BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),
      h: _1n,
      Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
      Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
      beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")
  });
  const divNearest = (a, b)=>(a + b / _2n) / b;
  const endo = {
      beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
      splitScalar (k) {
          const { n  } = CURVE;
          const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
          const b1 = -_1n * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
          const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
          const b2 = a1;
          const POW_2_128 = BigInt("0x100000000000000000000000000000000");
          const c1 = divNearest(b2 * k, n);
          const c2 = divNearest(-b1 * k, n);
          let k1 = mod(k - c1 * a1 - c2 * a2, n);
          let k2 = mod(-c1 * b1 - c2 * b2, n);
          const k1neg = k1 > POW_2_128;
          const k2neg = k2 > POW_2_128;
          if (k1neg) k1 = n - k1;
          if (k2neg) k2 = n - k2;
          if (k1 > POW_2_128 || k2 > POW_2_128) throw new Error("splitScalarEndo: Endomorphism failed, k=" + k);
          return {
              k1neg,
              k1,
              k2neg,
              k2
          };
      }
  };
  const fieldLen = 32;
  const groupLen = 32;
  const hashLen = 32;
  const compressedLen = fieldLen + 1;
  const uncompressedLen = 2 * fieldLen + 1;
  function weierstrass(x) {
      const { a , b  } = CURVE;
      const x2 = mod(x * x);
      const x3 = mod(x2 * x);
      return mod(x3 + a * x + b);
  }
  const USE_ENDOMORPHISM = CURVE.a === _0n;
  class ShaError extends Error {
      constructor(message){
          super(message);
      }
  }
  function assertJacPoint(other) {
      if (!(other instanceof JacobianPoint)) throw new TypeError("JacobianPoint expected");
  }
  class JacobianPoint {
      constructor(x, y, z){
          this.x = x;
          this.y = y;
          this.z = z;
      }
      static fromAffine(p) {
          if (!(p instanceof Point)) throw new TypeError("JacobianPoint#fromAffine: expected Point");
          if (p.equals(Point.ZERO)) return JacobianPoint.ZERO;
          return new JacobianPoint(p.x, p.y, _1n);
      }
      static toAffineBatch(points) {
          const toInv = invertBatch(points.map((p)=>p.z));
          return points.map((p, i)=>p.toAffine(toInv[i]));
      }
      static normalizeZ(points) {
          return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);
      }
      equals(other) {
          assertJacPoint(other);
          const { x: X1 , y: Y1 , z: Z1  } = this;
          const { x: X2 , y: Y2 , z: Z2  } = other;
          const Z1Z1 = mod(Z1 * Z1);
          const Z2Z2 = mod(Z2 * Z2);
          const U1 = mod(X1 * Z2Z2);
          const U2 = mod(X2 * Z1Z1);
          const S1 = mod(mod(Y1 * Z2) * Z2Z2);
          const S2 = mod(mod(Y2 * Z1) * Z1Z1);
          return U1 === U2 && S1 === S2;
      }
      negate() {
          return new JacobianPoint(this.x, mod(-this.y), this.z);
      }
      double() {
          const { x: X1 , y: Y1 , z: Z1  } = this;
          const A = mod(X1 * X1);
          const B = mod(Y1 * Y1);
          const C = mod(B * B);
          const x1b = X1 + B;
          const D = mod(_2n * (mod(x1b * x1b) - A - C));
          const E = mod(_3n * A);
          const F = mod(E * E);
          const X3 = mod(F - _2n * D);
          const Y3 = mod(E * (D - X3) - _8n * C);
          const Z3 = mod(_2n * Y1 * Z1);
          return new JacobianPoint(X3, Y3, Z3);
      }
      add(other) {
          assertJacPoint(other);
          const { x: X1 , y: Y1 , z: Z1  } = this;
          const { x: X2 , y: Y2 , z: Z2  } = other;
          if (X2 === _0n || Y2 === _0n) return this;
          if (X1 === _0n || Y1 === _0n) return other;
          const Z1Z1 = mod(Z1 * Z1);
          const Z2Z2 = mod(Z2 * Z2);
          const U1 = mod(X1 * Z2Z2);
          const U2 = mod(X2 * Z1Z1);
          const S1 = mod(mod(Y1 * Z2) * Z2Z2);
          const S2 = mod(mod(Y2 * Z1) * Z1Z1);
          const H = mod(U2 - U1);
          const r = mod(S2 - S1);
          if (H === _0n) {
              if (r === _0n) return this.double();
              else return JacobianPoint.ZERO;
          }
          const HH = mod(H * H);
          const HHH = mod(H * HH);
          const V = mod(U1 * HH);
          const X3 = mod(r * r - HHH - _2n * V);
          const Y3 = mod(r * (V - X3) - S1 * HHH);
          const Z3 = mod(Z1 * Z2 * H);
          return new JacobianPoint(X3, Y3, Z3);
      }
      subtract(other) {
          return this.add(other.negate());
      }
      multiplyUnsafe(scalar) {
          const P0 = JacobianPoint.ZERO;
          if (typeof scalar === "bigint" && scalar === _0n) return P0;
          let n = normalizeScalar(scalar);
          if (n === _1n) return this;
          if (!USE_ENDOMORPHISM) {
              let p = P0;
              let d = this;
              while(n > _0n){
                  if (n & _1n) p = p.add(d);
                  d = d.double();
                  n >>= _1n;
              }
              return p;
          }
          let { k1neg , k1 , k2neg , k2  } = endo.splitScalar(n);
          let k1p = P0;
          let k2p = P0;
          let d = this;
          while(k1 > _0n || k2 > _0n){
              if (k1 & _1n) k1p = k1p.add(d);
              if (k2 & _1n) k2p = k2p.add(d);
              d = d.double();
              k1 >>= _1n;
              k2 >>= _1n;
          }
          if (k1neg) k1p = k1p.negate();
          if (k2neg) k2p = k2p.negate();
          k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);
          return k1p.add(k2p);
      }
      precomputeWindow(W) {
          const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;
          const points = [];
          let p = this;
          let base = p;
          for(let window = 0; window < windows; window++){
              base = p;
              points.push(base);
              for(let i = 1; i < 2 ** (W - 1); i++){
                  base = base.add(p);
                  points.push(base);
              }
              p = base.double();
          }
          return points;
      }
      wNAF(n, affinePoint) {
          if (!affinePoint && this.equals(JacobianPoint.BASE)) affinePoint = Point.BASE;
          const W = affinePoint && affinePoint._WINDOW_SIZE || 1;
          if (256 % W) throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");
          let precomputes = affinePoint && pointPrecomputes.get(affinePoint);
          if (!precomputes) {
              precomputes = this.precomputeWindow(W);
              if (affinePoint && W !== 1) {
                  precomputes = JacobianPoint.normalizeZ(precomputes);
                  pointPrecomputes.set(affinePoint, precomputes);
              }
          }
          let p = JacobianPoint.ZERO;
          let f = JacobianPoint.BASE;
          const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);
          const windowSize = 2 ** (W - 1);
          const mask = BigInt(2 ** W - 1);
          const maxNumber = 2 ** W;
          const shiftBy = BigInt(W);
          for(let window = 0; window < windows; window++){
              const offset = window * windowSize;
              let wbits = Number(n & mask);
              n >>= shiftBy;
              if (wbits > windowSize) {
                  wbits -= maxNumber;
                  n += _1n;
              }
              const offset1 = offset;
              const offset2 = offset + Math.abs(wbits) - 1;
              const cond1 = window % 2 !== 0;
              const cond2 = wbits < 0;
              if (wbits === 0) f = f.add(constTimeNegate(cond1, precomputes[offset1]));
              else p = p.add(constTimeNegate(cond2, precomputes[offset2]));
          }
          return {
              p,
              f
          };
      }
      multiply(scalar, affinePoint) {
          let n = normalizeScalar(scalar);
          let point;
          let fake;
          if (USE_ENDOMORPHISM) {
              const { k1neg , k1 , k2neg , k2  } = endo.splitScalar(n);
              let { p: k1p , f: f1p  } = this.wNAF(k1, affinePoint);
              let { p: k2p , f: f2p  } = this.wNAF(k2, affinePoint);
              k1p = constTimeNegate(k1neg, k1p);
              k2p = constTimeNegate(k2neg, k2p);
              k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);
              point = k1p.add(k2p);
              fake = f1p.add(f2p);
          } else {
              const { p , f  } = this.wNAF(n, affinePoint);
              point = p;
              fake = f;
          }
          return JacobianPoint.normalizeZ([
              point,
              fake
          ])[0];
      }
      toAffine(invZ) {
          const { x , y , z  } = this;
          const is0 = this.equals(JacobianPoint.ZERO);
          if (invZ == null) invZ = is0 ? _8n : invert(z);
          const iz1 = invZ;
          const iz2 = mod(iz1 * iz1);
          const iz3 = mod(iz2 * iz1);
          const ax = mod(x * iz2);
          const ay = mod(y * iz3);
          const zz = mod(z * iz1);
          if (is0) return Point.ZERO;
          if (zz !== _1n) throw new Error("invZ was invalid");
          return new Point(ax, ay);
      }
  }
  JacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);
  JacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);
  function constTimeNegate(condition, item) {
      const neg = item.negate();
      return condition ? neg : item;
  }
  const pointPrecomputes = new WeakMap();
  class Point {
      constructor(x, y){
          this.x = x;
          this.y = y;
      }
      _setWindowSize(windowSize) {
          this._WINDOW_SIZE = windowSize;
          pointPrecomputes.delete(this);
      }
      hasEvenY() {
          return this.y % _2n === _0n;
      }
      static fromCompressedHex(bytes) {
          const isShort = bytes.length === 32;
          const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));
          if (!isValidFieldElement(x)) throw new Error("Point is not on curve");
          const y2 = weierstrass(x);
          let y = sqrtMod(y2);
          const isYOdd = (y & _1n) === _1n;
          if (isShort) {
              if (isYOdd) y = mod(-y);
          } else {
              const isFirstByteOdd = (bytes[0] & 1) === 1;
              if (isFirstByteOdd !== isYOdd) y = mod(-y);
          }
          const point = new Point(x, y);
          point.assertValidity();
          return point;
      }
      static fromUncompressedHex(bytes) {
          const x = bytesToNumber(bytes.subarray(1, fieldLen + 1));
          const y = bytesToNumber(bytes.subarray(fieldLen + 1, fieldLen * 2 + 1));
          const point = new Point(x, y);
          point.assertValidity();
          return point;
      }
      static fromHex(hex) {
          const bytes = ensureBytes(hex);
          const len = bytes.length;
          const header = bytes[0];
          if (len === fieldLen) return this.fromCompressedHex(bytes);
          if (len === compressedLen && (header === 0x02 || header === 0x03)) return this.fromCompressedHex(bytes);
          if (len === uncompressedLen && header === 0x04) return this.fromUncompressedHex(bytes);
          throw new Error(`Point.fromHex: received invalid point. Expected 32-${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes, not ${len}`);
      }
      static fromPrivateKey(privateKey) {
          return Point.BASE.multiply(normalizePrivateKey(privateKey));
      }
      static fromSignature(msgHash, signature, recovery) {
          const { r , s  } = normalizeSignature(signature);
          if (![
              0,
              1,
              2,
              3
          ].includes(recovery)) throw new Error("Cannot recover: invalid recovery bit");
          const h = truncateHash(ensureBytes(msgHash));
          const { n  } = CURVE;
          const radj = recovery === 2 || recovery === 3 ? r + n : r;
          const rinv = invert(radj, n);
          const u1 = mod(-h * rinv, n);
          const u2 = mod(s * rinv, n);
          const prefix = recovery & 1 ? "03" : "02";
          const R = Point.fromHex(prefix + numTo32bStr(radj));
          const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);
          if (!Q) throw new Error("Cannot recover signature: point at infinify");
          Q.assertValidity();
          return Q;
      }
      toRawBytes(isCompressed = false) {
          return hexToBytes(this.toHex(isCompressed));
      }
      toHex(isCompressed = false) {
          const x = numTo32bStr(this.x);
          if (isCompressed) {
              const prefix = this.hasEvenY() ? "02" : "03";
              return `${prefix}${x}`;
          } else return `04${x}${numTo32bStr(this.y)}`;
      }
      toHexX() {
          return this.toHex(true).slice(2);
      }
      toRawX() {
          return this.toRawBytes(true).slice(1);
      }
      assertValidity() {
          const msg = "Point is not on elliptic curve";
          const { x , y  } = this;
          if (!isValidFieldElement(x) || !isValidFieldElement(y)) throw new Error(msg);
          const left = mod(y * y);
          const right = weierstrass(x);
          if (mod(left - right) !== _0n) throw new Error(msg);
      }
      equals(other) {
          return this.x === other.x && this.y === other.y;
      }
      negate() {
          return new Point(this.x, mod(-this.y));
      }
      double() {
          return JacobianPoint.fromAffine(this).double().toAffine();
      }
      add(other) {
          return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();
      }
      subtract(other) {
          return this.add(other.negate());
      }
      multiply(scalar) {
          return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();
      }
      multiplyAndAddUnsafe(Q, a, b) {
          const P = JacobianPoint.fromAffine(this);
          const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);
          const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);
          const sum = aP.add(bQ);
          return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();
      }
  }
  Point.BASE = new Point(CURVE.Gx, CURVE.Gy);
  Point.ZERO = new Point(_0n, _0n);
  function sliceDER(s) {
      return Number.parseInt(s[0], 16) >= 8 ? "00" + s : s;
  }
  function parseDERInt(data) {
      if (data.length < 2 || data[0] !== 0x02) throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);
      const len = data[1];
      const res = data.subarray(2, len + 2);
      if (!len || res.length !== len) throw new Error(`Invalid signature integer: wrong length`);
      if (res[0] === 0x00 && res[1] <= 0x7f) throw new Error("Invalid signature integer: trailing length");
      return {
          data: bytesToNumber(res),
          left: data.subarray(len + 2)
      };
  }
  function parseDERSignature(data) {
      if (data.length < 2 || data[0] != 0x30) throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);
      if (data[1] !== data.length - 2) throw new Error("Invalid signature: incorrect length");
      const { data: r , left: sBytes  } = parseDERInt(data.subarray(2));
      const { data: s , left: rBytesLeft  } = parseDERInt(sBytes);
      if (rBytesLeft.length) throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);
      return {
          r,
          s
      };
  }
  class Signature {
      constructor(r, s){
          this.r = r;
          this.s = s;
          this.assertValidity();
      }
      static fromCompact(hex) {
          const arr = hex instanceof Uint8Array;
          const name = "Signature.fromCompact";
          if (typeof hex !== "string" && !arr) throw new TypeError(`${name}: Expected string or Uint8Array`);
          const str = arr ? bytesToHex(hex) : hex;
          if (str.length !== 128) throw new Error(`${name}: Expected 64-byte hex`);
          return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));
      }
      static fromDER(hex) {
          const arr = hex instanceof Uint8Array;
          if (typeof hex !== "string" && !arr) throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);
          const { r , s  } = parseDERSignature(arr ? hex : hexToBytes(hex));
          return new Signature(r, s);
      }
      static fromHex(hex) {
          return this.fromDER(hex);
      }
      assertValidity() {
          const { r , s  } = this;
          if (!isWithinCurveOrder(r)) throw new Error("Invalid Signature: r must be 0 < r < n");
          if (!isWithinCurveOrder(s)) throw new Error("Invalid Signature: s must be 0 < s < n");
      }
      hasHighS() {
          const HALF = CURVE.n >> _1n;
          return this.s > HALF;
      }
      normalizeS() {
          return this.hasHighS() ? new Signature(this.r, mod(-this.s, CURVE.n)) : this;
      }
      toDERRawBytes() {
          return hexToBytes(this.toDERHex());
      }
      toDERHex() {
          const sHex = sliceDER(numberToHexUnpadded(this.s));
          const rHex = sliceDER(numberToHexUnpadded(this.r));
          const sHexL = sHex.length / 2;
          const rHexL = rHex.length / 2;
          const sLen = numberToHexUnpadded(sHexL);
          const rLen = numberToHexUnpadded(rHexL);
          const length = numberToHexUnpadded(rHexL + sHexL + 4);
          return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;
      }
      toRawBytes() {
          return this.toDERRawBytes();
      }
      toHex() {
          return this.toDERHex();
      }
      toCompactRawBytes() {
          return hexToBytes(this.toCompactHex());
      }
      toCompactHex() {
          return numTo32bStr(this.r) + numTo32bStr(this.s);
      }
  }
  function concatBytes(...arrays) {
      if (!arrays.every((b)=>b instanceof Uint8Array)) throw new Error("Uint8Array list expected");
      if (arrays.length === 1) return arrays[0];
      const length = arrays.reduce((a, arr)=>a + arr.length, 0);
      const result = new Uint8Array(length);
      for(let i = 0, pad = 0; i < arrays.length; i++){
          const arr = arrays[i];
          result.set(arr, pad);
          pad += arr.length;
      }
      return result;
  }
  const hexes = Array.from({
      length: 256
  }, (v, i)=>i.toString(16).padStart(2, "0"));
  function bytesToHex(uint8a) {
      if (!(uint8a instanceof Uint8Array)) throw new Error("Expected Uint8Array");
      let hex = "";
      for(let i = 0; i < uint8a.length; i++)hex += hexes[uint8a[i]];
      return hex;
  }
  const POW_2_256 = BigInt("0x10000000000000000000000000000000000000000000000000000000000000000");
  function numTo32bStr(num) {
      if (typeof num !== "bigint") throw new Error("Expected bigint");
      if (!(_0n <= num && num < POW_2_256)) throw new Error("Expected number 0 <= n < 2^256");
      return num.toString(16).padStart(64, "0");
  }
  function numTo32b(num) {
      const b = hexToBytes(numTo32bStr(num));
      if (b.length !== 32) throw new Error("Error: expected 32 bytes");
      return b;
  }
  function numberToHexUnpadded(num) {
      const hex = num.toString(16);
      return hex.length & 1 ? `0${hex}` : hex;
  }
  function hexToNumber(hex) {
      if (typeof hex !== "string") throw new TypeError("hexToNumber: expected string, got " + typeof hex);
      return BigInt(`0x${hex}`);
  }
  function hexToBytes(hex) {
      if (typeof hex !== "string") throw new TypeError("hexToBytes: expected string, got " + typeof hex);
      if (hex.length % 2) throw new Error("hexToBytes: received invalid unpadded hex" + hex.length);
      const array = new Uint8Array(hex.length / 2);
      for(let i = 0; i < array.length; i++){
          const j = i * 2;
          const hexByte = hex.slice(j, j + 2);
          const byte = Number.parseInt(hexByte, 16);
          if (Number.isNaN(byte) || byte < 0) throw new Error("Invalid byte sequence");
          array[i] = byte;
      }
      return array;
  }
  function bytesToNumber(bytes) {
      return hexToNumber(bytesToHex(bytes));
  }
  function ensureBytes(hex) {
      return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);
  }
  function normalizeScalar(num) {
      if (typeof num === "number" && Number.isSafeInteger(num) && num > 0) return BigInt(num);
      if (typeof num === "bigint" && isWithinCurveOrder(num)) return num;
      throw new TypeError("Expected valid private scalar: 0 < scalar < curve.n");
  }
  function mod(a, b = CURVE.P) {
      const result = a % b;
      return result >= _0n ? result : b + result;
  }
  function pow2(x, power) {
      const { P  } = CURVE;
      let res = x;
      while(power-- > _0n){
          res *= res;
          res %= P;
      }
      return res;
  }
  function sqrtMod(x) {
      const { P  } = CURVE;
      const _6n = BigInt(6);
      const _11n = BigInt(11);
      const _22n = BigInt(22);
      const _23n = BigInt(23);
      const _44n = BigInt(44);
      const _88n = BigInt(88);
      const b2 = x * x * x % P;
      const b3 = b2 * b2 * x % P;
      const b6 = pow2(b3, _3n) * b3 % P;
      const b9 = pow2(b6, _3n) * b3 % P;
      const b11 = pow2(b9, _2n) * b2 % P;
      const b22 = pow2(b11, _11n) * b11 % P;
      const b44 = pow2(b22, _22n) * b22 % P;
      const b88 = pow2(b44, _44n) * b44 % P;
      const b176 = pow2(b88, _88n) * b88 % P;
      const b220 = pow2(b176, _44n) * b44 % P;
      const b223 = pow2(b220, _3n) * b3 % P;
      const t1 = pow2(b223, _23n) * b22 % P;
      const t2 = pow2(t1, _6n) * b2 % P;
      const rt = pow2(t2, _2n);
      const xc = rt * rt % P;
      if (xc !== x) throw new Error("Cannot find square root");
      return rt;
  }
  function invert(number, modulo = CURVE.P) {
      if (number === _0n || modulo <= _0n) throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
      let a = mod(number, modulo);
      let b = modulo;
      let x = _0n, y = _1n, u = _1n, v = _0n;
      while(a !== _0n){
          const q = b / a;
          const r = b % a;
          const m = x - u * q;
          const n = y - v * q;
          b = a, a = r, x = u, y = v, u = m, v = n;
      }
      const gcd = b;
      if (gcd !== _1n) throw new Error("invert: does not exist");
      return mod(x, modulo);
  }
  function invertBatch(nums, p = CURVE.P) {
      const scratch = new Array(nums.length);
      const lastMultiplied = nums.reduce((acc, num, i)=>{
          if (num === _0n) return acc;
          scratch[i] = acc;
          return mod(acc * num, p);
      }, _1n);
      const inverted = invert(lastMultiplied, p);
      nums.reduceRight((acc, num, i)=>{
          if (num === _0n) return acc;
          scratch[i] = mod(acc * scratch[i], p);
          return mod(acc * num, p);
      }, inverted);
      return scratch;
  }
  function bits2int_2(bytes) {
      const delta = bytes.length * 8 - groupLen * 8;
      const num = bytesToNumber(bytes);
      return delta > 0 ? num >> BigInt(delta) : num;
  }
  function truncateHash(hash, truncateOnly = false) {
      const h = bits2int_2(hash);
      if (truncateOnly) return h;
      const { n  } = CURVE;
      return h >= n ? h - n : h;
  }
  let _sha256Sync;
  let _hmacSha256Sync;
  class HmacDrbg {
      constructor(hashLen, qByteLen){
          this.hashLen = hashLen;
          this.qByteLen = qByteLen;
          if (typeof hashLen !== "number" || hashLen < 2) throw new Error("hashLen must be a number");
          if (typeof qByteLen !== "number" || qByteLen < 2) throw new Error("qByteLen must be a number");
          this.v = new Uint8Array(hashLen).fill(1);
          this.k = new Uint8Array(hashLen).fill(0);
          this.counter = 0;
      }
      hmac(...values) {
          return utils.hmacSha256(this.k, ...values);
      }
      hmacSync(...values) {
          return _hmacSha256Sync(this.k, ...values);
      }
      checkSync() {
          if (typeof _hmacSha256Sync !== "function") throw new ShaError("hmacSha256Sync needs to be set");
      }
      incr() {
          if (this.counter >= 1000) throw new Error("Tried 1,000 k values for sign(), all were invalid");
          this.counter += 1;
      }
      async reseed(seed = new Uint8Array()) {
          this.k = await this.hmac(this.v, Uint8Array.from([
              0x00
          ]), seed);
          this.v = await this.hmac(this.v);
          if (seed.length === 0) return;
          this.k = await this.hmac(this.v, Uint8Array.from([
              0x01
          ]), seed);
          this.v = await this.hmac(this.v);
      }
      reseedSync(seed = new Uint8Array()) {
          this.checkSync();
          this.k = this.hmacSync(this.v, Uint8Array.from([
              0x00
          ]), seed);
          this.v = this.hmacSync(this.v);
          if (seed.length === 0) return;
          this.k = this.hmacSync(this.v, Uint8Array.from([
              0x01
          ]), seed);
          this.v = this.hmacSync(this.v);
      }
      async generate() {
          this.incr();
          let len = 0;
          const out = [];
          while(len < this.qByteLen){
              this.v = await this.hmac(this.v);
              const sl = this.v.slice();
              out.push(sl);
              len += this.v.length;
          }
          return concatBytes(...out);
      }
      generateSync() {
          this.checkSync();
          this.incr();
          let len = 0;
          const out = [];
          while(len < this.qByteLen){
              this.v = this.hmacSync(this.v);
              const sl = this.v.slice();
              out.push(sl);
              len += this.v.length;
          }
          return concatBytes(...out);
      }
  }
  function isWithinCurveOrder(num) {
      return _0n < num && num < CURVE.n;
  }
  function isValidFieldElement(num) {
      return _0n < num && num < CURVE.P;
  }
  function kmdToSig(kBytes, m, d, lowS = true) {
      const { n  } = CURVE;
      const k = truncateHash(kBytes, true);
      if (!isWithinCurveOrder(k)) return;
      const kinv = invert(k, n);
      const q = Point.BASE.multiply(k);
      const r = mod(q.x, n);
      if (r === _0n) return;
      const s = mod(kinv * mod(m + d * r, n), n);
      if (s === _0n) return;
      let sig = new Signature(r, s);
      let recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);
      if (lowS && sig.hasHighS()) {
          sig = sig.normalizeS();
          recovery ^= 1;
      }
      return {
          sig,
          recovery
      };
  }
  function normalizePrivateKey(key) {
      let num;
      if (typeof key === "bigint") num = key;
      else if (typeof key === "number" && Number.isSafeInteger(key) && key > 0) num = BigInt(key);
      else if (typeof key === "string") {
          if (key.length !== 2 * groupLen) throw new Error("Expected 32 bytes of private key");
          num = hexToNumber(key);
      } else if (key instanceof Uint8Array) {
          if (key.length !== groupLen) throw new Error("Expected 32 bytes of private key");
          num = bytesToNumber(key);
      } else throw new TypeError("Expected valid private key");
      if (!isWithinCurveOrder(num)) throw new Error("Expected private key: 0 < key < n");
      return num;
  }
  function normalizePublicKey(publicKey) {
      if (publicKey instanceof Point) {
          publicKey.assertValidity();
          return publicKey;
      } else return Point.fromHex(publicKey);
  }
  function normalizeSignature(signature) {
      if (signature instanceof Signature) {
          signature.assertValidity();
          return signature;
      }
      try {
          return Signature.fromDER(signature);
      } catch (error) {
          return Signature.fromCompact(signature);
      }
  }
  function getPublicKey(privateKey, isCompressed = false) {
      return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
  }
  function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {
      return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);
  }
  function isProbPub(item) {
      const arr = item instanceof Uint8Array;
      const str = typeof item === "string";
      const len = (arr || str) && item.length;
      if (arr) return len === compressedLen || len === uncompressedLen;
      if (str) return len === compressedLen * 2 || len === uncompressedLen * 2;
      if (item instanceof Point) return true;
      return false;
  }
  function getSharedSecret(privateA, publicB, isCompressed = false) {
      if (isProbPub(privateA)) throw new TypeError("getSharedSecret: first arg must be private key");
      if (!isProbPub(publicB)) throw new TypeError("getSharedSecret: second arg must be public key");
      const b = normalizePublicKey(publicB);
      b.assertValidity();
      return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);
  }
  function bits2int(bytes) {
      const slice = bytes.length > fieldLen ? bytes.slice(0, fieldLen) : bytes;
      return bytesToNumber(slice);
  }
  function bits2octets(bytes) {
      const z1 = bits2int(bytes);
      const z2 = mod(z1, CURVE.n);
      return int2octets(z2 < _0n ? z1 : z2);
  }
  function int2octets(num) {
      return numTo32b(num);
  }
  function initSigArgs(msgHash, privateKey, extraEntropy) {
      if (msgHash == null) throw new Error(`sign: expected valid message hash, not "${msgHash}"`);
      const h1 = ensureBytes(msgHash);
      const d = normalizePrivateKey(privateKey);
      const seedArgs = [
          int2octets(d),
          bits2octets(h1)
      ];
      if (extraEntropy != null) {
          if (extraEntropy === true) extraEntropy = utils.randomBytes(fieldLen);
          const e = ensureBytes(extraEntropy);
          if (e.length !== fieldLen) throw new Error(`sign: Expected ${fieldLen} bytes of extra data`);
          seedArgs.push(e);
      }
      const seed = concatBytes(...seedArgs);
      const m = bits2int(h1);
      return {
          seed,
          m,
          d
      };
  }
  function finalizeSig(recSig, opts) {
      const { sig , recovery  } = recSig;
      const { der , recovered  } = Object.assign({
          canonical: true,
          der: true
      }, opts);
      const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();
      return recovered ? [
          hashed,
          recovery
      ] : hashed;
  }
  async function sign(msgHash, privKey, opts = {}) {
      const { seed , m , d  } = initSigArgs(msgHash, privKey, opts.extraEntropy);
      const drbg = new HmacDrbg(hashLen, groupLen);
      await drbg.reseed(seed);
      let sig;
      while(!(sig = kmdToSig(await drbg.generate(), m, d, opts.canonical)))await drbg.reseed();
      return finalizeSig(sig, opts);
  }
  function signSync(msgHash, privKey, opts = {}) {
      const { seed , m , d  } = initSigArgs(msgHash, privKey, opts.extraEntropy);
      const drbg = new HmacDrbg(hashLen, groupLen);
      drbg.reseedSync(seed);
      let sig;
      while(!(sig = kmdToSig(drbg.generateSync(), m, d, opts.canonical)))drbg.reseedSync();
      return finalizeSig(sig, opts);
  }
  const vopts = {
      strict: true
  };
  function verify(signature, msgHash, publicKey, opts = vopts) {
      let sig;
      try {
          sig = normalizeSignature(signature);
          msgHash = ensureBytes(msgHash);
      } catch (error) {
          return false;
      }
      const { r , s  } = sig;
      if (opts.strict && sig.hasHighS()) return false;
      const h = truncateHash(msgHash);
      let P;
      try {
          P = normalizePublicKey(publicKey);
      } catch (error) {
          return false;
      }
      const { n  } = CURVE;
      const sinv = invert(s, n);
      const u1 = mod(h * sinv, n);
      const u2 = mod(r * sinv, n);
      const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);
      if (!R) return false;
      const v = mod(R.x, n);
      return v === r;
  }
  function schnorrChallengeFinalize(ch) {
      return mod(bytesToNumber(ch), CURVE.n);
  }
  class SchnorrSignature {
      constructor(r, s){
          this.r = r;
          this.s = s;
          this.assertValidity();
      }
      static fromHex(hex) {
          const bytes = ensureBytes(hex);
          if (bytes.length !== 64) throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);
          const r = bytesToNumber(bytes.subarray(0, 32));
          const s = bytesToNumber(bytes.subarray(32, 64));
          return new SchnorrSignature(r, s);
      }
      assertValidity() {
          const { r , s  } = this;
          if (!isValidFieldElement(r) || !isWithinCurveOrder(s)) throw new Error("Invalid signature");
      }
      toHex() {
          return numTo32bStr(this.r) + numTo32bStr(this.s);
      }
      toRawBytes() {
          return hexToBytes(this.toHex());
      }
  }
  function schnorrGetPublicKey(privateKey) {
      return Point.fromPrivateKey(privateKey).toRawX();
  }
  class InternalSchnorrSignature {
      constructor(message, privateKey, auxRand = utils.randomBytes()){
          if (message == null) throw new TypeError(`sign: Expected valid message, not "${message}"`);
          this.m = ensureBytes(message);
          const { x , scalar  } = this.getScalar(normalizePrivateKey(privateKey));
          this.px = x;
          this.d = scalar;
          this.rand = ensureBytes(auxRand);
          if (this.rand.length !== 32) throw new TypeError("sign: Expected 32 bytes of aux randomness");
      }
      getScalar(priv) {
          const point = Point.fromPrivateKey(priv);
          const scalar = point.hasEvenY() ? priv : CURVE.n - priv;
          return {
              point,
              scalar,
              x: point.toRawX()
          };
      }
      initNonce(d, t0h) {
          return numTo32b(d ^ bytesToNumber(t0h));
      }
      finalizeNonce(k0h) {
          const k0 = mod(bytesToNumber(k0h), CURVE.n);
          if (k0 === _0n) throw new Error("sign: Creation of signature failed. k is zero");
          const { point: R , x: rx , scalar: k  } = this.getScalar(k0);
          return {
              R,
              rx,
              k
          };
      }
      finalizeSig(R, k, e, d) {
          return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();
      }
      error() {
          throw new Error("sign: Invalid signature produced");
      }
      async calc() {
          const { m , d , px , rand  } = this;
          const tag = utils.taggedHash;
          const t = this.initNonce(d, await tag(TAGS.aux, rand));
          const { R , rx , k  } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));
          const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));
          const sig = this.finalizeSig(R, k, e, d);
          if (!await schnorrVerify(sig, m, px)) this.error();
          return sig;
      }
      calcSync() {
          const { m , d , px , rand  } = this;
          const tag = utils.taggedHashSync;
          const t = this.initNonce(d, tag(TAGS.aux, rand));
          const { R , rx , k  } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));
          const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));
          const sig = this.finalizeSig(R, k, e, d);
          if (!schnorrVerifySync(sig, m, px)) this.error();
          return sig;
      }
  }
  async function schnorrSign(msg, privKey, auxRand) {
      return new InternalSchnorrSignature(msg, privKey, auxRand).calc();
  }
  function schnorrSignSync(msg, privKey, auxRand) {
      return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();
  }
  function initSchnorrVerify(signature, message, publicKey) {
      const raw = signature instanceof SchnorrSignature;
      const sig = raw ? signature : SchnorrSignature.fromHex(signature);
      if (raw) sig.assertValidity();
      return {
          ...sig,
          m: ensureBytes(message),
          P: normalizePublicKey(publicKey)
      };
  }
  function finalizeSchnorrVerify(r, P, s, e) {
      const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));
      if (!R || !R.hasEvenY() || R.x !== r) return false;
      return true;
  }
  async function schnorrVerify(signature, message, publicKey) {
      try {
          const { r , s , m , P  } = initSchnorrVerify(signature, message, publicKey);
          const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));
          return finalizeSchnorrVerify(r, P, s, e);
      } catch (error) {
          return false;
      }
  }
  function schnorrVerifySync(signature, message, publicKey) {
      try {
          const { r , s , m , P  } = initSchnorrVerify(signature, message, publicKey);
          const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));
          return finalizeSchnorrVerify(r, P, s, e);
      } catch (error) {
          if (error instanceof ShaError) throw error;
          return false;
      }
  }
  const schnorr = {
      Signature: SchnorrSignature,
      getPublicKey: schnorrGetPublicKey,
      sign: schnorrSign,
      verify: schnorrVerify,
      signSync: schnorrSignSync,
      verifySync: schnorrVerifySync
  };
  Point.BASE._setWindowSize(8);
  const crypto = {
      node: _crypto,
      web: typeof self === "object" && "crypto" in self ? self.crypto : undefined
  };
  const TAGS = {
      challenge: "BIP0340/challenge",
      aux: "BIP0340/aux",
      nonce: "BIP0340/nonce"
  };
  const TAGGED_HASH_PREFIXES = {};
  const utils = {
      bytesToHex,
      hexToBytes,
      concatBytes,
      mod,
      invert,
      isValidPrivateKey (privateKey) {
          try {
              normalizePrivateKey(privateKey);
              return true;
          } catch (error) {
              return false;
          }
      },
      _bigintTo32Bytes: numTo32b,
      _normalizePrivateKey: normalizePrivateKey,
      hashToPrivateKey: (hash)=>{
          hash = ensureBytes(hash);
          const minLen = groupLen + 8;
          if (hash.length < minLen || hash.length > 1024) throw new Error(`Expected valid bytes of private key as per FIPS 186`);
          const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;
          return numTo32b(num);
      },
      randomBytes: (bytesLength = 32)=>{
          if (crypto.web) return crypto.web.getRandomValues(new Uint8Array(bytesLength));
          else if (crypto.node) {
              const { randomBytes  } = crypto.node;
              return Uint8Array.from(randomBytes(bytesLength));
          } else throw new Error("The environment doesn't have randomBytes function");
      },
      randomPrivateKey: ()=>utils.hashToPrivateKey(utils.randomBytes(groupLen + 8)),
      precompute (windowSize = 8, point = Point.BASE) {
          const cached = point === Point.BASE ? point : new Point(point.x, point.y);
          cached._setWindowSize(windowSize);
          cached.multiply(_3n);
          return cached;
      },
      sha256: async (...messages)=>{
          if (crypto.web) {
              const buffer = await crypto.web.subtle.digest("SHA-256", concatBytes(...messages));
              return new Uint8Array(buffer);
          } else if (crypto.node) {
              const { createHash  } = crypto.node;
              const hash = createHash("sha256");
              messages.forEach((m)=>hash.update(m));
              return Uint8Array.from(hash.digest());
          } else throw new Error("The environment doesn't have sha256 function");
      },
      hmacSha256: async (key, ...messages)=>{
          if (crypto.web) {
              const ckey = await crypto.web.subtle.importKey("raw", key, {
                  name: "HMAC",
                  hash: {
                      name: "SHA-256"
                  }
              }, false, [
                  "sign"
              ]);
              const message = concatBytes(...messages);
              const buffer = await crypto.web.subtle.sign("HMAC", ckey, message);
              return new Uint8Array(buffer);
          } else if (crypto.node) {
              const { createHmac  } = crypto.node;
              const hash = createHmac("sha256", key);
              messages.forEach((m)=>hash.update(m));
              return Uint8Array.from(hash.digest());
          } else throw new Error("The environment doesn't have hmac-sha256 function");
      },
      sha256Sync: undefined,
      hmacSha256Sync: undefined,
      taggedHash: async (tag, ...messages)=>{
          let tagP = TAGGED_HASH_PREFIXES[tag];
          if (tagP === undefined) {
              const tagH = await utils.sha256(Uint8Array.from(tag, (c)=>c.charCodeAt(0)));
              tagP = concatBytes(tagH, tagH);
              TAGGED_HASH_PREFIXES[tag] = tagP;
          }
          return utils.sha256(tagP, ...messages);
      },
      taggedHashSync: (tag, ...messages)=>{
          if (typeof _sha256Sync !== "function") throw new ShaError("sha256Sync is undefined, you need to set it");
          let tagP = TAGGED_HASH_PREFIXES[tag];
          if (tagP === undefined) {
              const tagH = _sha256Sync(Uint8Array.from(tag, (c)=>c.charCodeAt(0)));
              tagP = concatBytes(tagH, tagH);
              TAGGED_HASH_PREFIXES[tag] = tagP;
          }
          return _sha256Sync(tagP, ...messages);
      },
      _JacobianPoint: JacobianPoint
  };
  Object.defineProperties(utils, {
      sha256Sync: {
          configurable: false,
          get () {
              return _sha256Sync;
          },
          set (val) {
              if (!_sha256Sync) _sha256Sync = val;
          }
      },
      hmacSha256Sync: {
          configurable: false,
          get () {
              return _hmacSha256Sync;
          },
          set (val) {
              if (!_hmacSha256Sync) _hmacSha256Sync = val;
          }
      }
  });
  
  },{"crypto":"16z3F","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"dd3XO":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  A Signature  @TODO
   *
   *
   *  @_docloc: api/crypto:Signing
   */ parcelHelpers.export(exports, "Signature", ()=>Signature);
  var _indexJs = require("../constants/index.js");
  var _indexJs1 = require("../utils/index.js");
  // Constants
  const BN_0 = BigInt(0);
  const BN_1 = BigInt(1);
  const BN_2 = BigInt(2);
  const BN_27 = BigInt(27);
  const BN_28 = BigInt(28);
  const BN_35 = BigInt(35);
  const _guard = {};
  function toUint256(value) {
      return (0, _indexJs1.zeroPadValue)((0, _indexJs1.toBeArray)(value), 32);
  }
  class Signature {
      #r;
      #s;
      #v;
      #networkV;
      /**
       *  The ``r`` value for a signautre.
       *
       *  This represents the ``x`` coordinate of a "reference" or
       *  challenge point, from which the ``y`` can be computed.
       */ get r() {
          return this.#r;
      }
      set r(value) {
          (0, _indexJs1.assertArgument)((0, _indexJs1.dataLength)(value) === 32, "invalid r", "value", value);
          this.#r = (0, _indexJs1.hexlify)(value);
      }
      /**
       *  The ``s`` value for a signature.
       */ get s() {
          return this.#s;
      }
      set s(_value) {
          (0, _indexJs1.assertArgument)((0, _indexJs1.dataLength)(_value) === 32, "invalid s", "value", _value);
          const value = (0, _indexJs1.hexlify)(_value);
          (0, _indexJs1.assertArgument)(parseInt(value.substring(0, 3)) < 8, "non-canonical s", "value", value);
          this.#s = value;
      }
      /**
       *  The ``v`` value for a signature.
       *
       *  Since a given ``x`` value for ``r`` has two possible values for
       *  its correspondin ``y``, the ``v`` indicates which of the two ``y``
       *  values to use.
       *
       *  It is normalized to the values ``27`` or ``28`` for legacy
       *  purposes.
       */ get v() {
          return this.#v;
      }
      set v(value) {
          const v = (0, _indexJs1.getNumber)(value, "value");
          (0, _indexJs1.assertArgument)(v === 27 || v === 28, "invalid v", "v", value);
          this.#v = v;
      }
      /**
       *  The EIP-155 ``v`` for legacy transactions. For non-legacy
       *  transactions, this value is ``null``.
       */ get networkV() {
          return this.#networkV;
      }
      /**
       *  The chain ID for EIP-155 legacy transactions. For non-legacy
       *  transactions, this value is ``null``.
       */ get legacyChainId() {
          const v = this.networkV;
          if (v == null) return null;
          return Signature.getChainId(v);
      }
      /**
       *  The ``yParity`` for the signature.
       *
       *  See ``v`` for more details on how this value is used.
       */ get yParity() {
          return this.v === 27 ? 0 : 1;
      }
      /**
       *  The [[link-eip-2098]] compact representation of the ``yParity``
       *  and ``s`` compacted into a single ``bytes32``.
       */ get yParityAndS() {
          // The EIP-2098 compact representation
          const yParityAndS = (0, _indexJs1.getBytes)(this.s);
          if (this.yParity) yParityAndS[0] |= 0x80;
          return (0, _indexJs1.hexlify)(yParityAndS);
      }
      /**
       *  The [[link-eip-2098]] compact representation.
       */ get compactSerialized() {
          return (0, _indexJs1.concat)([
              this.r,
              this.yParityAndS
          ]);
      }
      /**
       *  The serialized representation.
       */ get serialized() {
          return (0, _indexJs1.concat)([
              this.r,
              this.s,
              this.yParity ? "0x1c" : "0x1b"
          ]);
      }
      /**
       *  @private
       */ constructor(guard, r, s, v){
          (0, _indexJs1.assertPrivate)(guard, _guard, "Signature");
          this.#r = r;
          this.#s = s;
          this.#v = v;
          this.#networkV = null;
      }
      [Symbol.for("nodejs.util.inspect.custom")]() {
          return `Signature { r: "${this.r}", s: "${this.s}", yParity: ${this.yParity}, networkV: ${this.networkV} }`;
      }
      /**
       *  Returns a new identical [[Signature]].
       */ clone() {
          const clone = new Signature(_guard, this.r, this.s, this.v);
          if (this.networkV) clone.#networkV = this.networkV;
          return clone;
      }
      /**
       *  Returns a representation that is compatible with ``JSON.stringify``.
       */ toJSON() {
          const networkV = this.networkV;
          return {
              _type: "signature",
              networkV: networkV != null ? networkV.toString() : null,
              r: this.r,
              s: this.s,
              v: this.v
          };
      }
      /**
       *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.
       *
       *  @example:
       *    Signature.getChainId(45)
       *    //_result:
       *
       *    Signature.getChainId(46)
       *    //_result:
       */ static getChainId(v) {
          const bv = (0, _indexJs1.getBigInt)(v, "v");
          // The v is not an EIP-155 v, so it is the unspecified chain ID
          if (bv == BN_27 || bv == BN_28) return BN_0;
          // Bad value for an EIP-155 v
          (0, _indexJs1.assertArgument)(bv >= BN_35, "invalid EIP-155 v", "v", v);
          return (bv - BN_35) / BN_2;
      }
      /**
       *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.
       *
       *  Legacy transactions which use [[link-eip-155]] hijack the ``v``
       *  property to include the chain ID.
       *
       *  @example:
       *    Signature.getChainIdV(5, 27)
       *    //_result:
       *
       *    Signature.getChainIdV(5, 28)
       *    //_result:
       *
       */ static getChainIdV(chainId, v) {
          return (0, _indexJs1.getBigInt)(chainId) * BN_2 + BigInt(35 + v - 27);
      }
      /**
       *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,
       *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.
       *
       *  @example:
       *    // The values 0 and 1 imply v is actually yParity
       *    Signature.getNormalizedV(0)
       *    //_result:
       *
       *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)
       *    Signature.getNormalizedV(27)
       *    //_result:
       *
       *    // Legacy EIP-155 transaction (i.e. >= 35)
       *    Signature.getNormalizedV(46)
       *    //_result:
       *
       *    // Invalid values throw
       *    Signature.getNormalizedV(5)
       *    //_error:
       */ static getNormalizedV(v) {
          const bv = (0, _indexJs1.getBigInt)(v);
          if (bv === BN_0 || bv === BN_27) return 27;
          if (bv === BN_1 || bv === BN_28) return 28;
          (0, _indexJs1.assertArgument)(bv >= BN_35, "invalid v", "v", v);
          // Otherwise, EIP-155 v means odd is 27 and even is 28
          return bv & BN_1 ? 27 : 28;
      }
      /**
       *  Creates a new [[Signature]].
       *
       *  If no %%sig%% is provided, a new [[Signature]] is created
       *  with default values.
       *
       *  If %%sig%% is a string, it is parsed.
       */ static from(sig) {
          function assertError(check, message) {
              (0, _indexJs1.assertArgument)(check, message, "signature", sig);
          }
          if (sig == null) return new Signature(_guard, (0, _indexJs.ZeroHash), (0, _indexJs.ZeroHash), 27);
          if (typeof sig === "string") {
              const bytes = (0, _indexJs1.getBytes)(sig, "signature");
              if (bytes.length === 64) {
                  const r = (0, _indexJs1.hexlify)(bytes.slice(0, 32));
                  const s = bytes.slice(32, 64);
                  const v = s[0] & 0x80 ? 28 : 27;
                  s[0] &= 0x7f;
                  return new Signature(_guard, r, (0, _indexJs1.hexlify)(s), v);
              }
              if (bytes.length === 65) {
                  const r = (0, _indexJs1.hexlify)(bytes.slice(0, 32));
                  const s = bytes.slice(32, 64);
                  assertError((s[0] & 0x80) === 0, "non-canonical s");
                  const v = Signature.getNormalizedV(bytes[64]);
                  return new Signature(_guard, r, (0, _indexJs1.hexlify)(s), v);
              }
              assertError(false, "invalid raw signature length");
          }
          if (sig instanceof Signature) return sig.clone();
          // Get r
          const _r = sig.r;
          assertError(_r != null, "missing r");
          const r = toUint256(_r);
          // Get s; by any means necessary (we check consistency below)
          const s = function(s, yParityAndS) {
              if (s != null) return toUint256(s);
              if (yParityAndS != null) {
                  assertError((0, _indexJs1.isHexString)(yParityAndS, 32), "invalid yParityAndS");
                  const bytes = (0, _indexJs1.getBytes)(yParityAndS);
                  bytes[0] &= 0x7f;
                  return (0, _indexJs1.hexlify)(bytes);
              }
              assertError(false, "missing s");
          }(sig.s, sig.yParityAndS);
          assertError(((0, _indexJs1.getBytes)(s)[0] & 0x80) == 0, "non-canonical s");
          // Get v; by any means necessary (we check consistency below)
          const { networkV , v  } = function(_v, yParityAndS, yParity) {
              if (_v != null) {
                  const v = (0, _indexJs1.getBigInt)(_v);
                  return {
                      networkV: v >= BN_35 ? v : undefined,
                      v: Signature.getNormalizedV(v)
                  };
              }
              if (yParityAndS != null) {
                  assertError((0, _indexJs1.isHexString)(yParityAndS, 32), "invalid yParityAndS");
                  return {
                      v: (0, _indexJs1.getBytes)(yParityAndS)[0] & 0x80 ? 28 : 27
                  };
              }
              if (yParity != null) {
                  switch(yParity){
                      case 0:
                          return {
                              v: 27
                          };
                      case 1:
                          return {
                              v: 28
                          };
                  }
                  assertError(false, "invalid yParity");
              }
              assertError(false, "missing v");
          }(sig.v, sig.yParityAndS, sig.yParity);
          const result = new Signature(_guard, r, s, v);
          if (networkV) result.#networkV = networkV;
          // If multiple of v, yParity, yParityAndS we given, check they match
          assertError(!("yParity" in sig && sig.yParity !== result.yParity), "yParity mismatch");
          assertError(!("yParityAndS" in sig && sig.yParityAndS !== result.yParityAndS), "yParityAndS mismatch");
          return result;
      }
  }
  
  },{"../constants/index.js":"lNX00","../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"lNX00":[function(require,module,exports) {
  /**
   *  Some common constants useful for Ethereum.
   *
   *  @_section: api/constants: Constants  [about-constants]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "ZeroAddress", ()=>(0, _addressesJs.ZeroAddress));
  parcelHelpers.export(exports, "ZeroHash", ()=>(0, _hashesJs.ZeroHash));
  parcelHelpers.export(exports, "N", ()=>(0, _numbersJs.N));
  parcelHelpers.export(exports, "WeiPerEther", ()=>(0, _numbersJs.WeiPerEther));
  parcelHelpers.export(exports, "MaxUint256", ()=>(0, _numbersJs.MaxUint256));
  parcelHelpers.export(exports, "MinInt256", ()=>(0, _numbersJs.MinInt256));
  parcelHelpers.export(exports, "MaxInt256", ()=>(0, _numbersJs.MaxInt256));
  parcelHelpers.export(exports, "EtherSymbol", ()=>(0, _stringsJs.EtherSymbol));
  parcelHelpers.export(exports, "MessagePrefix", ()=>(0, _stringsJs.MessagePrefix));
  var _addressesJs = require("./addresses.js");
  var _hashesJs = require("./hashes.js");
  var _numbersJs = require("./numbers.js");
  var _stringsJs = require("./strings.js");
  
  },{"./addresses.js":"9s4Q2","./hashes.js":"8V6OF","./numbers.js":"bdJlZ","./strings.js":"cMh1H","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"9s4Q2":[function(require,module,exports) {
  /**
   *  A constant for the zero address.
   *
   *  (**i.e.** ``"0x0000000000000000000000000000000000000000"``)
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "ZeroAddress", ()=>ZeroAddress);
  const ZeroAddress = "0x0000000000000000000000000000000000000000";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"8V6OF":[function(require,module,exports) {
  /**
   *  A constant for the zero hash.
   *
   *  (**i.e.** ``"0x0000000000000000000000000000000000000000000000000000000000000000"``)
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "ZeroHash", ()=>ZeroHash);
  const ZeroHash = "0x0000000000000000000000000000000000000000000000000000000000000000";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"bdJlZ":[function(require,module,exports) {
  /**
   *  A constant for the order N for the secp256k1 curve.
   *
   *  (**i.e.** ``0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141n``)
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "N", ()=>N);
  parcelHelpers.export(exports, "WeiPerEther", ()=>WeiPerEther);
  parcelHelpers.export(exports, "MaxUint256", ()=>MaxUint256);
  parcelHelpers.export(exports, "MinInt256", ()=>MinInt256);
  parcelHelpers.export(exports, "MaxInt256", ()=>MaxInt256);
  const N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
  const WeiPerEther = BigInt("1000000000000000000");
  const MaxUint256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  const MinInt256 = BigInt("0x8000000000000000000000000000000000000000000000000000000000000000") * BigInt(-1);
  const MaxInt256 = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"cMh1H":[function(require,module,exports) {
  // NFKC (composed)             // (decomposed)
  /**
   *  A constant for the ether symbol (normalized using NFKC).
   *
   *  (**i.e.** ``"\\u039e"``)
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "EtherSymbol", ()=>EtherSymbol);
  parcelHelpers.export(exports, "MessagePrefix", ()=>MessagePrefix);
  const EtherSymbol = "Ξ"; // "\uD835\uDF63";
  const MessagePrefix = "\x19Ethereum Signed Message:\n";
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"d0FMG":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  // http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
  /**
   *  Returns the address that would result from a ``CREATE`` for %%tx%%.
   *
   *  This can be used to compute the address a contract will be
   *  deployed to by an EOA when sending a deployment transaction (i.e.
   *  when the ``to`` address is ``null``).
   *
   *  This can also be used to compute the address a contract will be
   *  deployed to by a contract, by using the contract's address as the
   *  ``to`` and the contract's nonce.
   *
   *  @example
   *    from = "0x8ba1f109551bD432803012645Ac136ddd64DBA72";
   *    nonce = 5;
   *
   *    getCreateAddress({ from, nonce });
   *    //_result:
   */ parcelHelpers.export(exports, "getCreateAddress", ()=>getCreateAddress);
  /**
   *  Returns the address that would result from a ``CREATE2`` operation
   *  with the given %%from%%, %%salt%% and %%initCodeHash%%.
   *
   *  To compute the %%initCodeHash%% from a contract's init code, use
   *  the [[keccak256]] function.
   *
   *  For a quick overview and example of ``CREATE2``, see [[link-ricmoo-wisps]].
   *
   *  @example
   *    // The address of the contract
   *    from = "0x8ba1f109551bD432803012645Ac136ddd64DBA72"
   *
   *    // The salt
   *    salt = id("HelloWorld")
   *
   *    // The hash of the initCode
   *    initCode = "0x6394198df16000526103ff60206004601c335afa6040516060f3";
   *    initCodeHash = keccak256(initCode)
   *
   *    getCreate2Address(from, salt, initCodeHash)
   *    //_result:
   */ parcelHelpers.export(exports, "getCreate2Address", ()=>getCreate2Address);
  var _indexJs = require("../crypto/index.js");
  var _indexJs1 = require("../utils/index.js");
  var _addressJs = require("./address.js");
  function getCreateAddress(tx) {
      const from = (0, _addressJs.getAddress)(tx.from);
      const nonce = (0, _indexJs1.getBigInt)(tx.nonce, "tx.nonce");
      let nonceHex = nonce.toString(16);
      if (nonceHex === "0") nonceHex = "0x";
      else if (nonceHex.length % 2) nonceHex = "0x0" + nonceHex;
      else nonceHex = "0x" + nonceHex;
      return (0, _addressJs.getAddress)((0, _indexJs1.dataSlice)((0, _indexJs.keccak256)((0, _indexJs1.encodeRlp)([
          from,
          nonceHex
      ])), 12));
  }
  function getCreate2Address(_from, _salt, _initCodeHash) {
      const from = (0, _addressJs.getAddress)(_from);
      const salt = (0, _indexJs1.getBytes)(_salt, "salt");
      const initCodeHash = (0, _indexJs1.getBytes)(_initCodeHash, "initCodeHash");
      (0, _indexJs1.assertArgument)(salt.length === 32, "salt must be 32 bytes", "salt", _salt);
      (0, _indexJs1.assertArgument)(initCodeHash.length === 32, "initCodeHash must be 32 bytes", "initCodeHash", _initCodeHash);
      return (0, _addressJs.getAddress)((0, _indexJs1.dataSlice)((0, _indexJs.keccak256)((0, _indexJs1.concat)([
          "0xff",
          from,
          salt,
          initCodeHash
      ])), 12));
  }
  
  },{"../crypto/index.js":"4oi1q","../utils/index.js":"jGhd9","./address.js":"6vLVl","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"k8tPM":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Returns true if %%value%% is an object which implements the
   *  [[Addressable]] interface.
   *
   *  @example:
   *    // Wallets and AbstractSigner sub-classes
   *    isAddressable(Wallet.createRandom())
   *    //_result:
   *
   *    // Contracts
   *    contract = new Contract("dai.tokens.ethers.eth", [ ], provider)
   *    isAddressable(contract)
   *    //_result:
   */ parcelHelpers.export(exports, "isAddressable", ()=>isAddressable);
  /**
   *  Returns true if %%value%% is a valid address.
   *
   *  @example:
   *    // Valid address
   *    isAddress("0x8ba1f109551bD432803012645Ac136ddd64DBA72")
   *    //_result:
   *
   *    // Valid ICAP address
   *    isAddress("XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36")
   *    //_result:
   *
   *    // Invalid checksum
   *    isAddress("0x8Ba1f109551bD432803012645Ac136ddd64DBa72")
   *    //_result:
   *
   *    // Invalid ICAP checksum
   *    isAddress("0x8Ba1f109551bD432803012645Ac136ddd64DBA72")
   *    //_result:
   *
   *    // Not an address (an ENS name requires a provided and an
   *    // asynchronous API to access)
   *    isAddress("ricmoo.eth")
   *    //_result:
   */ parcelHelpers.export(exports, "isAddress", ()=>isAddress);
  /**
   *  Resolves to an address for the %%target%%, which may be any
   *  supported address type, an [[Addressable]] or a Promise which
   *  resolves to an address.
   *
   *  If an ENS name is provided, but that name has not been correctly
   *  configured a [[UnconfiguredNameError]] is thrown.
   *
   *  @example:
   *    addr = "0x6B175474E89094C44Da98b954EedeAC495271d0F"
   *
   *    // Addresses are return synchronously
   *    resolveAddress(addr, provider)
   *    //_result:
   *
   *    // Address promises are resolved asynchronously
   *    resolveAddress(Promise.resolve(addr))
   *    //_result:
   *
   *    // ENS names are resolved asynchronously
   *    resolveAddress("dai.tokens.ethers.eth", provider)
   *    //_result:
   *
   *    // Addressable objects are resolved asynchronously
   *    contract = new Contract(addr, [ ])
   *    resolveAddress(contract, provider)
   *    //_result:
   *
   *    // Unconfigured ENS names reject
   *    resolveAddress("nothing-here.ricmoo.eth", provider)
   *    //_error:
   *
   *    // ENS names require a NameResolver object passed in
   *    // (notice the provider was omitted)
   *    resolveAddress("nothing-here.ricmoo.eth")
   *    //_error:
   */ parcelHelpers.export(exports, "resolveAddress", ()=>resolveAddress);
  var _indexJs = require("../utils/index.js");
  var _addressJs = require("./address.js");
  function isAddressable(value) {
      return value && typeof value.getAddress === "function";
  }
  function isAddress(value) {
      try {
          (0, _addressJs.getAddress)(value);
          return true;
      } catch (error) {}
      return false;
  }
  async function checkAddress(target, promise) {
      const result = await promise;
      if (result == null || result === "0x0000000000000000000000000000000000000000") {
          (0, _indexJs.assert)(typeof target !== "string", "unconfigured name", "UNCONFIGURED_NAME", {
              value: target
          });
          (0, _indexJs.assertArgument)(false, "invalid AddressLike value; did not resolve to a value address", "target", target);
      }
      return (0, _addressJs.getAddress)(result);
  }
  function resolveAddress(target, resolver) {
      if (typeof target === "string") {
          if (target.match(/^0x[0-9a-f]{40}$/i)) return (0, _addressJs.getAddress)(target);
          (0, _indexJs.assert)(resolver != null, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", {
              operation: "resolveName"
          });
          return checkAddress(target, resolver.resolveName(target));
      } else if (isAddressable(target)) return checkAddress(target, target.getAddress());
      else if (target && typeof target.then === "function") return checkAddress(target, target);
      (0, _indexJs.assertArgument)(false, "unsupported addressable value", "target", target);
  }
  
  },{"../utils/index.js":"jGhd9","./address.js":"6vLVl","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"6W7uu":[function(require,module,exports) {
  /**
   *  A Typed object allows a value to have its type explicitly
   *  specified.
   *
   *  For example, in Solidity, the value ``45`` could represent a
   *  ``uint8`` or a ``uint256``. The value ``0x1234`` could represent
   *  a ``bytes2`` or ``bytes``.
   *
   *  Since JavaScript has no meaningful way to explicitly inform any
   *  APIs which what the type is, this allows transparent interoperation
   *  with Soldity.
   *
   *  @_subsection: api/abi:Typed Values
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "Typed", ()=>Typed);
  var _indexJs = require("../utils/index.js");
  const _gaurd = {};
  function n(value, width) {
      let signed = false;
      if (width < 0) {
          signed = true;
          width *= -1;
      }
      // @TODO: Check range is valid for value
      return new Typed(_gaurd, `${signed ? "" : "u"}int${width}`, value, {
          signed,
          width
      });
  }
  function b(value, size) {
      // @TODO: Check range is valid for value
      return new Typed(_gaurd, `bytes${size ? size : ""}`, value, {
          size
      });
  }
  const _typedSymbol = Symbol.for("_ethers_typed");
  class Typed {
      type;
      value;
      #options;
      _typedSymbol;
      constructor(gaurd, type, value, options){
          if (options == null) options = null;
          (0, _indexJs.assertPrivate)(_gaurd, gaurd, "Typed");
          (0, _indexJs.defineProperties)(this, {
              _typedSymbol,
              type,
              value
          });
          this.#options = options;
          // Check the value is valid
          this.format();
      }
      format() {
          if (this.type === "array") throw new Error("");
          else if (this.type === "dynamicArray") throw new Error("");
          else if (this.type === "tuple") return `tuple(${this.value.map((v)=>v.format()).join(",")})`;
          return this.type;
      }
      defaultValue() {
          return 0;
      }
      minValue() {
          return 0;
      }
      maxValue() {
          return 0;
      }
      isBigInt() {
          return !!this.type.match(/^u?int[0-9]+$/);
      }
      isData() {
          return this.type.startsWith("bytes");
      }
      isString() {
          return this.type === "string";
      }
      get tupleName() {
          if (this.type !== "tuple") throw TypeError("not a tuple");
          return this.#options;
      }
      // Returns the length of this type as an array
      // - `null` indicates the length is unforced, it could be dynamic
      // - `-1` indicates the length is dynamic
      // - any other value indicates it is a static array and is its length
      get arrayLength() {
          if (this.type !== "array") throw TypeError("not an array");
          if (this.#options === true) return -1;
          if (this.#options === false) return this.value.length;
          return null;
      }
      static from(type, value) {
          return new Typed(_gaurd, type, value);
      }
      static uint8(v) {
          return n(v, 8);
      }
      static uint16(v) {
          return n(v, 16);
      }
      static uint24(v) {
          return n(v, 24);
      }
      static uint32(v) {
          return n(v, 32);
      }
      static uint40(v) {
          return n(v, 40);
      }
      static uint48(v) {
          return n(v, 48);
      }
      static uint56(v) {
          return n(v, 56);
      }
      static uint64(v) {
          return n(v, 64);
      }
      static uint72(v) {
          return n(v, 72);
      }
      static uint80(v) {
          return n(v, 80);
      }
      static uint88(v) {
          return n(v, 88);
      }
      static uint96(v) {
          return n(v, 96);
      }
      static uint104(v) {
          return n(v, 104);
      }
      static uint112(v) {
          return n(v, 112);
      }
      static uint120(v) {
          return n(v, 120);
      }
      static uint128(v) {
          return n(v, 128);
      }
      static uint136(v) {
          return n(v, 136);
      }
      static uint144(v) {
          return n(v, 144);
      }
      static uint152(v) {
          return n(v, 152);
      }
      static uint160(v) {
          return n(v, 160);
      }
      static uint168(v) {
          return n(v, 168);
      }
      static uint176(v) {
          return n(v, 176);
      }
      static uint184(v) {
          return n(v, 184);
      }
      static uint192(v) {
          return n(v, 192);
      }
      static uint200(v) {
          return n(v, 200);
      }
      static uint208(v) {
          return n(v, 208);
      }
      static uint216(v) {
          return n(v, 216);
      }
      static uint224(v) {
          return n(v, 224);
      }
      static uint232(v) {
          return n(v, 232);
      }
      static uint240(v) {
          return n(v, 240);
      }
      static uint248(v) {
          return n(v, 248);
      }
      static uint256(v) {
          return n(v, 256);
      }
      static uint(v) {
          return n(v, 256);
      }
      static int8(v) {
          return n(v, -8);
      }
      static int16(v) {
          return n(v, -16);
      }
      static int24(v) {
          return n(v, -24);
      }
      static int32(v) {
          return n(v, -32);
      }
      static int40(v) {
          return n(v, -40);
      }
      static int48(v) {
          return n(v, -48);
      }
      static int56(v) {
          return n(v, -56);
      }
      static int64(v) {
          return n(v, -64);
      }
      static int72(v) {
          return n(v, -72);
      }
      static int80(v) {
          return n(v, -80);
      }
      static int88(v) {
          return n(v, -88);
      }
      static int96(v) {
          return n(v, -96);
      }
      static int104(v) {
          return n(v, -104);
      }
      static int112(v) {
          return n(v, -112);
      }
      static int120(v) {
          return n(v, -120);
      }
      static int128(v) {
          return n(v, -128);
      }
      static int136(v) {
          return n(v, -136);
      }
      static int144(v) {
          return n(v, -144);
      }
      static int152(v) {
          return n(v, -152);
      }
      static int160(v) {
          return n(v, -160);
      }
      static int168(v) {
          return n(v, -168);
      }
      static int176(v) {
          return n(v, -176);
      }
      static int184(v) {
          return n(v, -184);
      }
      static int192(v) {
          return n(v, -192);
      }
      static int200(v) {
          return n(v, -200);
      }
      static int208(v) {
          return n(v, -208);
      }
      static int216(v) {
          return n(v, -216);
      }
      static int224(v) {
          return n(v, -224);
      }
      static int232(v) {
          return n(v, -232);
      }
      static int240(v) {
          return n(v, -240);
      }
      static int248(v) {
          return n(v, -248);
      }
      static int256(v) {
          return n(v, -256);
      }
      static int(v) {
          return n(v, -256);
      }
      static bytes1(v) {
          return b(v, 1);
      }
      static bytes2(v) {
          return b(v, 2);
      }
      static bytes3(v) {
          return b(v, 3);
      }
      static bytes4(v) {
          return b(v, 4);
      }
      static bytes5(v) {
          return b(v, 5);
      }
      static bytes6(v) {
          return b(v, 6);
      }
      static bytes7(v) {
          return b(v, 7);
      }
      static bytes8(v) {
          return b(v, 8);
      }
      static bytes9(v) {
          return b(v, 9);
      }
      static bytes10(v) {
          return b(v, 10);
      }
      static bytes11(v) {
          return b(v, 11);
      }
      static bytes12(v) {
          return b(v, 12);
      }
      static bytes13(v) {
          return b(v, 13);
      }
      static bytes14(v) {
          return b(v, 14);
      }
      static bytes15(v) {
          return b(v, 15);
      }
      static bytes16(v) {
          return b(v, 16);
      }
      static bytes17(v) {
          return b(v, 17);
      }
      static bytes18(v) {
          return b(v, 18);
      }
      static bytes19(v) {
          return b(v, 19);
      }
      static bytes20(v) {
          return b(v, 20);
      }
      static bytes21(v) {
          return b(v, 21);
      }
      static bytes22(v) {
          return b(v, 22);
      }
      static bytes23(v) {
          return b(v, 23);
      }
      static bytes24(v) {
          return b(v, 24);
      }
      static bytes25(v) {
          return b(v, 25);
      }
      static bytes26(v) {
          return b(v, 26);
      }
      static bytes27(v) {
          return b(v, 27);
      }
      static bytes28(v) {
          return b(v, 28);
      }
      static bytes29(v) {
          return b(v, 29);
      }
      static bytes30(v) {
          return b(v, 30);
      }
      static bytes31(v) {
          return b(v, 31);
      }
      static bytes32(v) {
          return b(v, 32);
      }
      static address(v) {
          return new Typed(_gaurd, "address", v);
      }
      static bool(v) {
          return new Typed(_gaurd, "bool", !!v);
      }
      static bytes(v) {
          return new Typed(_gaurd, "bytes", v);
      }
      static string(v) {
          return new Typed(_gaurd, "string", v);
      }
      static array(v, dynamic) {
          throw new Error("not implemented yet");
      }
      static tuple(v, name) {
          throw new Error("not implemented yet");
      }
      static overrides(v) {
          return new Typed(_gaurd, "overrides", Object.assign({}, v));
      }
      /**
       *  Returns true only if %%value%% is a [[Typed]] instance.
       */ static isTyped(value) {
          return value && value._typedSymbol === _typedSymbol;
      }
      /**
       *  If the value is a [[Typed]] instance, validates the underlying value
       *  and returns it, otherwise returns value directly.
       *
       *  This is useful for functions that with to accept either a [[Typed]]
       *  object or values.
       */ static dereference(value, type) {
          if (Typed.isTyped(value)) {
              if (value.type !== type) throw new Error(`invalid type: expecetd ${type}, got ${value.type}`);
              return value.value;
          }
          return value;
      }
  }
  
  },{"../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"5zy70":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  @_ignore
   */ parcelHelpers.export(exports, "pack", ()=>pack);
  /**
   *  @_ignore
   */ parcelHelpers.export(exports, "unpack", ()=>unpack);
  /**
   *  @_ignore
   */ parcelHelpers.export(exports, "ArrayCoder", ()=>ArrayCoder);
  var _indexJs = require("../../utils/index.js");
  var _typedJs = require("../typed.js");
  var _abstractCoderJs = require("./abstract-coder.js");
  var _anonymousJs = require("./anonymous.js");
  function pack(writer, coders, values) {
      let arrayValues = [];
      if (Array.isArray(values)) arrayValues = values;
      else if (values && typeof values === "object") {
          let unique = {};
          arrayValues = coders.map((coder)=>{
              const name = coder.localName;
              (0, _indexJs.assert)(name, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", {
                  argument: "values",
                  info: {
                      coder
                  },
                  value: values
              });
              (0, _indexJs.assert)(!unique[name], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", {
                  argument: "values",
                  info: {
                      coder
                  },
                  value: values
              });
              unique[name] = true;
              return values[name];
          });
      } else (0, _indexJs.assertArgument)(false, "invalid tuple value", "tuple", values);
      (0, _indexJs.assertArgument)(coders.length === arrayValues.length, "types/value length mismatch", "tuple", values);
      let staticWriter = new (0, _abstractCoderJs.Writer)();
      let dynamicWriter = new (0, _abstractCoderJs.Writer)();
      let updateFuncs = [];
      coders.forEach((coder, index)=>{
          let value = arrayValues[index];
          if (coder.dynamic) {
              // Get current dynamic offset (for the future pointer)
              let dynamicOffset = dynamicWriter.length;
              // Encode the dynamic value into the dynamicWriter
              coder.encode(dynamicWriter, value);
              // Prepare to populate the correct offset once we are done
              let updateFunc = staticWriter.writeUpdatableValue();
              updateFuncs.push((baseOffset)=>{
                  updateFunc(baseOffset + dynamicOffset);
              });
          } else coder.encode(staticWriter, value);
      });
      // Backfill all the dynamic offsets, now that we know the static length
      updateFuncs.forEach((func)=>{
          func(staticWriter.length);
      });
      let length = writer.appendWriter(staticWriter);
      length += writer.appendWriter(dynamicWriter);
      return length;
  }
  function unpack(reader, coders) {
      let values = [];
      let keys = [];
      // A reader anchored to this base
      let baseReader = reader.subReader(0);
      coders.forEach((coder)=>{
          let value = null;
          if (coder.dynamic) {
              let offset = reader.readIndex();
              let offsetReader = baseReader.subReader(offset);
              try {
                  value = coder.decode(offsetReader);
              } catch (error) {
                  // Cannot recover from this
                  if ((0, _indexJs.isError)(error, "BUFFER_OVERRUN")) throw error;
                  value = error;
                  value.baseType = coder.name;
                  value.name = coder.localName;
                  value.type = coder.type;
              }
          } else try {
              value = coder.decode(reader);
          } catch (error) {
              // Cannot recover from this
              if ((0, _indexJs.isError)(error, "BUFFER_OVERRUN")) throw error;
              value = error;
              value.baseType = coder.name;
              value.name = coder.localName;
              value.type = coder.type;
          }
          if (value == undefined) throw new Error("investigate");
          values.push(value);
          keys.push(coder.localName || null);
      });
      return (0, _abstractCoderJs.Result).fromItems(values, keys);
  }
  class ArrayCoder extends (0, _abstractCoderJs.Coder) {
      coder;
      length;
      constructor(coder, length, localName){
          const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
          const dynamic = length === -1 || coder.dynamic;
          super("array", type, localName, dynamic);
          (0, _indexJs.defineProperties)(this, {
              coder,
              length
          });
      }
      defaultValue() {
          // Verifies the child coder is valid (even if the array is dynamic or 0-length)
          const defaultChild = this.coder.defaultValue();
          const result = [];
          for(let i = 0; i < this.length; i++)result.push(defaultChild);
          return result;
      }
      encode(writer, _value) {
          const value = (0, _typedJs.Typed).dereference(_value, "array");
          if (!Array.isArray(value)) this._throwError("expected array value", value);
          let count = this.length;
          if (count === -1) {
              count = value.length;
              writer.writeValue(value.length);
          }
          (0, _indexJs.assertArgumentCount)(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
          let coders = [];
          for(let i = 0; i < value.length; i++)coders.push(this.coder);
          return pack(writer, coders, value);
      }
      decode(reader) {
          let count = this.length;
          if (count === -1) {
              count = reader.readIndex();
              // Check that there is *roughly* enough data to ensure
              // stray random data is not being read as a length. Each
              // slot requires at least 32 bytes for their value (or 32
              // bytes as a link to the data). This could use a much
              // tighter bound, but we are erroring on the side of safety.
              (0, _indexJs.assert)(count * (0, _abstractCoderJs.WordSize) <= reader.dataLength, "insufficient data length", "BUFFER_OVERRUN", {
                  buffer: reader.bytes,
                  offset: count * (0, _abstractCoderJs.WordSize),
                  length: reader.dataLength
              });
          }
          let coders = [];
          for(let i = 0; i < count; i++)coders.push(new (0, _anonymousJs.AnonymousCoder)(this.coder));
          return unpack(reader, coders);
      }
  }
  
  },{"../../utils/index.js":"jGhd9","../typed.js":"6W7uu","./abstract-coder.js":"7wibj","./anonymous.js":"6Jigd","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"6Jigd":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Clones the functionality of an existing Coder, but without a localName
   *
   *  @_ignore
   */ parcelHelpers.export(exports, "AnonymousCoder", ()=>AnonymousCoder);
  var _abstractCoderJs = require("./abstract-coder.js");
  class AnonymousCoder extends (0, _abstractCoderJs.Coder) {
      coder;
      constructor(coder){
          super(coder.name, coder.type, "_", coder.dynamic);
          this.coder = coder;
      }
      defaultValue() {
          return this.coder.defaultValue();
      }
      encode(writer, value) {
          return this.coder.encode(writer, value);
      }
      decode(reader) {
          return this.coder.decode(reader);
      }
  }
  
  },{"./abstract-coder.js":"7wibj","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"el6Fi":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  @_ignore
   */ parcelHelpers.export(exports, "BooleanCoder", ()=>BooleanCoder);
  var _typedJs = require("../typed.js");
  var _abstractCoderJs = require("./abstract-coder.js");
  class BooleanCoder extends (0, _abstractCoderJs.Coder) {
      constructor(localName){
          super("bool", "bool", localName, false);
      }
      defaultValue() {
          return false;
      }
      encode(writer, _value) {
          const value = (0, _typedJs.Typed).dereference(_value, "bool");
          return writer.writeValue(value ? 1 : 0);
      }
      decode(reader) {
          return !!reader.readValue();
      }
  }
  
  },{"../typed.js":"6W7uu","./abstract-coder.js":"7wibj","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"kW01a":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  @_ignore
   */ parcelHelpers.export(exports, "DynamicBytesCoder", ()=>DynamicBytesCoder);
  /**
   *  @_ignore
   */ parcelHelpers.export(exports, "BytesCoder", ()=>BytesCoder);
  var _indexJs = require("../../utils/index.js");
  var _abstractCoderJs = require("./abstract-coder.js");
  class DynamicBytesCoder extends (0, _abstractCoderJs.Coder) {
      constructor(type, localName){
          super(type, type, localName, true);
      }
      defaultValue() {
          return "0x";
      }
      encode(writer, value) {
          value = (0, _indexJs.getBytesCopy)(value);
          let length = writer.writeValue(value.length);
          length += writer.writeBytes(value);
          return length;
      }
      decode(reader) {
          return reader.readBytes(reader.readIndex(), true);
      }
  }
  class BytesCoder extends DynamicBytesCoder {
      constructor(localName){
          super("bytes", localName);
      }
      decode(reader) {
          return (0, _indexJs.hexlify)(super.decode(reader));
      }
  }
  
  },{"../../utils/index.js":"jGhd9","./abstract-coder.js":"7wibj","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"as9D6":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  @_ignore
   */ parcelHelpers.export(exports, "FixedBytesCoder", ()=>FixedBytesCoder);
  var _indexJs = require("../../utils/index.js");
  var _typedJs = require("../typed.js");
  var _abstractCoderJs = require("./abstract-coder.js");
  class FixedBytesCoder extends (0, _abstractCoderJs.Coder) {
      size;
      constructor(size, localName){
          let name = "bytes" + String(size);
          super(name, name, localName, false);
          (0, _indexJs.defineProperties)(this, {
              size
          }, {
              size: "number"
          });
      }
      defaultValue() {
          return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
      }
      encode(writer, _value) {
          let data = (0, _indexJs.getBytesCopy)((0, _typedJs.Typed).dereference(_value, this.type));
          if (data.length !== this.size) this._throwError("incorrect data length", _value);
          return writer.writeBytes(data);
      }
      decode(reader) {
          return (0, _indexJs.hexlify)(reader.readBytes(this.size));
      }
  }
  
  },{"../../utils/index.js":"jGhd9","../typed.js":"6W7uu","./abstract-coder.js":"7wibj","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"jCQSU":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  @_ignore
   */ parcelHelpers.export(exports, "NullCoder", ()=>NullCoder);
  var _abstractCoderJs = require("./abstract-coder.js");
  const Empty = new Uint8Array([]);
  class NullCoder extends (0, _abstractCoderJs.Coder) {
      constructor(localName){
          super("null", "", localName, false);
      }
      defaultValue() {
          return null;
      }
      encode(writer, value) {
          if (value != null) this._throwError("not null", value);
          return writer.writeBytes(Empty);
      }
      decode(reader) {
          reader.readBytes(0);
          return null;
      }
  }
  
  },{"./abstract-coder.js":"7wibj","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"ic9Sg":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  @_ignore
   */ parcelHelpers.export(exports, "NumberCoder", ()=>NumberCoder);
  var _indexJs = require("../../utils/index.js");
  var _typedJs = require("../typed.js");
  var _abstractCoderJs = require("./abstract-coder.js");
  const BN_0 = BigInt(0);
  const BN_1 = BigInt(1);
  const BN_MAX_UINT256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  class NumberCoder extends (0, _abstractCoderJs.Coder) {
      size;
      signed;
      constructor(size, signed, localName){
          const name = (signed ? "int" : "uint") + size * 8;
          super(name, name, localName, false);
          (0, _indexJs.defineProperties)(this, {
              size,
              signed
          }, {
              size: "number",
              signed: "boolean"
          });
      }
      defaultValue() {
          return 0;
      }
      encode(writer, _value) {
          let value = (0, _indexJs.getBigInt)((0, _typedJs.Typed).dereference(_value, this.type));
          // Check bounds are safe for encoding
          let maxUintValue = (0, _indexJs.mask)(BN_MAX_UINT256, (0, _abstractCoderJs.WordSize) * 8);
          if (this.signed) {
              let bounds = (0, _indexJs.mask)(maxUintValue, this.size * 8 - 1);
              if (value > bounds || value < -(bounds + BN_1)) this._throwError("value out-of-bounds", _value);
              value = (0, _indexJs.toTwos)(value, 8 * (0, _abstractCoderJs.WordSize));
          } else if (value < BN_0 || value > (0, _indexJs.mask)(maxUintValue, this.size * 8)) this._throwError("value out-of-bounds", _value);
          return writer.writeValue(value);
      }
      decode(reader) {
          let value = (0, _indexJs.mask)(reader.readValue(), this.size * 8);
          if (this.signed) value = (0, _indexJs.fromTwos)(value, this.size * 8);
          return value;
      }
  }
  
  },{"../../utils/index.js":"jGhd9","../typed.js":"6W7uu","./abstract-coder.js":"7wibj","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"5GRt5":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  @_ignore
   */ parcelHelpers.export(exports, "StringCoder", ()=>StringCoder);
  var _utf8Js = require("../../utils/utf8.js");
  var _typedJs = require("../typed.js");
  var _bytesJs = require("./bytes.js");
  class StringCoder extends (0, _bytesJs.DynamicBytesCoder) {
      constructor(localName){
          super("string", localName);
      }
      defaultValue() {
          return "";
      }
      encode(writer, _value) {
          return super.encode(writer, (0, _utf8Js.toUtf8Bytes)((0, _typedJs.Typed).dereference(_value, "string")));
      }
      decode(reader) {
          return (0, _utf8Js.toUtf8String)(super.decode(reader));
      }
  }
  
  },{"../../utils/utf8.js":"fOXOv","../typed.js":"6W7uu","./bytes.js":"kW01a","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"4lb0d":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  @_ignore
   */ parcelHelpers.export(exports, "TupleCoder", ()=>TupleCoder);
  var _propertiesJs = require("../../utils/properties.js");
  var _typedJs = require("../typed.js");
  var _abstractCoderJs = require("./abstract-coder.js");
  var _arrayJs = require("./array.js");
  class TupleCoder extends (0, _abstractCoderJs.Coder) {
      coders;
      constructor(coders, localName){
          let dynamic = false;
          const types = [];
          coders.forEach((coder)=>{
              if (coder.dynamic) dynamic = true;
              types.push(coder.type);
          });
          const type = "tuple(" + types.join(",") + ")";
          super("tuple", type, localName, dynamic);
          (0, _propertiesJs.defineProperties)(this, {
              coders: Object.freeze(coders.slice())
          });
      }
      defaultValue() {
          const values = [];
          this.coders.forEach((coder)=>{
              values.push(coder.defaultValue());
          });
          // We only output named properties for uniquely named coders
          const uniqueNames = this.coders.reduce((accum, coder)=>{
              const name = coder.localName;
              if (name) {
                  if (!accum[name]) accum[name] = 0;
                  accum[name]++;
              }
              return accum;
          }, {});
          // Add named values
          this.coders.forEach((coder, index)=>{
              let name = coder.localName;
              if (!name || uniqueNames[name] !== 1) return;
              if (name === "length") name = "_length";
              if (values[name] != null) return;
              values[name] = values[index];
          });
          return Object.freeze(values);
      }
      encode(writer, _value) {
          const value = (0, _typedJs.Typed).dereference(_value, "tuple");
          return (0, _arrayJs.pack)(writer, this.coders, value);
      }
      decode(reader) {
          return (0, _arrayJs.unpack)(reader, this.coders);
      }
  }
  
  },{"../../utils/properties.js":"axai0","../typed.js":"6W7uu","./abstract-coder.js":"7wibj","./array.js":"5zy70","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"hcAow":[function(require,module,exports) {
  /**
   *  About frgaments...
   *
   *  @_subsection api/abi/abi-coder:Fragments  [about-fragments]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Each input and output of a [[Fragment]] is an Array of **PAramType**.
   */ parcelHelpers.export(exports, "ParamType", ()=>ParamType);
  /**
   *  An abstract class to represent An individual fragment from a parse ABI.
   */ parcelHelpers.export(exports, "Fragment", ()=>Fragment);
  /**
   *  An abstract class to represent An individual fragment
   *  which has a name from a parse ABI.
   */ parcelHelpers.export(exports, "NamedFragment", ()=>NamedFragment);
  /**
   *  A Fragment which represents a //Custom Error//.
   */ parcelHelpers.export(exports, "ErrorFragment", ()=>ErrorFragment);
  /**
   *  A Fragment which represents an Event.
   */ parcelHelpers.export(exports, "EventFragment", ()=>EventFragment);
  /**
   *  A Fragment which represents a constructor.
   */ parcelHelpers.export(exports, "ConstructorFragment", ()=>ConstructorFragment);
  /**
   *  A Fragment which represents a method.
   */ parcelHelpers.export(exports, "FallbackFragment", ()=>FallbackFragment);
  /**
   *  A Fragment which represents a method.
   */ parcelHelpers.export(exports, "FunctionFragment", ()=>FunctionFragment);
  /**
   *  A Fragment which represents a structure.
   */ parcelHelpers.export(exports, "StructFragment", ()=>StructFragment);
  var _indexJs = require("../utils/index.js");
  var _indexJs1 = require("../hash/index.js");
  // [ "a", "b" ] => { "a": 1, "b": 1 }
  function setify(items) {
      const result = new Set();
      items.forEach((k)=>result.add(k));
      return Object.freeze(result);
  }
  // Visibility Keywords
  const _kwVisib = "constant external internal payable private public pure view";
  const KwVisib = setify(_kwVisib.split(" "));
  const _kwTypes = "constructor error event fallback function receive struct";
  const KwTypes = setify(_kwTypes.split(" "));
  const _kwModifiers = "calldata memory storage payable indexed";
  const KwModifiers = setify(_kwModifiers.split(" "));
  const _kwOther = "tuple returns";
  // All Keywords
  const _keywords = [
      _kwTypes,
      _kwModifiers,
      _kwOther,
      _kwVisib
  ].join(" ");
  const Keywords = setify(_keywords.split(" "));
  // Single character tokens
  const SimpleTokens = {
      "(": "OPEN_PAREN",
      ")": "CLOSE_PAREN",
      "[": "OPEN_BRACKET",
      "]": "CLOSE_BRACKET",
      ",": "COMMA",
      "@": "AT"
  };
  // Parser regexes to consume the next token
  const regexWhitespacePrefix = new RegExp("^(\\s*)");
  const regexNumberPrefix = new RegExp("^([0-9]+)");
  const regexIdPrefix = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)");
  // Parser regexs to check validity
  const regexId = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$");
  const regexType = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");
  class TokenString {
      #offset;
      #tokens;
      get offset() {
          return this.#offset;
      }
      get length() {
          return this.#tokens.length - this.#offset;
      }
      constructor(tokens){
          this.#offset = 0;
          this.#tokens = tokens.slice();
      }
      clone() {
          return new TokenString(this.#tokens);
      }
      reset() {
          this.#offset = 0;
      }
      #subTokenString(from = 0, to = 0) {
          return new TokenString(this.#tokens.slice(from, to).map((t)=>{
              return Object.freeze(Object.assign({}, t, {
                  match: t.match - from,
                  linkBack: t.linkBack - from,
                  linkNext: t.linkNext - from
              }));
          }));
      }
      // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens
      popKeyword(allowed) {
          const top = this.peek();
          if (top.type !== "KEYWORD" || !allowed.has(top.text)) throw new Error(`expected keyword ${top.text}`);
          return this.pop().text;
      }
      // Pops and returns the value of the next token if it is `type`; throws if out of tokens
      popType(type) {
          if (this.peek().type !== type) throw new Error(`expected ${type}; got ${JSON.stringify(this.peek())}`);
          return this.pop().text;
      }
      // Pops and returns a "(" TOKENS ")"
      popParen() {
          const top = this.peek();
          if (top.type !== "OPEN_PAREN") throw new Error("bad start");
          const result = this.#subTokenString(this.#offset + 1, top.match + 1);
          this.#offset = top.match + 1;
          return result;
      }
      // Pops and returns the items within "(" ITEM1 "," ITEM2 "," ... ")"
      popParams() {
          const top = this.peek();
          if (top.type !== "OPEN_PAREN") throw new Error("bad start");
          const result = [];
          while(this.#offset < top.match - 1){
              const link = this.peek().linkNext;
              result.push(this.#subTokenString(this.#offset + 1, link));
              this.#offset = link;
          }
          this.#offset = top.match + 1;
          return result;
      }
      // Returns the top Token, throwing if out of tokens
      peek() {
          if (this.#offset >= this.#tokens.length) throw new Error("out-of-bounds");
          return this.#tokens[this.#offset];
      }
      // Returns the next value, if it is a keyword in `allowed`
      peekKeyword(allowed) {
          const top = this.peekType("KEYWORD");
          return top != null && allowed.has(top) ? top : null;
      }
      // Returns the value of the next token if it is `type`
      peekType(type) {
          if (this.length === 0) return null;
          const top = this.peek();
          return top.type === type ? top.text : null;
      }
      // Returns the next token; throws if out of tokens
      pop() {
          const result = this.peek();
          this.#offset++;
          return result;
      }
      toString() {
          const tokens = [];
          for(let i = this.#offset; i < this.#tokens.length; i++){
              const token = this.#tokens[i];
              tokens.push(`${token.type}:${token.text}`);
          }
          return `<TokenString ${tokens.join(" ")}>`;
      }
  }
  function lex(text) {
      const tokens = [];
      const throwError = (message)=>{
          const token = offset < text.length ? JSON.stringify(text[offset]) : "$EOI";
          throw new Error(`invalid token ${token} at ${offset}: ${message}`);
      };
      let brackets = [];
      let commas = [];
      let offset = 0;
      while(offset < text.length){
          // Strip off any leading whitespace
          let cur = text.substring(offset);
          let match = cur.match(regexWhitespacePrefix);
          if (match) {
              offset += match[1].length;
              cur = text.substring(offset);
          }
          const token = {
              depth: brackets.length,
              linkBack: -1,
              linkNext: -1,
              match: -1,
              type: "",
              text: "",
              offset,
              value: -1
          };
          tokens.push(token);
          let type = SimpleTokens[cur[0]] || "";
          if (type) {
              token.type = type;
              token.text = cur[0];
              offset++;
              if (type === "OPEN_PAREN") {
                  brackets.push(tokens.length - 1);
                  commas.push(tokens.length - 1);
              } else if (type == "CLOSE_PAREN") {
                  if (brackets.length === 0) throwError("no matching open bracket");
                  token.match = brackets.pop();
                  tokens[token.match].match = tokens.length - 1;
                  token.depth--;
                  token.linkBack = commas.pop();
                  tokens[token.linkBack].linkNext = tokens.length - 1;
              } else if (type === "COMMA") {
                  token.linkBack = commas.pop();
                  tokens[token.linkBack].linkNext = tokens.length - 1;
                  commas.push(tokens.length - 1);
              } else if (type === "OPEN_BRACKET") token.type = "BRACKET";
              else if (type === "CLOSE_BRACKET") {
                  // Remove the CLOSE_BRACKET
                  let suffix = tokens.pop().text;
                  if (tokens.length > 0 && tokens[tokens.length - 1].type === "NUMBER") {
                      const value = tokens.pop().text;
                      suffix = value + suffix;
                      tokens[tokens.length - 1].value = (0, _indexJs.getNumber)(value);
                  }
                  if (tokens.length === 0 || tokens[tokens.length - 1].type !== "BRACKET") throw new Error("missing opening bracket");
                  tokens[tokens.length - 1].text += suffix;
              }
              continue;
          }
          match = cur.match(regexIdPrefix);
          if (match) {
              token.text = match[1];
              offset += token.text.length;
              if (Keywords.has(token.text)) {
                  token.type = "KEYWORD";
                  continue;
              }
              if (token.text.match(regexType)) {
                  token.type = "TYPE";
                  continue;
              }
              token.type = "ID";
              continue;
          }
          match = cur.match(regexNumberPrefix);
          if (match) {
              token.text = match[1];
              token.type = "NUMBER";
              offset += token.text.length;
              continue;
          }
          throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);
      }
      return new TokenString(tokens.map((t)=>Object.freeze(t)));
  }
  // Check only one of `allowed` is in `set`
  function allowSingle(set, allowed) {
      let included = [];
      for(const key in allowed.keys())if (set.has(key)) included.push(key);
      if (included.length > 1) throw new Error(`conflicting types: ${included.join(", ")}`);
  }
  // Functions to process a Solidity Signature TokenString from left-to-right for...
  // ...the name with an optional type, returning the name
  function consumeName(type, tokens) {
      if (tokens.peekKeyword(KwTypes)) {
          const keyword = tokens.pop().text;
          if (keyword !== type) throw new Error(`expected ${type}, got ${keyword}`);
      }
      return tokens.popType("ID");
  }
  // ...all keywords matching allowed, returning the keywords
  function consumeKeywords(tokens, allowed) {
      const keywords = new Set();
      while(true){
          const keyword = tokens.peekType("KEYWORD");
          if (keyword == null || allowed && !allowed.has(keyword)) break;
          tokens.pop();
          if (keywords.has(keyword)) throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);
          keywords.add(keyword);
      }
      return Object.freeze(keywords);
  }
  // ...all visibility keywords, returning the coalesced mutability
  function consumeMutability(tokens) {
      let modifiers = consumeKeywords(tokens, KwVisib);
      // Detect conflicting modifiers
      allowSingle(modifiers, setify("constant payable nonpayable".split(" ")));
      allowSingle(modifiers, setify("pure view payable nonpayable".split(" ")));
      // Process mutability states
      if (modifiers.has("view")) return "view";
      if (modifiers.has("pure")) return "pure";
      if (modifiers.has("payable")) return "payable";
      if (modifiers.has("nonpayable")) return "nonpayable";
      // Process legacy `constant` last
      if (modifiers.has("constant")) return "view";
      return "nonpayable";
  }
  // ...a parameter list, returning the ParamType list
  function consumeParams(tokens, allowIndexed) {
      return tokens.popParams().map((t)=>ParamType.from(t, allowIndexed));
  }
  // ...a gas limit, returning a BigNumber or null if none
  function consumeGas(tokens) {
      if (tokens.peekType("AT")) {
          tokens.pop();
          if (tokens.peekType("NUMBER")) return (0, _indexJs.getBigInt)(tokens.pop().text);
          throw new Error("invalid gas");
      }
      return null;
  }
  function consumeEoi(tokens) {
      if (tokens.length) throw new Error(`unexpected tokens: ${tokens.toString()}`);
  }
  const regexArrayType = new RegExp(/^(.*)\[([0-9]*)\]$/);
  function verifyBasicType(type) {
      const match = type.match(regexType);
      (0, _indexJs.assertArgument)(match, "invalid type", "type", type);
      if (type === "uint") return "uint256";
      if (type === "int") return "int256";
      if (match[2]) {
          // bytesXX
          const length = parseInt(match[2]);
          (0, _indexJs.assertArgument)(length !== 0 && length <= 32, "invalid bytes length", "type", type);
      } else if (match[3]) {
          // intXX or uintXX
          const size = parseInt(match[3]);
          (0, _indexJs.assertArgument)(size !== 0 && size <= 256 && size % 8 === 0, "invalid numeric width", "type", type);
      }
      return type;
  }
  // Make the Fragment constructors effectively private
  const _guard = {};
  const internal = Symbol.for("_ethers_internal");
  const ParamTypeInternal = "_ParamTypeInternal";
  const ErrorFragmentInternal = "_ErrorInternal";
  const EventFragmentInternal = "_EventInternal";
  const ConstructorFragmentInternal = "_ConstructorInternal";
  const FallbackFragmentInternal = "_FallbackInternal";
  const FunctionFragmentInternal = "_FunctionInternal";
  const StructFragmentInternal = "_StructInternal";
  class ParamType {
      /**
       *  The local name of the parameter (or ``""`` if unbound)
       */ name;
      /**
       *  The fully qualified type (e.g. ``"address"``, ``"tuple(address)"``,
       *  ``"uint256[3][]"``)
       */ type;
      /**
       *  The base type (e.g. ``"address"``, ``"tuple"``, ``"array"``)
       */ baseType;
      /**
       *  True if the parameters is indexed.
       *
       *  For non-indexable types this is ``null``.
       */ indexed;
      /**
       *  The components for the tuple.
       *
       *  For non-tuple types this is ``null``.
       */ components;
      /**
       *  The array length, or ``-1`` for dynamic-lengthed arrays.
       *
       *  For non-array types this is ``null``.
       */ arrayLength;
      /**
       *  The type of each child in the array.
       *
       *  For non-array types this is ``null``.
       */ arrayChildren;
      /**
       *  @private
       */ constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren){
          (0, _indexJs.assertPrivate)(guard, _guard, "ParamType");
          Object.defineProperty(this, internal, {
              value: ParamTypeInternal
          });
          if (components) components = Object.freeze(components.slice());
          if (baseType === "array") {
              if (arrayLength == null || arrayChildren == null) throw new Error("");
          } else if (arrayLength != null || arrayChildren != null) throw new Error("");
          if (baseType === "tuple") {
              if (components == null) throw new Error("");
          } else if (components != null) throw new Error("");
          (0, _indexJs.defineProperties)(this, {
              name,
              type,
              baseType,
              indexed,
              components,
              arrayLength,
              arrayChildren
          });
      }
      /**
       *  Return a string representation of this type.
       *
       *  For example,
       *
       *  ``sighash" => "(uint256,address)"``
       *
       *  ``"minimal" => "tuple(uint256,address) indexed"``
       *
       *  ``"full" => "tuple(uint256 foo, address bar) indexed baz"``
       */ format(format) {
          if (format == null) format = "sighash";
          if (format === "json") {
              let result = {
                  type: this.baseType === "tuple" ? "tuple" : this.type,
                  name: this.name || undefined
              };
              if (typeof this.indexed === "boolean") result.indexed = this.indexed;
              if (this.isTuple()) result.components = this.components.map((c)=>JSON.parse(c.format(format)));
              return JSON.stringify(result);
          }
          let result = "";
          // Array
          if (this.isArray()) {
              result += this.arrayChildren.format(format);
              result += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
          } else if (this.isTuple()) {
              if (format !== "sighash") result += this.type;
              result += "(" + this.components.map((comp)=>comp.format(format)).join(format === "full" ? ", " : ",") + ")";
          } else result += this.type;
          if (format !== "sighash") {
              if (this.indexed === true) result += " indexed";
              if (format === "full" && this.name) result += " " + this.name;
          }
          return result;
      }
      /*
       *  Returns true if %%value%% is an Array type.
       *
       *  This provides a type gaurd ensuring that the
       *  [[arrayChildren]] and [[arrayLength]] are non-null.
       */ //static isArray(value: any): value is { arrayChildren: ParamType, arrayLength: number } {
      //    return value && (value.baseType === "array")
      //}
      /**
       *  Returns true if %%this%% is an Array type.
       *
       *  This provides a type gaurd ensuring that [[arrayChildren]]
       *  and [[arrayLength]] are non-null.
       */ isArray() {
          return this.baseType === "array";
      }
      /**
       *  Returns true if %%this%% is a Tuple type.
       *
       *  This provides a type gaurd ensuring that [[components]]
       *  is non-null.
       */ isTuple() {
          return this.baseType === "tuple";
      }
      /**
       *  Returns true if %%this%% is an Indexable type.
       *
       *  This provides a type gaurd ensuring that [[indexed]]
       *  is non-null.
       */ isIndexable() {
          return this.indexed != null;
      }
      /**
       *  Walks the **ParamType** with %%value%%, calling %%process%%
       *  on each type, destructing the %%value%% recursively.
       */ walk(value, process) {
          if (this.isArray()) {
              if (!Array.isArray(value)) throw new Error("invalid array value");
              if (this.arrayLength !== -1 && value.length !== this.arrayLength) throw new Error("array is wrong length");
              const _this = this;
              return value.map((v)=>_this.arrayChildren.walk(v, process));
          }
          if (this.isTuple()) {
              if (!Array.isArray(value)) throw new Error("invalid tuple value");
              if (value.length !== this.components.length) throw new Error("array is wrong length");
              const _this = this;
              return value.map((v, i)=>_this.components[i].walk(v, process));
          }
          return process(this.type, value);
      }
      #walkAsync(promises, value, process, setValue) {
          if (this.isArray()) {
              if (!Array.isArray(value)) throw new Error("invalid array value");
              if (this.arrayLength !== -1 && value.length !== this.arrayLength) throw new Error("array is wrong length");
              const childType = this.arrayChildren;
              const result = value.slice();
              result.forEach((value, index)=>{
                  childType.#walkAsync(promises, value, process, (value)=>{
                      result[index] = value;
                  });
              });
              setValue(result);
              return;
          }
          if (this.isTuple()) {
              const components = this.components;
              // Convert the object into an array
              let result;
              if (Array.isArray(value)) result = value.slice();
              else {
                  if (value == null || typeof value !== "object") throw new Error("invalid tuple value");
                  result = components.map((param)=>{
                      if (!param.name) throw new Error("cannot use object value with unnamed components");
                      if (!(param.name in value)) throw new Error(`missing value for component ${param.name}`);
                      return value[param.name];
                  });
              }
              if (result.length !== this.components.length) throw new Error("array is wrong length");
              result.forEach((value, index)=>{
                  components[index].#walkAsync(promises, value, process, (value)=>{
                      result[index] = value;
                  });
              });
              setValue(result);
              return;
          }
          const result = process(this.type, value);
          if (result.then) promises.push(async function() {
              setValue(await result);
          }());
          else setValue(result);
      }
      /**
       *  Walks the **ParamType** with %%value%%, asynchronously calling
       *  %%process%% on each type, destructing the %%value%% recursively.
       *
       *  This can be used to resolve ENS naes by walking and resolving each
       *  ``"address"`` type.
       */ async walkAsync(value, process) {
          const promises = [];
          const result = [
              value
          ];
          this.#walkAsync(promises, value, process, (value)=>{
              result[0] = value;
          });
          if (promises.length) await Promise.all(promises);
          return result[0];
      }
      /**
       *  Creates a new **ParamType** for %%obj%%.
       *
       *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,
       *  otherwise the ``indexed`` keyword will throw an error.
       */ static from(obj, allowIndexed) {
          if (ParamType.isParamType(obj)) return obj;
          if (typeof obj === "string") return ParamType.from(lex(obj), allowIndexed);
          else if (obj instanceof TokenString) {
              let type = "", baseType = "";
              let comps = null;
              if (consumeKeywords(obj, setify([
                  "tuple"
              ])).has("tuple") || obj.peekType("OPEN_PAREN")) {
                  // Tuple
                  baseType = "tuple";
                  comps = obj.popParams().map((t)=>ParamType.from(t));
                  type = `tuple(${comps.map((c)=>c.format()).join(",")})`;
              } else {
                  // Normal
                  type = verifyBasicType(obj.popType("TYPE"));
                  baseType = type;
              }
              // Check for Array
              let arrayChildren = null;
              let arrayLength = null;
              while(obj.length && obj.peekType("BRACKET")){
                  const bracket = obj.pop(); //arrays[i];
                  arrayChildren = new ParamType(_guard, "", type, baseType, null, comps, arrayLength, arrayChildren);
                  arrayLength = bracket.value;
                  type += bracket.text;
                  baseType = "array";
                  comps = null;
              }
              let indexed = null;
              const keywords = consumeKeywords(obj, KwModifiers);
              if (keywords.has("indexed")) {
                  if (!allowIndexed) throw new Error("");
                  indexed = true;
              }
              const name = obj.peekType("ID") ? obj.pop().text : "";
              if (obj.length) throw new Error("leftover tokens");
              return new ParamType(_guard, name, type, baseType, indexed, comps, arrayLength, arrayChildren);
          }
          const name = obj.name;
          (0, _indexJs.assertArgument)(!name || typeof name === "string" && name.match(regexId), "invalid name", "obj.name", name);
          let indexed = obj.indexed;
          if (indexed != null) {
              (0, _indexJs.assertArgument)(allowIndexed, "parameter cannot be indexed", "obj.indexed", obj.indexed);
              indexed = !!indexed;
          }
          let type = obj.type;
          let arrayMatch = type.match(regexArrayType);
          if (arrayMatch) {
              const arrayLength = parseInt(arrayMatch[2] || "-1");
              const arrayChildren = ParamType.from({
                  type: arrayMatch[1],
                  components: obj.components
              });
              return new ParamType(_guard, name || "", type, "array", indexed, null, arrayLength, arrayChildren);
          }
          if (type === "tuple" || type.startsWith("tuple(" /* fix: ) */ ) || type.startsWith("(" /* fix: ) */ )) {
              const comps = obj.components != null ? obj.components.map((c)=>ParamType.from(c)) : null;
              const tuple = new ParamType(_guard, name || "", type, "tuple", indexed, comps, null, null);
              // @TODO: use lexer to validate and normalize type
              return tuple;
          }
          type = verifyBasicType(obj.type);
          return new ParamType(_guard, name || "", type, type, indexed, null, null, null);
      }
      /**
       *  Returns true if %%value%% is a **ParamType**.
       */ static isParamType(value) {
          return value && value[internal] === ParamTypeInternal;
      }
  }
  class Fragment {
      /**
       *  The type of the fragment.
       */ type;
      /**
       *  The inputs for the fragment.
       */ inputs;
      /**
       *  @private
       */ constructor(guard, type, inputs){
          (0, _indexJs.assertPrivate)(guard, _guard, "Fragment");
          inputs = Object.freeze(inputs.slice());
          (0, _indexJs.defineProperties)(this, {
              type,
              inputs
          });
      }
      /**
       *  Creates a new **Fragment** for %%obj%%, wich can be any supported
       *  ABI frgament type.
       */ static from(obj) {
          if (typeof obj === "string") {
              // Try parsing JSON...
              try {
                  Fragment.from(JSON.parse(obj));
              } catch (e) {}
              // ...otherwise, use the human-readable lexer
              return Fragment.from(lex(obj));
          }
          if (obj instanceof TokenString) {
              // Human-readable ABI (already lexed)
              const type = obj.peekKeyword(KwTypes);
              switch(type){
                  case "constructor":
                      return ConstructorFragment.from(obj);
                  case "error":
                      return ErrorFragment.from(obj);
                  case "event":
                      return EventFragment.from(obj);
                  case "fallback":
                  case "receive":
                      return FallbackFragment.from(obj);
                  case "function":
                      return FunctionFragment.from(obj);
                  case "struct":
                      return StructFragment.from(obj);
              }
          } else if (typeof obj === "object") {
              // JSON ABI
              switch(obj.type){
                  case "constructor":
                      return ConstructorFragment.from(obj);
                  case "error":
                      return ErrorFragment.from(obj);
                  case "event":
                      return EventFragment.from(obj);
                  case "fallback":
                  case "receive":
                      return FallbackFragment.from(obj);
                  case "function":
                      return FunctionFragment.from(obj);
                  case "struct":
                      return StructFragment.from(obj);
              }
              (0, _indexJs.assert)(false, `unsupported type: ${obj.type}`, "UNSUPPORTED_OPERATION", {
                  operation: "Fragment.from"
              });
          }
          (0, _indexJs.assertArgument)(false, "unsupported frgament object", "obj", obj);
      }
      /**
       *  Returns true if %%value%% is a [[ConstructorFragment]].
       */ static isConstructor(value) {
          return ConstructorFragment.isFragment(value);
      }
      /**
       *  Returns true if %%value%% is an [[ErrorFragment]].
       */ static isError(value) {
          return ErrorFragment.isFragment(value);
      }
      /**
       *  Returns true if %%value%% is an [[EventFragment]].
       */ static isEvent(value) {
          return EventFragment.isFragment(value);
      }
      /**
       *  Returns true if %%value%% is a [[FunctionFragment]].
       */ static isFunction(value) {
          return FunctionFragment.isFragment(value);
      }
      /**
       *  Returns true if %%value%% is a [[StructFragment]].
       */ static isStruct(value) {
          return StructFragment.isFragment(value);
      }
  }
  class NamedFragment extends Fragment {
      /**
       *  The name of the fragment.
       */ name;
      /**
       *  @private
       */ constructor(guard, type, name, inputs){
          super(guard, type, inputs);
          (0, _indexJs.assertArgument)(typeof name === "string" && name.match(regexId), "invalid identifier", "name", name);
          inputs = Object.freeze(inputs.slice());
          (0, _indexJs.defineProperties)(this, {
              name
          });
      }
  }
  function joinParams(format, params) {
      return "(" + params.map((p)=>p.format(format)).join(format === "full" ? ", " : ",") + ")";
  }
  class ErrorFragment extends NamedFragment {
      /**
       *  @private
       */ constructor(guard, name, inputs){
          super(guard, "error", name, inputs);
          Object.defineProperty(this, internal, {
              value: ErrorFragmentInternal
          });
      }
      /**
       *  The Custom Error selector.
       */ get selector() {
          return (0, _indexJs1.id)(this.format("sighash")).substring(0, 10);
      }
      format(format) {
          if (format == null) format = "sighash";
          if (format === "json") return JSON.stringify({
              type: "error",
              name: this.name,
              inputs: this.inputs.map((input)=>JSON.parse(input.format(format)))
          });
          const result = [];
          if (format !== "sighash") result.push("error");
          result.push(this.name + joinParams(format, this.inputs));
          return result.join(" ");
      }
      static from(obj) {
          if (ErrorFragment.isFragment(obj)) return obj;
          if (typeof obj === "string") return ErrorFragment.from(lex(obj));
          else if (obj instanceof TokenString) {
              const name = consumeName("error", obj);
              const inputs = consumeParams(obj);
              consumeEoi(obj);
              return new ErrorFragment(_guard, name, inputs);
          }
          return new ErrorFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
      }
      static isFragment(value) {
          return value && value[internal] === ErrorFragmentInternal;
      }
  }
  class EventFragment extends NamedFragment {
      anonymous;
      /**
       *  @private
       */ constructor(guard, name, inputs, anonymous){
          super(guard, "event", name, inputs);
          Object.defineProperty(this, internal, {
              value: EventFragmentInternal
          });
          (0, _indexJs.defineProperties)(this, {
              anonymous
          });
      }
      /**
       *  The Event topic hash.
       */ get topicHash() {
          return (0, _indexJs1.id)(this.format("sighash"));
      }
      format(format) {
          if (format == null) format = "sighash";
          if (format === "json") return JSON.stringify({
              type: "event",
              anonymous: this.anonymous,
              name: this.name,
              inputs: this.inputs.map((i)=>JSON.parse(i.format(format)))
          });
          const result = [];
          if (format !== "sighash") result.push("event");
          result.push(this.name + joinParams(format, this.inputs));
          if (format !== "sighash" && this.anonymous) result.push("anonymous");
          return result.join(" ");
      }
      static getTopicHash(name, params) {
          params = (params || []).map((p)=>ParamType.from(p));
          const fragment = new EventFragment(_guard, name, params, false);
          return fragment.topicHash;
      }
      static from(obj) {
          if (EventFragment.isFragment(obj)) return obj;
          if (typeof obj === "string") return EventFragment.from(lex(obj));
          else if (obj instanceof TokenString) {
              const name = consumeName("event", obj);
              const inputs = consumeParams(obj, true);
              const anonymous = !!consumeKeywords(obj, setify([
                  "anonymous"
              ])).has("anonymous");
              consumeEoi(obj);
              return new EventFragment(_guard, name, inputs, anonymous);
          }
          return new EventFragment(_guard, obj.name, obj.inputs ? obj.inputs.map((p)=>ParamType.from(p, true)) : [], !!obj.anonymous);
      }
      static isFragment(value) {
          return value && value[internal] === EventFragmentInternal;
      }
  }
  class ConstructorFragment extends Fragment {
      payable;
      gas;
      /**
       *  @private
       */ constructor(guard, type, inputs, payable, gas){
          super(guard, type, inputs);
          Object.defineProperty(this, internal, {
              value: ConstructorFragmentInternal
          });
          (0, _indexJs.defineProperties)(this, {
              payable,
              gas
          });
      }
      format(format) {
          (0, _indexJs.assert)(format != null && format !== "sighash", "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", {
              operation: "format(sighash)"
          });
          if (format === "json") return JSON.stringify({
              type: "constructor",
              stateMutability: this.payable ? "payable" : "undefined",
              payable: this.payable,
              gas: this.gas != null ? this.gas : undefined,
              inputs: this.inputs.map((i)=>JSON.parse(i.format(format)))
          });
          const result = [
              `constructor${joinParams(format, this.inputs)}`
          ];
          result.push(this.payable ? "payable" : "nonpayable");
          if (this.gas != null) result.push(`@${this.gas.toString()}`);
          return result.join(" ");
      }
      static from(obj) {
          if (ConstructorFragment.isFragment(obj)) return obj;
          if (typeof obj === "string") return ConstructorFragment.from(lex(obj));
          else if (obj instanceof TokenString) {
              consumeKeywords(obj, setify([
                  "constructor"
              ]));
              const inputs = consumeParams(obj);
              const payable = !!consumeKeywords(obj, setify([
                  "payable"
              ])).has("payable");
              const gas = consumeGas(obj);
              consumeEoi(obj);
              return new ConstructorFragment(_guard, "constructor", inputs, payable, gas);
          }
          return new ConstructorFragment(_guard, "constructor", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, obj.gas != null ? obj.gas : null);
      }
      static isFragment(value) {
          return value && value[internal] === ConstructorFragmentInternal;
      }
  }
  class FallbackFragment extends Fragment {
      /**
       *  If the function can be sent value during invocation.
       */ payable;
      constructor(guard, inputs, payable){
          super(guard, "fallback", inputs);
          Object.defineProperty(this, internal, {
              value: FallbackFragmentInternal
          });
          (0, _indexJs.defineProperties)(this, {
              payable
          });
      }
      format(format) {
          const type = this.inputs.length === 0 ? "receive" : "fallback";
          if (format === "json") {
              const stateMutability = this.payable ? "payable" : "nonpayable";
              return JSON.stringify({
                  type,
                  stateMutability
              });
          }
          return `${type}()${this.payable ? " payable" : ""}`;
      }
      static from(obj) {
          if (FallbackFragment.isFragment(obj)) return obj;
          if (typeof obj === "string") return FallbackFragment.from(lex(obj));
          else if (obj instanceof TokenString) {
              const errorObj = obj.toString();
              const topIsValid = obj.peekKeyword(setify([
                  "fallback",
                  "receive"
              ]));
              (0, _indexJs.assertArgument)(topIsValid, "type must be fallback or receive", "obj", errorObj);
              const type = obj.popKeyword(setify([
                  "fallback",
                  "receive"
              ]));
              // receive()
              if (type === "receive") {
                  const inputs = consumeParams(obj);
                  (0, _indexJs.assertArgument)(inputs.length === 0, `receive cannot have arguments`, "obj.inputs", inputs);
                  consumeKeywords(obj, setify([
                      "payable"
                  ]));
                  consumeEoi(obj);
                  return new FallbackFragment(_guard, [], true);
              }
              // fallback() [payable]
              // fallback(bytes) [payable] returns (bytes)
              let inputs = consumeParams(obj);
              if (inputs.length) (0, _indexJs.assertArgument)(inputs.length === 1 && inputs[0].type === "bytes", "invalid fallback inputs", "obj.inputs", inputs.map((i)=>i.format("minimal")).join(", "));
              else inputs = [
                  ParamType.from("bytes")
              ];
              const mutability = consumeMutability(obj);
              (0, _indexJs.assertArgument)(mutability === "nonpayable" || mutability === "payable", "fallback cannot be constants", "obj.stateMutability", mutability);
              if (consumeKeywords(obj, setify([
                  "returns"
              ])).has("returns")) {
                  const outputs = consumeParams(obj);
                  (0, _indexJs.assertArgument)(outputs.length === 1 && outputs[0].type === "bytes", "invalid fallback outputs", "obj.outputs", outputs.map((i)=>i.format("minimal")).join(", "));
              }
              consumeEoi(obj);
              return new FallbackFragment(_guard, inputs, mutability === "payable");
          }
          if (obj.type === "receive") return new FallbackFragment(_guard, [], true);
          if (obj.type === "fallback") {
              const inputs = [
                  ParamType.from("bytes")
              ];
              const payable = obj.stateMutability === "payable";
              return new FallbackFragment(_guard, inputs, payable);
          }
          (0, _indexJs.assertArgument)(false, "invalid fallback description", "obj", obj);
      }
      static isFragment(value) {
          return value && value[internal] === FallbackFragmentInternal;
      }
  }
  class FunctionFragment extends NamedFragment {
      /**
       *  If the function is constant (e.g. ``pure`` or ``view`` functions).
       */ constant;
      /**
       *  The returned types for the result of calling this function.
       */ outputs;
      /**
       *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``
       *  or ``pure``)
       */ stateMutability;
      /**
       *  If the function can be sent value during invocation.
       */ payable;
      /**
       *  The amount of gas to send when calling this function
       */ gas;
      /**
       *  @private
       */ constructor(guard, name, stateMutability, inputs, outputs, gas){
          super(guard, "function", name, inputs);
          Object.defineProperty(this, internal, {
              value: FunctionFragmentInternal
          });
          outputs = Object.freeze(outputs.slice());
          const constant = stateMutability === "view" || stateMutability === "pure";
          const payable = stateMutability === "payable";
          (0, _indexJs.defineProperties)(this, {
              constant,
              gas,
              outputs,
              payable,
              stateMutability
          });
      }
      /**
       *  The Function selector.
       */ get selector() {
          return (0, _indexJs1.id)(this.format("sighash")).substring(0, 10);
      }
      format(format) {
          if (format == null) format = "sighash";
          if (format === "json") return JSON.stringify({
              type: "function",
              name: this.name,
              constant: this.constant,
              stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : undefined,
              payable: this.payable,
              gas: this.gas != null ? this.gas : undefined,
              inputs: this.inputs.map((i)=>JSON.parse(i.format(format))),
              outputs: this.outputs.map((o)=>JSON.parse(o.format(format)))
          });
          const result = [];
          if (format !== "sighash") result.push("function");
          result.push(this.name + joinParams(format, this.inputs));
          if (format !== "sighash") {
              if (this.stateMutability !== "nonpayable") result.push(this.stateMutability);
              if (this.outputs && this.outputs.length) {
                  result.push("returns");
                  result.push(joinParams(format, this.outputs));
              }
              if (this.gas != null) result.push(`@${this.gas.toString()}`);
          }
          return result.join(" ");
      }
      static getSelector(name, params) {
          params = (params || []).map((p)=>ParamType.from(p));
          const fragment = new FunctionFragment(_guard, name, "view", params, [], null);
          return fragment.selector;
      }
      static from(obj) {
          if (FunctionFragment.isFragment(obj)) return obj;
          if (typeof obj === "string") return FunctionFragment.from(lex(obj));
          else if (obj instanceof TokenString) {
              const name = consumeName("function", obj);
              const inputs = consumeParams(obj);
              const mutability = consumeMutability(obj);
              let outputs = [];
              if (consumeKeywords(obj, setify([
                  "returns"
              ])).has("returns")) outputs = consumeParams(obj);
              const gas = consumeGas(obj);
              consumeEoi(obj);
              return new FunctionFragment(_guard, name, mutability, inputs, outputs, gas);
          }
          let stateMutability = obj.stateMutability;
          // Use legacy Solidity ABI logic if stateMutability is missing
          if (stateMutability == null) {
              stateMutability = "payable";
              if (typeof obj.constant === "boolean") {
                  stateMutability = "view";
                  if (!obj.constant) {
                      stateMutability = "payable";
                      if (typeof obj.payable === "boolean" && !obj.payable) stateMutability = "nonpayable";
                  }
              } else if (typeof obj.payable === "boolean" && !obj.payable) stateMutability = "nonpayable";
          }
          // @TODO: verifyState for stateMutability (e.g. throw if
          //        payable: false but stateMutability is "nonpayable")
          return new FunctionFragment(_guard, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], obj.gas != null ? obj.gas : null);
      }
      static isFragment(value) {
          return value && value[internal] === FunctionFragmentInternal;
      }
  }
  class StructFragment extends NamedFragment {
      /**
       *  @private
       */ constructor(guard, name, inputs){
          super(guard, "struct", name, inputs);
          Object.defineProperty(this, internal, {
              value: StructFragmentInternal
          });
      }
      format() {
          throw new Error("@TODO");
      }
      static from(obj) {
          if (typeof obj === "string") return StructFragment.from(lex(obj));
          else if (obj instanceof TokenString) {
              const name = consumeName("struct", obj);
              const inputs = consumeParams(obj);
              consumeEoi(obj);
              return new StructFragment(_guard, name, inputs);
          }
          return new StructFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
      }
      static isFragment(value) {
          return value && value[internal] === StructFragmentInternal;
      }
  }
  
  },{"../utils/index.js":"jGhd9","../hash/index.js":"bTSS2","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"bTSS2":[function(require,module,exports) {
  /**
   *  About hashing here...
   *
   *  @_section: api/hashing:Hashing Utilities  [about-hashing]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "id", ()=>(0, _idJs.id));
  parcelHelpers.export(exports, "ensNormalize", ()=>(0, _namehashJs.ensNormalize));
  parcelHelpers.export(exports, "isValidName", ()=>(0, _namehashJs.isValidName));
  parcelHelpers.export(exports, "namehash", ()=>(0, _namehashJs.namehash));
  parcelHelpers.export(exports, "dnsEncode", ()=>(0, _namehashJs.dnsEncode));
  parcelHelpers.export(exports, "hashMessage", ()=>(0, _messageJs.hashMessage));
  parcelHelpers.export(exports, "verifyMessage", ()=>(0, _messageJs.verifyMessage));
  parcelHelpers.export(exports, "solidityPacked", ()=>(0, _solidityJs.solidityPacked));
  parcelHelpers.export(exports, "solidityPackedKeccak256", ()=>(0, _solidityJs.solidityPackedKeccak256));
  parcelHelpers.export(exports, "solidityPackedSha256", ()=>(0, _solidityJs.solidityPackedSha256));
  parcelHelpers.export(exports, "TypedDataEncoder", ()=>(0, _typedDataJs.TypedDataEncoder));
  parcelHelpers.export(exports, "verifyTypedData", ()=>(0, _typedDataJs.verifyTypedData));
  var _idJs = require("./id.js");
  var _namehashJs = require("./namehash.js");
  var _messageJs = require("./message.js");
  var _solidityJs = require("./solidity.js");
  var _typedDataJs = require("./typed-data.js");
  
  },{"./id.js":"6BZnx","./namehash.js":"8kgQU","./message.js":"lEf8I","./solidity.js":"5vd2w","./typed-data.js":"cPBSC","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"6BZnx":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  A simple hashing function which operates on UTF-8 strings to
   *  compute an 32-byte irentifier.
   *
   *  This simply computes the [UTF-8 bytes](toUtf8Bytes) and computes
   *  the [[keccak256]].
   *
   *  @example:
   *    id("hello world")
   *    //_result:
   */ parcelHelpers.export(exports, "id", ()=>id);
  var _indexJs = require("../crypto/index.js");
  var _indexJs1 = require("../utils/index.js");
  function id(value) {
      return (0, _indexJs.keccak256)((0, _indexJs1.toUtf8Bytes)(value));
  }
  
  },{"../crypto/index.js":"4oi1q","../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"8kgQU":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Returns the ENS %%name%% normalized.
   */ parcelHelpers.export(exports, "ensNormalize", ()=>ensNormalize);
  /**
   *  Returns ``true`` if %%name%% is a valid ENS name.
   */ parcelHelpers.export(exports, "isValidName", ()=>isValidName);
  /**
   *  Returns the [[link-namehash]] for %%name%%.
   */ parcelHelpers.export(exports, "namehash", ()=>namehash);
  /**
   *  Returns the DNS encoded %%name%%.
   *
   *  This is used for various parts of ENS name resolution, such
   *  as the wildcard resolution.
   */ parcelHelpers.export(exports, "dnsEncode", ()=>dnsEncode);
  var _indexJs = require("../crypto/index.js");
  var _indexJs1 = require("../utils/index.js");
  var _ensNormalize = require("@adraffy/ens-normalize");
  const Zeros = new Uint8Array(32);
  Zeros.fill(0);
  function checkComponent(comp) {
      (0, _indexJs1.assertArgument)(comp.length !== 0, "invalid ENS name; empty component", "comp", comp);
      return comp;
  }
  function ensNameSplit(name) {
      const bytes = (0, _indexJs1.toUtf8Bytes)(ensNormalize(name));
      const comps = [];
      if (name.length === 0) return comps;
      let last = 0;
      for(let i = 0; i < bytes.length; i++){
          const d = bytes[i];
          // A separator (i.e. "."); copy this component
          if (d === 0x2e) {
              comps.push(checkComponent(bytes.slice(last, i)));
              last = i + 1;
          }
      }
      // There was a stray separator at the end of the name
      (0, _indexJs1.assertArgument)(last < bytes.length, "invalid ENS name; empty component", "name", name);
      comps.push(checkComponent(bytes.slice(last)));
      return comps;
  }
  function ensNormalize(name) {
      try {
          return (0, _ensNormalize.ens_normalize)(name);
      } catch (error) {
          (0, _indexJs1.assertArgument)(false, `invalid ENS name (${error.message})`, "name", name);
      }
  }
  function isValidName(name) {
      try {
          return ensNameSplit(name).length !== 0;
      } catch (error) {}
      return false;
  }
  function namehash(name) {
      (0, _indexJs1.assertArgument)(typeof name === "string", "invalid ENS name; not a string", "name", name);
      let result = Zeros;
      const comps = ensNameSplit(name);
      while(comps.length)result = (0, _indexJs.keccak256)((0, _indexJs1.concat)([
          result,
          (0, _indexJs.keccak256)(comps.pop())
      ]));
      return (0, _indexJs1.hexlify)(result);
  }
  function dnsEncode(name) {
      return (0, _indexJs1.hexlify)((0, _indexJs1.concat)(ensNameSplit(name).map((comp)=>{
          // DNS does not allow components over 63 bytes in length
          if (comp.length > 63) throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");
          const bytes = new Uint8Array(comp.length + 1);
          bytes.set(comp, 1);
          bytes[0] = bytes.length - 1;
          return bytes;
      }))) + "00";
  }
  
  },{"../crypto/index.js":"4oi1q","../utils/index.js":"jGhd9","@adraffy/ens-normalize":"6qMVC","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"6qMVC":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "ens_beautify", ()=>ens_beautify);
  parcelHelpers.export(exports, "ens_emoji", ()=>ens_emoji);
  parcelHelpers.export(exports, "ens_normalize", ()=>ens_normalize);
  parcelHelpers.export(exports, "ens_normalize_fragment", ()=>ens_normalize_fragment);
  parcelHelpers.export(exports, "ens_split", ()=>ens_split);
  parcelHelpers.export(exports, "ens_tokenize", ()=>ens_tokenize);
  parcelHelpers.export(exports, "is_combining_mark", ()=>is_combining_mark);
  parcelHelpers.export(exports, "nfc", ()=>nfc);
  parcelHelpers.export(exports, "nfd", ()=>nfd);
  parcelHelpers.export(exports, "safe_str_from_cps", ()=>safe_str_from_cps);
  parcelHelpers.export(exports, "should_escape", ()=>should_escape);
  function decode_arithmetic(bytes) {
      let pos = 0;
      function u16() {
          return bytes[pos++] << 8 | bytes[pos++];
      }
      // decode the frequency table
      let symbol_count = u16();
      let total = 1;
      let acc = [
          0,
          1
      ]; // first symbol has frequency 1
      for(let i = 1; i < symbol_count; i++)acc.push(total += u16());
      // skip the sized-payload that the last 3 symbols index into
      let skip = u16();
      let pos_payload = pos;
      pos += skip;
      let read_width = 0;
      let read_buffer = 0;
      function read_bit() {
          if (read_width == 0) {
              // this will read beyond end of buffer
              // but (undefined|0) => zero pad
              read_buffer = read_buffer << 8 | bytes[pos++];
              read_width = 8;
          }
          return read_buffer >> --read_width & 1;
      }
      const N = 31;
      const FULL = 2 ** N;
      const HALF = FULL >>> 1;
      const QRTR = HALF >> 1;
      const MASK = FULL - 1;
      // fill register
      let register = 0;
      for(let i = 0; i < N; i++)register = register << 1 | read_bit();
      let symbols = [];
      let low = 0;
      let range = FULL; // treat like a float
      while(true){
          let value = Math.floor(((register - low + 1) * total - 1) / range);
          let start = 0;
          let end = symbol_count;
          while(end - start > 1){
              let mid = start + end >>> 1;
              if (value < acc[mid]) end = mid;
              else start = mid;
          }
          if (start == 0) break; // first symbol is end mark
          symbols.push(start);
          let a = low + Math.floor(range * acc[start] / total);
          let b = low + Math.floor(range * acc[start + 1] / total) - 1;
          while(((a ^ b) & HALF) == 0){
              register = register << 1 & MASK | read_bit();
              a = a << 1 & MASK;
              b = b << 1 & MASK | 1;
          }
          while(a & ~b & QRTR){
              register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
              a = a << 1 ^ HALF;
              b = (b ^ HALF) << 1 | HALF | 1;
          }
          low = a;
          range = 1 + b - a;
      }
      let offset = symbol_count - 4;
      return symbols.map((x)=>{
          switch(x - offset){
              case 3:
                  return offset + 0x10100 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);
              case 2:
                  return offset + 0x100 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);
              case 1:
                  return offset + bytes[pos_payload++];
              default:
                  return x - 1;
          }
      });
  }
  // returns an iterator which returns the next symbol
  function read_payload(v) {
      let pos = 0;
      return ()=>v[pos++];
  }
  function read_compressed_payload(s) {
      return read_payload(decode_arithmetic(unsafe_atob(s)));
  }
  // unsafe in the sense:
  // expected well-formed Base64 w/o padding 
  function unsafe_atob(s) {
      let lookup = [];
      [
          ..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
      ].forEach((c, i)=>lookup[c.charCodeAt(0)] = i);
      let n = s.length;
      let ret = new Uint8Array(6 * n >> 3);
      for(let i = 0, pos = 0, width = 0, carry = 0; i < n; i++){
          carry = carry << 6 | lookup[s.charCodeAt(i)];
          width += 6;
          if (width >= 8) ret[pos++] = carry >> (width -= 8);
      }
      return ret;
  }
  // eg. [0,1,2,3...] => [0,-1,1,-2,...]
  function signed(i) {
      return i & 1 ? ~i >> 1 : i >> 1;
  }
  function read_deltas(n, next) {
      let v = Array(n);
      for(let i = 0, x = 0; i < n; i++)v[i] = x += signed(next());
      return v;
  }
  // [123][5] => [0 3] [1 1] [0 0]
  function read_sorted(next, prev = 0) {
      let ret = [];
      while(true){
          let x = next();
          let n = next();
          if (!n) break;
          prev += x;
          for(let i = 0; i < n; i++)ret.push(prev + i);
          prev += n + 1;
      }
      return ret;
  }
  function read_sorted_arrays(next) {
      return read_array_while(()=>{
          let v = read_sorted(next);
          if (v.length) return v;
      });
  }
  // returns map of x => ys
  function read_mapped(next) {
      let ret = [];
      while(true){
          let w = next();
          if (w == 0) break;
          ret.push(read_linear_table(w, next));
      }
      while(true){
          let w = next() - 1;
          if (w < 0) break;
          ret.push(read_replacement_table(w, next));
      }
      return ret.flat();
  }
  // read until next is falsy
  // return array of read values
  function read_array_while(next) {
      let v = [];
      while(true){
          let x = next(v.length);
          if (!x) break;
          v.push(x);
      }
      return v;
  }
  // read w columns of length n
  // return as n rows of length w
  function read_transposed(n, w, next) {
      let m = Array(n).fill().map(()=>[]);
      for(let i = 0; i < w; i++)read_deltas(n, next).forEach((x, j)=>m[j].push(x));
      return m;
  }
  // returns [[x, ys], [x+dx, ys+dy], [x+2*dx, ys+2*dy], ...]
  // where dx/dy = steps, n = run size, w = length of y
  function read_linear_table(w, next) {
      let dx = 1 + next();
      let dy = next();
      let vN = read_array_while(next);
      let m = read_transposed(vN.length, 1 + w, next);
      return m.flatMap((v, i)=>{
          let [x, ...ys] = v;
          return Array(vN[i]).fill().map((_, j)=>{
              let j_dy = j * dy;
              return [
                  x + j * dx,
                  ys.map((y)=>y + j_dy)
              ];
          });
      });
  }
  // return [[x, ys...], ...]
  // where w = length of y
  function read_replacement_table(w, next) {
      let n = 1 + next();
      let m = read_transposed(n, 1 + w, next);
      return m.map((v)=>[
              v[0],
              v.slice(1)
          ]);
  }
  // created 2023-02-21T09:18:13.549Z
  var r$1 = read_compressed_payload("");
  const FENCED = new Map([
      [
          8217,
          "apostrophe"
      ],
      [
          8260,
          "fraction slash"
      ],
      [
          12539,
          "middle dot"
      ]
  ]);
  const NSM_MAX = 4;
  function hex_cp(cp) {
      return cp.toString(16).toUpperCase().padStart(2, "0");
  }
  function quote_cp(cp) {
      return `{${hex_cp(cp)}}`; // raffy convention: like "\u{X}" w/o the "\u"
  }
  /*
  export function explode_cp(s) {
      return [...s].map(c => c.codePointAt(0));
  }
  */ function explode_cp(s) {
      let cps = [];
      for(let pos = 0, len = s.length; pos < len;){
          let cp = s.codePointAt(pos);
          pos += cp < 0x10000 ? 1 : 2;
          cps.push(cp);
      }
      return cps;
  }
  function str_from_cps(cps) {
      const chunk = 4096;
      let len = cps.length;
      if (len < chunk) return String.fromCodePoint(...cps);
      let buf = [];
      for(let i = 0; i < len;)buf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));
      return buf.join("");
  }
  function compare_arrays(a, b) {
      let n = a.length;
      let c = n - b.length;
      for(let i = 0; c == 0 && i < n; i++)c = a[i] - b[i];
      return c;
  }
  // created 2023-02-21T09:18:13.549Z
  var r = read_compressed_payload("AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g");
  // https://unicode.org/reports/tr15/
  function unpack_cc(packed) {
      return packed >> 24 & 0xFF;
  }
  function unpack_cp(packed) {
      return packed & 0xFFFFFF;
  }
  const SHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i)=>v.map((x)=>[
              x,
              i + 1 << 24
          ]))); // pre-shifted
  const EXCLUSIONS = new Set(read_sorted(r));
  const DECOMP = new Map();
  const RECOMP = new Map();
  for (let [cp, cps] of read_mapped(r)){
      if (!EXCLUSIONS.has(cp) && cps.length == 2) {
          let [a, b] = cps;
          let bucket = RECOMP.get(a);
          if (!bucket) {
              bucket = new Map();
              RECOMP.set(a, bucket);
          }
          bucket.set(b, cp);
      }
      DECOMP.set(cp, cps.reverse()); // stored reversed
  }
  // algorithmic hangul
  // https://www.unicode.org/versions/Unicode15.0.0/ch03.pdf (page 144)
  const S0 = 0xAC00;
  const L0 = 0x1100;
  const V0 = 0x1161;
  const T0 = 0x11A7;
  const L_COUNT = 19;
  const V_COUNT = 21;
  const T_COUNT = 28;
  const N_COUNT = V_COUNT * T_COUNT;
  const S_COUNT = L_COUNT * N_COUNT;
  const S1 = S0 + S_COUNT;
  const L1 = L0 + L_COUNT;
  const V1 = V0 + V_COUNT;
  const T1 = T0 + T_COUNT;
  function is_hangul(cp) {
      return cp >= S0 && cp < S1;
  }
  function compose_pair(a, b) {
      if (a >= L0 && a < L1 && b >= V0 && b < V1) return S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;
      else if (is_hangul(a) && b > T0 && b < T1 && (a - S0) % T_COUNT == 0) return a + (b - T0);
      else {
          let recomp = RECOMP.get(a);
          if (recomp) {
              recomp = recomp.get(b);
              if (recomp) return recomp;
          }
          return -1;
      }
  }
  function decomposed(cps) {
      let ret = [];
      let buf = [];
      let check_order = false;
      function add(cp) {
          let cc = SHIFTED_RANK.get(cp);
          if (cc) {
              check_order = true;
              cp |= cc;
          }
          ret.push(cp);
      }
      for (let cp of cps)while(true){
          if (cp < 0x80) ret.push(cp);
          else if (is_hangul(cp)) {
              let s_index = cp - S0;
              let l_index = s_index / N_COUNT | 0;
              let v_index = s_index % N_COUNT / T_COUNT | 0;
              let t_index = s_index % T_COUNT;
              add(L0 + l_index);
              add(V0 + v_index);
              if (t_index > 0) add(T0 + t_index);
          } else {
              let mapped = DECOMP.get(cp);
              if (mapped) buf.push(...mapped);
              else add(cp);
          }
          if (!buf.length) break;
          cp = buf.pop();
      }
      if (check_order && ret.length > 1) {
          let prev_cc = unpack_cc(ret[0]);
          for(let i = 1; i < ret.length; i++){
              let cc = unpack_cc(ret[i]);
              if (cc == 0 || prev_cc <= cc) {
                  prev_cc = cc;
                  continue;
              }
              let j = i - 1;
              while(true){
                  let tmp = ret[j + 1];
                  ret[j + 1] = ret[j];
                  ret[j] = tmp;
                  if (!j) break;
                  prev_cc = unpack_cc(ret[--j]);
                  if (prev_cc <= cc) break;
              }
              prev_cc = unpack_cc(ret[i]);
          }
      }
      return ret;
  }
  function composed_from_decomposed(v) {
      let ret = [];
      let stack = [];
      let prev_cp = -1;
      let prev_cc = 0;
      for (let packed of v){
          let cc = unpack_cc(packed);
          let cp = unpack_cp(packed);
          if (prev_cp == -1) {
              if (cc == 0) prev_cp = cp;
              else ret.push(cp);
          } else if (prev_cc > 0 && prev_cc >= cc) {
              if (cc == 0) {
                  ret.push(prev_cp, ...stack);
                  stack.length = 0;
                  prev_cp = cp;
              } else stack.push(cp);
              prev_cc = cc;
          } else {
              let composed = compose_pair(prev_cp, cp);
              if (composed >= 0) prev_cp = composed;
              else if (prev_cc == 0 && cc == 0) {
                  ret.push(prev_cp);
                  prev_cp = cp;
              } else {
                  stack.push(cp);
                  prev_cc = cc;
              }
          }
      }
      if (prev_cp >= 0) ret.push(prev_cp, ...stack);
      return ret;
  }
  // note: cps can be iterable
  function nfd(cps) {
      return decomposed(cps).map(unpack_cp);
  }
  function nfc(cps) {
      return composed_from_decomposed(decomposed(cps));
  }
  //const t0 = performance.now();
  const STOP = 0x2E;
  const FE0F = 0xFE0F;
  const STOP_CH = ".";
  const UNIQUE_PH = 1;
  const HYPHEN = 0x2D;
  function read_set() {
      return new Set(read_sorted(r$1));
  }
  const MAPPED = new Map(read_mapped(r$1));
  const IGNORED = read_set(); // ignored characters are not valid, so just read raw codepoints
  /*
  // direct include from payload is smaller that the decompression code
  const FENCED = new Map(read_array_while(() => {
      let cp = r();
      if (cp) return [cp, read_str(r())];
  }));
  */ // 20230217: we still need all CM for proper error formatting
  // but norm only needs NSM subset that are potentially-valid
  const CM = read_set();
  const NSM = new Set(read_sorted(r$1).map(function(i) {
      return this[i];
  }, [
      ...CM
  ]));
  /*
  const CM_SORTED = read_sorted(r);
  const NSM = new Set(read_sorted(r).map(i => CM_SORTED[i]));
  const CM = new Set(CM_SORTED);
  */ const ESCAPE = read_set(); // characters that should not be printed
  const NFC_CHECK = read_set();
  const CHUNKS = read_sorted_arrays(r$1);
  function read_chunked() {
      // deduplicated sets + uniques
      return new Set([
          read_sorted(r$1).map((i)=>CHUNKS[i]),
          read_sorted(r$1)
      ].flat(2));
  }
  const UNRESTRICTED = r$1();
  const GROUPS = read_array_while((i)=>{
      // minifier property mangling seems unsafe
      // so these are manually renamed to single chars
      let N = read_array_while(r$1).map((x)=>x + 0x60);
      if (N.length) {
          let R = i >= UNRESTRICTED; // first arent restricted
          N[0] -= 32; // capitalize
          N = str_from_cps(N);
          if (R) N = `Restricted[${N}]`;
          let P = read_chunked(); // primary
          let Q = read_chunked(); // secondary
          let V = [
              ...P,
              ...Q
          ].sort((a, b)=>a - b); // derive: sorted valid
          //let M = r()-1; // combining mark
          let M = !r$1(); // not-whitelisted, check for NSM
          // code currently isn't needed
          /*if (M < 0) { // whitelisted
              M = new Map(read_array_while(() => {
                  let i = r();
                  if (i) return [V[i-1], read_array_while(() => {
                      let v = read_array_while(r);
                      if (v.length) return v.map(x => x-1);
                  })];
              }));
          }*/ return {
              N,
              P,
              M,
              R,
              V: new Set(V)
          };
      }
  });
  const WHOLE_VALID = read_set();
  const WHOLE_MAP = new Map();
  // decode compressed wholes
  [
      ...WHOLE_VALID,
      ...read_set()
  ].sort((a, b)=>a - b).map((cp, i, v)=>{
      let d = r$1();
      let w = v[i] = d ? v[i - d] : {
          V: [],
          M: new Map()
      };
      w.V.push(cp); // add to member set
      if (!WHOLE_VALID.has(cp)) WHOLE_MAP.set(cp, w); // register with whole map
  });
  // compute confusable-extent complements
  for (let { V , M  } of new Set(WHOLE_MAP.values())){
      // connect all groups that have each whole character
      let recs = [];
      for (let cp of V){
          let gs = GROUPS.filter((g)=>g.V.has(cp));
          let rec = recs.find(({ G  })=>gs.some((g)=>G.has(g)));
          if (!rec) {
              rec = {
                  G: new Set(),
                  V: []
              };
              recs.push(rec);
          }
          rec.V.push(cp);
          gs.forEach((g)=>rec.G.add(g));
      }
      // per character cache groups which are not a member of the extent
      let union = recs.flatMap(({ G  })=>[
              ...G
          ]);
      for (let { G , V  } of recs){
          let complement = new Set(union.filter((g)=>!G.has(g)));
          for (let cp of V)M.set(cp, complement);
      }
  }
  let union = new Set(); // exists in 1+ groups
  let multi = new Set(); // exists in 2+ groups
  for (let g of GROUPS)for (let cp of g.V)(union.has(cp) ? multi : union).add(cp);
  // dual purpose WHOLE_MAP: return placeholder if unique non-confusable
  for (let cp of union)if (!WHOLE_MAP.has(cp) && !multi.has(cp)) WHOLE_MAP.set(cp, UNIQUE_PH);
  const VALID = new Set([
      ...union,
      ...nfd(union)
  ]); // possibly valid
  // decode emoji
  const EMOJI_SORTED = read_sorted(r$1); // temporary
  //const EMOJI_SOLO = new Set(read_sorted(r).map(i => EMOJI_SORTED[i])); // not needed
  const EMOJI_ROOT = read_emoji_trie([]);
  function read_emoji_trie(cps) {
      let B = read_array_while(()=>{
          let keys = read_sorted(r$1).map((i)=>EMOJI_SORTED[i]);
          if (keys.length) return read_emoji_trie(keys);
      }).sort((a, b)=>b.Q.size - a.Q.size); // sort by likelihood
      let temp = r$1();
      let V = temp % 3; // valid (0 = false, 1 = true, 2 = weird)
      temp = temp / 3 | 0;
      let F = temp & 1; // allow FE0F
      temp >>= 1;
      let S = temp & 1; // save
      let C = temp & 2; // check
      return {
          B,
          V,
          F,
          S,
          C,
          Q: new Set(cps)
      };
  }
  //console.log(performance.now() - t0);
  // free tagging system
  class Emoji extends Array {
      get is_emoji() {
          return true;
      }
  }
  // create a safe to print string 
  // invisibles are escaped
  // leading cm uses placeholder
  // quoter(cp) => string, eg. 3000 => "{3000}"
  // note: in html, you'd call this function then replace [<>&] with entities
  function safe_str_from_cps(cps, quoter = quote_cp) {
      //if (Number.isInteger(cps)) cps = [cps];
      //if (!Array.isArray(cps)) throw new TypeError(`expected codepoints`);
      let buf = [];
      if (is_combining_mark(cps[0])) buf.push("◌");
      let prev = 0;
      let n = cps.length;
      for(let i = 0; i < n; i++){
          let cp = cps[i];
          if (should_escape(cp)) {
              buf.push(str_from_cps(cps.slice(prev, i)));
              buf.push(quoter(cp));
              prev = i + 1;
          }
      }
      buf.push(str_from_cps(cps.slice(prev, n)));
      return buf.join("");
  }
  // if escaped: {HEX}
  //       else: "x" {HEX}
  function quoted_cp(cp) {
      return (should_escape(cp) ? "" : `${bidi_qq(safe_str_from_cps([
          cp
      ]))} `) + quote_cp(cp);
  }
  // 20230211: some messages can be mixed-directional and result in spillover
  // use 200E after a quoted string to force the remainder of a string from 
  // acquring the direction of the quote
  // https://www.w3.org/International/questions/qa-bidi-unicode-controls#exceptions
  function bidi_qq(s) {
      return `"${s}"\u200E`; // strong LTR
  }
  function check_label_extension(cps) {
      if (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) throw new Error("invalid label extension");
  }
  function check_leading_underscore(cps) {
      const UNDERSCORE = 0x5F;
      for(let i = cps.lastIndexOf(UNDERSCORE); i > 0;){
          if (cps[--i] !== UNDERSCORE) throw new Error("underscore allowed only at start");
      }
  }
  // check that a fenced cp is not leading, trailing, or touching another fenced cp
  function check_fenced(cps) {
      let cp = cps[0];
      let prev = FENCED.get(cp);
      if (prev) throw error_placement(`leading ${prev}`);
      let n = cps.length;
      let last = -1; // prevents trailing from throwing
      for(let i = 1; i < n; i++){
          cp = cps[i];
          let match = FENCED.get(cp);
          if (match) {
              // since cps[0] isn't fenced, cps[1] cannot throw
              if (last == i) throw error_placement(`${prev} + ${match}`);
              last = i + 1;
              prev = match;
          }
      }
      if (last == n) throw error_placement(`trailing ${prev}`);
  }
  // note: set(s) cannot be exposed because they can be modified
  function is_combining_mark(cp) {
      return CM.has(cp);
  }
  function should_escape(cp) {
      return ESCAPE.has(cp);
  }
  function ens_normalize_fragment(frag, decompose) {
      let nf = decompose ? nfd : nfc;
      return frag.split(STOP_CH).map((label)=>str_from_cps(process(explode_cp(label), nf).flatMap((x)=>x.is_emoji ? filter_fe0f(x) : x))).join(STOP_CH);
  }
  function ens_normalize(name) {
      return flatten(ens_split(name));
  }
  function ens_beautify(name) {
      let split = ens_split(name, true);
      // this is experimental
      for (let { type , output , error  } of split){
          if (error) continue;
          // replace leading/trailing hyphen
          // 20230121: consider beautifing all or leading/trailing hyphen to unicode variant
          // not exactly the same in every font, but very similar: "-" vs "‐"
          /*
          const UNICODE_HYPHEN = 0x2010;
          // maybe this should replace all for visual consistancy?
          // `node tools/reg-count.js regex ^-\{2,\}` => 592
          //for (let i = 0; i < output.length; i++) if (output[i] == 0x2D) output[i] = 0x2010;
          if (output[0] == HYPHEN) output[0] = UNICODE_HYPHEN;
          let end = output.length-1;
          if (output[end] == HYPHEN) output[end] = UNICODE_HYPHEN;
          */ // 20230123: WHATWG URL uses "CheckHyphens" false
          // https://url.spec.whatwg.org/#idna
          // update ethereum symbol
          // ξ => Ξ if not greek
          if (type !== "Greek") {
              let prev = 0;
              while(true){
                  let next = output.indexOf(0x3BE, prev);
                  if (next < 0) break;
                  output[next] = 0x39E;
                  prev = next + 1;
              }
          }
      // 20221213: fixes bidi subdomain issue, but breaks invariant (200E is disallowed)
      // could be fixed with special case for: 2D (.) + 200E (LTR)
      //output.splice(0, 0, 0x200E);
      }
      return flatten(split);
  }
  function ens_split(name, preserve_emoji) {
      let offset = 0;
      // https://unicode.org/reports/tr46/#Validity_Criteria
      // 4.) "The label must not contain a U+002E ( . ) FULL STOP."
      return name.split(STOP_CH).map((label)=>{
          let input = explode_cp(label);
          let info = {
              input,
              offset
          };
          offset += input.length + 1; // + stop
          let norm;
          try {
              // 1.) "The label must be in Unicode Normalization Form NFC"
              let tokens = info.tokens = process(input, nfc); // if we parse, we get [norm and mapped]
              let token_count = tokens.length;
              let type;
              if (!token_count) // 20230120: change to strict
              // https://discuss.ens.domains/t/ens-name-normalization-2nd/14564/59
              //norm = [];
              //type = 'None'; // use this instead of next match, "ASCII"
              throw new Error(`empty label`);
              else {
                  let chars = tokens[0];
                  let emoji = token_count > 1 || chars.is_emoji;
                  if (!emoji && chars.every((cp)=>cp < 0x80)) {
                      norm = chars;
                      check_leading_underscore(norm);
                      // only needed for ascii
                      // 20230123: matches matches WHATWG, see note 3.3
                      check_label_extension(norm);
                      // cant have fenced
                      // cant have cm
                      // cant have wholes
                      // see derive: "Fastpath ASCII"
                      type = "ASCII";
                  } else {
                      if (emoji) {
                          info.emoji = true;
                          chars = tokens.flatMap((x)=>x.is_emoji ? [] : x); // all of the nfc tokens concat together
                      }
                      norm = tokens.flatMap((x)=>!preserve_emoji && x.is_emoji ? filter_fe0f(x) : x);
                      check_leading_underscore(norm);
                      if (!chars.length) type = "Emoji";
                      else {
                          // 5. "The label must not begin with a combining mark, that is: General_Category=Mark."
                          if (CM.has(norm[0])) throw error_placement("leading combining mark");
                          for(let i = 1; i < token_count; i++){
                              let cps = tokens[i];
                              if (!cps.is_emoji && CM.has(cps[0])) // bidi_qq() not needed since emoji is LTR and cps is a CM
                              throw error_placement(`emoji + combining mark: "${str_from_cps(tokens[i - 1])} + ${safe_str_from_cps([
                                  cps[0]
                              ])}"`);
                          }
                          check_fenced(norm);
                          let unique = [
                              ...new Set(chars)
                          ];
                          let [g] = determine_group(unique); // take the first match
                          // see derive: "Matching Groups have Same CM Style"
                          // alternative: could form a hybrid type: Latin/Japanese/...	
                          check_group(g, chars); // need text in order
                          check_whole(g, unique); // only need unique text (order would be required for multiple-char confusables)
                          type = g.N;
                      // 20230121: consider exposing restricted flag
                      // it's simpler to just check for 'Restricted'
                      // or even better: type.endsWith(']')
                      //if (g.R) info.restricted = true;
                      }
                  }
              }
              info.type = type;
          } catch (err) {
              info.error = err; // use full error object
          }
          info.output = norm;
          return info;
      });
  }
  function check_whole(group, unique) {
      let maker;
      let shared = []; // TODO: can this be avoided?
      for (let cp of unique){
          let whole = WHOLE_MAP.get(cp);
          if (whole === UNIQUE_PH) return; // unique, non-confusable
          if (whole) {
              let set = whole.M.get(cp); // groups which have a character that look-like this character
              maker = maker ? maker.filter((g)=>set.has(g)) : [
                  ...set
              ];
              if (!maker.length) return; // confusable intersection is empty
          } else shared.push(cp);
      }
      if (maker) // we have 1+ confusable
      // check if any of the remaning groups
      // contain the shared characters too
      for (let g of maker){
          if (shared.every((cp)=>g.V.has(cp))) throw new Error(`whole-script confusable: ${group.N}/${g.N}`);
      }
  }
  // assumption: unique.size > 0
  // returns list of matching groups
  function determine_group(unique) {
      let groups = GROUPS;
      for (let cp of unique){
          // note: we need to dodge CM that are whitelisted
          // but that code isn't currently necessary
          let gs = groups.filter((g)=>g.V.has(cp));
          if (!gs.length) {
              if (groups === GROUPS) // the character was composed of valid parts
              // but it's NFC form is invalid
              throw error_disallowed(cp); // this should be rare
              else // there is no group that contains all these characters
              // throw using the highest priority group that matched
              // https://www.unicode.org/reports/tr39/#mixed_script_confusables
              throw error_group_member(groups[0], cp);
          }
          groups = gs;
          if (gs.length == 1) break; // there is only one group left
      }
      // there are at least 1 group(s) with all of these characters
      return groups;
  }
  // throw on first error
  function flatten(split) {
      return split.map(({ input , error , output  })=>{
          if (error) {
              // don't print label again if just a single label
              let msg = error.message;
              // bidi_qq() only necessary if msg is digits
              throw new Error(split.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input))}: ${msg}`);
          }
          return str_from_cps(output);
      }).join(STOP_CH);
  }
  function error_disallowed(cp) {
      // TODO: add cp to error?
      return new Error(`disallowed character: ${quoted_cp(cp)}`);
  }
  function error_group_member(g, cp) {
      let quoted = quoted_cp(cp);
      let gg = GROUPS.find((g)=>g.P.has(cp));
      if (gg) quoted = `${gg.N} ${quoted}`;
      return new Error(`illegal mixture: ${g.N} + ${quoted}`);
  }
  function error_placement(where) {
      return new Error(`illegal placement: ${where}`);
  }
  // assumption: cps.length > 0
  // assumption: cps[0] isn't a CM
  // assumption: the previous character isn't an emoji
  function check_group(g, cps) {
      let { V , M  } = g;
      for (let cp of cps){
          if (!V.has(cp)) // for whitelisted scripts, this will throw illegal mixture on invalid cm, eg. "e{300}{300}"
          // at the moment, it's unnecessary to introduce an extra error type
          // until there exists a whitelisted multi-character
          //   eg. if (M < 0 && is_combining_mark(cp)) { ... }
          // there are 3 cases:
          //   1. illegal cm for wrong group => mixture error
          //   2. illegal cm for same group => cm error
          //       requires set of whitelist cm per group: 
          //        eg. new Set([...g.V].flatMap(nfc).filter(cp => CM.has(cp)))
          //   3. wrong group => mixture error
          throw error_group_member(g, cp);
      }
      //if (M >= 0) { // we have a known fixed cm count
      if (M) {
          let decomposed = nfd(cps);
          for(let i = 1, e = decomposed.length; i < e; i++)// 20230210: bugfix: using cps instead of decomposed h/t Carbon225
          /*
              if (CM.has(decomposed[i])) {
                  let j = i + 1;
                  while (j < e && CM.has(decomposed[j])) j++;
                  if (j - i > M) {
                      throw new Error(`too many combining marks: ${g.N} ${bidi_qq(str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${M})`);
                  }
                  i = j;
              }
              */ // 20230217: switch to NSM counting
          // https://www.unicode.org/reports/tr39/#Optional_Detection
          if (NSM.has(decomposed[i])) {
              let j = i + 1;
              for(let cp; j < e && NSM.has(cp = decomposed[j]); j++)// a. Forbid sequences of the same nonspacing mark.
              for(let k = i; k < j; k++){
                  if (decomposed[k] == cp) throw new Error(`non-spacing marks: repeated ${quoted_cp(cp)}`);
              }
              // parse to end so we have full nsm count
              // b. Forbid sequences of more than 4 nonspacing marks (gc=Mn or gc=Me).
              if (j - i > NSM_MAX) // note: this slice starts with a base char or spacing-mark cm
              throw new Error(`non-spacing marks: too many ${bidi_qq(safe_str_from_cps(decomposed.slice(i - 1, j)))} (${j - i}/${NSM_MAX})`);
              i = j;
          }
      }
  // *** this code currently isn't needed ***
  /*
      let cm_whitelist = M instanceof Map;
      for (let i = 0, e = cps.length; i < e; ) {
          let cp = cps[i++];
          let seqs = cm_whitelist && M.get(cp);
          if (seqs) { 
              // list of codepoints that can follow
              // if this exists, this will always be 1+
              let j = i;
              while (j < e && CM.has(cps[j])) j++;
              let cms = cps.slice(i, j);
              let match = seqs.find(seq => !compare_arrays(seq, cms));
              if (!match) throw new Error(`disallowed combining mark sequence: "${safe_str_from_cps([cp, ...cms])}"`);
              i = j;
          } else if (!V.has(cp)) {
              // https://www.unicode.org/reports/tr39/#mixed_script_confusables
              let quoted = quoted_cp(cp);
              for (let cp of cps) {
                  let u = UNIQUE.get(cp);
                  if (u && u !== g) {
                      // if both scripts are restricted this error is confusing
                      // because we don't differentiate RestrictedA from RestrictedB 
                      if (!u.R) quoted = `${quoted} is ${u.N}`;
                      break;
                  }
              }
              throw new Error(`disallowed ${g.N} character: ${quoted}`);
              //throw new Error(`disallowed character: ${quoted} (expected ${g.N})`);
              //throw new Error(`${g.N} does not allow: ${quoted}`);
          }
      }
      if (!cm_whitelist) {
          let decomposed = nfd(cps);
          for (let i = 1, e = decomposed.length; i < e; i++) { // we know it can't be cm leading
              if (CM.has(decomposed[i])) {
                  let j = i + 1;
                  while (j < e && CM.has(decomposed[j])) j++;
                  if (j - i > M) {
                      throw new Error(`too many combining marks: "${str_from_cps(decomposed.slice(i-1, j))}" (${j-i}/${M})`);
                  }
                  i = j;
              }
          }
      }
      */ }
  // given a list of codepoints
  // returns a list of lists, where emoji are a fully-qualified (as Array subclass)
  // eg. explode_cp("abc💩d") => [[61, 62, 63], Emoji[1F4A9, FE0F], [64]]
  function process(input, nf) {
      let ret = [];
      let chars = [];
      input = input.slice().reverse(); // flip so we can pop
      while(input.length){
          let emoji = consume_emoji_reversed(input);
          if (emoji) {
              if (chars.length) {
                  ret.push(nf(chars));
                  chars = [];
              }
              ret.push(emoji);
          } else {
              let cp = input.pop();
              if (VALID.has(cp)) chars.push(cp);
              else {
                  let cps = MAPPED.get(cp);
                  if (cps) chars.push(...cps);
                  else if (!IGNORED.has(cp)) throw error_disallowed(cp);
              }
          }
      }
      if (chars.length) ret.push(nf(chars));
      return ret;
  }
  function filter_fe0f(cps) {
      return cps.filter((cp)=>cp != FE0F);
  }
  // given array of codepoints
  // returns the longest valid emoji sequence (or undefined if no match)
  // *MUTATES* the supplied array
  // allows optional FE0F
  // disallows interleaved ignored characters
  // fills (optional) eaten array with matched codepoints
  function consume_emoji_reversed(cps, eaten) {
      let node = EMOJI_ROOT;
      let emoji;
      let saved;
      let stack = [];
      let pos = cps.length;
      if (eaten) eaten.length = 0; // clear input buffer (if needed)
      while(pos){
          let cp = cps[--pos];
          node = node.B.find((x)=>x.Q.has(cp));
          if (!node) break;
          if (node.S) saved = cp;
          else if (node.C) {
              if (cp === saved) break;
          }
          stack.push(cp);
          if (node.F) {
              stack.push(FE0F);
              if (pos > 0 && cps[pos - 1] == FE0F) pos--; // consume optional FE0F
          }
          if (node.V) {
              emoji = conform_emoji_copy(stack, node);
              if (eaten) eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)
              cps.length = pos; // truncate
          }
      }
      /*
      // *** this code currently isn't needed ***
      if (!emoji) {
          let cp = cps[cps.length-1];
          if (EMOJI_SOLO.has(cp)) {
              if (eaten) eaten.push(cp);
              emoji = Emoji.of(cp);
              cps.pop();
          }
      }
      */ return emoji;
  }
  // create a copy and fix any unicode quirks
  function conform_emoji_copy(cps, node) {
      let copy = Emoji.from(cps); // copy stack
      if (node.V == 2) copy.splice(1, 1); // delete FE0F at position 1 (see: make.js)
      return copy;
  }
  // return all supported emoji as fully-qualified emoji 
  // ordered by length then lexicographic 
  function ens_emoji() {
      // *** this code currently isn't needed ***
      //let ret = [...EMOJI_SOLO].map(x => [x]);
      let ret = [];
      build(EMOJI_ROOT, []);
      return ret.sort(compare_arrays);
      function build(node, cps, saved) {
          if (node.S) saved = cps[cps.length - 1];
          else if (node.C) {
              if (saved === cps[cps.length - 1]) return;
          }
          if (node.F) cps.push(FE0F);
          if (node.V) ret.push(conform_emoji_copy(cps, node));
          for (let br of node.B)for (let cp of br.Q)build(br, [
              ...cps,
              cp
          ], saved);
      }
  }
  // ************************************************************
  // tokenizer 
  const TY_VALID = "valid";
  const TY_MAPPED = "mapped";
  const TY_IGNORED = "ignored";
  const TY_DISALLOWED = "disallowed";
  const TY_EMOJI = "emoji";
  const TY_NFC = "nfc";
  const TY_STOP = "stop";
  function ens_tokenize(name, { nf =true  } = {}) {
      let input = explode_cp(name).reverse();
      let eaten = [];
      let tokens = [];
      while(input.length){
          let emoji = consume_emoji_reversed(input, eaten);
          if (emoji) tokens.push({
              type: TY_EMOJI,
              emoji,
              input: eaten.slice(),
              cps: filter_fe0f(emoji)
          });
          else {
              let cp = input.pop();
              if (cp == STOP) tokens.push({
                  type: TY_STOP,
                  cp
              });
              else if (VALID.has(cp)) tokens.push({
                  type: TY_VALID,
                  cps: [
                      cp
                  ]
              });
              else if (IGNORED.has(cp)) tokens.push({
                  type: TY_IGNORED,
                  cp
              });
              else {
                  let cps = MAPPED.get(cp);
                  if (cps) tokens.push({
                      type: TY_MAPPED,
                      cp,
                      cps: cps.slice()
                  });
                  else tokens.push({
                      type: TY_DISALLOWED,
                      cp
                  });
              }
          }
      }
      if (nf) for(let i = 0, start = -1; i < tokens.length; i++){
          let token = tokens[i];
          if (is_valid_or_mapped(token.type)) {
              if (requires_check(token.cps)) {
                  let end = i + 1;
                  for(let pos = end; pos < tokens.length; pos++){
                      let { type , cps  } = tokens[pos];
                      if (is_valid_or_mapped(type)) {
                          if (!requires_check(cps)) break;
                          end = pos + 1;
                      } else if (type !== TY_IGNORED) break;
                  }
                  if (start < 0) start = i;
                  let slice = tokens.slice(start, end);
                  let cps0 = slice.flatMap((x)=>is_valid_or_mapped(x.type) ? x.cps : []); // strip junk tokens
                  let cps = nfc(cps0);
                  if (compare_arrays(cps, cps0)) {
                      tokens.splice(start, end - start, {
                          type: TY_NFC,
                          input: cps0,
                          cps,
                          tokens0: collapse_valid_tokens(slice),
                          tokens: ens_tokenize(str_from_cps(cps), {
                              nf: false
                          })
                      });
                      i = start;
                  } else i = end - 1; // skip to end of slice
                  start = -1; // reset
              } else start = i; // remember last
          } else if (token.type !== TY_IGNORED) start = -1; // reset
      }
      return collapse_valid_tokens(tokens);
  }
  function is_valid_or_mapped(type) {
      return type == TY_VALID || type == TY_MAPPED;
  }
  function requires_check(cps) {
      return cps.some((cp)=>NFC_CHECK.has(cp));
  }
  function collapse_valid_tokens(tokens) {
      for(let i = 0; i < tokens.length; i++)if (tokens[i].type == TY_VALID) {
          let j = i + 1;
          while(j < tokens.length && tokens[j].type == TY_VALID)j++;
          tokens.splice(i, j - i, {
              type: TY_VALID,
              cps: tokens.slice(i, j).flatMap((x)=>x.cps)
          });
      }
      return tokens;
  }
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"lEf8I":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Computes the [[link-eip-191]] personal-sign message digest to sign.
   *
   *  This prefixes the message with [[MessagePrefix]] and the decimal length
   *  of %%message%% and computes the [[keccak256]] digest.
   *
   *  If %%message%% is a string, it is converted to its UTF-8 bytes
   *  first. To compute the digest of a [[DataHexString]], it must be converted
   *  to [bytes](getBytes).
   *
   *  @example:
   *    hashMessage("Hello World")
   *    //_result:
   *
   *    // Hashes the SIX (6) string characters, i.e.
   *    // [ "0", "x", "4", "2", "4", "3" ]
   *    hashMessage("0x4243")
   *    //_result:
   *
   *    // Hashes the TWO (2) bytes [ 0x42, 0x43 ]...
   *    hashMessage(getBytes("0x4243"))
   *    //_result:
   *
   *    // ...which is equal to using data
   *    hashMessage(new Uint8Array([ 0x42, 0x43 ]))
   *    //_result:
   *
   */ parcelHelpers.export(exports, "hashMessage", ()=>hashMessage);
  parcelHelpers.export(exports, "verifyMessage", ()=>verifyMessage);
  var _indexJs = require("../crypto/index.js");
  var _indexJs1 = require("../constants/index.js");
  var _indexJs2 = require("../transaction/index.js");
  var _indexJs3 = require("../utils/index.js");
  function hashMessage(message) {
      if (typeof message === "string") message = (0, _indexJs3.toUtf8Bytes)(message);
      return (0, _indexJs.keccak256)((0, _indexJs3.concat)([
          (0, _indexJs3.toUtf8Bytes)((0, _indexJs1.MessagePrefix)),
          (0, _indexJs3.toUtf8Bytes)(String(message.length)),
          message
      ]));
  }
  function verifyMessage(message, sig) {
      const digest = hashMessage(message);
      return (0, _indexJs2.recoverAddress)(digest, sig);
  }
  
  },{"../crypto/index.js":"4oi1q","../constants/index.js":"lNX00","../transaction/index.js":"cOUq6","../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"cOUq6":[function(require,module,exports) {
  /**
   *  Transactions..
   *
   *  @_section api/transaction:Transactions  [about-transactions]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "accessListify", ()=>(0, _accesslistJs.accessListify));
  parcelHelpers.export(exports, "computeAddress", ()=>(0, _addressJs.computeAddress));
  parcelHelpers.export(exports, "recoverAddress", ()=>(0, _addressJs.recoverAddress));
  parcelHelpers.export(exports, "Transaction", ()=>(0, _transactionJs.Transaction));
  var _accesslistJs = require("./accesslist.js");
  var _addressJs = require("./address.js");
  var _transactionJs = require("./transaction.js");
  
  },{"./accesslist.js":"j6eRM","./address.js":"g053E","./transaction.js":"2GT6G","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"j6eRM":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Returns a [[AccessList]] from any ethers-supported access-list structure.
   */ parcelHelpers.export(exports, "accessListify", ()=>accessListify);
  var _indexJs = require("../address/index.js");
  var _indexJs1 = require("../utils/index.js");
  function accessSetify(addr, storageKeys) {
      return {
          address: (0, _indexJs.getAddress)(addr),
          storageKeys: storageKeys.map((storageKey, index)=>{
              (0, _indexJs1.assertArgument)((0, _indexJs1.isHexString)(storageKey, 32), "invalid slot", `storageKeys[${index}]`, storageKey);
              return storageKey.toLowerCase();
          })
      };
  }
  function accessListify(value) {
      if (Array.isArray(value)) return value.map((set, index)=>{
          if (Array.isArray(set)) {
              (0, _indexJs1.assertArgument)(set.length === 2, "invalid slot set", `value[${index}]`, set);
              return accessSetify(set[0], set[1]);
          }
          (0, _indexJs1.assertArgument)(set != null && typeof set === "object", "invalid address-slot set", "value", value);
          return accessSetify(set.address, set.storageKeys);
      });
      (0, _indexJs1.assertArgument)(value != null && typeof value === "object", "invalid access list", "value", value);
      const result = Object.keys(value).map((addr)=>{
          const storageKeys = value[addr].reduce((accum, storageKey)=>{
              accum[storageKey] = true;
              return accum;
          }, {});
          return accessSetify(addr, Object.keys(storageKeys).sort());
      });
      result.sort((a, b)=>a.address.localeCompare(b.address));
      return result;
  }
  
  },{"../address/index.js":"cuJ87","../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"g053E":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Returns the address for the %%key%%.
   *
   *  The key may be any standard form of public key or a private key.
   */ parcelHelpers.export(exports, "computeAddress", ()=>computeAddress);
  /**
   *  Returns the recovered address for the private key that was
   *  used to sign %%digest%% that resulted in %%signature%%.
   */ parcelHelpers.export(exports, "recoverAddress", ()=>recoverAddress);
  var _indexJs = require("../address/index.js");
  var _indexJs1 = require("../crypto/index.js");
  function computeAddress(key) {
      let pubkey;
      if (typeof key === "string") pubkey = (0, _indexJs1.SigningKey).computePublicKey(key, false);
      else pubkey = key.publicKey;
      return (0, _indexJs.getAddress)((0, _indexJs1.keccak256)("0x" + pubkey.substring(4)).substring(26));
  }
  function recoverAddress(digest, signature) {
      return computeAddress((0, _indexJs1.SigningKey).recoverPublicKey(digest, signature));
  }
  
  },{"../address/index.js":"cuJ87","../crypto/index.js":"4oi1q","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"2GT6G":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  A **Transaction** describes an operation to be executed on
   *  Ethereum by an Externally Owned Account (EOA). It includes
   *  who (the [[to]] address), what (the [[data]]) and how much (the
   *  [[value]] in ether) the operation should entail.
   *
   *  @example:
   *    tx = new Transaction()
   *    //_result:
   *
   *    tx.data = "0x1234";
   *    //_result:
   */ parcelHelpers.export(exports, "Transaction", ()=>Transaction);
  var _indexJs = require("../address/index.js");
  var _indexJs1 = require("../crypto/index.js");
  var _indexJs2 = require("../utils/index.js");
  var _accesslistJs = require("./accesslist.js");
  var _addressJs = require("./address.js");
  const BN_0 = BigInt(0);
  const BN_2 = BigInt(2);
  const BN_27 = BigInt(27);
  const BN_28 = BigInt(28);
  const BN_35 = BigInt(35);
  const BN_MAX_UINT = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  function handleAddress(value) {
      if (value === "0x") return null;
      return (0, _indexJs.getAddress)(value);
  }
  function handleAccessList(value, param) {
      try {
          return (0, _accesslistJs.accessListify)(value);
      } catch (error) {
          (0, _indexJs2.assertArgument)(false, error.message, param, value);
      }
  }
  function handleNumber(_value, param) {
      if (_value === "0x") return 0;
      return (0, _indexJs2.getNumber)(_value, param);
  }
  function handleUint(_value, param) {
      if (_value === "0x") return BN_0;
      const value = (0, _indexJs2.getBigInt)(_value, param);
      (0, _indexJs2.assertArgument)(value <= BN_MAX_UINT, "value exceeds uint size", param, value);
      return value;
  }
  function formatNumber(_value, name) {
      const value = (0, _indexJs2.getBigInt)(_value, "value");
      const result = (0, _indexJs2.toBeArray)(value);
      (0, _indexJs2.assertArgument)(result.length <= 32, `value too large`, `tx.${name}`, value);
      return result;
  }
  function formatAccessList(value) {
      return (0, _accesslistJs.accessListify)(value).map((set)=>[
              set.address,
              set.storageKeys
          ]);
  }
  function _parseLegacy(data) {
      const fields = (0, _indexJs2.decodeRlp)(data);
      (0, _indexJs2.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), "invalid field count for legacy transaction", "data", data);
      const tx = {
          type: 0,
          nonce: handleNumber(fields[0], "nonce"),
          gasPrice: handleUint(fields[1], "gasPrice"),
          gasLimit: handleUint(fields[2], "gasLimit"),
          to: handleAddress(fields[3]),
          value: handleUint(fields[4], "value"),
          data: (0, _indexJs2.hexlify)(fields[5]),
          chainId: BN_0
      };
      // Legacy unsigned transaction
      if (fields.length === 6) return tx;
      const v = handleUint(fields[6], "v");
      const r = handleUint(fields[7], "r");
      const s = handleUint(fields[8], "s");
      if (r === BN_0 && s === BN_0) // EIP-155 unsigned transaction
      tx.chainId = v;
      else {
          // Compute the EIP-155 chain ID (or 0 for legacy)
          let chainId = (v - BN_35) / BN_2;
          if (chainId < BN_0) chainId = BN_0;
          tx.chainId = chainId;
          // Signed Legacy Transaction
          (0, _indexJs2.assertArgument)(chainId !== BN_0 || v === BN_27 || v === BN_28, "non-canonical legacy v", "v", fields[6]);
          tx.signature = (0, _indexJs1.Signature).from({
              r: (0, _indexJs2.zeroPadValue)(fields[7], 32),
              s: (0, _indexJs2.zeroPadValue)(fields[8], 32),
              v
          });
          tx.hash = (0, _indexJs1.keccak256)(data);
      }
      return tx;
  }
  function _serializeLegacy(tx, sig) {
      const fields = [
          formatNumber(tx.nonce || 0, "nonce"),
          formatNumber(tx.gasPrice || 0, "gasPrice"),
          formatNumber(tx.gasLimit || 0, "gasLimit"),
          tx.to != null ? (0, _indexJs.getAddress)(tx.to) : "0x",
          formatNumber(tx.value || 0, "value"),
          tx.data || "0x"
      ];
      let chainId = BN_0;
      if (tx.chainId != BN_0) {
          // A chainId was provided; if non-zero we'll use EIP-155
          chainId = (0, _indexJs2.getBigInt)(tx.chainId, "tx.chainId");
          // We have a chainId in the tx and an EIP-155 v in the signature,
          // make sure they agree with each other
          (0, _indexJs2.assertArgument)(!sig || sig.networkV == null || sig.legacyChainId === chainId, "tx.chainId/sig.v mismatch", "sig", sig);
      } else if (tx.signature) {
          // No explicit chainId, but EIP-155 have a derived implicit chainId
          const legacy = tx.signature.legacyChainId;
          if (legacy != null) chainId = legacy;
      }
      // Requesting an unsigned transaction
      if (!sig) {
          // We have an EIP-155 transaction (chainId was specified and non-zero)
          if (chainId !== BN_0) {
              fields.push((0, _indexJs2.toBeArray)(chainId));
              fields.push("0x");
              fields.push("0x");
          }
          return (0, _indexJs2.encodeRlp)(fields);
      }
      // @TODO: We should probably check that tx.signature, chainId, and sig
      //        match but that logic could break existing code, so schedule
      //        this for the next major bump.
      // Compute the EIP-155 v
      let v = BigInt(27 + sig.yParity);
      if (chainId !== BN_0) v = (0, _indexJs1.Signature).getChainIdV(chainId, sig.v);
      else if (BigInt(sig.v) !== v) (0, _indexJs2.assertArgument)(false, "tx.chainId/sig.v mismatch", "sig", sig);
      // Add the signature
      fields.push((0, _indexJs2.toBeArray)(v));
      fields.push((0, _indexJs2.toBeArray)(sig.r));
      fields.push((0, _indexJs2.toBeArray)(sig.s));
      return (0, _indexJs2.encodeRlp)(fields);
  }
  function _parseEipSignature(tx, fields, serialize) {
      let yParity;
      try {
          yParity = handleNumber(fields[0], "yParity");
          if (yParity !== 0 && yParity !== 1) throw new Error("bad yParity");
      } catch (error) {
          (0, _indexJs2.assertArgument)(false, "invalid yParity", "yParity", fields[0]);
      }
      const r = (0, _indexJs2.zeroPadValue)(fields[1], 32);
      const s = (0, _indexJs2.zeroPadValue)(fields[2], 32);
      const signature = (0, _indexJs1.Signature).from({
          r,
          s,
          yParity
      });
      tx.signature = signature;
  }
  function _parseEip1559(data) {
      const fields = (0, _indexJs2.decodeRlp)((0, _indexJs2.getBytes)(data).slice(1));
      (0, _indexJs2.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), "invalid field count for transaction type: 2", "data", (0, _indexJs2.hexlify)(data));
      const maxPriorityFeePerGas = handleUint(fields[2], "maxPriorityFeePerGas");
      const maxFeePerGas = handleUint(fields[3], "maxFeePerGas");
      const tx = {
          type: 2,
          chainId: handleUint(fields[0], "chainId"),
          nonce: handleNumber(fields[1], "nonce"),
          maxPriorityFeePerGas: maxPriorityFeePerGas,
          maxFeePerGas: maxFeePerGas,
          gasPrice: null,
          gasLimit: handleUint(fields[4], "gasLimit"),
          to: handleAddress(fields[5]),
          value: handleUint(fields[6], "value"),
          data: (0, _indexJs2.hexlify)(fields[7]),
          accessList: handleAccessList(fields[8], "accessList")
      };
      // Unsigned EIP-1559 Transaction
      if (fields.length === 9) return tx;
      tx.hash = (0, _indexJs1.keccak256)(data);
      _parseEipSignature(tx, fields.slice(9), _serializeEip1559);
      return tx;
  }
  function _serializeEip1559(tx, sig) {
      const fields = [
          formatNumber(tx.chainId || 0, "chainId"),
          formatNumber(tx.nonce || 0, "nonce"),
          formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
          formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
          formatNumber(tx.gasLimit || 0, "gasLimit"),
          tx.to != null ? (0, _indexJs.getAddress)(tx.to) : "0x",
          formatNumber(tx.value || 0, "value"),
          tx.data || "0x",
          formatAccessList(tx.accessList || [])
      ];
      if (sig) {
          fields.push(formatNumber(sig.yParity, "yParity"));
          fields.push((0, _indexJs2.toBeArray)(sig.r));
          fields.push((0, _indexJs2.toBeArray)(sig.s));
      }
      return (0, _indexJs2.concat)([
          "0x02",
          (0, _indexJs2.encodeRlp)(fields)
      ]);
  }
  function _parseEip2930(data) {
      const fields = (0, _indexJs2.decodeRlp)((0, _indexJs2.getBytes)(data).slice(1));
      (0, _indexJs2.assertArgument)(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), "invalid field count for transaction type: 1", "data", (0, _indexJs2.hexlify)(data));
      const tx = {
          type: 1,
          chainId: handleUint(fields[0], "chainId"),
          nonce: handleNumber(fields[1], "nonce"),
          gasPrice: handleUint(fields[2], "gasPrice"),
          gasLimit: handleUint(fields[3], "gasLimit"),
          to: handleAddress(fields[4]),
          value: handleUint(fields[5], "value"),
          data: (0, _indexJs2.hexlify)(fields[6]),
          accessList: handleAccessList(fields[7], "accessList")
      };
      // Unsigned EIP-2930 Transaction
      if (fields.length === 8) return tx;
      tx.hash = (0, _indexJs1.keccak256)(data);
      _parseEipSignature(tx, fields.slice(8), _serializeEip2930);
      return tx;
  }
  function _serializeEip2930(tx, sig) {
      const fields = [
          formatNumber(tx.chainId || 0, "chainId"),
          formatNumber(tx.nonce || 0, "nonce"),
          formatNumber(tx.gasPrice || 0, "gasPrice"),
          formatNumber(tx.gasLimit || 0, "gasLimit"),
          tx.to != null ? (0, _indexJs.getAddress)(tx.to) : "0x",
          formatNumber(tx.value || 0, "value"),
          tx.data || "0x",
          formatAccessList(tx.accessList || [])
      ];
      if (sig) {
          fields.push(formatNumber(sig.yParity, "recoveryParam"));
          fields.push((0, _indexJs2.toBeArray)(sig.r));
          fields.push((0, _indexJs2.toBeArray)(sig.s));
      }
      return (0, _indexJs2.concat)([
          "0x01",
          (0, _indexJs2.encodeRlp)(fields)
      ]);
  }
  class Transaction {
      #type;
      #to;
      #data;
      #nonce;
      #gasLimit;
      #gasPrice;
      #maxPriorityFeePerGas;
      #maxFeePerGas;
      #value;
      #chainId;
      #sig;
      #accessList;
      /**
       *  The transaction type.
       *
       *  If null, the type will be automatically inferred based on
       *  explicit properties.
       */ get type() {
          return this.#type;
      }
      set type(value) {
          switch(value){
              case null:
                  this.#type = null;
                  break;
              case 0:
              case "legacy":
                  this.#type = 0;
                  break;
              case 1:
              case "berlin":
              case "eip-2930":
                  this.#type = 1;
                  break;
              case 2:
              case "london":
              case "eip-1559":
                  this.#type = 2;
                  break;
              default:
                  (0, _indexJs2.assertArgument)(false, "unsupported transaction type", "type", value);
          }
      }
      /**
       *  The name of the transaction type.
       */ get typeName() {
          switch(this.type){
              case 0:
                  return "legacy";
              case 1:
                  return "eip-2930";
              case 2:
                  return "eip-1559";
          }
          return null;
      }
      /**
       *  The ``to`` address for the transaction or ``null`` if the
       *  transaction is an ``init`` transaction.
       */ get to() {
          return this.#to;
      }
      set to(value) {
          this.#to = value == null ? null : (0, _indexJs.getAddress)(value);
      }
      /**
       *  The transaction nonce.
       */ get nonce() {
          return this.#nonce;
      }
      set nonce(value) {
          this.#nonce = (0, _indexJs2.getNumber)(value, "value");
      }
      /**
       *  The gas limit.
       */ get gasLimit() {
          return this.#gasLimit;
      }
      set gasLimit(value) {
          this.#gasLimit = (0, _indexJs2.getBigInt)(value);
      }
      /**
       *  The gas price.
       *
       *  On legacy networks this defines the fee that will be paid. On
       *  EIP-1559 networks, this should be ``null``.
       */ get gasPrice() {
          const value = this.#gasPrice;
          if (value == null && (this.type === 0 || this.type === 1)) return BN_0;
          return value;
      }
      set gasPrice(value) {
          this.#gasPrice = value == null ? null : (0, _indexJs2.getBigInt)(value, "gasPrice");
      }
      /**
       *  The maximum priority fee per unit of gas to pay. On legacy
       *  networks this should be ``null``.
       */ get maxPriorityFeePerGas() {
          const value = this.#maxPriorityFeePerGas;
          if (value == null) {
              if (this.type === 2) return BN_0;
              return null;
          }
          return value;
      }
      set maxPriorityFeePerGas(value) {
          this.#maxPriorityFeePerGas = value == null ? null : (0, _indexJs2.getBigInt)(value, "maxPriorityFeePerGas");
      }
      /**
       *  The maximum total fee per unit of gas to pay. On legacy
       *  networks this should be ``null``.
       */ get maxFeePerGas() {
          const value = this.#maxFeePerGas;
          if (value == null) {
              if (this.type === 2) return BN_0;
              return null;
          }
          return value;
      }
      set maxFeePerGas(value) {
          this.#maxFeePerGas = value == null ? null : (0, _indexJs2.getBigInt)(value, "maxFeePerGas");
      }
      /**
       *  The transaction data. For ``init`` transactions this is the
       *  deployment code.
       */ get data() {
          return this.#data;
      }
      set data(value) {
          this.#data = (0, _indexJs2.hexlify)(value);
      }
      /**
       *  The amount of ether to send in this transactions.
       */ get value() {
          return this.#value;
      }
      set value(value) {
          this.#value = (0, _indexJs2.getBigInt)(value, "value");
      }
      /**
       *  The chain ID this transaction is valid on.
       */ get chainId() {
          return this.#chainId;
      }
      set chainId(value) {
          this.#chainId = (0, _indexJs2.getBigInt)(value);
      }
      /**
       *  If signed, the signature for this transaction.
       */ get signature() {
          return this.#sig || null;
      }
      set signature(value) {
          this.#sig = value == null ? null : (0, _indexJs1.Signature).from(value);
      }
      /**
       *  The access list.
       *
       *  An access list permits discounted (but pre-paid) access to
       *  bytecode and state variable access within contract execution.
       */ get accessList() {
          const value = this.#accessList || null;
          if (value == null) {
              if (this.type === 1 || this.type === 2) return [];
              return null;
          }
          return value;
      }
      set accessList(value) {
          this.#accessList = value == null ? null : (0, _accesslistJs.accessListify)(value);
      }
      /**
       *  Creates a new Transaction with default values.
       */ constructor(){
          this.#type = null;
          this.#to = null;
          this.#nonce = 0;
          this.#gasLimit = BigInt(0);
          this.#gasPrice = null;
          this.#maxPriorityFeePerGas = null;
          this.#maxFeePerGas = null;
          this.#data = "0x";
          this.#value = BigInt(0);
          this.#chainId = BigInt(0);
          this.#sig = null;
          this.#accessList = null;
      }
      /**
       *  The transaction hash, if signed. Otherwise, ``null``.
       */ get hash() {
          if (this.signature == null) return null;
          return (0, _indexJs1.keccak256)(this.serialized);
      }
      /**
       *  The pre-image hash of this transaction.
       *
       *  This is the digest that a [[Signer]] must sign to authorize
       *  this transaction.
       */ get unsignedHash() {
          return (0, _indexJs1.keccak256)(this.unsignedSerialized);
      }
      /**
       *  The sending address, if signed. Otherwise, ``null``.
       */ get from() {
          if (this.signature == null) return null;
          return (0, _addressJs.recoverAddress)(this.unsignedHash, this.signature);
      }
      /**
       *  The public key of the sender, if signed. Otherwise, ``null``.
       */ get fromPublicKey() {
          if (this.signature == null) return null;
          return (0, _indexJs1.SigningKey).recoverPublicKey(this.unsignedHash, this.signature);
      }
      /**
       *  Returns true if signed.
       *
       *  This provides a Type Guard that properties requiring a signed
       *  transaction are non-null.
       */ isSigned() {
          //isSigned(): this is SignedTransaction {
          return this.signature != null;
      }
      /**
       *  The serialized transaction.
       *
       *  This throws if the transaction is unsigned. For the pre-image,
       *  use [[unsignedSerialized]].
       */ get serialized() {
          (0, _indexJs2.assert)(this.signature != null, "cannot serialize unsigned transaction; maybe you meant .unsignedSerialized", "UNSUPPORTED_OPERATION", {
              operation: ".serialized"
          });
          switch(this.inferType()){
              case 0:
                  return _serializeLegacy(this, this.signature);
              case 1:
                  return _serializeEip2930(this, this.signature);
              case 2:
                  return _serializeEip1559(this, this.signature);
          }
          (0, _indexJs2.assert)(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", {
              operation: ".serialized"
          });
      }
      /**
       *  The transaction pre-image.
       *
       *  The hash of this is the digest which needs to be signed to
       *  authorize this transaction.
       */ get unsignedSerialized() {
          switch(this.inferType()){
              case 0:
                  return _serializeLegacy(this);
              case 1:
                  return _serializeEip2930(this);
              case 2:
                  return _serializeEip1559(this);
          }
          (0, _indexJs2.assert)(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", {
              operation: ".unsignedSerialized"
          });
      }
      /**
       *  Return the most "likely" type; currently the highest
       *  supported transaction type.
       */ inferType() {
          return this.inferTypes().pop();
      }
      /**
       *  Validates the explicit properties and returns a list of compatible
       *  transaction types.
       */ inferTypes() {
          // Checks that there are no conflicting properties set
          const hasGasPrice = this.gasPrice != null;
          const hasFee = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null;
          const hasAccessList = this.accessList != null;
          //if (hasGasPrice && hasFee) {
          //    throw new Error("transaction cannot have gasPrice and maxFeePerGas");
          //}
          if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) (0, _indexJs2.assert)(this.maxFeePerGas >= this.maxPriorityFeePerGas, "priorityFee cannot be more than maxFee", "BAD_DATA", {
              value: this
          });
          //if (this.type === 2 && hasGasPrice) {
          //    throw new Error("eip-1559 transaction cannot have gasPrice");
          //}
          (0, _indexJs2.assert)(!hasFee || this.type !== 0 && this.type !== 1, "transaction type cannot have maxFeePerGas or maxPriorityFeePerGas", "BAD_DATA", {
              value: this
          });
          (0, _indexJs2.assert)(this.type !== 0 || !hasAccessList, "legacy transaction cannot have accessList", "BAD_DATA", {
              value: this
          });
          const types = [];
          // Explicit type
          if (this.type != null) types.push(this.type);
          else {
              if (hasFee) types.push(2);
              else if (hasGasPrice) {
                  types.push(1);
                  if (!hasAccessList) types.push(0);
              } else if (hasAccessList) {
                  types.push(1);
                  types.push(2);
              } else {
                  types.push(0);
                  types.push(1);
                  types.push(2);
              }
          }
          types.sort();
          return types;
      }
      /**
       *  Returns true if this transaction is a legacy transaction (i.e.
       *  ``type === 0``).
       *
       *  This provides a Type Guard that the related properties are
       *  non-null.
       */ isLegacy() {
          return this.type === 0;
      }
      /**
       *  Returns true if this transaction is berlin hardform transaction (i.e.
       *  ``type === 1``).
       *
       *  This provides a Type Guard that the related properties are
       *  non-null.
       */ isBerlin() {
          return this.type === 1;
      }
      /**
       *  Returns true if this transaction is london hardform transaction (i.e.
       *  ``type === 2``).
       *
       *  This provides a Type Guard that the related properties are
       *  non-null.
       */ isLondon() {
          return this.type === 2;
      }
      /**
       *  Create a copy of this transaciton.
       */ clone() {
          return Transaction.from(this);
      }
      /**
       *  Return a JSON-friendly object.
       */ toJSON() {
          const s = (v)=>{
              if (v == null) return null;
              return v.toString();
          };
          return {
              type: this.type,
              to: this.to,
              //            from: this.from,
              data: this.data,
              nonce: this.nonce,
              gasLimit: s(this.gasLimit),
              gasPrice: s(this.gasPrice),
              maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),
              maxFeePerGas: s(this.maxFeePerGas),
              value: s(this.value),
              chainId: s(this.chainId),
              sig: this.signature ? this.signature.toJSON() : null,
              accessList: this.accessList
          };
      }
      /**
       *  Create a **Transaction** from a serialized transaction or a
       *  Transaction-like object.
       */ static from(tx) {
          if (tx == null) return new Transaction();
          if (typeof tx === "string") {
              const payload = (0, _indexJs2.getBytes)(tx);
              if (payload[0] >= 0x7f) return Transaction.from(_parseLegacy(payload));
              switch(payload[0]){
                  case 1:
                      return Transaction.from(_parseEip2930(payload));
                  case 2:
                      return Transaction.from(_parseEip1559(payload));
              }
              (0, _indexJs2.assert)(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", {
                  operation: "from"
              });
          }
          const result = new Transaction();
          if (tx.type != null) result.type = tx.type;
          if (tx.to != null) result.to = tx.to;
          if (tx.nonce != null) result.nonce = tx.nonce;
          if (tx.gasLimit != null) result.gasLimit = tx.gasLimit;
          if (tx.gasPrice != null) result.gasPrice = tx.gasPrice;
          if (tx.maxPriorityFeePerGas != null) result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;
          if (tx.maxFeePerGas != null) result.maxFeePerGas = tx.maxFeePerGas;
          if (tx.data != null) result.data = tx.data;
          if (tx.value != null) result.value = tx.value;
          if (tx.chainId != null) result.chainId = tx.chainId;
          if (tx.signature != null) result.signature = (0, _indexJs1.Signature).from(tx.signature);
          if (tx.accessList != null) result.accessList = tx.accessList;
          if (tx.hash != null) {
              (0, _indexJs2.assertArgument)(result.isSigned(), "unsigned transaction cannot define hash", "tx", tx);
              (0, _indexJs2.assertArgument)(result.hash === tx.hash, "hash mismatch", "tx", tx);
          }
          if (tx.from != null) {
              (0, _indexJs2.assertArgument)(result.isSigned(), "unsigned transaction cannot define from", "tx", tx);
              (0, _indexJs2.assertArgument)(result.from.toLowerCase() === (tx.from || "").toLowerCase(), "from mismatch", "tx", tx);
          }
          return result;
      }
  }
  
  },{"../address/index.js":"cuJ87","../crypto/index.js":"4oi1q","../utils/index.js":"jGhd9","./accesslist.js":"j6eRM","./address.js":"g053E","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"5vd2w":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  // @TODO: Array Enum
  /**
   *   Computes the [[link-solc-packed]] representation of %%values%%
   *   respectively to their %%types%%.
   *
   *   @example:
   *       addr = "0x8ba1f109551bd432803012645ac136ddd64dba72"
   *       solidityPacked([ "address", "uint" ], [ addr, 45 ]);
   *       //_result:
   */ parcelHelpers.export(exports, "solidityPacked", ()=>solidityPacked);
  /**
   *   Computes the [[link-solc-packed]] [[keccak256]] hash of %%values%%
   *   respectively to their %%types%%.
   *
   *   @example:
   *       addr = "0x8ba1f109551bd432803012645ac136ddd64dba72"
   *       solidityPackedKeccak256([ "address", "uint" ], [ addr, 45 ]);
   *       //_result:
   */ parcelHelpers.export(exports, "solidityPackedKeccak256", ()=>solidityPackedKeccak256);
  /**
   *   Computes the [[link-solc-packed]] [[sha256]] hash of %%values%%
   *   respectively to their %%types%%.
   *
   *   @example:
   *       addr = "0x8ba1f109551bd432803012645ac136ddd64dba72"
   *       solidityPackedSha256([ "address", "uint" ], [ addr, 45 ]);
   *       //_result:
   */ parcelHelpers.export(exports, "solidityPackedSha256", ()=>solidityPackedSha256);
  var _indexJs = require("../address/index.js");
  var _indexJs1 = require("../crypto/index.js");
  var _indexJs2 = require("../utils/index.js");
  const regexBytes = new RegExp("^bytes([0-9]+)$");
  const regexNumber = new RegExp("^(u?int)([0-9]*)$");
  const regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
  function _pack(type, value, isArray) {
      switch(type){
          case "address":
              if (isArray) return (0, _indexJs2.getBytes)((0, _indexJs2.zeroPadValue)(value, 32));
              return (0, _indexJs2.getBytes)((0, _indexJs.getAddress)(value));
          case "string":
              return (0, _indexJs2.toUtf8Bytes)(value);
          case "bytes":
              return (0, _indexJs2.getBytes)(value);
          case "bool":
              value = !!value ? "0x01" : "0x00";
              if (isArray) return (0, _indexJs2.getBytes)((0, _indexJs2.zeroPadValue)(value, 32));
              return (0, _indexJs2.getBytes)(value);
      }
      let match = type.match(regexNumber);
      if (match) {
          let signed = match[1] === "int";
          let size = parseInt(match[2] || "256");
          (0, _indexJs2.assertArgument)((!match[2] || match[2] === String(size)) && size % 8 === 0 && size !== 0 && size <= 256, "invalid number type", "type", type);
          if (isArray) size = 256;
          if (signed) value = (0, _indexJs2.toTwos)(value, size);
          return (0, _indexJs2.getBytes)((0, _indexJs2.zeroPadValue)((0, _indexJs2.toBeArray)(value), size / 8));
      }
      match = type.match(regexBytes);
      if (match) {
          const size = parseInt(match[1]);
          (0, _indexJs2.assertArgument)(String(size) === match[1] && size !== 0 && size <= 32, "invalid bytes type", "type", type);
          (0, _indexJs2.assertArgument)((0, _indexJs2.dataLength)(value) === size, `invalid value for ${type}`, "value", value);
          if (isArray) return (0, _indexJs2.getBytes)((0, _indexJs2.zeroPadBytes)(value, 32));
          return value;
      }
      match = type.match(regexArray);
      if (match && Array.isArray(value)) {
          const baseType = match[1];
          const count = parseInt(match[2] || String(value.length));
          (0, _indexJs2.assertArgument)(count === value.length, `invalid array length for ${type}`, "value", value);
          const result = [];
          value.forEach(function(value) {
              result.push(_pack(baseType, value, true));
          });
          return (0, _indexJs2.getBytes)((0, _indexJs2.concat)(result));
      }
      (0, _indexJs2.assertArgument)(false, "invalid type", "type", type);
  }
  function solidityPacked(types, values) {
      (0, _indexJs2.assertArgument)(types.length === values.length, "wrong number of values; expected ${ types.length }", "values", values);
      const tight = [];
      types.forEach(function(type, index) {
          tight.push(_pack(type, values[index]));
      });
      return (0, _indexJs2.hexlify)((0, _indexJs2.concat)(tight));
  }
  function solidityPackedKeccak256(types, values) {
      return (0, _indexJs1.keccak256)(solidityPacked(types, values));
  }
  function solidityPackedSha256(types, values) {
      return (0, _indexJs1.sha256)(solidityPacked(types, values));
  }
  
  },{"../address/index.js":"cuJ87","../crypto/index.js":"4oi1q","../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"cPBSC":[function(require,module,exports) {
  //import { TypedDataDomain, TypedDataField } from "@ethersproject/providerabstract-signer";
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "TypedDataEncoder", ()=>TypedDataEncoder);
  /**
   *  Compute the address used to sign the typed data for the %%signature%%.
   */ parcelHelpers.export(exports, "verifyTypedData", ()=>verifyTypedData);
  var _indexJs = require("../address/index.js");
  var _indexJs1 = require("../crypto/index.js");
  var _indexJs2 = require("../transaction/index.js");
  var _indexJs3 = require("../utils/index.js");
  var _idJs = require("./id.js");
  const padding = new Uint8Array(32);
  padding.fill(0);
  const BN__1 = BigInt(-1);
  const BN_0 = BigInt(0);
  const BN_1 = BigInt(1);
  const BN_MAX_UINT256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  function hexPadRight(value) {
      const bytes = (0, _indexJs3.getBytes)(value);
      const padOffset = bytes.length % 32;
      if (padOffset) return (0, _indexJs3.concat)([
          bytes,
          padding.slice(padOffset)
      ]);
      return (0, _indexJs3.hexlify)(bytes);
  }
  const hexTrue = (0, _indexJs3.toBeHex)(BN_1, 32);
  const hexFalse = (0, _indexJs3.toBeHex)(BN_0, 32);
  const domainFieldTypes = {
      name: "string",
      version: "string",
      chainId: "uint256",
      verifyingContract: "address",
      salt: "bytes32"
  };
  const domainFieldNames = [
      "name",
      "version",
      "chainId",
      "verifyingContract",
      "salt"
  ];
  function checkString(key) {
      return function(value) {
          (0, _indexJs3.assertArgument)(typeof value === "string", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
          return value;
      };
  }
  const domainChecks = {
      name: checkString("name"),
      version: checkString("version"),
      chainId: function(_value) {
          const value = (0, _indexJs3.getBigInt)(_value, "domain.chainId");
          (0, _indexJs3.assertArgument)(value >= 0, "invalid chain ID", "domain.chainId", _value);
          if (Number.isSafeInteger(value)) return Number(value);
          return (0, _indexJs3.toQuantity)(value);
      },
      verifyingContract: function(value) {
          try {
              return (0, _indexJs.getAddress)(value).toLowerCase();
          } catch (error) {}
          (0, _indexJs3.assertArgument)(false, `invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
      },
      salt: function(value) {
          const bytes = (0, _indexJs3.getBytes)(value, "domain.salt");
          (0, _indexJs3.assertArgument)(bytes.length === 32, `invalid domain value "salt"`, "domain.salt", value);
          return (0, _indexJs3.hexlify)(bytes);
      }
  };
  function getBaseEncoder(type) {
      // intXX and uintXX
      {
          const match = type.match(/^(u?)int(\d*)$/);
          if (match) {
              const signed = match[1] === "";
              const width = parseInt(match[2] || "256");
              (0, _indexJs3.assertArgument)(width % 8 === 0 && width !== 0 && width <= 256 && (match[2] == null || match[2] === String(width)), "invalid numeric width", "type", type);
              const boundsUpper = (0, _indexJs3.mask)(BN_MAX_UINT256, signed ? width - 1 : width);
              const boundsLower = signed ? (boundsUpper + BN_1) * BN__1 : BN_0;
              return function(_value) {
                  const value = (0, _indexJs3.getBigInt)(_value, "value");
                  (0, _indexJs3.assertArgument)(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, "value", value);
                  return (0, _indexJs3.toBeHex)(signed ? (0, _indexJs3.toTwos)(value, 256) : value, 32);
              };
          }
      }
      // bytesXX
      {
          const match = type.match(/^bytes(\d+)$/);
          if (match) {
              const width = parseInt(match[1]);
              (0, _indexJs3.assertArgument)(width !== 0 && width <= 32 && match[1] === String(width), "invalid bytes width", "type", type);
              return function(value) {
                  const bytes = (0, _indexJs3.getBytes)(value);
                  (0, _indexJs3.assertArgument)(bytes.length === width, `invalid length for ${type}`, "value", value);
                  return hexPadRight(value);
              };
          }
      }
      switch(type){
          case "address":
              return function(value) {
                  return (0, _indexJs3.zeroPadValue)((0, _indexJs.getAddress)(value), 32);
              };
          case "bool":
              return function(value) {
                  return !value ? hexFalse : hexTrue;
              };
          case "bytes":
              return function(value) {
                  return (0, _indexJs1.keccak256)(value);
              };
          case "string":
              return function(value) {
                  return (0, _idJs.id)(value);
              };
      }
      return null;
  }
  function encodeType(name, fields) {
      return `${name}(${fields.map(({ name , type  })=>type + " " + name).join(",")})`;
  }
  class TypedDataEncoder {
      primaryType;
      #types;
      get types() {
          return JSON.parse(this.#types);
      }
      #fullTypes;
      #encoderCache;
      constructor(types){
          this.#types = JSON.stringify(types);
          this.#fullTypes = new Map();
          this.#encoderCache = new Map();
          // Link struct types to their direct child structs
          const links = new Map();
          // Link structs to structs which contain them as a child
          const parents = new Map();
          // Link all subtypes within a given struct
          const subtypes = new Map();
          Object.keys(types).forEach((type)=>{
              links.set(type, new Set());
              parents.set(type, []);
              subtypes.set(type, new Set());
          });
          for(const name in types){
              const uniqueNames = new Set();
              for (const field of types[name]){
                  // Check each field has a unique name
                  (0, _indexJs3.assertArgument)(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", types);
                  uniqueNames.add(field.name);
                  // Get the base type (drop any array specifiers)
                  const baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1] || null;
                  (0, _indexJs3.assertArgument)(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, "types", types);
                  // Is this a base encoding type?
                  const encoder = getBaseEncoder(baseType);
                  if (encoder) continue;
                  (0, _indexJs3.assertArgument)(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, "types", types);
                  // Add linkage
                  parents.get(baseType).push(name);
                  links.get(name).add(baseType);
              }
          }
          // Deduce the primary type
          const primaryTypes = Array.from(parents.keys()).filter((n)=>parents.get(n).length === 0);
          (0, _indexJs3.assertArgument)(primaryTypes.length !== 0, "missing primary type", "types", types);
          (0, _indexJs3.assertArgument)(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map((t)=>JSON.stringify(t)).join(", ")}`, "types", types);
          (0, _indexJs3.defineProperties)(this, {
              primaryType: primaryTypes[0]
          });
          // Check for circular type references
          function checkCircular(type, found) {
              (0, _indexJs3.assertArgument)(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, "types", types);
              found.add(type);
              for (const child of links.get(type)){
                  if (!parents.has(child)) continue;
                  // Recursively check children
                  checkCircular(child, found);
                  // Mark all ancestors as having this decendant
                  for (const subtype of found)subtypes.get(subtype).add(child);
              }
              found.delete(type);
          }
          checkCircular(this.primaryType, new Set());
          // Compute each fully describe type
          for (const [name, set] of subtypes){
              const st = Array.from(set);
              st.sort();
              this.#fullTypes.set(name, encodeType(name, types[name]) + st.map((t)=>encodeType(t, types[t])).join(""));
          }
      }
      getEncoder(type) {
          let encoder = this.#encoderCache.get(type);
          if (!encoder) {
              encoder = this.#getEncoder(type);
              this.#encoderCache.set(type, encoder);
          }
          return encoder;
      }
      #getEncoder(type) {
          // Basic encoder type (address, bool, uint256, etc)
          {
              const encoder = getBaseEncoder(type);
              if (encoder) return encoder;
          }
          // Array
          const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
          if (match) {
              const subtype = match[1];
              const subEncoder = this.getEncoder(subtype);
              return (value)=>{
                  (0, _indexJs3.assertArgument)(!match[3] || parseInt(match[3]) === value.length, `array length mismatch; expected length ${parseInt(match[3])}`, "value", value);
                  let result = value.map(subEncoder);
                  if (this.#fullTypes.has(subtype)) result = result.map((0, _indexJs1.keccak256));
                  return (0, _indexJs1.keccak256)((0, _indexJs3.concat)(result));
              };
          }
          // Struct
          const fields = this.types[type];
          if (fields) {
              const encodedType = (0, _idJs.id)(this.#fullTypes.get(type));
              return (value)=>{
                  const values = fields.map(({ name , type  })=>{
                      const result = this.getEncoder(type)(value[name]);
                      if (this.#fullTypes.has(type)) return (0, _indexJs1.keccak256)(result);
                      return result;
                  });
                  values.unshift(encodedType);
                  return (0, _indexJs3.concat)(values);
              };
          }
          (0, _indexJs3.assertArgument)(false, `unknown type: ${type}`, "type", type);
      }
      encodeType(name) {
          const result = this.#fullTypes.get(name);
          (0, _indexJs3.assertArgument)(result, `unknown type: ${JSON.stringify(name)}`, "name", name);
          return result;
      }
      encodeData(type, value) {
          return this.getEncoder(type)(value);
      }
      hashStruct(name, value) {
          return (0, _indexJs1.keccak256)(this.encodeData(name, value));
      }
      encode(value) {
          return this.encodeData(this.primaryType, value);
      }
      hash(value) {
          return this.hashStruct(this.primaryType, value);
      }
      _visit(type, value, callback) {
          // Basic encoder type (address, bool, uint256, etc)
          {
              const encoder = getBaseEncoder(type);
              if (encoder) return callback(type, value);
          }
          // Array
          const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
          if (match) {
              (0, _indexJs3.assertArgument)(!match[3] || parseInt(match[3]) === value.length, `array length mismatch; expected length ${parseInt(match[3])}`, "value", value);
              return value.map((v)=>this._visit(match[1], v, callback));
          }
          // Struct
          const fields = this.types[type];
          if (fields) return fields.reduce((accum, { name , type  })=>{
              accum[name] = this._visit(type, value[name], callback);
              return accum;
          }, {});
          (0, _indexJs3.assertArgument)(false, `unknown type: ${type}`, "type", type);
      }
      visit(value, callback) {
          return this._visit(this.primaryType, value, callback);
      }
      static from(types) {
          return new TypedDataEncoder(types);
      }
      static getPrimaryType(types) {
          return TypedDataEncoder.from(types).primaryType;
      }
      static hashStruct(name, types, value) {
          return TypedDataEncoder.from(types).hashStruct(name, value);
      }
      static hashDomain(domain) {
          const domainFields = [];
          for(const name in domain){
              if (domain[name] == null) continue;
              const type = domainFieldTypes[name];
              (0, _indexJs3.assertArgument)(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
              domainFields.push({
                  name,
                  type
              });
          }
          domainFields.sort((a, b)=>{
              return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
          });
          return TypedDataEncoder.hashStruct("EIP712Domain", {
              EIP712Domain: domainFields
          }, domain);
      }
      static encode(domain, types, value) {
          return (0, _indexJs3.concat)([
              "0x1901",
              TypedDataEncoder.hashDomain(domain),
              TypedDataEncoder.from(types).hash(value)
          ]);
      }
      static hash(domain, types, value) {
          return (0, _indexJs1.keccak256)(TypedDataEncoder.encode(domain, types, value));
      }
      // Replaces all address types with ENS names with their looked up address
      static async resolveNames(domain, types, value, resolveName) {
          // Make a copy to isolate it from the object passed in
          domain = Object.assign({}, domain);
          // Allow passing null to ignore value
          for(const key in domain)if (domain[key] == null) delete domain[key];
          // Look up all ENS names
          const ensCache = {};
          // Do we need to look up the domain's verifyingContract?
          if (domain.verifyingContract && !(0, _indexJs3.isHexString)(domain.verifyingContract, 20)) ensCache[domain.verifyingContract] = "0x";
          // We are going to use the encoder to visit all the base values
          const encoder = TypedDataEncoder.from(types);
          // Get a list of all the addresses
          encoder.visit(value, (type, value)=>{
              if (type === "address" && !(0, _indexJs3.isHexString)(value, 20)) ensCache[value] = "0x";
              return value;
          });
          // Lookup each name
          for(const name in ensCache)ensCache[name] = await resolveName(name);
          // Replace the domain verifyingContract if needed
          if (domain.verifyingContract && ensCache[domain.verifyingContract]) domain.verifyingContract = ensCache[domain.verifyingContract];
          // Replace all ENS names with their address
          value = encoder.visit(value, (type, value)=>{
              if (type === "address" && ensCache[value]) return ensCache[value];
              return value;
          });
          return {
              domain,
              value
          };
      }
      static getPayload(domain, types, value) {
          // Validate the domain fields
          TypedDataEncoder.hashDomain(domain);
          // Derive the EIP712Domain Struct reference type
          const domainValues = {};
          const domainTypes = [];
          domainFieldNames.forEach((name)=>{
              const value = domain[name];
              if (value == null) return;
              domainValues[name] = domainChecks[name](value);
              domainTypes.push({
                  name,
                  type: domainFieldTypes[name]
              });
          });
          const encoder = TypedDataEncoder.from(types);
          const typesWithDomain = Object.assign({}, types);
          (0, _indexJs3.assertArgument)(typesWithDomain.EIP712Domain == null, "types must not contain EIP712Domain type", "types.EIP712Domain", types);
          typesWithDomain.EIP712Domain = domainTypes;
          // Validate the data structures and types
          encoder.encode(value);
          return {
              types: typesWithDomain,
              domain: domainValues,
              primaryType: encoder.primaryType,
              message: encoder.visit(value, (type, value)=>{
                  // bytes
                  if (type.match(/^bytes(\d*)/)) return (0, _indexJs3.hexlify)((0, _indexJs3.getBytes)(value));
                  // uint or int
                  if (type.match(/^u?int/)) return (0, _indexJs3.getBigInt)(value).toString();
                  switch(type){
                      case "address":
                          return value.toLowerCase();
                      case "bool":
                          return !!value;
                      case "string":
                          (0, _indexJs3.assertArgument)(typeof value === "string", "invalid string", "value", value);
                          return value;
                  }
                  (0, _indexJs3.assertArgument)(false, "unsupported type", "type", type);
              })
          };
      }
  }
  function verifyTypedData(domain, types, value, signature) {
      return (0, _indexJs2.recoverAddress)(TypedDataEncoder.hash(domain, types, value), signature);
  }
  
  },{"../address/index.js":"cuJ87","../crypto/index.js":"4oi1q","../transaction/index.js":"cOUq6","../utils/index.js":"jGhd9","./id.js":"6BZnx","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"kHtrk":[function(require,module,exports) {
  /**
   *  About bytes32 strings...
   *
   *  @_docloc: api/utils:Bytes32 Strings
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Encodes %%text%% as a Bytes32 string.
   */ parcelHelpers.export(exports, "encodeBytes32String", ()=>encodeBytes32String);
  /**
   *  Encodes the Bytes32-encoded %%bytes%% into a string.
   */ parcelHelpers.export(exports, "decodeBytes32String", ()=>decodeBytes32String);
  var _indexJs = require("../utils/index.js");
  function encodeBytes32String(text) {
      // Get the bytes
      const bytes = (0, _indexJs.toUtf8Bytes)(text);
      // Check we have room for null-termination
      if (bytes.length > 31) throw new Error("bytes32 string must be less than 32 bytes");
      // Zero-pad (implicitly null-terminates)
      return (0, _indexJs.zeroPadBytes)(bytes, 32);
  }
  function decodeBytes32String(_bytes) {
      const data = (0, _indexJs.getBytes)(_bytes, "bytes");
      // Must be 32 bytes with a null-termination
      if (data.length !== 32) throw new Error("invalid bytes32 - not 32 bytes long");
      if (data[31] !== 0) throw new Error("invalid bytes32 string - no null terminator");
      // Find the null termination
      let length = 31;
      while(data[length - 1] === 0)length--;
      // Determine the string value
      return (0, _indexJs.toUtf8String)(data.slice(0, length));
  }
  
  },{"../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"gxP5E":[function(require,module,exports) {
  /**
   *  About Interface
   *
   *  @_subsection api/abi:Interfaces  [interfaces]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "checkResultErrors", ()=>(0, _abstractCoderJs.checkResultErrors));
  parcelHelpers.export(exports, "Result", ()=>(0, _abstractCoderJs.Result));
  parcelHelpers.export(exports, "LogDescription", ()=>LogDescription);
  parcelHelpers.export(exports, "TransactionDescription", ()=>TransactionDescription);
  parcelHelpers.export(exports, "ErrorDescription", ()=>ErrorDescription);
  parcelHelpers.export(exports, "Indexed", ()=>Indexed);
  /**
   *  An Interface abstracts many of the low-level details for
   *  encoding and decoding the data on the blockchain.
   *
   *  An ABI provides information on how to encode data to send to
   *  a Contract, how to decode the results and events and how to
   *  interpret revert errors.
   *
   *  The ABI can be specified by [any supported format](InterfaceAbi).
   */ parcelHelpers.export(exports, "Interface", ()=>Interface);
  var _indexJs = require("../crypto/index.js");
  var _indexJs1 = require("../hash/index.js");
  var _indexJs2 = require("../utils/index.js");
  var _abiCoderJs = require("./abi-coder.js");
  var _abstractCoderJs = require("./coders/abstract-coder.js");
  var _fragmentsJs = require("./fragments.js");
  var _typedJs = require("./typed.js");
  class LogDescription {
      fragment;
      name;
      signature;
      topic;
      args;
      constructor(fragment, topic, args){
          const name = fragment.name, signature = fragment.format();
          (0, _indexJs2.defineProperties)(this, {
              fragment,
              name,
              signature,
              topic,
              args
          });
      }
  }
  class TransactionDescription {
      fragment;
      name;
      args;
      signature;
      selector;
      value;
      constructor(fragment, selector, args, value){
          const name = fragment.name, signature = fragment.format();
          (0, _indexJs2.defineProperties)(this, {
              fragment,
              name,
              args,
              signature,
              selector,
              value
          });
      }
  }
  class ErrorDescription {
      fragment;
      name;
      args;
      signature;
      selector;
      constructor(fragment, selector, args){
          const name = fragment.name, signature = fragment.format();
          (0, _indexJs2.defineProperties)(this, {
              fragment,
              name,
              args,
              signature,
              selector
          });
      }
  }
  class Indexed {
      hash;
      _isIndexed;
      static isIndexed(value) {
          return !!(value && value._isIndexed);
      }
      constructor(hash){
          (0, _indexJs2.defineProperties)(this, {
              hash,
              _isIndexed: true
          });
      }
  }
  // https://docs.soliditylang.org/en/v0.8.13/control-structures.html?highlight=panic#panic-via-assert-and-error-via-require
  const PanicReasons = {
      "0": "generic panic",
      "1": "assert(false)",
      "17": "arithmetic overflow",
      "18": "division or modulo by zero",
      "33": "enum overflow",
      "34": "invalid encoded storage byte array accessed",
      "49": "out-of-bounds array access; popping on an empty array",
      "50": "out-of-bounds access of an array or bytesN",
      "65": "out of memory",
      "81": "uninitialized function"
  };
  const BuiltinErrors = {
      "0x08c379a0": {
          signature: "Error(string)",
          name: "Error",
          inputs: [
              "string"
          ],
          reason: (message)=>{
              return `reverted with reason string ${JSON.stringify(message)}`;
          }
      },
      "0x4e487b71": {
          signature: "Panic(uint256)",
          name: "Panic",
          inputs: [
              "uint256"
          ],
          reason: (code)=>{
              let reason = "unknown panic code";
              if (code >= 0 && code <= 0xff && PanicReasons[code.toString()]) reason = PanicReasons[code.toString()];
              return `reverted with panic code 0x${code.toString(16)} (${reason})`;
          }
      }
  };
  class Interface {
      /**
       *  All the Contract ABI members (i.e. methods, events, errors, etc).
       */ fragments;
      /**
       *  The Contract constructor.
       */ deploy;
      /**
       *  The Fallback method, if any.
       */ fallback;
      /**
       *  If receiving ether is supported.
       */ receive;
      #errors;
      #events;
      #functions;
      //    #structs: Map<string, StructFragment>;
      #abiCoder;
      /**
       *  Create a new Interface for the %%fragments%%.
       */ constructor(fragments){
          let abi = [];
          if (typeof fragments === "string") abi = JSON.parse(fragments);
          else abi = fragments;
          this.#functions = new Map();
          this.#errors = new Map();
          this.#events = new Map();
          //        this.#structs = new Map();
          const frags = [];
          for (const a of abi)try {
              frags.push((0, _fragmentsJs.Fragment).from(a));
          } catch (error) {
              console.log("EE", error);
          }
          (0, _indexJs2.defineProperties)(this, {
              fragments: Object.freeze(frags)
          });
          let fallback = null;
          let receive = false;
          this.#abiCoder = this.getAbiCoder();
          // Add all fragments by their signature
          this.fragments.forEach((fragment, index)=>{
              let bucket;
              switch(fragment.type){
                  case "constructor":
                      if (this.deploy) {
                          console.log("duplicate definition - constructor");
                          return;
                      }
                      //checkNames(fragment, "input", fragment.inputs);
                      (0, _indexJs2.defineProperties)(this, {
                          deploy: fragment
                      });
                      return;
                  case "fallback":
                      if (fragment.inputs.length === 0) receive = true;
                      else {
                          (0, _indexJs2.assertArgument)(!fallback || fragment.payable !== fallback.payable, "conflicting fallback fragments", `fragments[${index}]`, fragment);
                          fallback = fragment;
                          receive = fallback.payable;
                      }
                      return;
                  case "function":
                      //checkNames(fragment, "input", fragment.inputs);
                      //checkNames(fragment, "output", (<FunctionFragment>fragment).outputs);
                      bucket = this.#functions;
                      break;
                  case "event":
                      //checkNames(fragment, "input", fragment.inputs);
                      bucket = this.#events;
                      break;
                  case "error":
                      bucket = this.#errors;
                      break;
                  default:
                      return;
              }
              // Two identical entries; ignore it
              const signature = fragment.format();
              if (bucket.has(signature)) return;
              bucket.set(signature, fragment);
          });
          // If we do not have a constructor add a default
          if (!this.deploy) (0, _indexJs2.defineProperties)(this, {
              deploy: (0, _fragmentsJs.ConstructorFragment).from("constructor()")
          });
          (0, _indexJs2.defineProperties)(this, {
              fallback,
              receive
          });
      }
      /**
       *  Returns the entire Human-Readable ABI, as an array of
       *  signatures, optionally as %%minimal%% strings, which
       *  removes parameter names and unneceesary spaces.
       */ format(minimal) {
          const format = minimal ? "minimal" : "full";
          const abi = this.fragments.map((f)=>f.format(format));
          return abi;
      }
      /**
       *  Return the JSON-encoded ABI. This is the format Solidiy
       *  returns.
       */ formatJson() {
          const abi = this.fragments.map((f)=>f.format("json"));
          // We need to re-bundle the JSON fragments a bit
          return JSON.stringify(abi.map((j)=>JSON.parse(j)));
      }
      /**
       *  The ABI coder that will be used to encode and decode binary
       *  data.
       */ getAbiCoder() {
          return (0, _abiCoderJs.AbiCoder).defaultAbiCoder();
      }
      // Find a function definition by any means necessary (unless it is ambiguous)
      #getFunction(key, values, forceUnique) {
          // Selector
          if ((0, _indexJs2.isHexString)(key)) {
              const selector = key.toLowerCase();
              for (const fragment of this.#functions.values()){
                  if (selector === fragment.selector) return fragment;
              }
              return null;
          }
          // It is a bare name, look up the function (will return null if ambiguous)
          if (key.indexOf("(") === -1) {
              const matching = [];
              for (const [name, fragment] of this.#functions)if (name.split("(" /* fix:) */ )[0] === key) matching.push(fragment);
              if (values) {
                  const lastValue = values.length > 0 ? values[values.length - 1] : null;
                  let valueLength = values.length;
                  let allowOptions = true;
                  if ((0, _typedJs.Typed).isTyped(lastValue) && lastValue.type === "overrides") {
                      allowOptions = false;
                      valueLength--;
                  }
                  // Remove all matches that don't have a compatible length. The args
                  // may contain an overrides, so the match may have n or n - 1 parameters
                  for(let i = matching.length - 1; i >= 0; i--){
                      const inputs = matching[i].inputs.length;
                      if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) matching.splice(i, 1);
                  }
                  // Remove all matches that don't match the Typed signature
                  for(let i = matching.length - 1; i >= 0; i--){
                      const inputs = matching[i].inputs;
                      for(let j = 0; j < values.length; j++){
                          // Not a typed value
                          if (!(0, _typedJs.Typed).isTyped(values[j])) continue;
                          // We are past the inputs
                          if (j >= inputs.length) {
                              if (values[j].type === "overrides") continue;
                              matching.splice(i, 1);
                              break;
                          }
                          // Make sure the value type matches the input type
                          if (values[j].type !== inputs[j].baseType) {
                              matching.splice(i, 1);
                              break;
                          }
                      }
                  }
              }
              // We found a single matching signature with an overrides, but the
              // last value is something that cannot possibly be an options
              if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {
                  const lastArg = values[values.length - 1];
                  if (lastArg == null || Array.isArray(lastArg) || typeof lastArg !== "object") matching.splice(0, 1);
              }
              if (matching.length === 0) return null;
              if (matching.length > 1 && forceUnique) {
                  const matchStr = matching.map((m)=>JSON.stringify(m.format())).join(", ");
                  (0, _indexJs2.assertArgument)(false, `ambiguous function description (i.e. matches ${matchStr})`, "key", key);
              }
              return matching[0];
          }
          // Normalize the signature and lookup the function
          const result = this.#functions.get((0, _fragmentsJs.FunctionFragment).from(key).format());
          if (result) return result;
          return null;
      }
      /**
       *  Get the function name for %%key%%, which may be a function selector,
       *  function name or function signature that belongs to the ABI.
       */ getFunctionName(key) {
          const fragment = this.#getFunction(key, null, false);
          (0, _indexJs2.assertArgument)(fragment, "no matching function", "key", key);
          return fragment.name;
      }
      /**
       *  Returns true if %%key%% (a function selector, function name or
       *  function signature) is present in the ABI.
       *
       *  In the case of a function name, the name may be ambiguous, so
       *  accessing the [[FunctionFragment]] may require refinement.
       */ hasFunction(key) {
          return !!this.#getFunction(key, null, false);
      }
      /**
       *  Get the [[FunctionFragment]] for %%key%%, which may be a function
       *  selector, function name or function signature that belongs to the ABI.
       *
       *  If %%values%% is provided, it will use the Typed API to handle
       *  ambiguous cases where multiple functions match by name.
       *
       *  If the %%key%% and %%values%% do not refine to a single function in
       *  the ABI, this will throw.
       */ getFunction(key, values) {
          return this.#getFunction(key, values || null, true);
      }
      /**
       *  Iterate over all functions, calling %%callback%%, sorted by their name.
       */ forEachFunction(callback) {
          const names = Array.from(this.#functions.keys());
          names.sort((a, b)=>a.localeCompare(b));
          for(let i = 0; i < names.length; i++){
              const name = names[i];
              callback(this.#functions.get(name), i);
          }
      }
      // Find an event definition by any means necessary (unless it is ambiguous)
      #getEvent(key1, values1, forceUnique1) {
          // EventTopic
          if ((0, _indexJs2.isHexString)(key1)) {
              const eventTopic = key1.toLowerCase();
              for (const fragment of this.#events.values()){
                  if (eventTopic === fragment.topicHash) return fragment;
              }
              return null;
          }
          // It is a bare name, look up the function (will return null if ambiguous)
          if (key1.indexOf("(") === -1) {
              const matching = [];
              for (const [name, fragment] of this.#events)if (name.split("(" /* fix:) */ )[0] === key1) matching.push(fragment);
              if (values1) {
                  // Remove all matches that don't have a compatible length.
                  for(let i = matching.length - 1; i >= 0; i--)if (matching[i].inputs.length < values1.length) matching.splice(i, 1);
                  // Remove all matches that don't match the Typed signature
                  for(let i = matching.length - 1; i >= 0; i--){
                      const inputs = matching[i].inputs;
                      for(let j = 0; j < values1.length; j++){
                          // Not a typed value
                          if (!(0, _typedJs.Typed).isTyped(values1[j])) continue;
                          // Make sure the value type matches the input type
                          if (values1[j].type !== inputs[j].baseType) {
                              matching.splice(i, 1);
                              break;
                          }
                      }
                  }
              }
              if (matching.length === 0) return null;
              if (matching.length > 1 && forceUnique1) {
                  const matchStr = matching.map((m)=>JSON.stringify(m.format())).join(", ");
                  (0, _indexJs2.assertArgument)(false, `ambiguous event description (i.e. matches ${matchStr})`, "key", key1);
              }
              return matching[0];
          }
          // Normalize the signature and lookup the function
          const result = this.#events.get((0, _fragmentsJs.EventFragment).from(key1).format());
          if (result) return result;
          return null;
      }
      /**
       *  Get the event name for %%key%%, which may be a topic hash,
       *  event name or event signature that belongs to the ABI.
       */ getEventName(key) {
          const fragment = this.#getEvent(key, null, false);
          (0, _indexJs2.assertArgument)(fragment, "no matching event", "key", key);
          return fragment.name;
      }
      /**
       *  Returns true if %%key%% (an event topic hash, event name or
       *  event signature) is present in the ABI.
       *
       *  In the case of an event name, the name may be ambiguous, so
       *  accessing the [[EventFragment]] may require refinement.
       */ hasEvent(key) {
          return !!this.#getEvent(key, null, false);
      }
      /**
       *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,
       *  event name or event signature that belongs to the ABI.
       *
       *  If %%values%% is provided, it will use the Typed API to handle
       *  ambiguous cases where multiple events match by name.
       *
       *  If the %%key%% and %%values%% do not refine to a single event in
       *  the ABI, this will throw.
       */ getEvent(key, values) {
          return this.#getEvent(key, values || null, true);
      }
      /**
       *  Iterate over all events, calling %%callback%%, sorted by their name.
       */ forEachEvent(callback) {
          const names = Array.from(this.#events.keys());
          names.sort((a, b)=>a.localeCompare(b));
          for(let i = 0; i < names.length; i++){
              const name = names[i];
              callback(this.#events.get(name), i);
          }
      }
      /**
       *  Get the [[ErrorFragment]] for %%key%%, which may be an error
       *  selector, error name or error signature that belongs to the ABI.
       *
       *  If %%values%% is provided, it will use the Typed API to handle
       *  ambiguous cases where multiple errors match by name.
       *
       *  If the %%key%% and %%values%% do not refine to a single error in
       *  the ABI, this will throw.
       */ getError(key, values) {
          if ((0, _indexJs2.isHexString)(key)) {
              const selector = key.toLowerCase();
              if (BuiltinErrors[selector]) return (0, _fragmentsJs.ErrorFragment).from(BuiltinErrors[selector].signature);
              for (const fragment of this.#errors.values()){
                  if (selector === fragment.selector) return fragment;
              }
              return null;
          }
          // It is a bare name, look up the function (will return null if ambiguous)
          if (key.indexOf("(") === -1) {
              const matching = [];
              for (const [name, fragment] of this.#errors)if (name.split("(" /* fix:) */ )[0] === key) matching.push(fragment);
              if (matching.length === 0) {
                  if (key === "Error") return (0, _fragmentsJs.ErrorFragment).from("error Error(string)");
                  if (key === "Panic") return (0, _fragmentsJs.ErrorFragment).from("error Panic(uint256)");
                  return null;
              } else if (matching.length > 1) {
                  const matchStr = matching.map((m)=>JSON.stringify(m.format())).join(", ");
                  (0, _indexJs2.assertArgument)(false, `ambiguous error description (i.e. ${matchStr})`, "name", key);
              }
              return matching[0];
          }
          // Normalize the signature and lookup the function
          key = (0, _fragmentsJs.ErrorFragment).from(key).format();
          if (key === "Error(string)") return (0, _fragmentsJs.ErrorFragment).from("error Error(string)");
          if (key === "Panic(uint256)") return (0, _fragmentsJs.ErrorFragment).from("error Panic(uint256)");
          const result = this.#errors.get(key);
          if (result) return result;
          return null;
      }
      /**
       *  Iterate over all errors, calling %%callback%%, sorted by their name.
       */ forEachError(callback) {
          const names = Array.from(this.#errors.keys());
          names.sort((a, b)=>a.localeCompare(b));
          for(let i = 0; i < names.length; i++){
              const name = names[i];
              callback(this.#errors.get(name), i);
          }
      }
      // Get the 4-byte selector used by Solidity to identify a function
      /*
  getSelector(fragment: ErrorFragment | FunctionFragment): string {
      if (typeof(fragment) === "string") {
          const matches: Array<Fragment> = [ ];
  
          try { matches.push(this.getFunction(fragment)); } catch (error) { }
          try { matches.push(this.getError(<string>fragment)); } catch (_) { }
  
          if (matches.length === 0) {
              logger.throwArgumentError("unknown fragment", "key", fragment);
          } else if (matches.length > 1) {
              logger.throwArgumentError("ambiguous fragment matches function and error", "key", fragment);
          }
  
          fragment = matches[0];
      }
  
      return dataSlice(id(fragment.format()), 0, 4);
  }
      */ // Get the 32-byte topic hash used by Solidity to identify an event
      /*
      getEventTopic(fragment: EventFragment): string {
          //if (typeof(fragment) === "string") { fragment = this.getEvent(eventFragment); }
          return id(fragment.format());
      }
      */ _decodeParams(params, data) {
          return this.#abiCoder.decode(params, data);
      }
      _encodeParams(params, values) {
          return this.#abiCoder.encode(params, values);
      }
      /**
       *  Encodes a ``tx.data`` object for deploying the Contract with
       *  the %%values%% as the constructor arguments.
       */ encodeDeploy(values) {
          return this._encodeParams(this.deploy.inputs, values || []);
      }
      /**
       *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
       *  specified error (see [[getError]] for valid values for
       *  %%key%%).
       *
       *  Most developers should prefer the [[parseCallResult]] method instead,
       *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
       *  corresponding error.
       */ decodeErrorResult(fragment, data) {
          if (typeof fragment === "string") {
              const f = this.getError(fragment);
              (0, _indexJs2.assertArgument)(f, "unknown error", "fragment", fragment);
              fragment = f;
          }
          (0, _indexJs2.assertArgument)((0, _indexJs2.dataSlice)(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, "data", data);
          return this._decodeParams(fragment.inputs, (0, _indexJs2.dataSlice)(data, 4));
      }
      /**
       *  Encodes the transaction revert data for a call result that
       *  reverted from the the Contract with the sepcified %%error%%
       *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.
       *
       *  This is generally not used by most developers, unless trying to mock
       *  a result from a Contract.
       */ encodeErrorResult(fragment, values) {
          if (typeof fragment === "string") {
              const f = this.getError(fragment);
              (0, _indexJs2.assertArgument)(f, "unknown error", "fragment", fragment);
              fragment = f;
          }
          return (0, _indexJs2.concat)([
              fragment.selector,
              this._encodeParams(fragment.inputs, values || [])
          ]);
      }
      /**
       *  Decodes the %%data%% from a transaction ``tx.data`` for
       *  the function specified (see [[getFunction]] for valid values
       *  for %%fragment%%).
       *
       *  Most developers should prefer the [[parseTransaction]] method
       *  instead, which will automatically detect the fragment.
       */ decodeFunctionData(fragment, data) {
          if (typeof fragment === "string") {
              const f = this.getFunction(fragment);
              (0, _indexJs2.assertArgument)(f, "unknown function", "fragment", fragment);
              fragment = f;
          }
          (0, _indexJs2.assertArgument)((0, _indexJs2.dataSlice)(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, "data", data);
          return this._decodeParams(fragment.inputs, (0, _indexJs2.dataSlice)(data, 4));
      }
      /**
       *  Encodes the ``tx.data`` for a transaction that calls the function
       *  specified (see [[getFunction]] for valid values for %%fragment%%) with
       *  the %%values%%.
       */ encodeFunctionData(fragment, values) {
          if (typeof fragment === "string") {
              const f = this.getFunction(fragment);
              (0, _indexJs2.assertArgument)(f, "unknown function", "fragment", fragment);
              fragment = f;
          }
          return (0, _indexJs2.concat)([
              fragment.selector,
              this._encodeParams(fragment.inputs, values || [])
          ]);
      }
      /**
       *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
       *  specified function (see [[getFunction]] for valid values for
       *  %%key%%).
       *
       *  Most developers should prefer the [[parseCallResult]] method instead,
       *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
       *  corresponding error.
       */ decodeFunctionResult(fragment, data) {
          if (typeof fragment === "string") {
              const f = this.getFunction(fragment);
              (0, _indexJs2.assertArgument)(f, "unknown function", "fragment", fragment);
              fragment = f;
          }
          let message = "invalid length for result data";
          const bytes = (0, _indexJs2.getBytesCopy)(data);
          if (bytes.length % 32 === 0) try {
              return this.#abiCoder.decode(fragment.outputs, bytes);
          } catch (error) {
              message = "could not decode result data";
          }
          // Call returned data with no error, but the data is junk
          (0, _indexJs2.assert)(false, message, "BAD_DATA", {
              value: (0, _indexJs2.hexlify)(bytes),
              info: {
                  method: fragment.name,
                  signature: fragment.format()
              }
          });
      }
      makeError(_data, tx) {
          const data = (0, _indexJs2.getBytes)(_data, "data");
          const error = (0, _abiCoderJs.AbiCoder).getBuiltinCallException("call", tx, data);
          // Not a built-in error; try finding a custom error
          const customPrefix = "execution reverted (unknown custom error)";
          if (error.message.startsWith(customPrefix)) {
              const selector = (0, _indexJs2.hexlify)(data.slice(0, 4));
              const ef = this.getError(selector);
              if (ef) try {
                  const args = this.#abiCoder.decode(ef.inputs, data.slice(4));
                  error.revert = {
                      name: ef.name,
                      signature: ef.format(),
                      args
                  };
                  error.reason = error.revert.signature;
                  error.message = `execution reverted: ${error.reason}`;
              } catch (e) {
                  error.message = `execution reverted (coult not decode custom error)`;
              }
          }
          // Add the invocation, if available
          const parsed = this.parseTransaction(tx);
          if (parsed) error.invocation = {
              method: parsed.name,
              signature: parsed.signature,
              args: parsed.args
          };
          return error;
      }
      /**
       *  Encodes the result data (e.g. from an ``eth_call``) for the
       *  specified function (see [[getFunction]] for valid values
       *  for %%fragment%%) with %%values%%.
       *
       *  This is generally not used by most developers, unless trying to mock
       *  a result from a Contract.
       */ encodeFunctionResult(fragment, values) {
          if (typeof fragment === "string") {
              const f = this.getFunction(fragment);
              (0, _indexJs2.assertArgument)(f, "unknown function", "fragment", fragment);
              fragment = f;
          }
          return (0, _indexJs2.hexlify)(this.#abiCoder.encode(fragment.outputs, values || []));
      }
      /*
          spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {
              const promises: Array<Promise<>> = [ ];
              const process = function(type: ParamType, value: any): any {
                  if (type.baseType === "array") {
                      return descend(type.child
                  }
                  if (type. === "address") {
                  }
              };
      
              const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {
                  if (inputs.length !== values.length) { throw new Error("length mismatch"); }
                  
              };
      
              const result: Array<any> = [ ];
              values.forEach((value, index) => {
                  if (value == null) {
                      topics.push(null);
                  } else if (param.baseType === "array" || param.baseType === "tuple") {
                      logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
                  } else if (Array.isArray(value)) {
                      topics.push(value.map((value) => encodeTopic(param, value)));
                  } else {
                      topics.push(encodeTopic(param, value));
                  }
              });
          }
      */ // Create the filter for the event with search criteria (e.g. for eth_filterLog)
      encodeFilterTopics(fragment, values) {
          if (typeof fragment === "string") {
              const f = this.getEvent(fragment);
              (0, _indexJs2.assertArgument)(f, "unknown event", "eventFragment", fragment);
              fragment = f;
          }
          (0, _indexJs2.assert)(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, "UNEXPECTED_ARGUMENT", {
              count: values.length,
              expectedCount: fragment.inputs.length
          });
          const topics = [];
          if (!fragment.anonymous) topics.push(fragment.topicHash);
          // @TODO: Use the coders for this; to properly support tuples, etc.
          const encodeTopic = (param, value)=>{
              if (param.type === "string") return (0, _indexJs1.id)(value);
              else if (param.type === "bytes") return (0, _indexJs.keccak256)((0, _indexJs2.hexlify)(value));
              if (param.type === "bool" && typeof value === "boolean") value = value ? "0x01" : "0x00";
              if (param.type.match(/^u?int/)) value = (0, _indexJs2.toBeHex)(value);
              // Check addresses are valid
              if (param.type === "address") this.#abiCoder.encode([
                  "address"
              ], [
                  value
              ]);
              return (0, _indexJs2.zeroPadValue)((0, _indexJs2.hexlify)(value), 32);
          //@TOOD should probably be return toHex(value, 32)
          };
          values.forEach((value, index)=>{
              const param = fragment.inputs[index];
              if (!param.indexed) {
                  (0, _indexJs2.assertArgument)(value == null, "cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
                  return;
              }
              if (value == null) topics.push(null);
              else if (param.baseType === "array" || param.baseType === "tuple") (0, _indexJs2.assertArgument)(false, "filtering with tuples or arrays not supported", "contract." + param.name, value);
              else if (Array.isArray(value)) topics.push(value.map((value)=>encodeTopic(param, value)));
              else topics.push(encodeTopic(param, value));
          });
          // Trim off trailing nulls
          while(topics.length && topics[topics.length - 1] === null)topics.pop();
          return topics;
      }
      encodeEventLog(fragment, values) {
          if (typeof fragment === "string") {
              const f = this.getEvent(fragment);
              (0, _indexJs2.assertArgument)(f, "unknown event", "eventFragment", fragment);
              fragment = f;
          }
          const topics = [];
          const dataTypes = [];
          const dataValues = [];
          if (!fragment.anonymous) topics.push(fragment.topicHash);
          (0, _indexJs2.assertArgument)(values.length === fragment.inputs.length, "event arguments/values mismatch", "values", values);
          fragment.inputs.forEach((param, index)=>{
              const value = values[index];
              if (param.indexed) {
                  if (param.type === "string") topics.push((0, _indexJs1.id)(value));
                  else if (param.type === "bytes") topics.push((0, _indexJs.keccak256)(value));
                  else if (param.baseType === "tuple" || param.baseType === "array") // @TODO
                  throw new Error("not implemented");
                  else topics.push(this.#abiCoder.encode([
                      param.type
                  ], [
                      value
                  ]));
              } else {
                  dataTypes.push(param);
                  dataValues.push(value);
              }
          });
          return {
              data: this.#abiCoder.encode(dataTypes, dataValues),
              topics: topics
          };
      }
      // Decode a filter for the event and the search criteria
      decodeEventLog(fragment, data, topics) {
          if (typeof fragment === "string") {
              const f = this.getEvent(fragment);
              (0, _indexJs2.assertArgument)(f, "unknown event", "eventFragment", fragment);
              fragment = f;
          }
          if (topics != null && !fragment.anonymous) {
              const eventTopic = fragment.topicHash;
              (0, _indexJs2.assertArgument)((0, _indexJs2.isHexString)(topics[0], 32) && topics[0].toLowerCase() === eventTopic, "fragment/topic mismatch", "topics[0]", topics[0]);
              topics = topics.slice(1);
          }
          const indexed = [];
          const nonIndexed = [];
          const dynamic = [];
          fragment.inputs.forEach((param, index)=>{
              if (param.indexed) {
                  if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
                      indexed.push((0, _fragmentsJs.ParamType).from({
                          type: "bytes32",
                          name: param.name
                      }));
                      dynamic.push(true);
                  } else {
                      indexed.push(param);
                      dynamic.push(false);
                  }
              } else {
                  nonIndexed.push(param);
                  dynamic.push(false);
              }
          });
          const resultIndexed = topics != null ? this.#abiCoder.decode(indexed, (0, _indexJs2.concat)(topics)) : null;
          const resultNonIndexed = this.#abiCoder.decode(nonIndexed, data, true);
          //const result: (Array<any> & { [ key: string ]: any }) = [ ];
          const values = [];
          const keys = [];
          let nonIndexedIndex = 0, indexedIndex = 0;
          fragment.inputs.forEach((param, index)=>{
              let value = null;
              if (param.indexed) {
                  if (resultIndexed == null) value = new Indexed(null);
                  else if (dynamic[index]) value = new Indexed(resultIndexed[indexedIndex++]);
                  else try {
                      value = resultIndexed[indexedIndex++];
                  } catch (error) {
                      value = error;
                  }
              } else try {
                  value = resultNonIndexed[nonIndexedIndex++];
              } catch (error) {
                  value = error;
              }
              values.push(value);
              keys.push(param.name || null);
          });
          return (0, _abstractCoderJs.Result).fromItems(values, keys);
      }
      /**
       *  Parses a transaction, finding the matching function and extracts
       *  the parameter values along with other useful function details.
       *
       *  If the matching function cannot be found, return null.
       */ parseTransaction(tx) {
          const data = (0, _indexJs2.getBytes)(tx.data, "tx.data");
          const value = (0, _indexJs2.getBigInt)(tx.value != null ? tx.value : 0, "tx.value");
          const fragment = this.getFunction((0, _indexJs2.hexlify)(data.slice(0, 4)));
          if (!fragment) return null;
          const args = this.#abiCoder.decode(fragment.inputs, data.slice(4));
          return new TransactionDescription(fragment, fragment.selector, args, value);
      }
      parseCallResult(data) {
          throw new Error("@TODO");
      }
      /**
       *  Parses a receipt log, finding the matching event and extracts
       *  the parameter values along with other useful event details.
       *
       *  If the matching event cannot be found, returns null.
       */ parseLog(log) {
          const fragment = this.getEvent(log.topics[0]);
          if (!fragment || fragment.anonymous) return null;
          // @TODO: If anonymous, and the only method, and the input count matches, should we parse?
          //        Probably not, because just because it is the only event in the ABI does
          //        not mean we have the full ABI; maybe just a fragment?
          return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));
      }
      /**
       *  Parses a revert data, finding the matching error and extracts
       *  the parameter values along with other useful error details.
       *
       *  If the matching event cannot be found, returns null.
       */ parseError(data) {
          const hexData = (0, _indexJs2.hexlify)(data);
          const fragment = this.getError((0, _indexJs2.dataSlice)(hexData, 0, 4));
          if (!fragment) return null;
          const args = this.#abiCoder.decode(fragment.inputs, (0, _indexJs2.dataSlice)(hexData, 4));
          return new ErrorDescription(fragment, fragment.selector, args);
      }
      /**
       *  Creates a new [[Interface]] from the ABI %%value%%.
       *
       *  The %%value%% may be provided as an existing [[Interface]] object,
       *  a JSON-encoded ABI or any Human-Readable ABI format.
       */ static from(value) {
          // Already an Interface, which is immutable
          if (value instanceof Interface) return value;
          // JSON
          if (typeof value === "string") return new Interface(JSON.parse(value));
          // Maybe an interface from an older version, or from a symlinked copy
          if (typeof value.format === "function") return new Interface(value.format("json"));
          // Array of fragments
          return new Interface(value);
      }
  }
  
  },{"../crypto/index.js":"4oi1q","../hash/index.js":"bTSS2","../utils/index.js":"jGhd9","./abi-coder.js":"1sOdq","./coders/abstract-coder.js":"7wibj","./fragments.js":"hcAow","./typed.js":"6W7uu","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"3yTtn":[function(require,module,exports) {
  /**
   *  About contracts...
   *
   *  @_section: api/contract:Contracts  [about-contracts]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "BaseContract", ()=>(0, _contractJs.BaseContract));
  parcelHelpers.export(exports, "Contract", ()=>(0, _contractJs.Contract));
  parcelHelpers.export(exports, "ContractFactory", ()=>(0, _factoryJs.ContractFactory));
  parcelHelpers.export(exports, "ContractEventPayload", ()=>(0, _wrappersJs.ContractEventPayload));
  parcelHelpers.export(exports, "ContractUnknownEventPayload", ()=>(0, _wrappersJs.ContractUnknownEventPayload));
  parcelHelpers.export(exports, "ContractTransactionReceipt", ()=>(0, _wrappersJs.ContractTransactionReceipt));
  parcelHelpers.export(exports, "ContractTransactionResponse", ()=>(0, _wrappersJs.ContractTransactionResponse));
  parcelHelpers.export(exports, "EventLog", ()=>(0, _wrappersJs.EventLog));
  var _contractJs = require("./contract.js");
  var _factoryJs = require("./factory.js");
  var _wrappersJs = require("./wrappers.js");
  
  },{"./contract.js":"bHkdV","./factory.js":"26BP2","./wrappers.js":"graCd","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"bHkdV":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  @_ignore:
   */ parcelHelpers.export(exports, "copyOverrides", ()=>copyOverrides);
  /**
   *  @_ignore:
   */ parcelHelpers.export(exports, "resolveArgs", ()=>resolveArgs);
  parcelHelpers.export(exports, "BaseContract", ()=>BaseContract);
  parcelHelpers.export(exports, "Contract", ()=>Contract);
  var _indexJs = require("../abi/index.js");
  var _indexJs1 = require("../address/index.js");
  // import from provider.ts instead of index.ts to prevent circular dep
  // from EtherscanProvider
  var _providerJs = require("../providers/provider.js");
  var _indexJs2 = require("../utils/index.js");
  var _wrappersJs = require("./wrappers.js");
  const BN_0 = BigInt(0);
  function canCall(value) {
      return value && typeof value.call === "function";
  }
  function canEstimate(value) {
      return value && typeof value.estimateGas === "function";
  }
  function canResolve(value) {
      return value && typeof value.resolveName === "function";
  }
  function canSend(value) {
      return value && typeof value.sendTransaction === "function";
  }
  class PreparedTopicFilter {
      #filter;
      fragment;
      constructor(contract, fragment, args){
          (0, _indexJs2.defineProperties)(this, {
              fragment
          });
          if (fragment.inputs.length < args.length) throw new Error("too many arguments");
          // Recursively descend into args and resolve any addresses
          const runner = getRunner(contract.runner, "resolveName");
          const resolver = canResolve(runner) ? runner : null;
          this.#filter = async function() {
              const resolvedArgs = await Promise.all(fragment.inputs.map((param, index)=>{
                  const arg = args[index];
                  if (arg == null) return null;
                  return param.walkAsync(args[index], (type, value)=>{
                      if (type === "address") return (0, _indexJs1.resolveAddress)(value, resolver);
                      return value;
                  });
              }));
              return contract.interface.encodeFilterTopics(fragment, resolvedArgs);
          }();
      }
      getTopicFilter() {
          return this.#filter;
      }
  }
  // A = Arguments passed in as a tuple
  // R = The result type of the call (i.e. if only one return type,
  //     the qualified type, otherwise Result)
  // D = The type the default call will return (i.e. R for view/pure,
  //     TransactionResponse otherwise)
  //export interface ContractMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse> {
  function getRunner(value, feature) {
      if (value == null) return null;
      if (typeof value[feature] === "function") return value;
      if (value.provider && typeof value.provider[feature] === "function") return value.provider;
      return null;
  }
  function getProvider(value) {
      if (value == null) return null;
      return value.provider || null;
  }
  async function copyOverrides(arg, allowed) {
      // Create a shallow copy (we'll deep-ify anything needed during normalizing)
      const overrides = (0, _providerJs.copyRequest)((0, _indexJs.Typed).dereference(arg, "overrides"));
      (0, _indexJs2.assertArgument)(overrides.to == null || (allowed || []).indexOf("to") >= 0, "cannot override to", "overrides.to", overrides.to);
      (0, _indexJs2.assertArgument)(overrides.data == null || (allowed || []).indexOf("data") >= 0, "cannot override data", "overrides.data", overrides.data);
      // Resolve any from
      if (overrides.from) overrides.from = await (0, _indexJs1.resolveAddress)(overrides.from);
      return overrides;
  }
  async function resolveArgs(_runner, inputs, args) {
      // Recursively descend into args and resolve any addresses
      const runner = getRunner(_runner, "resolveName");
      const resolver = canResolve(runner) ? runner : null;
      return await Promise.all(inputs.map((param, index)=>{
          return param.walkAsync(args[index], (type, value)=>{
              value = (0, _indexJs.Typed).dereference(value, type);
              if (type === "address") return (0, _indexJs1.resolveAddress)(value, resolver);
              return value;
          });
      }));
  }
  function buildWrappedFallback(contract) {
      const populateTransaction = async function(overrides) {
          // If an overrides was passed in, copy it and normalize the values
          const tx = await copyOverrides(overrides, [
              "data"
          ]);
          tx.to = await contract.getAddress();
          const iface = contract.interface;
          // Only allow payable contracts to set non-zero value
          const payable = iface.receive || iface.fallback && iface.fallback.payable;
          (0, _indexJs2.assertArgument)(payable || (tx.value || BN_0) === BN_0, "cannot send value to non-payable contract", "overrides.value", tx.value);
          // Only allow fallback contracts to set non-empty data
          (0, _indexJs2.assertArgument)(iface.fallback || (tx.data || "0x") === "0x", "cannot send data to receive-only contract", "overrides.data", tx.data);
          return tx;
      };
      const staticCall = async function(overrides) {
          const runner = getRunner(contract.runner, "call");
          (0, _indexJs2.assert)(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", {
              operation: "call"
          });
          const tx = await populateTransaction(overrides);
          try {
              return await runner.call(tx);
          } catch (error) {
              if ((0, _indexJs2.isCallException)(error) && error.data) throw contract.interface.makeError(error.data, tx);
              throw error;
          }
      };
      const send = async function(overrides) {
          const runner = contract.runner;
          (0, _indexJs2.assert)(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", {
              operation: "sendTransaction"
          });
          const tx = await runner.sendTransaction(await populateTransaction(overrides));
          const provider = getProvider(contract.runner);
          // @TODO: the provider can be null; make a custom dummy provider that will throw a
          // meaningful error
          return new (0, _wrappersJs.ContractTransactionResponse)(contract.interface, provider, tx);
      };
      const estimateGas = async function(overrides) {
          const runner = getRunner(contract.runner, "estimateGas");
          (0, _indexJs2.assert)(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", {
              operation: "estimateGas"
          });
          return await runner.estimateGas(await populateTransaction(overrides));
      };
      const method = async (overrides)=>{
          return await send(overrides);
      };
      (0, _indexJs2.defineProperties)(method, {
          _contract: contract,
          estimateGas,
          populateTransaction,
          send,
          staticCall
      });
      return method;
  }
  function buildWrappedMethod(contract, key) {
      const getFragment = function(...args) {
          const fragment = contract.interface.getFunction(key, args);
          (0, _indexJs2.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
              operation: "fragment"
          });
          return fragment;
      };
      const populateTransaction = async function(...args) {
          const fragment = getFragment(...args);
          // If an overrides was passed in, copy it and normalize the values
          let overrides = {};
          if (fragment.inputs.length + 1 === args.length) overrides = await copyOverrides(args.pop());
          if (fragment.inputs.length !== args.length) throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");
          const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);
          return Object.assign({}, overrides, await (0, _indexJs2.resolveProperties)({
              to: contract.getAddress(),
              data: contract.interface.encodeFunctionData(fragment, resolvedArgs)
          }));
      };
      const staticCall = async function(...args) {
          const result = await staticCallResult(...args);
          if (result.length === 1) return result[0];
          return result;
      };
      const send = async function(...args) {
          const runner = contract.runner;
          (0, _indexJs2.assert)(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", {
              operation: "sendTransaction"
          });
          const tx = await runner.sendTransaction(await populateTransaction(...args));
          const provider = getProvider(contract.runner);
          // @TODO: the provider can be null; make a custom dummy provider that will throw a
          // meaningful error
          return new (0, _wrappersJs.ContractTransactionResponse)(contract.interface, provider, tx);
      };
      const estimateGas = async function(...args) {
          const runner = getRunner(contract.runner, "estimateGas");
          (0, _indexJs2.assert)(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", {
              operation: "estimateGas"
          });
          return await runner.estimateGas(await populateTransaction(...args));
      };
      const staticCallResult = async function(...args) {
          const runner = getRunner(contract.runner, "call");
          (0, _indexJs2.assert)(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", {
              operation: "call"
          });
          const tx = await populateTransaction(...args);
          let result = "0x";
          try {
              result = await runner.call(tx);
          } catch (error) {
              if ((0, _indexJs2.isCallException)(error) && error.data) throw contract.interface.makeError(error.data, tx);
              throw error;
          }
          const fragment = getFragment(...args);
          return contract.interface.decodeFunctionResult(fragment, result);
      };
      const method = async (...args)=>{
          const fragment = getFragment(...args);
          if (fragment.constant) return await staticCall(...args);
          return await send(...args);
      };
      (0, _indexJs2.defineProperties)(method, {
          name: contract.interface.getFunctionName(key),
          _contract: contract,
          _key: key,
          getFragment,
          estimateGas,
          populateTransaction,
          send,
          staticCall,
          staticCallResult
      });
      // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)
      Object.defineProperty(method, "fragment", {
          configurable: false,
          enumerable: true,
          get: ()=>{
              const fragment = contract.interface.getFunction(key);
              (0, _indexJs2.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
                  operation: "fragment"
              });
              return fragment;
          }
      });
      return method;
  }
  function buildWrappedEvent(contract, key) {
      const getFragment = function(...args) {
          const fragment = contract.interface.getEvent(key, args);
          (0, _indexJs2.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
              operation: "fragment"
          });
          return fragment;
      };
      const method = function(...args) {
          return new PreparedTopicFilter(contract, getFragment(...args), args);
      };
      (0, _indexJs2.defineProperties)(method, {
          name: contract.interface.getEventName(key),
          _contract: contract,
          _key: key,
          getFragment
      });
      // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)
      Object.defineProperty(method, "fragment", {
          configurable: false,
          enumerable: true,
          get: ()=>{
              const fragment = contract.interface.getEvent(key);
              (0, _indexJs2.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
                  operation: "fragment"
              });
              return fragment;
          }
      });
      return method;
  }
  // The combination of TypeScrype, Private Fields and Proxies makes
  // the world go boom; so we hide variables with some trickery keeping
  // a symbol attached to each BaseContract which its sub-class (even
  // via a Proxy) can reach and use to look up its internal values.
  const internal = Symbol.for("_ethersInternal_contract");
  const internalValues = new WeakMap();
  function setInternal(contract, values) {
      internalValues.set(contract[internal], values);
  }
  function getInternal(contract) {
      return internalValues.get(contract[internal]);
  }
  function isDeferred(value) {
      return value && typeof value === "object" && "getTopicFilter" in value && typeof value.getTopicFilter === "function" && value.fragment;
  }
  async function getSubInfo(contract, event) {
      let topics;
      let fragment = null;
      // Convert named events to topicHash and get the fragment for
      // events which need deconstructing.
      if (Array.isArray(event)) {
          const topicHashify = function(name) {
              if ((0, _indexJs2.isHexString)(name, 32)) return name;
              const fragment = contract.interface.getEvent(name);
              (0, _indexJs2.assertArgument)(fragment, "unknown fragment", "name", name);
              return fragment.topicHash;
          };
          // Array of Topics and Names; e.g. `[ "0x1234...89ab", "Transfer(address)" ]`
          topics = event.map((e)=>{
              if (e == null) return null;
              if (Array.isArray(e)) return e.map(topicHashify);
              return topicHashify(e);
          });
      } else if (event === "*") topics = [
          null
      ];
      else if (typeof event === "string") {
          if ((0, _indexJs2.isHexString)(event, 32)) // Topic Hash
          topics = [
              event
          ];
          else {
              // Name or Signature; e.g. `"Transfer", `"Transfer(address)"`
              fragment = contract.interface.getEvent(event);
              (0, _indexJs2.assertArgument)(fragment, "unknown fragment", "event", event);
              topics = [
                  fragment.topicHash
              ];
          }
      } else if (isDeferred(event)) // Deferred Topic Filter; e.g. `contract.filter.Transfer(from)`
      topics = await event.getTopicFilter();
      else if ("fragment" in event) {
          // ContractEvent; e.g. `contract.filter.Transfer`
          fragment = event.fragment;
          topics = [
              fragment.topicHash
          ];
      } else (0, _indexJs2.assertArgument)(false, "unknown event name", "event", event);
      // Normalize topics and sort TopicSets
      topics = topics.map((t)=>{
          if (t == null) return null;
          if (Array.isArray(t)) {
              const items = Array.from(new Set(t.map((t)=>t.toLowerCase())).values());
              if (items.length === 1) return items[0];
              items.sort();
              return items;
          }
          return t.toLowerCase();
      });
      const tag = topics.map((t)=>{
          if (t == null) return "null";
          if (Array.isArray(t)) return t.join("|");
          return t;
      }).join("&");
      return {
          fragment,
          tag,
          topics
      };
  }
  async function hasSub(contract, event) {
      const { subs  } = getInternal(contract);
      return subs.get((await getSubInfo(contract, event)).tag) || null;
  }
  async function getSub(contract, operation, event) {
      // Make sure our runner can actually subscribe to events
      const provider = getProvider(contract.runner);
      (0, _indexJs2.assert)(provider, "contract runner does not support subscribing", "UNSUPPORTED_OPERATION", {
          operation
      });
      const { fragment , tag , topics  } = await getSubInfo(contract, event);
      const { addr , subs  } = getInternal(contract);
      let sub = subs.get(tag);
      if (!sub) {
          const address = addr ? addr : contract;
          const filter = {
              address,
              topics
          };
          const listener = (log)=>{
              let foundFragment = fragment;
              if (foundFragment == null) try {
                  foundFragment = contract.interface.getEvent(log.topics[0]);
              } catch (error) {}
              // If fragment is null, we do not deconstruct the args to emit
              if (foundFragment) {
                  const _foundFragment = foundFragment;
                  const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];
                  emit(contract, event, args, (listener)=>{
                      return new (0, _wrappersJs.ContractEventPayload)(contract, listener, event, _foundFragment, log);
                  });
              } else emit(contract, event, [], (listener)=>{
                  return new (0, _wrappersJs.ContractUnknownEventPayload)(contract, listener, event, log);
              });
          };
          let starting = [];
          const start = ()=>{
              if (starting.length) return;
              starting.push(provider.on(filter, listener));
          };
          const stop = async ()=>{
              if (starting.length == 0) return;
              let started = starting;
              starting = [];
              await Promise.all(started);
              provider.off(filter, listener);
          };
          sub = {
              tag,
              listeners: [],
              start,
              stop
          };
          subs.set(tag, sub);
      }
      return sub;
  }
  // We use this to ensure one emit resolves before firing the next to
  // ensure correct ordering (note this cannot throw and just adds the
  // notice to the event queu using setTimeout).
  let lastEmit = Promise.resolve();
  async function _emit(contract, event, args, payloadFunc) {
      await lastEmit;
      const sub = await hasSub(contract, event);
      if (!sub) return false;
      const count = sub.listeners.length;
      sub.listeners = sub.listeners.filter(({ listener , once  })=>{
          const passArgs = Array.from(args);
          if (payloadFunc) passArgs.push(payloadFunc(once ? null : listener));
          try {
              listener.call(contract, ...passArgs);
          } catch (error) {}
          return !once;
      });
      return count > 0;
  }
  async function emit(contract, event, args, payloadFunc) {
      try {
          await lastEmit;
      } catch (error) {}
      const resultPromise = _emit(contract, event, args, payloadFunc);
      lastEmit = resultPromise;
      return await resultPromise;
  }
  const passProperties = [
      "then"
  ];
  class BaseContract {
      target;
      interface;
      runner;
      filters;
      [internal];
      fallback;
      constructor(target, abi, runner, _deployTx){
          if (runner == null) runner = null;
          const iface = (0, _indexJs.Interface).from(abi);
          (0, _indexJs2.defineProperties)(this, {
              target,
              runner,
              interface: iface
          });
          Object.defineProperty(this, internal, {
              value: {}
          });
          let addrPromise;
          let addr = null;
          let deployTx = null;
          if (_deployTx) {
              const provider = getProvider(runner);
              // @TODO: the provider can be null; make a custom dummy provider that will throw a
              // meaningful error
              deployTx = new (0, _wrappersJs.ContractTransactionResponse)(this.interface, provider, _deployTx);
          }
          let subs = new Map();
          // Resolve the target as the address
          if (typeof target === "string") {
              if ((0, _indexJs2.isHexString)(target)) {
                  addr = target;
                  addrPromise = Promise.resolve(target);
              } else {
                  const resolver = getRunner(runner, "resolveName");
                  if (!canResolve(resolver)) throw (0, _indexJs2.makeError)("contract runner does not support name resolution", "UNSUPPORTED_OPERATION", {
                      operation: "resolveName"
                  });
                  addrPromise = resolver.resolveName(target).then((addr)=>{
                      if (addr == null) throw new Error("TODO");
                      getInternal(this).addr = addr;
                      return addr;
                  });
              }
          } else addrPromise = target.getAddress().then((addr)=>{
              if (addr == null) throw new Error("TODO");
              getInternal(this).addr = addr;
              return addr;
          });
          // Set our private values
          setInternal(this, {
              addrPromise,
              addr,
              deployTx,
              subs
          });
          // Add the event filters
          const filters = new Proxy({}, {
              get: (target, _prop, receiver)=>{
                  // Pass important checks (like `then` for Promise) through
                  if (passProperties.indexOf(_prop) >= 0) return Reflect.get(target, _prop, receiver);
                  const prop = String(_prop);
                  const result = this.getEvent(prop);
                  if (result) return result;
                  throw new Error(`unknown contract event: ${prop}`);
              },
              has: (target, prop)=>{
                  // Pass important checks (like `then` for Promise) through
                  if (passProperties.indexOf(prop) >= 0) return Reflect.has(target, prop);
                  return Reflect.has(target, prop) || this.interface.hasEvent(String(prop));
              }
          });
          (0, _indexJs2.defineProperties)(this, {
              filters
          });
          (0, _indexJs2.defineProperties)(this, {
              fallback: iface.receive || iface.fallback ? buildWrappedFallback(this) : null
          });
          // Return a Proxy that will respond to functions
          return new Proxy(this, {
              get: (target, _prop, receiver)=>{
                  if (_prop in target || passProperties.indexOf(_prop) >= 0) return Reflect.get(target, _prop, receiver);
                  const prop = String(_prop);
                  const result = target.getFunction(prop);
                  if (result) return result;
                  throw new Error(`unknown contract method: ${prop}`);
              },
              has: (target, prop)=>{
                  if (prop in target || passProperties.indexOf(prop) >= 0) return Reflect.has(target, prop);
                  return target.interface.hasFunction(String(prop));
              }
          });
      }
      connect(runner) {
          return new BaseContract(this.target, this.interface, runner);
      }
      async getAddress() {
          return await getInternal(this).addrPromise;
      }
      async getDeployedCode() {
          const provider = getProvider(this.runner);
          (0, _indexJs2.assert)(provider, "runner does not support .provider", "UNSUPPORTED_OPERATION", {
              operation: "getDeployedCode"
          });
          const code = await provider.getCode(await this.getAddress());
          if (code === "0x") return null;
          return code;
      }
      async waitForDeployment() {
          // We have the deployement transaction; just use that (throws if deployement fails)
          const deployTx = this.deploymentTransaction();
          if (deployTx) {
              await deployTx.wait();
              return this;
          }
          // Check for code
          const code = await this.getDeployedCode();
          if (code != null) return this;
          // Make sure we can subscribe to a provider event
          const provider = getProvider(this.runner);
          (0, _indexJs2.assert)(provider != null, "contract runner does not support .provider", "UNSUPPORTED_OPERATION", {
              operation: "waitForDeployment"
          });
          return new Promise((resolve, reject)=>{
              const checkCode = async ()=>{
                  try {
                      const code = await this.getDeployedCode();
                      if (code != null) return resolve(this);
                      provider.once("block", checkCode);
                  } catch (error) {
                      reject(error);
                  }
              };
              checkCode();
          });
      }
      deploymentTransaction() {
          return getInternal(this).deployTx;
      }
      getFunction(key) {
          if (typeof key !== "string") key = key.format();
          const func = buildWrappedMethod(this, key);
          return func;
      }
      getEvent(key) {
          if (typeof key !== "string") key = key.format();
          return buildWrappedEvent(this, key);
      }
      async queryTransaction(hash) {
          // Is this useful?
          throw new Error("@TODO");
      }
      async queryFilter(event, fromBlock, toBlock) {
          if (fromBlock == null) fromBlock = 0;
          if (toBlock == null) toBlock = "latest";
          const { addr , addrPromise  } = getInternal(this);
          const address = addr ? addr : await addrPromise;
          const { fragment , topics  } = await getSubInfo(this, event);
          const filter = {
              address,
              topics,
              fromBlock,
              toBlock
          };
          const provider = getProvider(this.runner);
          (0, _indexJs2.assert)(provider, "contract runner does not have a provider", "UNSUPPORTED_OPERATION", {
              operation: "queryFilter"
          });
          return (await provider.getLogs(filter)).map((log)=>{
              let foundFragment = fragment;
              if (foundFragment == null) try {
                  foundFragment = this.interface.getEvent(log.topics[0]);
              } catch (error) {}
              if (foundFragment) return new (0, _wrappersJs.EventLog)(log, this.interface, foundFragment);
              else return new (0, _providerJs.Log)(log, provider);
          });
      }
      async on(event, listener) {
          const sub = await getSub(this, "on", event);
          sub.listeners.push({
              listener,
              once: false
          });
          sub.start();
          return this;
      }
      async once(event, listener) {
          const sub = await getSub(this, "once", event);
          sub.listeners.push({
              listener,
              once: true
          });
          sub.start();
          return this;
      }
      async emit(event, ...args) {
          return await emit(this, event, args, null);
      }
      async listenerCount(event) {
          if (event) {
              const sub = await hasSub(this, event);
              if (!sub) return 0;
              return sub.listeners.length;
          }
          const { subs  } = getInternal(this);
          let total = 0;
          for (const { listeners  } of subs.values())total += listeners.length;
          return total;
      }
      async listeners(event) {
          if (event) {
              const sub = await hasSub(this, event);
              if (!sub) return [];
              return sub.listeners.map(({ listener  })=>listener);
          }
          const { subs  } = getInternal(this);
          let result = [];
          for (const { listeners  } of subs.values())result = result.concat(listeners.map(({ listener  })=>listener));
          return result;
      }
      async off(event, listener) {
          const sub = await hasSub(this, event);
          if (!sub) return this;
          if (listener) {
              const index = sub.listeners.map(({ listener  })=>listener).indexOf(listener);
              if (index >= 0) sub.listeners.splice(index, 1);
          }
          if (listener == null || sub.listeners.length === 0) {
              sub.stop();
              getInternal(this).subs.delete(sub.tag);
          }
          return this;
      }
      async removeAllListeners(event) {
          if (event) {
              const sub = await hasSub(this, event);
              if (!sub) return this;
              sub.stop();
              getInternal(this).subs.delete(sub.tag);
          } else {
              const { subs  } = getInternal(this);
              for (const { tag , stop  } of subs.values()){
                  stop();
                  subs.delete(tag);
              }
          }
          return this;
      }
      // Alias for "on"
      async addListener(event, listener) {
          return await this.on(event, listener);
      }
      // Alias for "off"
      async removeListener(event, listener) {
          return await this.off(event, listener);
      }
      static buildClass(abi) {
          class CustomContract extends BaseContract {
              constructor(address, runner = null){
                  super(address, abi, runner);
              }
          }
          return CustomContract;
      }
      static from(target, abi, runner) {
          if (runner == null) runner = null;
          const contract = new this(target, abi, runner);
          return contract;
      }
  }
  function _ContractBase() {
      return BaseContract;
  }
  class Contract extends _ContractBase() {
  }
  
  },{"../abi/index.js":"3U93s","../address/index.js":"cuJ87","../providers/provider.js":"kIz6a","../utils/index.js":"jGhd9","./wrappers.js":"graCd","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"kIz6a":[function(require,module,exports) {
  //import { resolveAddress } from "@ethersproject/address";
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  // @TODO? <T extends FeeData = { }> implements Required<T>
  /**
   *  A **FeeData** wraps all the fee-related values associated with
   *  the network.
   */ parcelHelpers.export(exports, "FeeData", ()=>FeeData);
  parcelHelpers.export(exports, "copyRequest", ()=>copyRequest);
  /**
   *  A **Block** represents the data associated with a full block on
   *  Ethereum.
   */ parcelHelpers.export(exports, "Block", ()=>Block);
  //////////////////////
  // Log
  parcelHelpers.export(exports, "Log", ()=>Log);
  //////////////////////
  // Transaction Receipt
  /*
  export interface LegacyTransactionReceipt {
      byzantium: false;
      status: null;
      root: string;
  }
  
  export interface ByzantiumTransactionReceipt {
      byzantium: true;
      status: number;
      root: null;
  }
  */ parcelHelpers.export(exports, "TransactionReceipt", ()=>TransactionReceipt);
  /*
  export type ReplacementDetectionSetup = {
      to: string;
      from: string;
      value: bigint;
      data: string;
      nonce: number;
      block: number;
  };
  */ parcelHelpers.export(exports, "TransactionResponse", ()=>TransactionResponse);
  var _indexJs = require("../utils/index.js");
  var _indexJs1 = require("../transaction/index.js");
  const BN_0 = BigInt(0);
  // -----------------------
  function getValue(value) {
      if (value == null) return null;
      return value;
  }
  function toJson(value) {
      if (value == null) return null;
      return value.toString();
  }
  class FeeData {
      /**
       *  The gas price for legacy networks.
       */ gasPrice;
      /**
       *  The maximum fee to pay per gas.
       *
       *  The base fee per gas is defined by the network and based on
       *  congestion, increasing the cost during times of heavy load
       *  and lowering when less busy.
       *
       *  The actual fee per gas will be the base fee for the block
       *  and the priority fee, up to the max fee per gas.
       *
       *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
       */ maxFeePerGas;
      /**
       *  The additional amout to pay per gas to encourage a validator
       *  to include the transaction.
       *
       *  The purpose of this is to compensate the validator for the
       *  adjusted risk for including a given transaction.
       *
       *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
       */ maxPriorityFeePerGas;
      /**
       *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and
       *  %%maxPriorityFeePerGas%%.
       */ constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas){
          (0, _indexJs.defineProperties)(this, {
              gasPrice: getValue(gasPrice),
              maxFeePerGas: getValue(maxFeePerGas),
              maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)
          });
      }
      /**
       *  Returns a JSON-friendly value.
       */ toJSON() {
          const { gasPrice , maxFeePerGas , maxPriorityFeePerGas  } = this;
          return {
              _type: "FeeData",
              gasPrice: toJson(gasPrice),
              maxFeePerGas: toJson(maxFeePerGas),
              maxPriorityFeePerGas: toJson(maxPriorityFeePerGas)
          };
      }
  }
  function copyRequest(req) {
      const result = {};
      // These could be addresses, ENS names or Addressables
      if (req.to) result.to = req.to;
      if (req.from) result.from = req.from;
      if (req.data) result.data = (0, _indexJs.hexlify)(req.data);
      const bigIntKeys = "chainId,gasLimit,gasPrice,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);
      for (const key of bigIntKeys){
          if (!(key in req) || req[key] == null) continue;
          result[key] = (0, _indexJs.getBigInt)(req[key], `request.${key}`);
      }
      const numberKeys = "type,nonce".split(/,/);
      for (const key of numberKeys){
          if (!(key in req) || req[key] == null) continue;
          result[key] = (0, _indexJs.getNumber)(req[key], `request.${key}`);
      }
      if (req.accessList) result.accessList = (0, _indexJs1.accessListify)(req.accessList);
      if ("blockTag" in req) result.blockTag = req.blockTag;
      if ("enableCcipRead" in req) result.enableCcipReadEnabled = !!req.enableCcipRead;
      if ("customData" in req) result.customData = req.customData;
      return result;
  }
  class Block {
      /**
       *  The provider connected to the block used to fetch additional details
       *  if necessary.
       */ provider;
      /**
       *  The block number, sometimes called the block height. This is a
       *  sequential number that is one higher than the parent block.
       */ number;
      /**
       *  The block hash.
       */ hash;
      /**
       *  The timestamp for this block, which is the number of seconds since
       *  epoch that this block was included.
       */ timestamp;
      /**
       *  The block hash of the parent block.
       */ parentHash;
      /**
       *  The nonce.
       *
       *  On legacy networks, this is the random number inserted which
       *  permitted the difficulty target to be reached.
       */ nonce;
      /**
       *  The difficulty target.
       *
       *  On legacy networks, this is the proof-of-work target required
       *  for a block to meet the protocol rules to be included.
       *
       *  On modern networks, this is a random number arrived at using
       *  randao.  @TODO: Find links?
       */ difficulty;
      /**
       *  The total gas limit for this block.
       */ gasLimit;
      /**
       *  The total gas used in this block.
       */ gasUsed;
      /**
       *  The miner coinbase address, wihch receives any subsidies for
       *  including this block.
       */ miner;
      /**
       *  Any extra data the validator wished to include.
       */ extraData;
      /**
       *  The base fee per gas that all transactions in this block were
       *  charged.
       *
       *  This adjusts after each block, depending on how congested the network
       *  is.
       */ baseFeePerGas;
      #transactions;
      /**
       *  Create a new **Block** object.
       *
       *  This should generally not be necessary as the unless implementing a
       *  low-level library.
       */ constructor(block, provider){
          this.#transactions = block.transactions.map((tx)=>{
              if (typeof tx !== "string") return new TransactionResponse(tx, provider);
              return tx;
          });
          (0, _indexJs.defineProperties)(this, {
              provider,
              hash: getValue(block.hash),
              number: block.number,
              timestamp: block.timestamp,
              parentHash: block.parentHash,
              nonce: block.nonce,
              difficulty: block.difficulty,
              gasLimit: block.gasLimit,
              gasUsed: block.gasUsed,
              miner: block.miner,
              extraData: block.extraData,
              baseFeePerGas: getValue(block.baseFeePerGas)
          });
      }
      /**
       *  Returns the list of transaction hashes.
       */ get transactions() {
          return this.#transactions.map((tx)=>{
              if (typeof tx === "string") return tx;
              return tx.hash;
          });
      }
      /**
       *  Returns the complete transactions for blocks which
       *  prefetched them, by passing ``true`` to %%prefetchTxs%%
       *  into [[provider_getBlock]].
       */ get prefetchedTransactions() {
          const txs = this.#transactions.slice();
          // Doesn't matter...
          if (txs.length === 0) return [];
          // Make sure we prefetched the transactions
          (0, _indexJs.assert)(typeof txs[0] === "object", "transactions were not prefetched with block request", "UNSUPPORTED_OPERATION", {
              operation: "transactionResponses()"
          });
          return txs;
      }
      /**
       *  Returns a JSON-friendly value.
       */ toJSON() {
          const { baseFeePerGas , difficulty , extraData , gasLimit , gasUsed , hash , miner , nonce , number , parentHash , timestamp , transactions  } = this;
          return {
              _type: "Block",
              baseFeePerGas: toJson(baseFeePerGas),
              difficulty: toJson(difficulty),
              extraData,
              gasLimit: toJson(gasLimit),
              gasUsed: toJson(gasUsed),
              hash,
              miner,
              nonce,
              number,
              parentHash,
              timestamp,
              transactions
          };
      }
      [Symbol.iterator]() {
          let index = 0;
          const txs = this.transactions;
          return {
              next: ()=>{
                  if (index < this.length) return {
                      value: txs[index++],
                      done: false
                  };
                  return {
                      value: undefined,
                      done: true
                  };
              }
          };
      }
      /**
       *  The number of transactions in this block.
       */ get length() {
          return this.#transactions.length;
      }
      /**
       *  The [[link-js-date]] this block was included at.
       */ get date() {
          if (this.timestamp == null) return null;
          return new Date(this.timestamp * 1000);
      }
      /**
       *  Get the transaction at %%indexe%% within this block.
       */ async getTransaction(indexOrHash) {
          // Find the internal value by its index or hash
          let tx = undefined;
          if (typeof indexOrHash === "number") tx = this.#transactions[indexOrHash];
          else {
              const hash = indexOrHash.toLowerCase();
              for (const v of this.#transactions)if (typeof v === "string") {
                  if (v !== hash) continue;
                  tx = v;
                  break;
              } else {
                  if (v.hash === hash) continue;
                  tx = v;
                  break;
              }
          }
          if (tx == null) throw new Error("no such tx");
          if (typeof tx === "string") return await this.provider.getTransaction(tx);
          else return tx;
      }
      getPrefetchedTransaction(indexOrHash) {
          const txs = this.prefetchedTransactions;
          if (typeof indexOrHash === "number") return txs[indexOrHash];
          indexOrHash = indexOrHash.toLowerCase();
          for (const tx of txs){
              if (tx.hash === indexOrHash) return tx;
          }
          (0, _indexJs.assertArgument)(false, "no matching transaction", "indexOrHash", indexOrHash);
      }
      /**
       *  Has this block been mined.
       *
       *  If true, the block has been typed-gaurded that all mined
       *  properties are non-null.
       */ isMined() {
          return !!this.hash;
      }
      /**
       *
       */ isLondon() {
          return !!this.baseFeePerGas;
      }
      orphanedEvent() {
          if (!this.isMined()) throw new Error("");
          return createOrphanedBlockFilter(this);
      }
  }
  class Log {
      provider;
      transactionHash;
      blockHash;
      blockNumber;
      removed;
      address;
      data;
      topics;
      index;
      transactionIndex;
      constructor(log, provider){
          this.provider = provider;
          const topics = Object.freeze(log.topics.slice());
          (0, _indexJs.defineProperties)(this, {
              transactionHash: log.transactionHash,
              blockHash: log.blockHash,
              blockNumber: log.blockNumber,
              removed: log.removed,
              address: log.address,
              data: log.data,
              topics,
              index: log.index,
              transactionIndex: log.transactionIndex
          });
      }
      toJSON() {
          const { address , blockHash , blockNumber , data , index , removed , topics , transactionHash , transactionIndex  } = this;
          return {
              _type: "log",
              address,
              blockHash,
              blockNumber,
              data,
              index,
              removed,
              topics,
              transactionHash,
              transactionIndex
          };
      }
      async getBlock() {
          const block = await this.provider.getBlock(this.blockHash);
          (0, _indexJs.assert)(!!block, "failed to find transaction", "UNKNOWN_ERROR", {});
          return block;
      }
      async getTransaction() {
          const tx = await this.provider.getTransaction(this.transactionHash);
          (0, _indexJs.assert)(!!tx, "failed to find transaction", "UNKNOWN_ERROR", {});
          return tx;
      }
      async getTransactionReceipt() {
          const receipt = await this.provider.getTransactionReceipt(this.transactionHash);
          (0, _indexJs.assert)(!!receipt, "failed to find transaction receipt", "UNKNOWN_ERROR", {});
          return receipt;
      }
      removedEvent() {
          return createRemovedLogFilter(this);
      }
  }
  class TransactionReceipt {
      provider;
      to;
      from;
      contractAddress;
      hash;
      index;
      blockHash;
      blockNumber;
      logsBloom;
      gasUsed;
      cumulativeGasUsed;
      gasPrice;
      type;
      //readonly byzantium!: boolean;
      status;
      root;
      #logs;
      constructor(tx, provider){
          this.#logs = Object.freeze(tx.logs.map((log)=>{
              return new Log(log, provider);
          }));
          (0, _indexJs.defineProperties)(this, {
              provider,
              to: tx.to,
              from: tx.from,
              contractAddress: tx.contractAddress,
              hash: tx.hash,
              index: tx.index,
              blockHash: tx.blockHash,
              blockNumber: tx.blockNumber,
              logsBloom: tx.logsBloom,
              gasUsed: tx.gasUsed,
              cumulativeGasUsed: tx.cumulativeGasUsed,
              gasPrice: tx.effectiveGasPrice || tx.gasPrice,
              type: tx.type,
              //byzantium: tx.byzantium,
              status: tx.status,
              root: tx.root
          });
      }
      get logs() {
          return this.#logs;
      }
      toJSON() {
          const { to , from , contractAddress , hash , index , blockHash , blockNumber , logsBloom , logs , status , root  } = this;
          return {
              _type: "TransactionReceipt",
              blockHash,
              blockNumber,
              //byzantium, 
              contractAddress,
              cumulativeGasUsed: toJson(this.cumulativeGasUsed),
              from,
              gasPrice: toJson(this.gasPrice),
              gasUsed: toJson(this.gasUsed),
              hash,
              index,
              logs,
              logsBloom,
              root,
              status,
              to
          };
      }
      get length() {
          return this.logs.length;
      }
      [Symbol.iterator]() {
          let index = 0;
          return {
              next: ()=>{
                  if (index < this.length) return {
                      value: this.logs[index++],
                      done: false
                  };
                  return {
                      value: undefined,
                      done: true
                  };
              }
          };
      }
      get fee() {
          return this.gasUsed * this.gasPrice;
      }
      async getBlock() {
          const block = await this.provider.getBlock(this.blockHash);
          if (block == null) throw new Error("TODO");
          return block;
      }
      async getTransaction() {
          const tx = await this.provider.getTransaction(this.hash);
          if (tx == null) throw new Error("TODO");
          return tx;
      }
      async getResult() {
          return await this.provider.getTransactionResult(this.hash);
      }
      async confirmations() {
          return await this.provider.getBlockNumber() - this.blockNumber + 1;
      }
      removedEvent() {
          return createRemovedTransactionFilter(this);
      }
      reorderedEvent(other) {
          (0, _indexJs.assert)(!other || other.isMined(), "unmined 'other' transction cannot be orphaned", "UNSUPPORTED_OPERATION", {
              operation: "reorderedEvent(other)"
          });
          return createReorderedTransactionFilter(this, other);
      }
  }
  class TransactionResponse {
      /**
       *  The provider this is connected to, which will influence how its
       *  methods will resolve its async inspection methods.
       */ provider;
      /**
       *  The block number of the block that this transaction was included in.
       *
       *  This is ``null`` for pending transactions.
       */ blockNumber;
      /**
       *  The blockHash of the block that this transaction was included in.
       *
       *  This is ``null`` for pending transactions.
       */ blockHash;
      /**
       *  The index within the block that this transaction resides at.
       */ index;
      /**
       *  The transaction hash.
       */ hash;
      /**
       *  The [[link-eip-2718]] transaction envelope type. This is
       *  ``0`` for legacy transactions types.
       */ type;
      /**
       *  The receiver of this transaction.
       *
       *  If ``null``, then the transaction is an initcode transaction.
       *  This means the result of executing the [[data]] will be deployed
       *  as a new contract on chain (assuming it does not revert) and the
       *  address may be computed using [[getCreateAddress]].
       */ to;
      /**
       *  The sender of this transaction. It is implicitly computed
       *  from the transaction pre-image hash (as the digest) and the
       *  [[signature]] using ecrecover.
       */ from;
      /**
       *  The nonce, which is used to prevent replay attacks and offer
       *  a method to ensure transactions from a given sender are explicitly
       *  ordered.
       *
       *  When sending a transaction, this must be equal to the number of
       *  transactions ever sent by [[from]].
       */ nonce;
      /**
       *  The maximum units of gas this transaction can consume. If execution
       *  exceeds this, the entries transaction is reverted and the sender
       *  is charged for the full amount, despite not state changes being made.
       */ gasLimit;
      /**
       *  The gas price can have various values, depending on the network.
       *
       *  In modern networks, for transactions that are included this is
       *  the //effective gas price// (the fee per gas that was actually
       *  charged), while for transactions that have not been included yet
       *  is the [[maxFeePerGas]].
       *
       *  For legacy transactions, or transactions on legacy networks, this
       *  is the fee that will be charged per unit of gas the transaction
       *  consumes.
       */ gasPrice;
      /**
       *  The maximum priority fee (per unit of gas) to allow a
       *  validator to charge the sender. This is inclusive of the
       *  [[maxFeeFeePerGas]].
       */ maxPriorityFeePerGas;
      /**
       *  The maximum fee (per unit of gas) to allow this transaction
       *  to charge the sender.
       */ maxFeePerGas;
      /**
       *  The data.
       */ data;
      /**
       *  The value, in wei. Use [[formatEther]] to format this value
       *  as ether.
       */ value;
      /**
       *  The chain ID.
       */ chainId;
      /**
       *  The signature.
       */ signature;
      /**
       *  The [[link-eip-2930]] access list for transaction types that
       *  support it, otherwise ``null``.
       */ accessList;
      #startBlock;
      /**
       *  Create a new TransactionResponse with %%tx%% parameters
       *  connected to %%provider%%.
       */ constructor(tx, provider){
          this.provider = provider;
          this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;
          this.blockHash = tx.blockHash != null ? tx.blockHash : null;
          this.hash = tx.hash;
          this.index = tx.index;
          this.type = tx.type;
          this.from = tx.from;
          this.to = tx.to || null;
          this.gasLimit = tx.gasLimit;
          this.nonce = tx.nonce;
          this.data = tx.data;
          this.value = tx.value;
          this.gasPrice = tx.gasPrice;
          this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;
          this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;
          this.chainId = tx.chainId;
          this.signature = tx.signature;
          this.accessList = tx.accessList != null ? tx.accessList : null;
          this.#startBlock = -1;
      }
      /**
       *  Returns a JSON representation of this transaction.
       */ toJSON() {
          const { blockNumber , blockHash , index , hash , type , to , from , nonce , data , signature , accessList  } = this;
          return {
              _type: "TransactionReceipt",
              accessList,
              blockNumber,
              blockHash,
              chainId: toJson(this.chainId),
              data,
              from,
              gasLimit: toJson(this.gasLimit),
              gasPrice: toJson(this.gasPrice),
              hash,
              maxFeePerGas: toJson(this.maxFeePerGas),
              maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),
              nonce,
              signature,
              to,
              index,
              type,
              value: toJson(this.value)
          };
      }
      /**
       *  Resolves to the Block that this transaction was included in.
       *
       *  This will return null if the transaction has not been included yet.
       */ async getBlock() {
          let blockNumber = this.blockNumber;
          if (blockNumber == null) {
              const tx = await this.getTransaction();
              if (tx) blockNumber = tx.blockNumber;
          }
          if (blockNumber == null) return null;
          const block = this.provider.getBlock(blockNumber);
          if (block == null) throw new Error("TODO");
          return block;
      }
      /**
       *  Resolves to this transaction being re-requested from the
       *  provider. This can be used if you have an unmined transaction
       *  and wish to get an up-to-date populated instance.
       */ async getTransaction() {
          return this.provider.getTransaction(this.hash);
      }
      /**
       *  Resolves once this transaction has been mined and has
       *  %%confirms%% blocks including it (default: ``1``) with an
       *  optional %%timeout%%.
       *
       *  This can resolve to ``null`` only if %%confirms%% is ``0``
       *  and the transaction has not been mined, otherwise this will
       *  wait until enough confirmations have completed.
       */ async wait(_confirms, _timeout) {
          const confirms = _confirms == null ? 1 : _confirms;
          const timeout = _timeout == null ? 0 : _timeout;
          let startBlock = this.#startBlock;
          let nextScan = -1;
          let stopScanning = startBlock === -1 ? true : false;
          const checkReplacement = async ()=>{
              // Get the current transaction count for this sender
              if (stopScanning) return null;
              const { blockNumber , nonce  } = await (0, _indexJs.resolveProperties)({
                  blockNumber: this.provider.getBlockNumber(),
                  nonce: this.provider.getTransactionCount(this.from)
              });
              // No transaction or our nonce has not been mined yet; but we
              // can start scanning later when we do start
              if (nonce < this.nonce) {
                  startBlock = blockNumber;
                  return;
              }
              // We were mined; no replacement
              if (stopScanning) return null;
              const mined = await this.getTransaction();
              if (mined && mined.blockNumber != null) return;
              // We were replaced; start scanning for that transaction
              // Starting to scan; look back a few extra blocks for safety
              if (nextScan === -1) {
                  nextScan = startBlock - 3;
                  if (nextScan < this.#startBlock) nextScan = this.#startBlock;
              }
              while(nextScan <= blockNumber){
                  // Get the next block to scan
                  if (stopScanning) return null;
                  const block = await this.provider.getBlock(nextScan, true);
                  // This should not happen; but we'll try again shortly
                  if (block == null) return;
                  // We were mined; no replacement
                  for (const hash of block){
                      if (hash === this.hash) return;
                  }
                  // Search for the transaction that replaced us
                  for(let i = 0; i < block.length; i++){
                      const tx = await block.getTransaction(i);
                      if (tx.from === this.from && tx.nonce === this.nonce) {
                          // Get the receipt
                          if (stopScanning) return null;
                          const receipt = await this.provider.getTransactionReceipt(tx.hash);
                          // This should not happen; but we'll try again shortly
                          if (receipt == null) return;
                          // We will retry this on the next block (this case could be optimized)
                          if (blockNumber - receipt.blockNumber + 1 < confirms) return;
                          // The reason we were replaced
                          let reason = "replaced";
                          if (tx.data === this.data && tx.to === this.to && tx.value === this.value) reason = "repriced";
                          else if (tx.data === "0x" && tx.from === tx.to && tx.value === BN_0) reason = "cancelled";
                          (0, _indexJs.assert)(false, "transaction was replaced", "TRANSACTION_REPLACED", {
                              cancelled: reason === "replaced" || reason === "cancelled",
                              reason,
                              replacement: tx.replaceableTransaction(startBlock),
                              hash: tx.hash,
                              receipt
                          });
                      }
                  }
                  nextScan++;
              }
              return;
          };
          const receipt = await this.provider.getTransactionReceipt(this.hash);
          if (receipt) {
              if (await receipt.confirmations() >= confirms) return receipt;
          } else {
              // Check for a replacement; throws if a replacement was found
              await checkReplacement();
              // Allow null only when the confirms is 0
              if (confirms === 0) return null;
          }
          const waiter = new Promise((resolve, reject)=>{
              // List of things to cancel when we have a result (one way or the other)
              const cancellers = [];
              const cancel = ()=>{
                  cancellers.forEach((c)=>c());
              };
              // On cancel, stop scanning for replacements
              cancellers.push(()=>{
                  stopScanning = true;
              });
              // Set up any timeout requested
              if (timeout > 0) {
                  const timer = setTimeout(()=>{
                      cancel();
                      reject((0, _indexJs.makeError)("wait for transaction timeout", "TIMEOUT"));
                  }, timeout);
                  cancellers.push(()=>{
                      clearTimeout(timer);
                  });
              }
              const txListener = async (receipt)=>{
                  // Done; return it!
                  if (await receipt.confirmations() >= confirms) {
                      cancel();
                      resolve(receipt);
                  }
              };
              cancellers.push(()=>{
                  this.provider.off(this.hash, txListener);
              });
              this.provider.on(this.hash, txListener);
              // We support replacement detection; start checking
              if (startBlock >= 0) {
                  const replaceListener = async ()=>{
                      try {
                          // Check for a replacement; this throws only if one is found
                          await checkReplacement();
                      } catch (error) {
                          // We were replaced (with enough confirms); re-throw the error
                          if ((0, _indexJs.isError)(error, "TRANSACTION_REPLACED")) {
                              cancel();
                              reject(error);
                              return;
                          }
                      }
                      // Rescheudle a check on the next block
                      if (!stopScanning) this.provider.once("block", replaceListener);
                  };
                  cancellers.push(()=>{
                      this.provider.off("block", replaceListener);
                  });
                  this.provider.once("block", replaceListener);
              }
          });
          return await waiter;
      }
      /**
       *  Returns ``true`` if this transaction has been included.
       *
       *  This is effective only as of the time the TransactionResponse
       *  was instantiated. To get up-to-date information, use
       *  [[getTransaction]].
       *
       *  This provides a Type Guard that this transaction will have
       *  non-null property values for properties that are null for
       *  unmined transactions.
       */ isMined() {
          return this.blockHash != null;
      }
      /**
       *  Returns true if the transaction is a legacy (i.e. ``type == 0``)
       *  transaction.
       *
       *  This provides a Type Guard that this transaction will have
       *  the ``null``-ness for hardfork-specific properties set correctly.
       */ isLegacy() {
          return this.type === 0;
      }
      /**
       *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)
       *  transaction. See [[link-eip-2070]].
       *
       *  This provides a Type Guard that this transaction will have
       *  the ``null``-ness for hardfork-specific properties set correctly.
       */ isBerlin() {
          return this.type === 1;
      }
      /**
       *  Returns true if the transaction is a London (i.e. ``type == 2``)
       *  transaction. See [[link-eip-1559]].
       *
       *  This provides a Type Guard that this transaction will have
       *  the ``null``-ness for hardfork-specific properties set correctly.
       */ isLondon() {
          return this.type === 2;
      }
      /**
       *  Returns a filter which can be used to listen for orphan events
       *  that evict this transaction.
       */ removedEvent() {
          (0, _indexJs.assert)(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", {
              operation: "removeEvent()"
          });
          return createRemovedTransactionFilter(this);
      }
      /**
       *  Returns a filter which can be used to listen for orphan events
       *  that re-order this event against %%other%%.
       */ reorderedEvent(other) {
          (0, _indexJs.assert)(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", {
              operation: "removeEvent()"
          });
          (0, _indexJs.assert)(!other || other.isMined(), "unmined 'other' transaction canot be orphaned", "UNSUPPORTED_OPERATION", {
              operation: "removeEvent()"
          });
          return createReorderedTransactionFilter(this, other);
      }
      /**
       *  Returns a new TransactionResponse instance which has the ability to
       *  detect (and throw an error) if the transaction is replaced, which
       *  will begin scanning at %%startBlock%%.
       *
       *  This should generally not be used by developers and is intended
       *  primarily for internal use. Setting an incorrect %%startBlock%% can
       *  have devastating performance consequences if used incorrectly.
       */ replaceableTransaction(startBlock) {
          (0, _indexJs.assertArgument)(Number.isInteger(startBlock) && startBlock >= 0, "invalid startBlock", "startBlock", startBlock);
          const tx = new TransactionResponse(this, this.provider);
          tx.#startBlock = startBlock;
          return tx;
      }
  }
  function createOrphanedBlockFilter(block) {
      return {
          orphan: "drop-block",
          hash: block.hash,
          number: block.number
      };
  }
  function createReorderedTransactionFilter(tx, other) {
      return {
          orphan: "reorder-transaction",
          tx,
          other
      };
  }
  function createRemovedTransactionFilter(tx) {
      return {
          orphan: "drop-transaction",
          tx
      };
  }
  function createRemovedLogFilter(log) {
      return {
          orphan: "drop-log",
          log: {
              transactionHash: log.transactionHash,
              blockHash: log.blockHash,
              blockNumber: log.blockNumber,
              address: log.address,
              data: log.data,
              topics: Object.freeze(log.topics.slice()),
              index: log.index
          }
      };
  }
  
  },{"../utils/index.js":"jGhd9","../transaction/index.js":"cOUq6","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"graCd":[function(require,module,exports) {
  // import from provider.ts instead of index.ts to prevent circular dep
  // from EtherscanProvider
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "EventLog", ()=>EventLog);
  parcelHelpers.export(exports, "ContractTransactionReceipt", ()=>ContractTransactionReceipt);
  parcelHelpers.export(exports, "ContractTransactionResponse", ()=>ContractTransactionResponse);
  parcelHelpers.export(exports, "ContractUnknownEventPayload", ()=>ContractUnknownEventPayload);
  parcelHelpers.export(exports, "ContractEventPayload", ()=>ContractEventPayload);
  var _providerJs = require("../providers/provider.js");
  var _indexJs = require("../utils/index.js");
  class EventLog extends (0, _providerJs.Log) {
      interface;
      fragment;
      args;
      constructor(log, iface, fragment){
          super(log, log.provider);
          const args = iface.decodeEventLog(fragment, log.data, log.topics);
          (0, _indexJs.defineProperties)(this, {
              args,
              fragment,
              interface: iface
          });
      }
      get eventName() {
          return this.fragment.name;
      }
      get eventSignature() {
          return this.fragment.format();
      }
  }
  class ContractTransactionReceipt extends (0, _providerJs.TransactionReceipt) {
      #iface;
      constructor(iface, provider, tx){
          super(tx, provider);
          this.#iface = iface;
      }
      get logs() {
          return super.logs.map((log)=>{
              const fragment = log.topics.length ? this.#iface.getEvent(log.topics[0]) : null;
              if (fragment) return new EventLog(log, this.#iface, fragment);
              else return log;
          });
      }
  }
  class ContractTransactionResponse extends (0, _providerJs.TransactionResponse) {
      #iface;
      constructor(iface, provider, tx){
          super(tx, provider);
          this.#iface = iface;
      }
      async wait(confirms) {
          const receipt = await super.wait();
          if (receipt == null) return null;
          return new ContractTransactionReceipt(this.#iface, this.provider, receipt);
      }
  }
  class ContractUnknownEventPayload extends (0, _indexJs.EventPayload) {
      log;
      constructor(contract, listener, filter, log){
          super(contract, listener, filter);
          (0, _indexJs.defineProperties)(this, {
              log
          });
      }
      async getBlock() {
          return await this.log.getBlock();
      }
      async getTransaction() {
          return await this.log.getTransaction();
      }
      async getTransactionReceipt() {
          return await this.log.getTransactionReceipt();
      }
  }
  class ContractEventPayload extends ContractUnknownEventPayload {
      constructor(contract, listener, filter, fragment, _log){
          super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));
          const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);
          (0, _indexJs.defineProperties)(this, {
              args,
              fragment
          });
      }
      get eventName() {
          return this.fragment.name;
      }
      get eventSignature() {
          return this.fragment.format();
      }
  }
  
  },{"../providers/provider.js":"kIz6a","../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"26BP2":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  // A = Arguments to the constructor
  // I = Interface of deployed contracts
  parcelHelpers.export(exports, "ContractFactory", ()=>ContractFactory);
  var _indexJs = require("../abi/index.js");
  var _indexJs1 = require("../address/index.js");
  var _indexJs2 = require("../utils/index.js");
  var _contractJs = require("./contract.js");
  class ContractFactory {
      interface;
      bytecode;
      runner;
      constructor(abi, bytecode, runner){
          const iface = (0, _indexJs.Interface).from(abi);
          // Dereference Solidity bytecode objects and allow a missing `0x`-prefix
          if (bytecode instanceof Uint8Array) bytecode = (0, _indexJs2.hexlify)((0, _indexJs2.getBytes)(bytecode));
          else {
              if (typeof bytecode === "object") bytecode = bytecode.object;
              if (!bytecode.startsWith("0x")) bytecode = "0x" + bytecode;
              bytecode = (0, _indexJs2.hexlify)((0, _indexJs2.getBytes)(bytecode));
          }
          (0, _indexJs2.defineProperties)(this, {
              bytecode,
              interface: iface,
              runner: runner || null
          });
      }
      async getDeployTransaction(...args) {
          let overrides = {};
          const fragment = this.interface.deploy;
          if (fragment.inputs.length + 1 === args.length) overrides = await (0, _contractJs.copyOverrides)(args.pop());
          if (fragment.inputs.length !== args.length) throw new Error("incorrect number of arguments to constructor");
          const resolvedArgs = await (0, _contractJs.resolveArgs)(this.runner, fragment.inputs, args);
          const data = (0, _indexJs2.concat)([
              this.bytecode,
              this.interface.encodeDeploy(resolvedArgs)
          ]);
          return Object.assign({}, overrides, {
              data
          });
      }
      async deploy(...args) {
          const tx = await this.getDeployTransaction(...args);
          (0, _indexJs2.assert)(this.runner && typeof this.runner.sendTransaction === "function", "factory runner does not support sending transactions", "UNSUPPORTED_OPERATION", {
              operation: "sendTransaction"
          });
          const sentTx = await this.runner.sendTransaction(tx);
          const address = (0, _indexJs1.getCreateAddress)(sentTx);
          return new (0, _contractJs.BaseContract)(address, this.interface, this.runner, sentTx);
      }
      connect(runner) {
          return new ContractFactory(this.interface, this.bytecode, runner);
      }
      static fromSolidity(output, runner) {
          (0, _indexJs2.assertArgument)(output != null, "bad compiler output", "output", output);
          if (typeof output === "string") output = JSON.parse(output);
          const abi = output.abi;
          let bytecode = "";
          if (output.bytecode) bytecode = output.bytecode;
          else if (output.evm && output.evm.bytecode) bytecode = output.evm.bytecode;
          return new this(abi, bytecode, runner);
      }
  }
  
  },{"../abi/index.js":"3U93s","../address/index.js":"cuJ87","../utils/index.js":"jGhd9","./contract.js":"bHkdV","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"62nP6":[function(require,module,exports) {
  /**
   *  About providers.
   *
   *  @_section: api/providers:Providers  [about-providers]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "AbstractProvider", ()=>(0, _abstractProviderJs.AbstractProvider));
  parcelHelpers.export(exports, "UnmanagedSubscriber", ()=>(0, _abstractProviderJs.UnmanagedSubscriber));
  parcelHelpers.export(exports, "AbstractSigner", ()=>(0, _abstractSignerJs.AbstractSigner));
  parcelHelpers.export(exports, "VoidSigner", ()=>(0, _abstractSignerJs.VoidSigner));
  parcelHelpers.export(exports, "showThrottleMessage", ()=>(0, _communityJs.showThrottleMessage));
  parcelHelpers.export(exports, "getDefaultProvider", ()=>(0, _defaultProviderJs.getDefaultProvider));
  parcelHelpers.export(exports, "EnsResolver", ()=>(0, _ensResolverJs.EnsResolver));
  parcelHelpers.export(exports, "Network", ()=>(0, _networkJs.Network));
  parcelHelpers.export(exports, "NonceManager", ()=>(0, _signerNoncemanagerJs.NonceManager));
  parcelHelpers.export(exports, "NetworkPlugin", ()=>(0, _pluginsNetworkJs.NetworkPlugin));
  parcelHelpers.export(exports, "GasCostPlugin", ()=>(0, _pluginsNetworkJs.GasCostPlugin));
  parcelHelpers.export(exports, "EnsPlugin", ()=>(0, _pluginsNetworkJs.EnsPlugin));
  parcelHelpers.export(exports, "FeeDataNetworkPlugin", ()=>(0, _pluginsNetworkJs.FeeDataNetworkPlugin));
  parcelHelpers.export(exports, "Block", ()=>(0, _providerJs.Block));
  parcelHelpers.export(exports, "FeeData", ()=>(0, _providerJs.FeeData));
  parcelHelpers.export(exports, "Log", ()=>(0, _providerJs.Log));
  parcelHelpers.export(exports, "TransactionReceipt", ()=>(0, _providerJs.TransactionReceipt));
  parcelHelpers.export(exports, "TransactionResponse", ()=>(0, _providerJs.TransactionResponse));
  parcelHelpers.export(exports, "copyRequest", ()=>(0, _providerJs.copyRequest));
  parcelHelpers.export(exports, "FallbackProvider", ()=>(0, _providerFallbackJs.FallbackProvider));
  parcelHelpers.export(exports, "JsonRpcApiProvider", ()=>(0, _providerJsonrpcJs.JsonRpcApiProvider));
  parcelHelpers.export(exports, "JsonRpcProvider", ()=>(0, _providerJsonrpcJs.JsonRpcProvider));
  parcelHelpers.export(exports, "JsonRpcSigner", ()=>(0, _providerJsonrpcJs.JsonRpcSigner));
  parcelHelpers.export(exports, "BrowserProvider", ()=>(0, _providerBrowserJs.BrowserProvider));
  parcelHelpers.export(exports, "AlchemyProvider", ()=>(0, _providerAlchemyJs.AlchemyProvider));
  parcelHelpers.export(exports, "AnkrProvider", ()=>(0, _providerAnkrJs.AnkrProvider));
  parcelHelpers.export(exports, "CloudflareProvider", ()=>(0, _providerCloudflareJs.CloudflareProvider));
  parcelHelpers.export(exports, "EtherscanProvider", ()=>(0, _providerEtherscanJs.EtherscanProvider));
  parcelHelpers.export(exports, "EtherscanPlugin", ()=>(0, _providerEtherscanJs.EtherscanPlugin));
  parcelHelpers.export(exports, "InfuraProvider", ()=>(0, _providerInfuraJs.InfuraProvider));
  parcelHelpers.export(exports, "InfuraWebSocketProvider", ()=>(0, _providerInfuraJs.InfuraWebSocketProvider));
  parcelHelpers.export(exports, "PocketProvider", ()=>(0, _providerPocketJs.PocketProvider));
  parcelHelpers.export(exports, "QuickNodeProvider", ()=>(0, _providerQuicknodeJs.QuickNodeProvider));
  parcelHelpers.export(exports, "SocketProvider", ()=>(0, _providerSocketJs.SocketProvider));
  parcelHelpers.export(exports, "WebSocketProvider", ()=>(0, _providerWebsocketJs.WebSocketProvider));
  parcelHelpers.export(exports, "SocketSubscriber", ()=>(0, _providerSocketJs.SocketSubscriber));
  parcelHelpers.export(exports, "SocketBlockSubscriber", ()=>(0, _providerSocketJs.SocketBlockSubscriber));
  parcelHelpers.export(exports, "SocketPendingSubscriber", ()=>(0, _providerSocketJs.SocketPendingSubscriber));
  parcelHelpers.export(exports, "SocketEventSubscriber", ()=>(0, _providerSocketJs.SocketEventSubscriber));
  parcelHelpers.export(exports, "IpcSocketProvider", ()=>(0, _providerIpcsocketJs.IpcSocketProvider));
  var _abstractProviderJs = require("./abstract-provider.js");
  var _abstractSignerJs = require("./abstract-signer.js");
  var _communityJs = require("./community.js");
  var _defaultProviderJs = require("./default-provider.js");
  var _ensResolverJs = require("./ens-resolver.js");
  var _networkJs = require("./network.js");
  var _signerNoncemanagerJs = require("./signer-noncemanager.js");
  var _pluginsNetworkJs = require("./plugins-network.js");
  var _providerJs = require("./provider.js");
  var _providerFallbackJs = require("./provider-fallback.js");
  var _providerJsonrpcJs = require("./provider-jsonrpc.js");
  var _providerBrowserJs = require("./provider-browser.js");
  var _providerAlchemyJs = require("./provider-alchemy.js");
  var _providerAnkrJs = require("./provider-ankr.js");
  var _providerCloudflareJs = require("./provider-cloudflare.js");
  var _providerEtherscanJs = require("./provider-etherscan.js");
  var _providerInfuraJs = require("./provider-infura.js");
  var _providerPocketJs = require("./provider-pocket.js");
  var _providerQuicknodeJs = require("./provider-quicknode.js");
  var _providerIpcsocketJs = require("./provider-ipcsocket.js"); /*-browser*/ 
  var _providerSocketJs = require("./provider-socket.js");
  var _providerWebsocketJs = require("./provider-websocket.js");
  
  },{"./abstract-provider.js":"20UeU","./abstract-signer.js":"8n6Nd","./community.js":"2jZ1F","./default-provider.js":"8rTva","./ens-resolver.js":"l0yBs","./network.js":"bE61r","./signer-noncemanager.js":"bAYKY","./plugins-network.js":"dHYWi","./provider.js":"kIz6a","./provider-fallback.js":"ddSrT","./provider-jsonrpc.js":"8D9UU","./provider-browser.js":"iDOkX","./provider-alchemy.js":"l2S3x","./provider-ankr.js":"lgpyB","./provider-cloudflare.js":"58LHx","./provider-etherscan.js":"3mCoe","./provider-infura.js":"6N06D","./provider-pocket.js":"8Fcyv","./provider-quicknode.js":"2q9T0","./provider-ipcsocket.js":"3B94E","./provider-socket.js":"f4Kqf","./provider-websocket.js":"8V8wf","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"20UeU":[function(require,module,exports) {
  /**
   *  About Subclassing the Provider...
   *
   *  @_section: api/providers/abstract-provider: Subclassing Provider  [abstract-provider]
   */ // @TODO
  // Event coalescence
  //   When we register an event with an async value (e.g. address is a Signer
  //   or ENS name), we need to add it immeidately for the Event API, but also
  //   need time to resolve the address. Upon resolving the address, we need to
  //   migrate the listener to the static event. We also need to maintain a map
  //   of Signer/ENS name to address so we can sync respond to listenerCount.
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "UnmanagedSubscriber", ()=>UnmanagedSubscriber);
  parcelHelpers.export(exports, "AbstractProvider", ()=>AbstractProvider);
  var _indexJs = require("../address/index.js");
  var _indexJs1 = require("../constants/index.js");
  var _indexJs2 = require("../contract/index.js");
  var _indexJs3 = require("../hash/index.js");
  var _indexJs4 = require("../transaction/index.js");
  var _indexJs5 = require("../utils/index.js");
  var _ensResolverJs = require("./ens-resolver.js");
  var _formatJs = require("./format.js");
  var _networkJs = require("./network.js");
  var _providerJs = require("./provider.js");
  var _subscriberPollingJs = require("./subscriber-polling.js");
  // Constants
  const BN_2 = BigInt(2);
  const MAX_CCIP_REDIRECTS = 10;
  function isPromise(value) {
      return value && typeof value.then === "function";
  }
  function getTag(prefix, value) {
      return prefix + ":" + JSON.stringify(value, (k, v)=>{
          if (v == null) return "null";
          if (typeof v === "bigint") return `bigint:${v.toString()}`;
          if (typeof v === "string") return v.toLowerCase();
          // Sort object keys
          if (typeof v === "object" && !Array.isArray(v)) {
              const keys = Object.keys(v);
              keys.sort();
              return keys.reduce((accum, key)=>{
                  accum[key] = v[key];
                  return accum;
              }, {});
          }
          return v;
      });
  }
  class UnmanagedSubscriber {
      name;
      constructor(name){
          (0, _indexJs5.defineProperties)(this, {
              name
          });
      }
      start() {}
      stop() {}
      pause(dropWhilePaused) {}
      resume() {}
  }
  function copy(value) {
      return JSON.parse(JSON.stringify(value));
  }
  function concisify(items) {
      items = Array.from(new Set(items).values());
      items.sort();
      return items;
  }
  async function getSubscription(_event, provider) {
      if (_event == null) throw new Error("invalid event");
      // Normalize topic array info an EventFilter
      if (Array.isArray(_event)) _event = {
          topics: _event
      };
      if (typeof _event === "string") switch(_event){
          case "block":
          case "pending":
          case "debug":
          case "network":
              return {
                  type: _event,
                  tag: _event
              };
      }
      if ((0, _indexJs5.isHexString)(_event, 32)) {
          const hash = _event.toLowerCase();
          return {
              type: "transaction",
              tag: getTag("tx", {
                  hash
              }),
              hash
          };
      }
      if (_event.orphan) {
          const event = _event;
          // @TODO: Should lowercase and whatnot things here instead of copy...
          return {
              type: "orphan",
              tag: getTag("orphan", event),
              filter: copy(event)
          };
      }
      if (_event.address || _event.topics) {
          const event = _event;
          const filter = {
              topics: (event.topics || []).map((t)=>{
                  if (t == null) return null;
                  if (Array.isArray(t)) return concisify(t.map((t)=>t.toLowerCase()));
                  return t.toLowerCase();
              })
          };
          if (event.address) {
              const addresses = [];
              const promises = [];
              const addAddress = (addr)=>{
                  if ((0, _indexJs5.isHexString)(addr)) addresses.push(addr);
                  else promises.push((async ()=>{
                      addresses.push(await (0, _indexJs.resolveAddress)(addr, provider));
                  })());
              };
              if (Array.isArray(event.address)) event.address.forEach(addAddress);
              else addAddress(event.address);
              if (promises.length) await Promise.all(promises);
              filter.address = concisify(addresses.map((a)=>a.toLowerCase()));
          }
          return {
              filter,
              tag: getTag("event", filter),
              type: "event"
          };
      }
      (0, _indexJs5.assertArgument)(false, "unknown ProviderEvent", "event", _event);
  }
  function getTime() {
      return new Date().getTime();
  }
  class AbstractProvider {
      #subs;
      #plugins;
      // null=unpaused, true=paused+dropWhilePaused, false=paused
      #pausedState;
      #networkPromise;
      #anyNetwork;
      #performCache;
      // The most recent block number if running an event or -1 if no "block" event
      #lastBlockNumber;
      #nextTimer;
      #timers;
      #disableCcipRead;
      // @TODO: This should be a () => Promise<Network> so network can be
      // done when needed; or rely entirely on _detectNetwork?
      constructor(_network){
          if (_network === "any") {
              this.#anyNetwork = true;
              this.#networkPromise = null;
          } else if (_network) {
              const network = (0, _networkJs.Network).from(_network);
              this.#anyNetwork = false;
              this.#networkPromise = Promise.resolve(network);
              setTimeout(()=>{
                  this.emit("network", network, null);
              }, 0);
          } else {
              this.#anyNetwork = false;
              this.#networkPromise = null;
          }
          this.#lastBlockNumber = -1;
          this.#performCache = new Map();
          this.#subs = new Map();
          this.#plugins = new Map();
          this.#pausedState = null;
          this.#nextTimer = 1;
          this.#timers = new Map();
          this.#disableCcipRead = false;
      }
      get provider() {
          return this;
      }
      get plugins() {
          return Array.from(this.#plugins.values());
      }
      attachPlugin(plugin) {
          if (this.#plugins.get(plugin.name)) throw new Error(`cannot replace existing plugin: ${plugin.name} `);
          this.#plugins.set(plugin.name, plugin.connect(this));
          return this;
      }
      getPlugin(name) {
          return this.#plugins.get(name) || null;
      }
      get disableCcipRead() {
          return this.#disableCcipRead;
      }
      set disableCcipRead(value) {
          this.#disableCcipRead = !!value;
      }
      // Shares multiple identical requests made during the same 250ms
      async #perform(req) {
          // Create a tag
          const tag = getTag(req.method, req);
          let perform = this.#performCache.get(tag);
          if (!perform) {
              perform = this._perform(req);
              this.#performCache.set(tag, perform);
              setTimeout(()=>{
                  if (this.#performCache.get(tag) === perform) this.#performCache.delete(tag);
              }, 250);
          }
          return await perform;
      }
      async ccipReadFetch(tx, calldata, urls) {
          if (this.disableCcipRead || urls.length === 0 || tx.to == null) return null;
          const sender = tx.to.toLowerCase();
          const data = calldata.toLowerCase();
          const errorMessages = [];
          for(let i = 0; i < urls.length; i++){
              const url = urls[i];
              // URL expansion
              const href = url.replace("{sender}", sender).replace("{data}", data);
              // If no {data} is present, use POST; otherwise GET
              //const json: string | null = (url.indexOf("{data}") >= 0) ? null: JSON.stringify({ data, sender });
              //const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {
              //    value.status = response.statusCode;
              //    return value;
              //});
              const request = new (0, _indexJs5.FetchRequest)(href);
              if (url.indexOf("{data}") === -1) request.body = {
                  data,
                  sender
              };
              this.emit("debug", {
                  action: "sendCcipReadFetchRequest",
                  request,
                  index: i,
                  urls
              });
              let errorMessage = "unknown error";
              const resp = await request.send();
              try {
                  const result = resp.bodyJson;
                  if (result.data) {
                      this.emit("debug", {
                          action: "receiveCcipReadFetchResult",
                          request,
                          result
                      });
                      return result.data;
                  }
                  if (result.message) errorMessage = result.message;
                  this.emit("debug", {
                      action: "receiveCcipReadFetchError",
                      request,
                      result
                  });
              } catch (error) {}
              // 4xx indicates the result is not present; stop
              (0, _indexJs5.assert)(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${errorMessage}`, "OFFCHAIN_FAULT", {
                  reason: "404_MISSING_RESOURCE",
                  transaction: tx,
                  info: {
                      url,
                      errorMessage
                  }
              });
              // 5xx indicates server issue; try the next url
              errorMessages.push(errorMessage);
          }
          (0, _indexJs5.assert)(false, `error encountered during CCIP fetch: ${errorMessages.map((m)=>JSON.stringify(m)).join(", ")}`, "OFFCHAIN_FAULT", {
              reason: "500_SERVER_ERROR",
              transaction: tx,
              info: {
                  urls,
                  errorMessages
              }
          });
      }
      _wrapBlock(value, network) {
          return new (0, _providerJs.Block)((0, _formatJs.formatBlock)(value), this);
      }
      _wrapLog(value, network) {
          return new (0, _providerJs.Log)((0, _formatJs.formatLog)(value), this);
      }
      _wrapTransactionReceipt(value, network) {
          return new (0, _providerJs.TransactionReceipt)((0, _formatJs.formatTransactionReceipt)(value), this);
      }
      _wrapTransactionResponse(tx, network) {
          return new (0, _providerJs.TransactionResponse)((0, _formatJs.formatTransactionResponse)(tx), this);
      }
      _detectNetwork() {
          (0, _indexJs5.assert)(false, "sub-classes must implement this", "UNSUPPORTED_OPERATION", {
              operation: "_detectNetwork"
          });
      }
      // Sub-classes should override this and handle PerformActionRequest requests, calling
      // the super for any unhandled actions.
      async _perform(req) {
          (0, _indexJs5.assert)(false, `unsupported method: ${req.method}`, "UNSUPPORTED_OPERATION", {
              operation: req.method,
              info: req
          });
      }
      // State
      async getBlockNumber() {
          const blockNumber = (0, _indexJs5.getNumber)(await this.#perform({
              method: "getBlockNumber"
          }), "%response");
          if (this.#lastBlockNumber >= 0) this.#lastBlockNumber = blockNumber;
          return blockNumber;
      }
      _getAddress(address) {
          return (0, _indexJs.resolveAddress)(address, this);
      }
      _getBlockTag(blockTag) {
          if (blockTag == null) return "latest";
          switch(blockTag){
              case "earliest":
                  return "0x0";
              case "latest":
              case "pending":
              case "safe":
              case "finalized":
                  return blockTag;
          }
          if ((0, _indexJs5.isHexString)(blockTag)) {
              if ((0, _indexJs5.isHexString)(blockTag, 32)) return blockTag;
              return (0, _indexJs5.toQuantity)(blockTag);
          }
          if (typeof blockTag === "bigint") blockTag = (0, _indexJs5.getNumber)(blockTag, "blockTag");
          if (typeof blockTag === "number") {
              if (blockTag >= 0) return (0, _indexJs5.toQuantity)(blockTag);
              if (this.#lastBlockNumber >= 0) return (0, _indexJs5.toQuantity)(this.#lastBlockNumber + blockTag);
              return this.getBlockNumber().then((b)=>(0, _indexJs5.toQuantity)(b + blockTag));
          }
          (0, _indexJs5.assertArgument)(false, "invalid blockTag", "blockTag", blockTag);
      }
      _getFilter(filter) {
          // Create a canonical representation of the topics
          const topics = (filter.topics || []).map((t)=>{
              if (t == null) return null;
              if (Array.isArray(t)) return concisify(t.map((t)=>t.toLowerCase()));
              return t.toLowerCase();
          });
          const blockHash = "blockHash" in filter ? filter.blockHash : undefined;
          const resolve = (_address, fromBlock, toBlock)=>{
              let address = undefined;
              switch(_address.length){
                  case 0:
                      break;
                  case 1:
                      address = _address[0];
                      break;
                  default:
                      _address.sort();
                      address = _address;
              }
              if (blockHash) {
                  if (fromBlock != null || toBlock != null) throw new Error("invalid filter");
              }
              const filter = {};
              if (address) filter.address = address;
              if (topics.length) filter.topics = topics;
              if (fromBlock) filter.fromBlock = fromBlock;
              if (toBlock) filter.toBlock = toBlock;
              if (blockHash) filter.blockHash = blockHash;
              return filter;
          };
          // Addresses could be async (ENS names or Addressables)
          let address = [];
          if (filter.address) {
              if (Array.isArray(filter.address)) for (const addr of filter.address)address.push(this._getAddress(addr));
              else address.push(this._getAddress(filter.address));
          }
          let fromBlock = undefined;
          if ("fromBlock" in filter) fromBlock = this._getBlockTag(filter.fromBlock);
          let toBlock = undefined;
          if ("toBlock" in filter) toBlock = this._getBlockTag(filter.toBlock);
          if (address.filter((a)=>typeof a !== "string").length || fromBlock != null && typeof fromBlock !== "string" || toBlock != null && typeof toBlock !== "string") return Promise.all([
              Promise.all(address),
              fromBlock,
              toBlock
          ]).then((result)=>{
              return resolve(result[0], result[1], result[2]);
          });
          return resolve(address, fromBlock, toBlock);
      }
      _getTransactionRequest(_request) {
          const request = (0, _providerJs.copyRequest)(_request);
          const promises = [];
          [
              "to",
              "from"
          ].forEach((key)=>{
              if (request[key] == null) return;
              const addr = (0, _indexJs.resolveAddress)(request[key]);
              if (isPromise(addr)) promises.push(async function() {
                  request[key] = await addr;
              }());
              else request[key] = addr;
          });
          if (request.blockTag != null) {
              const blockTag = this._getBlockTag(request.blockTag);
              if (isPromise(blockTag)) promises.push(async function() {
                  request.blockTag = await blockTag;
              }());
              else request.blockTag = blockTag;
          }
          if (promises.length) return async function() {
              await Promise.all(promises);
              return request;
          }();
          return request;
      }
      async getNetwork() {
          // No explicit network was set and this is our first time
          if (this.#networkPromise == null) {
              // Detect the current network (shared with all calls)
              const detectNetwork = this._detectNetwork().then((network)=>{
                  this.emit("network", network, null);
                  return network;
              }, (error)=>{
                  // Reset the networkPromise on failure, so we will try again
                  if (this.#networkPromise === detectNetwork) this.#networkPromise = null;
                  throw error;
              });
              this.#networkPromise = detectNetwork;
              return (await detectNetwork).clone();
          }
          const networkPromise = this.#networkPromise;
          const [expected, actual] = await Promise.all([
              networkPromise,
              this._detectNetwork() // The actual connected network
          ]);
          if (expected.chainId !== actual.chainId) {
              if (this.#anyNetwork) {
                  // The "any" network can change, so notify listeners
                  this.emit("network", actual, expected);
                  // Update the network if something else hasn't already changed it
                  if (this.#networkPromise === networkPromise) this.#networkPromise = Promise.resolve(actual);
              } else // Otherwise, we do not allow changes to the underlying network
              (0, _indexJs5.assert)(false, `network changed: ${expected.chainId} => ${actual.chainId} `, "NETWORK_ERROR", {
                  event: "changed"
              });
          }
          return expected.clone();
      }
      async getFeeData() {
          const { block , gasPrice  } = await (0, _indexJs5.resolveProperties)({
              block: this.getBlock("latest"),
              gasPrice: (async ()=>{
                  try {
                      const gasPrice = await this.#perform({
                          method: "getGasPrice"
                      });
                      return (0, _indexJs5.getBigInt)(gasPrice, "%response");
                  } catch (error) {}
                  return null;
              })()
          });
          let maxFeePerGas = null, maxPriorityFeePerGas = null;
          if (block && block.baseFeePerGas) {
              // We may want to compute this more accurately in the future,
              // using the formula "check if the base fee is correct".
              // See: https://eips.ethereum.org/EIPS/eip-1559
              maxPriorityFeePerGas = BigInt("1000000000");
              // Allow a network to override their maximum priority fee per gas
              //const priorityFeePlugin = (await this.getNetwork()).getPlugin<MaxPriorityFeePlugin>("org.ethers.plugins.max-priority-fee");
              //if (priorityFeePlugin) {
              //    maxPriorityFeePerGas = await priorityFeePlugin.getPriorityFee(this);
              //}
              maxFeePerGas = block.baseFeePerGas * BN_2 + maxPriorityFeePerGas;
          }
          return new (0, _providerJs.FeeData)(gasPrice, maxFeePerGas, maxPriorityFeePerGas);
      }
      async estimateGas(_tx) {
          let tx = this._getTransactionRequest(_tx);
          if (isPromise(tx)) tx = await tx;
          return (0, _indexJs5.getBigInt)(await this.#perform({
              method: "estimateGas",
              transaction: tx
          }), "%response");
      }
      async #call(tx, blockTag, attempt) {
          (0, _indexJs5.assert)(attempt < MAX_CCIP_REDIRECTS, "CCIP read exceeded maximum redirections", "OFFCHAIN_FAULT", {
              reason: "TOO_MANY_REDIRECTS",
              transaction: Object.assign({}, tx, {
                  blockTag,
                  enableCcipRead: true
              })
          });
          // This came in as a PerformActionTransaction, so to/from are safe; we can cast
          const transaction = (0, _providerJs.copyRequest)(tx);
          try {
              return (0, _indexJs5.hexlify)(await this._perform({
                  method: "call",
                  transaction,
                  blockTag
              }));
          } catch (error) {
              // CCIP Read OffchainLookup
              if (!this.disableCcipRead && (0, _indexJs5.isCallException)(error) && error.data && attempt >= 0 && blockTag === "latest" && transaction.to != null && (0, _indexJs5.dataSlice)(error.data, 0, 4) === "0x556f1830") {
                  const data = error.data;
                  const txSender = await (0, _indexJs.resolveAddress)(transaction.to, this);
                  // Parse the CCIP Read Arguments
                  let ccipArgs;
                  try {
                      ccipArgs = parseOffchainLookup((0, _indexJs5.dataSlice)(error.data, 4));
                  } catch (error) {
                      (0, _indexJs5.assert)(false, error.message, "OFFCHAIN_FAULT", {
                          reason: "BAD_DATA",
                          transaction,
                          info: {
                              data
                          }
                      });
                  }
                  // Check the sender of the OffchainLookup matches the transaction
                  (0, _indexJs5.assert)(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), "CCIP Read sender mismatch", "CALL_EXCEPTION", {
                      action: "call",
                      data,
                      reason: "OffchainLookup",
                      transaction: transaction,
                      invocation: null,
                      revert: {
                          signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                          name: "OffchainLookup",
                          args: ccipArgs.errorArgs
                      }
                  });
                  const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);
                  (0, _indexJs5.assert)(ccipResult != null, "CCIP Read failed to fetch data", "OFFCHAIN_FAULT", {
                      reason: "FETCH_FAILED",
                      transaction,
                      info: {
                          data: error.data,
                          errorArgs: ccipArgs.errorArgs
                      }
                  });
                  const tx = {
                      to: txSender,
                      data: (0, _indexJs5.concat)([
                          ccipArgs.selector,
                          encodeBytes([
                              ccipResult,
                              ccipArgs.extraData
                          ])
                      ])
                  };
                  this.emit("debug", {
                      action: "sendCcipReadCall",
                      transaction: tx
                  });
                  try {
                      const result = await this.#call(tx, blockTag, attempt + 1);
                      this.emit("debug", {
                          action: "receiveCcipReadCallResult",
                          transaction: Object.assign({}, tx),
                          result
                      });
                      return result;
                  } catch (error) {
                      this.emit("debug", {
                          action: "receiveCcipReadCallError",
                          transaction: Object.assign({}, tx),
                          error
                      });
                      throw error;
                  }
              }
              throw error;
          }
      }
      async #checkNetwork(promise) {
          const { value  } = await (0, _indexJs5.resolveProperties)({
              network: this.getNetwork(),
              value: promise
          });
          return value;
      }
      async call(_tx) {
          const { tx , blockTag  } = await (0, _indexJs5.resolveProperties)({
              tx: this._getTransactionRequest(_tx),
              blockTag: this._getBlockTag(_tx.blockTag)
          });
          return await this.#checkNetwork(this.#call(tx, blockTag, _tx.enableCcipRead ? 0 : -1));
      }
      // Account
      async #getAccountValue(request, _address, _blockTag) {
          let address = this._getAddress(_address);
          let blockTag = this._getBlockTag(_blockTag);
          if (typeof address !== "string" || typeof blockTag !== "string") [address, blockTag] = await Promise.all([
              address,
              blockTag
          ]);
          return await this.#checkNetwork(this.#perform(Object.assign(request, {
              address,
              blockTag
          })));
      }
      async getBalance(address, blockTag) {
          return (0, _indexJs5.getBigInt)(await this.#getAccountValue({
              method: "getBalance"
          }, address, blockTag), "%response");
      }
      async getTransactionCount(address, blockTag) {
          return (0, _indexJs5.getNumber)(await this.#getAccountValue({
              method: "getTransactionCount"
          }, address, blockTag), "%response");
      }
      async getCode(address, blockTag) {
          return (0, _indexJs5.hexlify)(await this.#getAccountValue({
              method: "getCode"
          }, address, blockTag));
      }
      async getStorage(address, _position, blockTag) {
          const position = (0, _indexJs5.getBigInt)(_position, "position");
          return (0, _indexJs5.hexlify)(await this.#getAccountValue({
              method: "getStorage",
              position
          }, address, blockTag));
      }
      // Write
      async broadcastTransaction(signedTx) {
          const { blockNumber , hash , network  } = await (0, _indexJs5.resolveProperties)({
              blockNumber: this.getBlockNumber(),
              hash: this._perform({
                  method: "broadcastTransaction",
                  signedTransaction: signedTx
              }),
              network: this.getNetwork()
          });
          const tx = (0, _indexJs4.Transaction).from(signedTx);
          if (tx.hash !== hash) throw new Error("@TODO: the returned hash did not match");
          return this._wrapTransactionResponse(tx, network).replaceableTransaction(blockNumber);
      }
      async #getBlock(block, includeTransactions) {
          // @TODO: Add CustomBlockPlugin check
          if ((0, _indexJs5.isHexString)(block, 32)) return await this.#perform({
              method: "getBlock",
              blockHash: block,
              includeTransactions
          });
          let blockTag = this._getBlockTag(block);
          if (typeof blockTag !== "string") blockTag = await blockTag;
          return await this.#perform({
              method: "getBlock",
              blockTag,
              includeTransactions
          });
      }
      // Queries
      async getBlock(block, prefetchTxs) {
          const { network , params  } = await (0, _indexJs5.resolveProperties)({
              network: this.getNetwork(),
              params: this.#getBlock(block, !!prefetchTxs)
          });
          if (params == null) return null;
          return this._wrapBlock(params, network);
      }
      async getTransaction(hash) {
          const { network , params  } = await (0, _indexJs5.resolveProperties)({
              network: this.getNetwork(),
              params: this.#perform({
                  method: "getTransaction",
                  hash
              })
          });
          if (params == null) return null;
          return this._wrapTransactionResponse(params, network);
      }
      async getTransactionReceipt(hash) {
          const { network , params  } = await (0, _indexJs5.resolveProperties)({
              network: this.getNetwork(),
              params: this.#perform({
                  method: "getTransactionReceipt",
                  hash
              })
          });
          if (params == null) return null;
          // Some backends did not backfill the effectiveGasPrice into old transactions
          // in the receipt, so we look it up manually and inject it.
          if (params.gasPrice == null && params.effectiveGasPrice == null) {
              const tx = await this.#perform({
                  method: "getTransaction",
                  hash
              });
              if (tx == null) throw new Error("report this; could not find tx or effectiveGasPrice");
              params.effectiveGasPrice = tx.gasPrice;
          }
          return this._wrapTransactionReceipt(params, network);
      }
      async getTransactionResult(hash) {
          const { result  } = await (0, _indexJs5.resolveProperties)({
              network: this.getNetwork(),
              result: this.#perform({
                  method: "getTransactionResult",
                  hash
              })
          });
          if (result == null) return null;
          return (0, _indexJs5.hexlify)(result);
      }
      // Bloom-filter Queries
      async getLogs(_filter) {
          let filter = this._getFilter(_filter);
          if (isPromise(filter)) filter = await filter;
          const { network , params  } = await (0, _indexJs5.resolveProperties)({
              network: this.getNetwork(),
              params: this.#perform({
                  method: "getLogs",
                  filter
              })
          });
          return params.map((p)=>this._wrapLog(p, network));
      }
      // ENS
      _getProvider(chainId) {
          (0, _indexJs5.assert)(false, "provider cannot connect to target network", "UNSUPPORTED_OPERATION", {
              operation: "_getProvider()"
          });
      }
      async getResolver(name) {
          return await (0, _ensResolverJs.EnsResolver).fromName(this, name);
      }
      async getAvatar(name) {
          const resolver = await this.getResolver(name);
          if (resolver) return await resolver.getAvatar();
          return null;
      }
      async resolveName(name) {
          const resolver = await this.getResolver(name);
          if (resolver) return await resolver.getAddress();
          return null;
      }
      async lookupAddress(address) {
          address = (0, _indexJs.getAddress)(address);
          const node = (0, _indexJs3.namehash)(address.substring(2).toLowerCase() + ".addr.reverse");
          try {
              const ensAddr = await (0, _ensResolverJs.EnsResolver).getEnsAddress(this);
              const ensContract = new (0, _indexJs2.Contract)(ensAddr, [
                  "function resolver(bytes32) view returns (address)"
              ], this);
              const resolver = await ensContract.resolver(node);
              if (resolver == null || resolver === (0, _indexJs1.ZeroHash)) return null;
              const resolverContract = new (0, _indexJs2.Contract)(resolver, [
                  "function name(bytes32) view returns (string)"
              ], this);
              const name = await resolverContract.name(node);
              // Failed forward resolution
              const check = await this.resolveName(name);
              if (check !== address) return null;
              return name;
          } catch (error) {
              // No data was returned from the resolver
              if ((0, _indexJs5.isError)(error, "BAD_DATA") && error.value === "0x") return null;
              // Something reerted
              if ((0, _indexJs5.isError)(error, "CALL_EXCEPTION")) return null;
              throw error;
          }
          return null;
      }
      async waitForTransaction(hash, _confirms, timeout) {
          const confirms = _confirms != null ? _confirms : 1;
          if (confirms === 0) return this.getTransactionReceipt(hash);
          return new Promise(async (resolve, reject)=>{
              let timer = null;
              const listener = async (blockNumber)=>{
                  try {
                      const receipt = await this.getTransactionReceipt(hash);
                      if (receipt != null) {
                          if (blockNumber - receipt.blockNumber + 1 >= confirms) {
                              resolve(receipt);
                              //this.off("block", listener);
                              if (timer) {
                                  clearTimeout(timer);
                                  timer = null;
                              }
                              return;
                          }
                      }
                  } catch (error) {
                      console.log("EEE", error);
                  }
                  this.once("block", listener);
              };
              if (timeout != null) timer = setTimeout(()=>{
                  if (timer == null) return;
                  timer = null;
                  this.off("block", listener);
                  reject((0, _indexJs5.makeError)("timeout", "TIMEOUT", {
                      reason: "timeout"
                  }));
              }, timeout);
              listener(await this.getBlockNumber());
          });
      }
      async waitForBlock(blockTag) {
          (0, _indexJs5.assert)(false, "not implemented yet", "NOT_IMPLEMENTED", {
              operation: "waitForBlock"
          });
      }
      _clearTimeout(timerId) {
          const timer = this.#timers.get(timerId);
          if (!timer) return;
          if (timer.timer) clearTimeout(timer.timer);
          this.#timers.delete(timerId);
      }
      _setTimeout(_func, timeout) {
          if (timeout == null) timeout = 0;
          const timerId = this.#nextTimer++;
          const func = ()=>{
              this.#timers.delete(timerId);
              _func();
          };
          if (this.paused) this.#timers.set(timerId, {
              timer: null,
              func,
              time: timeout
          });
          else {
              const timer = setTimeout(func, timeout);
              this.#timers.set(timerId, {
                  timer,
                  func,
                  time: getTime()
              });
          }
          return timerId;
      }
      _forEachSubscriber(func) {
          for (const sub of this.#subs.values())func(sub.subscriber);
      }
      // Event API; sub-classes should override this; any supported
      // event filter will have been munged into an EventFilter
      _getSubscriber(sub) {
          switch(sub.type){
              case "debug":
              case "network":
                  return new UnmanagedSubscriber(sub.type);
              case "block":
                  return new (0, _subscriberPollingJs.PollingBlockSubscriber)(this);
              case "event":
                  return new (0, _subscriberPollingJs.PollingEventSubscriber)(this, sub.filter);
              case "transaction":
                  return new (0, _subscriberPollingJs.PollingTransactionSubscriber)(this, sub.hash);
              case "orphan":
                  return new (0, _subscriberPollingJs.PollingOrphanSubscriber)(this, sub.filter);
          }
          throw new Error(`unsupported event: ${sub.type}`);
      }
      _recoverSubscriber(oldSub, newSub) {
          for (const sub of this.#subs.values())if (sub.subscriber === oldSub) {
              if (sub.started) sub.subscriber.stop();
              sub.subscriber = newSub;
              if (sub.started) newSub.start();
              if (this.#pausedState != null) newSub.pause(this.#pausedState);
              break;
          }
      }
      async #hasSub(event, emitArgs) {
          let sub = await getSubscription(event, this);
          // This is a log that is removing an existing log; we actually want
          // to emit an orphan event for the removed log
          if (sub.type === "event" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) sub = await getSubscription({
              orphan: "drop-log",
              log: emitArgs[0]
          }, this);
          return this.#subs.get(sub.tag) || null;
      }
      async #getSub(event1) {
          const subscription = await getSubscription(event1, this);
          // Prevent tampering with our tag in any subclass' _getSubscriber
          const tag = subscription.tag;
          let sub = this.#subs.get(tag);
          if (!sub) {
              const subscriber = this._getSubscriber(subscription);
              const addressableMap = new WeakMap();
              const nameMap = new Map();
              sub = {
                  subscriber,
                  tag,
                  addressableMap,
                  nameMap,
                  started: false,
                  listeners: []
              };
              this.#subs.set(tag, sub);
          }
          return sub;
      }
      async on(event, listener) {
          const sub = await this.#getSub(event);
          sub.listeners.push({
              listener,
              once: false
          });
          if (!sub.started) {
              sub.subscriber.start();
              sub.started = true;
              if (this.#pausedState != null) sub.subscriber.pause(this.#pausedState);
          }
          return this;
      }
      async once(event, listener) {
          const sub = await this.#getSub(event);
          sub.listeners.push({
              listener,
              once: true
          });
          if (!sub.started) {
              sub.subscriber.start();
              sub.started = true;
              if (this.#pausedState != null) sub.subscriber.pause(this.#pausedState);
          }
          return this;
      }
      async emit(event, ...args) {
          const sub = await this.#hasSub(event, args);
          // If there is not subscription or if a recent emit removed
          // the last of them (which also deleted the sub) do nothing
          if (!sub || sub.listeners.length === 0) return false;
          const count = sub.listeners.length;
          sub.listeners = sub.listeners.filter(({ listener , once  })=>{
              const payload = new (0, _indexJs5.EventPayload)(this, once ? null : listener, event);
              try {
                  listener.call(this, ...args, payload);
              } catch (error) {}
              return !once;
          });
          if (sub.listeners.length === 0) {
              if (sub.started) sub.subscriber.stop();
              this.#subs.delete(sub.tag);
          }
          return count > 0;
      }
      async listenerCount(event) {
          if (event) {
              const sub = await this.#hasSub(event);
              if (!sub) return 0;
              return sub.listeners.length;
          }
          let total = 0;
          for (const { listeners  } of this.#subs.values())total += listeners.length;
          return total;
      }
      async listeners(event) {
          if (event) {
              const sub = await this.#hasSub(event);
              if (!sub) return [];
              return sub.listeners.map(({ listener  })=>listener);
          }
          let result = [];
          for (const { listeners  } of this.#subs.values())result = result.concat(listeners.map(({ listener  })=>listener));
          return result;
      }
      async off(event, listener) {
          const sub = await this.#hasSub(event);
          if (!sub) return this;
          if (listener) {
              const index = sub.listeners.map(({ listener  })=>listener).indexOf(listener);
              if (index >= 0) sub.listeners.splice(index, 1);
          }
          if (!listener || sub.listeners.length === 0) {
              if (sub.started) sub.subscriber.stop();
              this.#subs.delete(sub.tag);
          }
          return this;
      }
      async removeAllListeners(event) {
          if (event) {
              const { tag , started , subscriber  } = await this.#getSub(event);
              if (started) subscriber.stop();
              this.#subs.delete(tag);
          } else for (const [tag, { started , subscriber  }] of this.#subs){
              if (started) subscriber.stop();
              this.#subs.delete(tag);
          }
          return this;
      }
      // Alias for "on"
      async addListener(event, listener) {
          return await this.on(event, listener);
      }
      // Alias for "off"
      async removeListener(event, listener) {
          return this.off(event, listener);
      }
      // Sub-classes should override this to shutdown any sockets, etc.
      // but MUST call this super.shutdown.
      destroy() {
          // Stop all listeners
          this.removeAllListeners();
          // Shut down all tiemrs
          for (const timerId of this.#timers.keys())this._clearTimeout(timerId);
      }
      get paused() {
          return this.#pausedState != null;
      }
      set paused(pause) {
          if (!!pause === this.paused) return;
          if (this.paused) this.resume();
          else this.pause(false);
      }
      pause(dropWhilePaused) {
          this.#lastBlockNumber = -1;
          if (this.#pausedState != null) {
              if (this.#pausedState == !!dropWhilePaused) return;
              (0, _indexJs5.assert)(false, "cannot change pause type; resume first", "UNSUPPORTED_OPERATION", {
                  operation: "pause"
              });
          }
          this._forEachSubscriber((s)=>s.pause(dropWhilePaused));
          this.#pausedState = !!dropWhilePaused;
          for (const timer of this.#timers.values()){
              // Clear the timer
              if (timer.timer) clearTimeout(timer.timer);
              // Remaining time needed for when we become unpaused
              timer.time = getTime() - timer.time;
          }
      }
      resume() {
          if (this.#pausedState == null) return;
          this._forEachSubscriber((s)=>s.resume());
          this.#pausedState = null;
          for (const timer of this.#timers.values()){
              // Remaining time when we were paused
              let timeout = timer.time;
              if (timeout < 0) timeout = 0;
              // Start time (in cause paused, so we con compute remaininf time)
              timer.time = getTime();
              // Start the timer
              setTimeout(timer.func, timeout);
          }
      }
  }
  function _parseString(result, start) {
      try {
          const bytes = _parseBytes(result, start);
          if (bytes) return (0, _indexJs5.toUtf8String)(bytes);
      } catch (error) {}
      return null;
  }
  function _parseBytes(result, start) {
      if (result === "0x") return null;
      try {
          const offset = (0, _indexJs5.getNumber)((0, _indexJs5.dataSlice)(result, start, start + 32));
          const length = (0, _indexJs5.getNumber)((0, _indexJs5.dataSlice)(result, offset, offset + 32));
          return (0, _indexJs5.dataSlice)(result, offset + 32, offset + 32 + length);
      } catch (error) {}
      return null;
  }
  function numPad(value) {
      const result = (0, _indexJs5.toBeArray)(value);
      if (result.length > 32) throw new Error("internal; should not happen");
      const padded = new Uint8Array(32);
      padded.set(result, 32 - result.length);
      return padded;
  }
  function bytesPad(value) {
      if (value.length % 32 === 0) return value;
      const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
      result.set(value);
      return result;
  }
  const empty = new Uint8Array([]);
  // ABI Encodes a series of (bytes, bytes, ...)
  function encodeBytes(datas) {
      const result = [];
      let byteCount = 0;
      // Add place-holders for pointers as we add items
      for(let i = 0; i < datas.length; i++){
          result.push(empty);
          byteCount += 32;
      }
      for(let i = 0; i < datas.length; i++){
          const data = (0, _indexJs5.getBytes)(datas[i]);
          // Update the bytes offset
          result[i] = numPad(byteCount);
          // The length and padded value of data
          result.push(numPad(data.length));
          result.push(bytesPad(data));
          byteCount += 32 + Math.ceil(data.length / 32) * 32;
      }
      return (0, _indexJs5.concat)(result);
  }
  const zeros = "0x0000000000000000000000000000000000000000000000000000000000000000";
  function parseOffchainLookup(data) {
      const result = {
          sender: "",
          urls: [],
          calldata: "",
          selector: "",
          extraData: "",
          errorArgs: []
      };
      (0, _indexJs5.assert)((0, _indexJs5.dataLength)(data) >= 160, "insufficient OffchainLookup data", "OFFCHAIN_FAULT", {
          reason: "insufficient OffchainLookup data"
      });
      const sender = (0, _indexJs5.dataSlice)(data, 0, 32);
      (0, _indexJs5.assert)((0, _indexJs5.dataSlice)(sender, 0, 12) === (0, _indexJs5.dataSlice)(zeros, 0, 12), "corrupt OffchainLookup sender", "OFFCHAIN_FAULT", {
          reason: "corrupt OffchainLookup sender"
      });
      result.sender = (0, _indexJs5.dataSlice)(sender, 12);
      // Read the URLs from the response
      try {
          const urls = [];
          const urlsOffset = (0, _indexJs5.getNumber)((0, _indexJs5.dataSlice)(data, 32, 64));
          const urlsLength = (0, _indexJs5.getNumber)((0, _indexJs5.dataSlice)(data, urlsOffset, urlsOffset + 32));
          const urlsData = (0, _indexJs5.dataSlice)(data, urlsOffset + 32);
          for(let u = 0; u < urlsLength; u++){
              const url = _parseString(urlsData, u * 32);
              if (url == null) throw new Error("abort");
              urls.push(url);
          }
          result.urls = urls;
      } catch (error) {
          (0, _indexJs5.assert)(false, "corrupt OffchainLookup urls", "OFFCHAIN_FAULT", {
              reason: "corrupt OffchainLookup urls"
          });
      }
      // Get the CCIP calldata to forward
      try {
          const calldata = _parseBytes(data, 64);
          if (calldata == null) throw new Error("abort");
          result.calldata = calldata;
      } catch (error) {
          (0, _indexJs5.assert)(false, "corrupt OffchainLookup calldata", "OFFCHAIN_FAULT", {
              reason: "corrupt OffchainLookup calldata"
          });
      }
      // Get the callbackSelector (bytes4)
      (0, _indexJs5.assert)((0, _indexJs5.dataSlice)(data, 100, 128) === (0, _indexJs5.dataSlice)(zeros, 0, 28), "corrupt OffchainLookup callbaackSelector", "OFFCHAIN_FAULT", {
          reason: "corrupt OffchainLookup callbaackSelector"
      });
      result.selector = (0, _indexJs5.dataSlice)(data, 96, 100);
      // Get the extra data to send back to the contract as context
      try {
          const extraData = _parseBytes(data, 128);
          if (extraData == null) throw new Error("abort");
          result.extraData = extraData;
      } catch (error) {
          (0, _indexJs5.assert)(false, "corrupt OffchainLookup extraData", "OFFCHAIN_FAULT", {
              reason: "corrupt OffchainLookup extraData"
          });
      }
      result.errorArgs = "sender,urls,calldata,selector,extraData".split(/,/).map((k)=>result[k]);
      return result;
  }
  
  },{"../address/index.js":"cuJ87","../constants/index.js":"lNX00","../contract/index.js":"3yTtn","../hash/index.js":"bTSS2","../transaction/index.js":"cOUq6","../utils/index.js":"jGhd9","./ens-resolver.js":"l0yBs","./format.js":"4CY2M","./network.js":"bE61r","./provider.js":"kIz6a","./subscriber-polling.js":"2iveV","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"l0yBs":[function(require,module,exports) {
  /**
   *  About ENS Resolver
   *
   *  @_section: api/providers/ens-resolver:ENS Resolver  [about-ens-rsolver]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  A provider plugin super-class for processing multicoin address types.
   */ parcelHelpers.export(exports, "MulticoinProviderPlugin", ()=>MulticoinProviderPlugin);
  /**
   *  A basic multicoin provider plugin.
   */ parcelHelpers.export(exports, "BasicMulticoinProviderPlugin", ()=>BasicMulticoinProviderPlugin);
  /**
   *  A connected object to a resolved ENS name resolver, which can be
   *  used to query additional details.
   */ parcelHelpers.export(exports, "EnsResolver", ()=>EnsResolver);
  var _indexJs = require("../constants/index.js");
  var _indexJs1 = require("../contract/index.js");
  var _indexJs2 = require("../hash/index.js");
  var _indexJs3 = require("../utils/index.js");
  // @TODO: This should use the fetch-data:ipfs gateway
  // Trim off the ipfs:// prefix and return the default gateway URL
  function getIpfsLink(link) {
      if (link.match(/^ipfs:\/\/ipfs\//i)) link = link.substring(12);
      else if (link.match(/^ipfs:\/\//i)) link = link.substring(7);
      else (0, _indexJs3.assertArgument)(false, "unsupported IPFS format", "link", link);
      return `https:/\/gateway.ipfs.io/ipfs/${link}`;
  }
  class MulticoinProviderPlugin {
      name;
      constructor(name){
          (0, _indexJs3.defineProperties)(this, {
              name
          });
      }
      connect(proivder) {
          return this;
      }
      supportsCoinType(coinType) {
          return false;
      }
      async encodeAddress(coinType, address) {
          throw new Error("unsupported coin");
      }
      async decodeAddress(coinType, data) {
          throw new Error("unsupported coin");
      }
  }
  const BasicMulticoinPluginId = "org.ethers.plugins.provider.BasicMulticoin";
  class BasicMulticoinProviderPlugin extends MulticoinProviderPlugin {
      constructor(){
          super(BasicMulticoinPluginId);
      }
  }
  const matcherIpfs = new RegExp("^(ipfs)://(.*)$", "i");
  const matchers = [
      new RegExp("^(https)://(.*)$", "i"),
      new RegExp("^(data):(.*)$", "i"),
      matcherIpfs,
      new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
  ];
  class EnsResolver {
      /**
       *  The connected provider.
       */ provider;
      /**
       *  The address of the resolver.
       */ address;
      /**
       *  The name this resolver was resolved against.
       */ name;
      // For EIP-2544 names, the ancestor that provided the resolver
      #supports2544;
      #resolver;
      constructor(provider, address, name){
          (0, _indexJs3.defineProperties)(this, {
              provider,
              address,
              name
          });
          this.#supports2544 = null;
          this.#resolver = new (0, _indexJs1.Contract)(address, [
              "function supportsInterface(bytes4) view returns (bool)",
              "function resolve(bytes, bytes) view returns (bytes)",
              "function addr(bytes32) view returns (address)",
              "function addr(bytes32, uint) view returns (address)",
              "function text(bytes32, string) view returns (string)",
              "function contenthash(bytes32) view returns (bytes)"
          ], provider);
      }
      /**
       *  Resolves to true if the resolver supports wildcard resolution.
       */ async supportsWildcard() {
          if (this.#supports2544 == null) this.#supports2544 = (async ()=>{
              try {
                  return await this.#resolver.supportsInterface("0x9061b923");
              } catch (error) {
                  // Wildcard resolvers must understand supportsInterface
                  // and return true.
                  if ((0, _indexJs3.isError)(error, "CALL_EXCEPTION")) return false;
                  // Let future attempts try again...
                  this.#supports2544 = null;
                  throw error;
              }
          })();
          return await this.#supports2544;
      }
      async #fetch(funcName, params) {
          params = (params || []).slice();
          const iface = this.#resolver.interface;
          // The first parameters is always the nodehash
          params.unshift((0, _indexJs2.namehash)(this.name));
          let fragment = null;
          if (await this.supportsWildcard()) {
              fragment = iface.getFunction(funcName);
              (0, _indexJs3.assert)(fragment, "missing fragment", "UNKNOWN_ERROR", {
                  info: {
                      funcName
                  }
              });
              params = [
                  (0, _indexJs2.dnsEncode)(this.name),
                  iface.encodeFunctionData(fragment, params)
              ];
              funcName = "resolve(bytes,bytes)";
          }
          params.push({
              ccipReadEnable: true
          });
          try {
              const result = await this.#resolver[funcName](...params);
              if (fragment) return iface.decodeFunctionResult(fragment, result)[0];
              return result;
          } catch (error) {
              if (!(0, _indexJs3.isError)(error, "CALL_EXCEPTION")) throw error;
          }
          return null;
      }
      /**
       *  Resolves to the address for %%coinType%% or null if the
       *  provided %%coinType%% has not been configured.
       */ async getAddress(coinType) {
          if (coinType == null) coinType = 60;
          if (coinType === 60) try {
              const result = await this.#fetch("addr(bytes32)");
              // No address
              if (result == null || result === (0, _indexJs.ZeroAddress)) return null;
              return result;
          } catch (error) {
              if ((0, _indexJs3.isError)(error, "CALL_EXCEPTION")) return null;
              throw error;
          }
          let coinPlugin = null;
          for (const plugin of this.provider.plugins){
              if (!(plugin instanceof MulticoinProviderPlugin)) continue;
              if (plugin.supportsCoinType(coinType)) {
                  coinPlugin = plugin;
                  break;
              }
          }
          if (coinPlugin == null) return null;
          // keccak256("addr(bytes32,uint256")
          const data = await this.#fetch("addr(bytes32,uint)", [
              coinType
          ]);
          // No address
          if (data == null || data === "0x") return null;
          // Compute the address
          const address = await coinPlugin.encodeAddress(coinType, data);
          if (address != null) return address;
          (0, _indexJs3.assert)(false, `invalid coin data`, "UNSUPPORTED_OPERATION", {
              operation: `getAddress(${coinType})`,
              info: {
                  coinType,
                  data
              }
          });
      }
      /**
       *  Resolves to the EIP-643 text record for %%key%%, or ``null``
       *  if unconfigured.
       */ async getText(key) {
          const data = await this.#fetch("text(bytes32,string)", [
              key
          ]);
          if (data == null || data === "0x") return null;
          return data;
      }
      /**
       *  Rsolves to the content-hash or ``null`` if unconfigured.
       */ async getContentHash() {
          // keccak256("contenthash()")
          const data = await this.#fetch("contenthash(bytes32)");
          // No contenthash
          if (data == null || data === "0x") return null;
          // IPFS (CID: 1, Type: 70=DAG-PB, 72=libp2p-key)
          const ipfs = data.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
          if (ipfs) {
              const scheme = ipfs[1] === "e3010170" ? "ipfs" : "ipns";
              const length = parseInt(ipfs[4], 16);
              if (ipfs[5].length === length * 2) return `${scheme}:/\/${(0, _indexJs3.encodeBase58)("0x" + ipfs[2])}`;
          }
          // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)
          const swarm = data.match(/^0xe40101fa011b20([0-9a-f]*)$/);
          if (swarm && swarm[1].length === 64) return `bzz:/\/${swarm[1]}`;
          (0, _indexJs3.assert)(false, `invalid or unsupported content hash data`, "UNSUPPORTED_OPERATION", {
              operation: "getContentHash()",
              info: {
                  data
              }
          });
      }
      /**
       *  Resolves to the avatar url or ``null`` if the avatar is either
       *  unconfigured or incorrectly configured (e.g. references an NFT
       *  not owned by the address).
       *
       *  If diagnosing issues with configurations, the [[_getAvatar]]
       *  method may be useful.
       */ async getAvatar() {
          const avatar = await this._getAvatar();
          return avatar.url;
      }
      /**
       *  When resolving an avatar, there are many steps involved, such
       *  fetching metadata and possibly validating ownership of an
       *  NFT.
       *
       *  This method can be used to examine each step and the value it
       *  was working from.
       */ async _getAvatar() {
          const linkage = [
              {
                  type: "name",
                  value: this.name
              }
          ];
          try {
              // test data for ricmoo.eth
              //const avatar = "eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233";
              const avatar = await this.getText("avatar");
              if (avatar == null) {
                  linkage.push({
                      type: "!avatar",
                      value: ""
                  });
                  return {
                      url: null,
                      linkage
                  };
              }
              linkage.push({
                  type: "avatar",
                  value: avatar
              });
              for(let i = 0; i < matchers.length; i++){
                  const match = avatar.match(matchers[i]);
                  if (match == null) continue;
                  const scheme = match[1].toLowerCase();
                  switch(scheme){
                      case "https":
                      case "data":
                          linkage.push({
                              type: "url",
                              value: avatar
                          });
                          return {
                              linkage,
                              url: avatar
                          };
                      case "ipfs":
                          {
                              const url = getIpfsLink(avatar);
                              linkage.push({
                                  type: "ipfs",
                                  value: avatar
                              });
                              linkage.push({
                                  type: "url",
                                  value: url
                              });
                              return {
                                  linkage,
                                  url
                              };
                          }
                      case "erc721":
                      case "erc1155":
                          {
                              // Depending on the ERC type, use tokenURI(uint256) or url(uint256)
                              const selector = scheme === "erc721" ? "tokenURI(uint256)" : "uri(uint256)";
                              linkage.push({
                                  type: scheme,
                                  value: avatar
                              });
                              // The owner of this name
                              const owner = await this.getAddress();
                              if (owner == null) {
                                  linkage.push({
                                      type: "!owner",
                                      value: ""
                                  });
                                  return {
                                      url: null,
                                      linkage
                                  };
                              }
                              const comps = (match[2] || "").split("/");
                              if (comps.length !== 2) {
                                  linkage.push({
                                      type: `!${scheme}caip`,
                                      value: match[2] || ""
                                  });
                                  return {
                                      url: null,
                                      linkage
                                  };
                              }
                              const tokenId = comps[1];
                              const contract = new (0, _indexJs1.Contract)(comps[0], [
                                  // ERC-721
                                  "function tokenURI(uint) view returns (string)",
                                  "function ownerOf(uint) view returns (address)",
                                  // ERC-1155
                                  "function uri(uint) view returns (string)",
                                  "function balanceOf(address, uint256) view returns (uint)"
                              ], this.provider);
                              // Check that this account owns the token
                              if (scheme === "erc721") {
                                  const tokenOwner = await contract.ownerOf(tokenId);
                                  if (owner !== tokenOwner) {
                                      linkage.push({
                                          type: "!owner",
                                          value: tokenOwner
                                      });
                                      return {
                                          url: null,
                                          linkage
                                      };
                                  }
                                  linkage.push({
                                      type: "owner",
                                      value: tokenOwner
                                  });
                              } else if (scheme === "erc1155") {
                                  const balance = await contract.balanceOf(owner, tokenId);
                                  if (!balance) {
                                      linkage.push({
                                          type: "!balance",
                                          value: "0"
                                      });
                                      return {
                                          url: null,
                                          linkage
                                      };
                                  }
                                  linkage.push({
                                      type: "balance",
                                      value: balance.toString()
                                  });
                              }
                              // Call the token contract for the metadata URL
                              let metadataUrl = await contract[selector](tokenId);
                              if (metadataUrl == null || metadataUrl === "0x") {
                                  linkage.push({
                                      type: "!metadata-url",
                                      value: ""
                                  });
                                  return {
                                      url: null,
                                      linkage
                                  };
                              }
                              linkage.push({
                                  type: "metadata-url-base",
                                  value: metadataUrl
                              });
                              // ERC-1155 allows a generic {id} in the URL
                              if (scheme === "erc1155") {
                                  metadataUrl = metadataUrl.replace("{id}", (0, _indexJs3.toBeHex)(tokenId, 32).substring(2));
                                  linkage.push({
                                      type: "metadata-url-expanded",
                                      value: metadataUrl
                                  });
                              }
                              // Transform IPFS metadata links
                              if (metadataUrl.match(/^ipfs:/i)) metadataUrl = getIpfsLink(metadataUrl);
                              linkage.push({
                                  type: "metadata-url",
                                  value: metadataUrl
                              });
                              // Get the token metadata
                              let metadata = {};
                              const response = await new (0, _indexJs3.FetchRequest)(metadataUrl).send();
                              response.assertOk();
                              try {
                                  metadata = response.bodyJson;
                              } catch (error) {
                                  try {
                                      linkage.push({
                                          type: "!metadata",
                                          value: response.bodyText
                                      });
                                  } catch (error) {
                                      const bytes = response.body;
                                      if (bytes) linkage.push({
                                          type: "!metadata",
                                          value: (0, _indexJs3.hexlify)(bytes)
                                      });
                                      return {
                                          url: null,
                                          linkage
                                      };
                                  }
                                  return {
                                      url: null,
                                      linkage
                                  };
                              }
                              if (!metadata) {
                                  linkage.push({
                                      type: "!metadata",
                                      value: ""
                                  });
                                  return {
                                      url: null,
                                      linkage
                                  };
                              }
                              linkage.push({
                                  type: "metadata",
                                  value: JSON.stringify(metadata)
                              });
                              // Pull the image URL out
                              let imageUrl = metadata.image;
                              if (typeof imageUrl !== "string") {
                                  linkage.push({
                                      type: "!imageUrl",
                                      value: ""
                                  });
                                  return {
                                      url: null,
                                      linkage
                                  };
                              }
                              if (imageUrl.match(/^(https:\/\/|data:)/i)) ;
                              else {
                                  // Transform IPFS link to gateway
                                  const ipfs = imageUrl.match(matcherIpfs);
                                  if (ipfs == null) {
                                      linkage.push({
                                          type: "!imageUrl-ipfs",
                                          value: imageUrl
                                      });
                                      return {
                                          url: null,
                                          linkage
                                      };
                                  }
                                  linkage.push({
                                      type: "imageUrl-ipfs",
                                      value: imageUrl
                                  });
                                  imageUrl = getIpfsLink(imageUrl);
                              }
                              linkage.push({
                                  type: "url",
                                  value: imageUrl
                              });
                              return {
                                  linkage,
                                  url: imageUrl
                              };
                          }
                  }
              }
          } catch (error) {}
          return {
              linkage,
              url: null
          };
      }
      static async getEnsAddress(provider) {
          const network = await provider.getNetwork();
          const ensPlugin = network.getPlugin("org.ethers.plugins.network.Ens");
          // No ENS...
          (0, _indexJs3.assert)(ensPlugin, "network does not support ENS", "UNSUPPORTED_OPERATION", {
              operation: "getEnsAddress",
              info: {
                  network
              }
          });
          return ensPlugin.address;
      }
      static async #getResolver(provider, name) {
          const ensAddr = await EnsResolver.getEnsAddress(provider);
          try {
              const contract = new (0, _indexJs1.Contract)(ensAddr, [
                  "function resolver(bytes32) view returns (address)"
              ], provider);
              const addr = await contract.resolver((0, _indexJs2.namehash)(name), {
                  enableCcipRead: true
              });
              if (addr === (0, _indexJs.ZeroAddress)) return null;
              return addr;
          } catch (error) {
              // ENS registry cannot throw errors on resolver(bytes32),
              // so probably a link error
              throw error;
          }
          return null;
      }
      /**
       *  Resolve to the ENS resolver for %%name%% using %%provider%% or
       *  ``null`` if unconfigured.
       */ static async fromName(provider, name) {
          let currentName = name;
          while(true){
              if (currentName === "" || currentName === ".") return null;
              // Optimization since the eth node cannot change and does
              // not have a wildcar resolver
              if (name !== "eth" && currentName === "eth") return null;
              // Check the current node for a resolver
              const addr = await EnsResolver.#getResolver(provider, currentName);
              // Found a resolver!
              if (addr != null) {
                  const resolver = new EnsResolver(provider, addr, name);
                  // Legacy resolver found, using EIP-2544 so it isn't safe to use
                  if (currentName !== name && !await resolver.supportsWildcard()) return null;
                  return resolver;
              }
              // Get the parent node
              currentName = currentName.split(".").slice(1).join(".");
          }
      }
  }
  
  },{"../constants/index.js":"lNX00","../contract/index.js":"3yTtn","../hash/index.js":"bTSS2","../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"4CY2M":[function(require,module,exports) {
  /**
   *  @_ignore
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "allowNull", ()=>allowNull);
  parcelHelpers.export(exports, "arrayOf", ()=>arrayOf);
  // Requires an object which matches a fleet of other formatters
  // Any FormatFunc may return `undefined` to have the value omitted
  // from the result object. Calls preserve `this`.
  parcelHelpers.export(exports, "object", ()=>object);
  parcelHelpers.export(exports, "formatBoolean", ()=>formatBoolean);
  parcelHelpers.export(exports, "formatData", ()=>formatData);
  parcelHelpers.export(exports, "formatHash", ()=>formatHash);
  parcelHelpers.export(exports, "formatUint256", ()=>formatUint256);
  parcelHelpers.export(exports, "formatLog", ()=>formatLog);
  parcelHelpers.export(exports, "formatBlock", ()=>formatBlock);
  parcelHelpers.export(exports, "formatReceiptLog", ()=>formatReceiptLog);
  parcelHelpers.export(exports, "formatTransactionReceipt", ()=>formatTransactionReceipt);
  parcelHelpers.export(exports, "formatTransactionResponse", ()=>formatTransactionResponse);
  var _indexJs = require("../address/index.js");
  var _indexJs1 = require("../crypto/index.js");
  var _indexJs2 = require("../transaction/index.js");
  var _indexJs3 = require("../utils/index.js");
  const BN_0 = BigInt(0);
  function allowNull(format, nullValue) {
      return function(value) {
          if (value == null) return nullValue;
          return format(value);
      };
  }
  function arrayOf(format) {
      return (array)=>{
          if (!Array.isArray(array)) throw new Error("not an array");
          return array.map((i)=>format(i));
      };
  }
  function object(format, altNames) {
      return (value)=>{
          const result = {};
          for(const key in format){
              let srcKey = key;
              if (altNames && key in altNames && !(srcKey in value)) {
                  for (const altKey of altNames[key])if (altKey in value) {
                      srcKey = altKey;
                      break;
                  }
              }
              try {
                  const nv = format[key](value[srcKey]);
                  if (nv !== undefined) result[key] = nv;
              } catch (error) {
                  const message = error instanceof Error ? error.message : "not-an-error";
                  (0, _indexJs3.assert)(false, `invalid value for value.${key} (${message})`, "BAD_DATA", {
                      value
                  });
              }
          }
          return result;
      };
  }
  function formatBoolean(value) {
      switch(value){
          case true:
          case "true":
              return true;
          case false:
          case "false":
              return false;
      }
      (0, _indexJs3.assertArgument)(false, `invalid boolean; ${JSON.stringify(value)}`, "value", value);
  }
  function formatData(value) {
      (0, _indexJs3.assertArgument)((0, _indexJs3.isHexString)(value, true), "invalid data", "value", value);
      return value;
  }
  function formatHash(value) {
      (0, _indexJs3.assertArgument)((0, _indexJs3.isHexString)(value, 32), "invalid hash", "value", value);
      return value;
  }
  function formatUint256(value) {
      if (!(0, _indexJs3.isHexString)(value)) throw new Error("invalid uint256");
      return (0, _indexJs3.zeroPadValue)(value, 32);
  }
  const _formatLog = object({
      address: (0, _indexJs.getAddress),
      blockHash: formatHash,
      blockNumber: (0, _indexJs3.getNumber),
      data: formatData,
      index: (0, _indexJs3.getNumber),
      removed: formatBoolean,
      topics: arrayOf(formatHash),
      transactionHash: formatHash,
      transactionIndex: (0, _indexJs3.getNumber)
  }, {
      index: [
          "logIndex"
      ]
  });
  function formatLog(value) {
      return _formatLog(value);
  }
  const _formatBlock = object({
      hash: allowNull(formatHash),
      parentHash: formatHash,
      number: (0, _indexJs3.getNumber),
      timestamp: (0, _indexJs3.getNumber),
      nonce: allowNull(formatData),
      difficulty: (0, _indexJs3.getBigInt),
      gasLimit: (0, _indexJs3.getBigInt),
      gasUsed: (0, _indexJs3.getBigInt),
      miner: allowNull((0, _indexJs.getAddress)),
      extraData: formatData,
      baseFeePerGas: allowNull((0, _indexJs3.getBigInt))
  });
  function formatBlock(value) {
      const result = _formatBlock(value);
      result.transactions = value.transactions.map((tx)=>{
          if (typeof tx === "string") return tx;
          return formatTransactionResponse(tx);
      });
      return result;
  }
  const _formatReceiptLog = object({
      transactionIndex: (0, _indexJs3.getNumber),
      blockNumber: (0, _indexJs3.getNumber),
      transactionHash: formatHash,
      address: (0, _indexJs.getAddress),
      topics: arrayOf(formatHash),
      data: formatData,
      index: (0, _indexJs3.getNumber),
      blockHash: formatHash
  }, {
      index: [
          "logIndex"
      ]
  });
  function formatReceiptLog(value) {
      return _formatReceiptLog(value);
  }
  const _formatTransactionReceipt = object({
      to: allowNull((0, _indexJs.getAddress), null),
      from: allowNull((0, _indexJs.getAddress), null),
      contractAddress: allowNull((0, _indexJs.getAddress), null),
      // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
      index: (0, _indexJs3.getNumber),
      root: allowNull((0, _indexJs3.hexlify)),
      gasUsed: (0, _indexJs3.getBigInt),
      logsBloom: allowNull(formatData),
      blockHash: formatHash,
      hash: formatHash,
      logs: arrayOf(formatReceiptLog),
      blockNumber: (0, _indexJs3.getNumber),
      //confirmations: allowNull(getNumber, null),
      cumulativeGasUsed: (0, _indexJs3.getBigInt),
      effectiveGasPrice: allowNull((0, _indexJs3.getBigInt)),
      status: allowNull((0, _indexJs3.getNumber)),
      type: allowNull((0, _indexJs3.getNumber), 0)
  }, {
      effectiveGasPrice: [
          "gasPrice"
      ],
      hash: [
          "transactionHash"
      ],
      index: [
          "transactionIndex"
      ]
  });
  function formatTransactionReceipt(value) {
      return _formatTransactionReceipt(value);
  }
  function formatTransactionResponse(value) {
      // Some clients (TestRPC) do strange things like return 0x0 for the
      // 0 address; correct this to be a real address
      if (value.to && (0, _indexJs3.getBigInt)(value.to) === BN_0) value.to = "0x0000000000000000000000000000000000000000";
      const result = object({
          hash: formatHash,
          type: (value)=>{
              if (value === "0x" || value == null) return 0;
              return (0, _indexJs3.getNumber)(value);
          },
          accessList: allowNull((0, _indexJs2.accessListify), null),
          blockHash: allowNull(formatHash, null),
          blockNumber: allowNull((0, _indexJs3.getNumber), null),
          transactionIndex: allowNull((0, _indexJs3.getNumber), null),
          //confirmations: allowNull(getNumber, null),
          from: (0, _indexJs.getAddress),
          // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set
          gasPrice: allowNull((0, _indexJs3.getBigInt)),
          maxPriorityFeePerGas: allowNull((0, _indexJs3.getBigInt)),
          maxFeePerGas: allowNull((0, _indexJs3.getBigInt)),
          gasLimit: (0, _indexJs3.getBigInt),
          to: allowNull((0, _indexJs.getAddress), null),
          value: (0, _indexJs3.getBigInt),
          nonce: (0, _indexJs3.getNumber),
          data: formatData,
          creates: allowNull((0, _indexJs.getAddress), null),
          chainId: allowNull((0, _indexJs3.getBigInt), null)
      }, {
          data: [
              "input"
          ],
          gasLimit: [
              "gas"
          ]
      })(value);
      // If to and creates are empty, populate the creates from the value
      if (result.to == null && result.creates == null) result.creates = (0, _indexJs.getCreateAddress)(result);
      // @TODO: Check fee data
      // Add an access list to supported transaction types
      if ((value.type === 1 || value.type === 2) && value.accessList == null) result.accessList = [];
      // Compute the signature
      if (value.signature) result.signature = (0, _indexJs1.Signature).from(value.signature);
      else result.signature = (0, _indexJs1.Signature).from(value);
      // Some backends omit ChainId on legacy transactions, but we can compute it
      if (result.chainId == null) {
          const chainId = result.signature.legacyChainId;
          if (chainId != null) result.chainId = chainId;
      }
      // @TODO: check chainID
      /*
      if (value.chainId != null) {
          let chainId = value.chainId;
  
          if (isHexString(chainId)) {
              chainId = BigNumber.from(chainId).toNumber();
          }
  
          result.chainId = chainId;
  
      } else {
          let chainId = value.networkId;
  
          // geth-etc returns chainId
          if (chainId == null && result.v == null) {
              chainId = value.chainId;
          }
  
          if (isHexString(chainId)) {
              chainId = BigNumber.from(chainId).toNumber();
          }
  
          if (typeof(chainId) !== "number" && result.v != null) {
              chainId = (result.v - 35) / 2;
              if (chainId < 0) { chainId = 0; }
              chainId = parseInt(chainId);
          }
  
          if (typeof(chainId) !== "number") { chainId = 0; }
  
          result.chainId = chainId;
      }
      */ // 0x0000... should actually be null
      if (result.blockHash && (0, _indexJs3.getBigInt)(result.blockHash) === BN_0) result.blockHash = null;
      return result;
  }
  
  },{"../address/index.js":"cuJ87","../crypto/index.js":"4oi1q","../transaction/index.js":"cOUq6","../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"bE61r":[function(require,module,exports) {
  /**
   *  About networks
   *
   *  @_subsection: api/providers:Networks  [networks]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  // @TODO: Add a _ethersNetworkObj variable to better detect network ovjects
  parcelHelpers.export(exports, "Network", ()=>Network);
  var _indexJs = require("../transaction/index.js");
  var _indexJs1 = require("../utils/index.js");
  var _pluginsNetworkJs = require("./plugins-network.js");
  /* * * *
  // Networks which operation against an L2 can use this plugin to
  // specify how to access L1, for the purpose of resolving ENS,
  // for example.
  export class LayerOneConnectionPlugin extends NetworkPlugin {
      readonly provider!: Provider;
  // @TODO: Rename to ChainAccess and allow for connecting to any chain
      constructor(provider: Provider) {
          super("org.ethers.plugins.layer-one-connection");
          defineProperties<LayerOneConnectionPlugin>(this, { provider });
      }
  
      clone(): LayerOneConnectionPlugin {
          return new LayerOneConnectionPlugin(this.provider);
      }
  }
  */ /* * * *
  export class PriceOraclePlugin extends NetworkPlugin {
      readonly address!: string;
  
      constructor(address: string) {
          super("org.ethers.plugins.price-oracle");
          defineProperties<PriceOraclePlugin>(this, { address });
      }
  
      clone(): PriceOraclePlugin {
          return new PriceOraclePlugin(this.address);
      }
  }
  */ // Networks or clients with a higher need for security (such as clients
  // that may automatically make CCIP requests without user interaction)
  // can use this plugin to anonymize requests or intercept CCIP requests
  // to notify and/or receive authorization from the user
  /* * * *
  export type FetchDataFunc = (req: Frozen<FetchRequest>) => Promise<FetchRequest>;
  export class CcipPreflightPlugin extends NetworkPlugin {
      readonly fetchData!: FetchDataFunc;
  
      constructor(fetchData: FetchDataFunc) {
          super("org.ethers.plugins.ccip-preflight");
          defineProperties<CcipPreflightPlugin>(this, { fetchData });
      }
  
      clone(): CcipPreflightPlugin {
          return new CcipPreflightPlugin(this.fetchData);
      }
  }
  */ const Networks = new Map();
  class Network {
      #name;
      #chainId;
      #plugins;
      constructor(name, chainId){
          this.#name = name;
          this.#chainId = (0, _indexJs1.getBigInt)(chainId);
          this.#plugins = new Map();
      }
      toJSON() {
          return {
              name: this.name,
              chainId: this.chainId
          };
      }
      get name() {
          return this.#name;
      }
      set name(value) {
          this.#name = value;
      }
      get chainId() {
          return this.#chainId;
      }
      set chainId(value) {
          this.#chainId = (0, _indexJs1.getBigInt)(value, "chainId");
      }
      get plugins() {
          return Array.from(this.#plugins.values());
      }
      attachPlugin(plugin) {
          if (this.#plugins.get(plugin.name)) throw new Error(`cannot replace existing plugin: ${plugin.name} `);
          this.#plugins.set(plugin.name, plugin.clone());
          return this;
      }
      getPlugin(name) {
          return this.#plugins.get(name) || null;
      }
      // Gets a list of Plugins which match basename, ignoring any fragment
      getPlugins(basename) {
          return this.plugins.filter((p)=>p.name.split("#")[0] === basename);
      }
      clone() {
          const clone = new Network(this.name, this.chainId);
          this.plugins.forEach((plugin)=>{
              clone.attachPlugin(plugin.clone());
          });
          return clone;
      }
      computeIntrinsicGas(tx) {
          const costs = this.getPlugin("org.ethers.plugins.network.GasCost") || new (0, _pluginsNetworkJs.GasCostPlugin)();
          let gas = costs.txBase;
          if (tx.to == null) gas += costs.txCreate;
          if (tx.data) {
              for(let i = 2; i < tx.data.length; i += 2)if (tx.data.substring(i, i + 2) === "00") gas += costs.txDataZero;
              else gas += costs.txDataNonzero;
          }
          if (tx.accessList) {
              const accessList = (0, _indexJs.accessListify)(tx.accessList);
              for(const addr in accessList)gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;
          }
          return gas;
      }
      /**
       *  Returns a new Network for the %%network%% name or chainId.
       */ static from(network) {
          injectCommonNetworks();
          // Default network
          if (network == null) return Network.from("mainnet");
          // Canonical name or chain ID
          if (typeof network === "number") network = BigInt(network);
          if (typeof network === "string" || typeof network === "bigint") {
              const networkFunc = Networks.get(network);
              if (networkFunc) return networkFunc();
              if (typeof network === "bigint") return new Network("unknown", network);
              (0, _indexJs1.assertArgument)(false, "unknown network", "network", network);
          }
          // Clonable with network-like abilities
          if (typeof network.clone === "function") {
              const clone = network.clone();
              //if (typeof(network.name) !== "string" || typeof(network.chainId) !== "number") {
              //}
              return clone;
          }
          // Networkish
          if (typeof network === "object") {
              (0, _indexJs1.assertArgument)(typeof network.name === "string" && typeof network.chainId === "number", "invalid network object name or chainId", "network", network);
              const custom = new Network(network.name, network.chainId);
              if (network.ensAddress || network.ensNetwork != null) custom.attachPlugin(new (0, _pluginsNetworkJs.EnsPlugin)(network.ensAddress, network.ensNetwork));
              //if ((<any>network).layerOneConnection) {
              //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));
              //}
              return custom;
          }
          (0, _indexJs1.assertArgument)(false, "invalid network", "network", network);
      }
      /**
       *  Register %%nameOrChainId%% with a function which returns
       *  an instance of a Network representing that chain.
       */ static register(nameOrChainId, networkFunc) {
          if (typeof nameOrChainId === "number") nameOrChainId = BigInt(nameOrChainId);
          const existing = Networks.get(nameOrChainId);
          if (existing) (0, _indexJs1.assertArgument)(false, `conflicting network for ${JSON.stringify(existing.name)}`, "nameOrChainId", nameOrChainId);
          Networks.set(nameOrChainId, networkFunc);
      }
  }
  // See: https://chainlist.org
  let injected = false;
  function injectCommonNetworks() {
      if (injected) return;
      injected = true;
      /// Register popular Ethereum networks
      function registerEth(name, chainId, options) {
          const func = function() {
              const network = new Network(name, chainId);
              // We use 0 to disable ENS
              if (options.ensNetwork != null) network.attachPlugin(new (0, _pluginsNetworkJs.EnsPlugin)(null, options.ensNetwork));
              options.priorityFee;
              /*
                          if (options.etherscan) {
                              const { url, apiKey } = options.etherscan;
                              network.attachPlugin(new EtherscanPlugin(url, apiKey));
                          }
              */ network.attachPlugin(new (0, _pluginsNetworkJs.GasCostPlugin)());
              return network;
          };
          // Register the network by name and chain ID
          Network.register(name, func);
          Network.register(chainId, func);
          if (options.altNames) options.altNames.forEach((name)=>{
              Network.register(name, func);
          });
      }
      registerEth("mainnet", 1, {
          ensNetwork: 1,
          altNames: [
              "homestead"
          ]
      });
      registerEth("ropsten", 3, {
          ensNetwork: 3
      });
      registerEth("rinkeby", 4, {
          ensNetwork: 4
      });
      registerEth("goerli", 5, {
          ensNetwork: 5
      });
      registerEth("kovan", 42, {
          ensNetwork: 42
      });
      registerEth("sepolia", 11155111, {});
      registerEth("classic", 61, {});
      registerEth("classicKotti", 6, {});
      registerEth("xdai", 100, {
          ensNetwork: 1
      });
      registerEth("optimism", 10, {
          ensNetwork: 1,
          etherscan: {
              url: "https://api-optimistic.etherscan.io/"
          }
      });
      registerEth("optimism-goerli", 420, {
          etherscan: {
              url: "https://api-goerli-optimistic.etherscan.io/"
          }
      });
      registerEth("arbitrum", 42161, {
          ensNetwork: 1,
          etherscan: {
              url: "https://api.arbiscan.io/"
          }
      });
      registerEth("arbitrum-goerli", 421613, {
          etherscan: {
              url: "https://api-goerli.arbiscan.io/"
          }
      });
      // Polygon has a 35 gwei maxPriorityFee requirement
      registerEth("matic", 137, {
          ensNetwork: 1,
          //        priorityFee: 35000000000,
          etherscan: {
              //            apiKey: "W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7",
              url: "https://api.polygonscan.com/"
          }
      });
      registerEth("matic-mumbai", 80001, {
          altNames: [
              "maticMumbai",
              "maticmum"
          ],
          //        priorityFee: 35000000000,
          etherscan: {
              //            apiKey: "W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7",
              url: "https://api-testnet.polygonscan.com/"
          }
      });
      registerEth("bnb", 56, {
          ensNetwork: 1,
          etherscan: {
              //            apiKey: "EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9",
              url: "http://api.bscscan.com"
          }
      });
      registerEth("bnbt", 97, {
          etherscan: {
              //            apiKey: "EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9",
              url: "http://api-testnet.bscscan.com"
          }
      });
  }
  
  },{"../transaction/index.js":"cOUq6","../utils/index.js":"jGhd9","./plugins-network.js":"dHYWi","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"dHYWi":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "NetworkPlugin", ()=>NetworkPlugin);
  parcelHelpers.export(exports, "GasCostPlugin", ()=>GasCostPlugin);
  // Networks shoudl use this plugin to specify the contract address
  // and network necessary to resolve ENS names.
  parcelHelpers.export(exports, "EnsPlugin", ()=>EnsPlugin);
  parcelHelpers.export(exports, "FeeDataNetworkPlugin", ()=>FeeDataNetworkPlugin) /*
  export class CustomBlockNetworkPlugin extends NetworkPlugin {
      readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;
      readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;
  
      constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {
          super("org.ethers.network-plugins.custom-block");
          this.#blockFunc = blockFunc;
          this.#blockWithTxsFunc = blockWithTxsFunc;
      }
  
      async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {
          return await this.#blockFunc(provider, block);
      }
  
      async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {
          return await this.#blockWithTxsFunc(provider, block);
      }
  
      clone(): CustomBlockNetworkPlugin {
          return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);
      }
  }
  */ ;
  var _propertiesJs = require("../utils/properties.js");
  var _indexJs = require("../utils/index.js");
  const EnsAddress = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
  class NetworkPlugin {
      name;
      constructor(name){
          (0, _propertiesJs.defineProperties)(this, {
              name
          });
      }
      clone() {
          return new NetworkPlugin(this.name);
      }
  }
  class GasCostPlugin extends NetworkPlugin {
      effectiveBlock;
      txBase;
      txCreate;
      txDataZero;
      txDataNonzero;
      txAccessListStorageKey;
      txAccessListAddress;
      constructor(effectiveBlock, costs){
          if (effectiveBlock == null) effectiveBlock = 0;
          super(`org.ethers.network.plugins.GasCost#${effectiveBlock || 0}`);
          const props = {
              effectiveBlock
          };
          function set(name, nullish) {
              let value = (costs || {})[name];
              if (value == null) value = nullish;
              (0, _indexJs.assertArgument)(typeof value === "number", `invalud value for ${name}`, "costs", costs);
              props[name] = value;
          }
          set("txBase", 21000);
          set("txCreate", 32000);
          set("txDataZero", 4);
          set("txDataNonzero", 16);
          set("txAccessListStorageKey", 1900);
          set("txAccessListAddress", 2400);
          (0, _propertiesJs.defineProperties)(this, props);
      }
      clone() {
          return new GasCostPlugin(this.effectiveBlock, this);
      }
  }
  class EnsPlugin extends NetworkPlugin {
      // The ENS contract address
      address;
      // The network ID that the ENS contract lives on
      targetNetwork;
      constructor(address, targetNetwork){
          super("org.ethers.plugins.network.Ens");
          (0, _propertiesJs.defineProperties)(this, {
              address: address || EnsAddress,
              targetNetwork: targetNetwork == null ? 1 : targetNetwork
          });
      }
      clone() {
          return new EnsPlugin(this.address, this.targetNetwork);
      }
  }
  class FeeDataNetworkPlugin extends NetworkPlugin {
      #feeDataFunc;
      get feeDataFunc() {
          return this.#feeDataFunc;
      }
      constructor(feeDataFunc){
          super("org.ethers.plugins.network.FeeData");
          this.#feeDataFunc = feeDataFunc;
      }
      async getFeeData(provider) {
          return await this.#feeDataFunc(provider);
      }
      clone() {
          return new FeeDataNetworkPlugin(this.#feeDataFunc);
      }
  }
  
  },{"../utils/properties.js":"axai0","../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"2iveV":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  @TODO
   *
   *  @_docloc: api/providers/abstract-provider
   */ parcelHelpers.export(exports, "getPollingSubscriber", ()=>getPollingSubscriber);
  // @TODO: refactor this
  /**
   *  @TODO
   *
   *  @_docloc: api/providers/abstract-provider
   */ parcelHelpers.export(exports, "PollingBlockSubscriber", ()=>PollingBlockSubscriber);
  /**
   *  @TODO
   *
   *  @_docloc: api/providers/abstract-provider
   */ parcelHelpers.export(exports, "OnBlockSubscriber", ()=>OnBlockSubscriber);
  /**
   *  @TODO
   *
   *  @_docloc: api/providers/abstract-provider
   */ parcelHelpers.export(exports, "PollingOrphanSubscriber", ()=>PollingOrphanSubscriber);
  /**
   *  @TODO
   *
   *  @_docloc: api/providers/abstract-provider
   */ parcelHelpers.export(exports, "PollingTransactionSubscriber", ()=>PollingTransactionSubscriber);
  /**
   *  @TODO
   *
   *  @_docloc: api/providers/abstract-provider
   */ parcelHelpers.export(exports, "PollingEventSubscriber", ()=>PollingEventSubscriber);
  var _indexJs = require("../utils/index.js");
  function copy(obj) {
      return JSON.parse(JSON.stringify(obj));
  }
  function getPollingSubscriber(provider, event) {
      if (event === "block") return new PollingBlockSubscriber(provider);
      if ((0, _indexJs.isHexString)(event, 32)) return new PollingTransactionSubscriber(provider, event);
      (0, _indexJs.assert)(false, "unsupported polling event", "UNSUPPORTED_OPERATION", {
          operation: "getPollingSubscriber",
          info: {
              event
          }
      });
  }
  class PollingBlockSubscriber {
      #provider;
      #poller;
      #interval;
      // The most recent block we have scanned for events. The value -2
      // indicates we still need to fetch an initial block number
      #blockNumber;
      constructor(provider){
          this.#provider = provider;
          this.#poller = null;
          this.#interval = 4000;
          this.#blockNumber = -2;
      }
      get pollingInterval() {
          return this.#interval;
      }
      set pollingInterval(value) {
          this.#interval = value;
      }
      async #poll() {
          try {
              const blockNumber = await this.#provider.getBlockNumber();
              // Bootstrap poll to setup our initial block number
              if (this.#blockNumber === -2) {
                  this.#blockNumber = blockNumber;
                  return;
              }
              // @TODO: Put a cap on the maximum number of events per loop?
              if (blockNumber !== this.#blockNumber) {
                  for(let b = this.#blockNumber + 1; b <= blockNumber; b++){
                      // We have been stopped
                      if (this.#poller == null) return;
                      await this.#provider.emit("block", b);
                  }
                  this.#blockNumber = blockNumber;
              }
          } catch (error) {
          // @TODO: Minor bump, add an "error" event to let subscribers
          //        know things went awry.
          //console.log(error);
          }
          // We have been stopped
          if (this.#poller == null) return;
          this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);
      }
      start() {
          if (this.#poller) return;
          this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);
          this.#poll();
      }
      stop() {
          if (!this.#poller) return;
          this.#provider._clearTimeout(this.#poller);
          this.#poller = null;
      }
      pause(dropWhilePaused) {
          this.stop();
          if (dropWhilePaused) this.#blockNumber = -2;
      }
      resume() {
          this.start();
      }
  }
  class OnBlockSubscriber {
      #provider;
      #poll;
      #running;
      constructor(provider){
          this.#provider = provider;
          this.#running = false;
          this.#poll = (blockNumber)=>{
              this._poll(blockNumber, this.#provider);
          };
      }
      async _poll(blockNumber, provider) {
          throw new Error("sub-classes must override this");
      }
      start() {
          if (this.#running) return;
          this.#running = true;
          this.#poll(-2);
          this.#provider.on("block", this.#poll);
      }
      stop() {
          if (!this.#running) return;
          this.#running = false;
          this.#provider.off("block", this.#poll);
      }
      pause(dropWhilePaused) {
          this.stop();
      }
      resume() {
          this.start();
      }
  }
  class PollingOrphanSubscriber extends OnBlockSubscriber {
      #filter;
      constructor(provider, filter){
          super(provider);
          this.#filter = copy(filter);
      }
      async _poll(blockNumber, provider) {
          throw new Error("@TODO");
      }
  }
  class PollingTransactionSubscriber extends OnBlockSubscriber {
      #hash;
      constructor(provider, hash){
          super(provider);
          this.#hash = hash;
      }
      async _poll(blockNumber, provider) {
          const tx = await provider.getTransactionReceipt(this.#hash);
          if (tx) provider.emit(this.#hash, tx);
      }
  }
  class PollingEventSubscriber {
      #provider;
      #filter;
      #poller;
      #running;
      // The most recent block we have scanned for events. The value -2
      // indicates we still need to fetch an initial block number
      #blockNumber;
      constructor(provider, filter){
          this.#provider = provider;
          this.#filter = copy(filter);
          this.#poller = this.#poll.bind(this);
          this.#running = false;
          this.#blockNumber = -2;
      }
      async #poll(blockNumber) {
          // The initial block hasn't been determined yet
          if (this.#blockNumber === -2) return;
          const filter = copy(this.#filter);
          filter.fromBlock = this.#blockNumber + 1;
          filter.toBlock = blockNumber;
          const logs = await this.#provider.getLogs(filter);
          // No logs could just mean the node has not indexed them yet,
          // so we keep a sliding window of 60 blocks to keep scanning
          if (logs.length === 0) {
              if (this.#blockNumber < blockNumber - 60) this.#blockNumber = blockNumber - 60;
              return;
          }
          this.#blockNumber = blockNumber;
          for (const log of logs)this.#provider.emit(this.#filter, log);
      }
      start() {
          if (this.#running) return;
          this.#running = true;
          if (this.#blockNumber === -2) this.#provider.getBlockNumber().then((blockNumber)=>{
              this.#blockNumber = blockNumber;
          });
          this.#provider.on("block", this.#poller);
      }
      stop() {
          if (!this.#running) return;
          this.#running = false;
          this.#provider.off("block", this.#poller);
      }
      pause(dropWhilePaused) {
          this.stop();
          if (dropWhilePaused) this.#blockNumber = -2;
      }
      resume() {
          this.start();
      }
  }
  
  },{"../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"8n6Nd":[function(require,module,exports) {
  /**
   *  About Abstract Signer and subclassing
   *
   *  @_section: api/providers/abstract-signer: Subclassing Signer [abstract-signer]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "AbstractSigner", ()=>AbstractSigner);
  parcelHelpers.export(exports, "VoidSigner", ()=>VoidSigner);
  var _indexJs = require("../address/index.js");
  var _indexJs1 = require("../transaction/index.js");
  var _indexJs2 = require("../utils/index.js");
  var _providerJs = require("./provider.js");
  function checkProvider(signer, operation) {
      if (signer.provider) return signer.provider;
      (0, _indexJs2.assert)(false, "missing provider", "UNSUPPORTED_OPERATION", {
          operation
      });
  }
  async function populate(signer, tx) {
      let pop = (0, _providerJs.copyRequest)(tx);
      if (pop.to != null) pop.to = (0, _indexJs.resolveAddress)(pop.to, signer);
      if (pop.from != null) {
          const from = pop.from;
          pop.from = Promise.all([
              signer.getAddress(),
              (0, _indexJs.resolveAddress)(from, signer)
          ]).then(([address, from])=>{
              (0, _indexJs2.assertArgument)(address.toLowerCase() === from.toLowerCase(), "transaction from mismatch", "tx.from", from);
              return address;
          });
      } else pop.from = signer.getAddress();
      return await (0, _indexJs2.resolveProperties)(pop);
  }
  class AbstractSigner {
      provider;
      constructor(provider){
          (0, _indexJs2.defineProperties)(this, {
              provider: provider || null
          });
      }
      async getNonce(blockTag) {
          return checkProvider(this, "getTransactionCount").getTransactionCount(await this.getAddress(), blockTag);
      }
      async populateCall(tx) {
          const pop = await populate(this, tx);
          return pop;
      }
      async populateTransaction(tx) {
          const provider = checkProvider(this, "populateTransaction");
          const pop = await populate(this, tx);
          if (pop.nonce == null) pop.nonce = await this.getNonce("pending");
          if (pop.gasLimit == null) pop.gasLimit = await this.estimateGas(pop);
          // Populate the chain ID
          const network = await this.provider.getNetwork();
          if (pop.chainId != null) {
              const chainId = (0, _indexJs2.getBigInt)(pop.chainId);
              (0, _indexJs2.assertArgument)(chainId === network.chainId, "transaction chainId mismatch", "tx.chainId", tx.chainId);
          } else pop.chainId = network.chainId;
          // Do not allow mixing pre-eip-1559 and eip-1559 properties
          const hasEip1559 = pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null;
          if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) (0, _indexJs2.assertArgument)(false, "eip-1559 transaction do not support gasPrice", "tx", tx);
          else if ((pop.type === 0 || pop.type === 1) && hasEip1559) (0, _indexJs2.assertArgument)(false, "pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "tx", tx);
          if ((pop.type === 2 || pop.type == null) && pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null) // Fully-formed EIP-1559 transaction (skip getFeeData)
          pop.type = 2;
          else if (pop.type === 0 || pop.type === 1) {
              // Explicit Legacy or EIP-2930 transaction
              // We need to get fee data to determine things
              const feeData = await provider.getFeeData();
              (0, _indexJs2.assert)(feeData.gasPrice != null, "network does not support gasPrice", "UNSUPPORTED_OPERATION", {
                  operation: "getGasPrice"
              });
              // Populate missing gasPrice
              if (pop.gasPrice == null) pop.gasPrice = feeData.gasPrice;
          } else {
              // We need to get fee data to determine things
              const feeData = await provider.getFeeData();
              if (pop.type == null) {
                  // We need to auto-detect the intended type of this transaction...
                  if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
                      // The network supports EIP-1559!
                      // Upgrade transaction from null to eip-1559
                      pop.type = 2;
                      if (pop.gasPrice != null) {
                          // Using legacy gasPrice property on an eip-1559 network,
                          // so use gasPrice as both fee properties
                          const gasPrice = pop.gasPrice;
                          delete pop.gasPrice;
                          pop.maxFeePerGas = gasPrice;
                          pop.maxPriorityFeePerGas = gasPrice;
                      } else {
                          // Populate missing fee data
                          if (pop.maxFeePerGas == null) pop.maxFeePerGas = feeData.maxFeePerGas;
                          if (pop.maxPriorityFeePerGas == null) pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                      }
                  } else if (feeData.gasPrice != null) {
                      // Network doesn't support EIP-1559...
                      // ...but they are trying to use EIP-1559 properties
                      (0, _indexJs2.assert)(!hasEip1559, "network does not support EIP-1559", "UNSUPPORTED_OPERATION", {
                          operation: "populateTransaction"
                      });
                      // Populate missing fee data
                      if (pop.gasPrice == null) pop.gasPrice = feeData.gasPrice;
                      // Explicitly set untyped transaction to legacy
                      // @TODO: Maybe this shold allow type 1?
                      pop.type = 0;
                  } else // getFeeData has failed us.
                  (0, _indexJs2.assert)(false, "failed to get consistent fee data", "UNSUPPORTED_OPERATION", {
                      operation: "signer.getFeeData"
                  });
              } else if (pop.type === 2) {
                  // Explicitly using EIP-1559
                  // Populate missing fee data
                  if (pop.maxFeePerGas == null) pop.maxFeePerGas = feeData.maxFeePerGas;
                  if (pop.maxPriorityFeePerGas == null) pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
              }
          }
          //@TOOD: Don't await all over the place; save them up for
          // the end for better batching
          return await (0, _indexJs2.resolveProperties)(pop);
      }
      async estimateGas(tx) {
          return checkProvider(this, "estimateGas").estimateGas(await this.populateCall(tx));
      }
      async call(tx) {
          return checkProvider(this, "call").call(await this.populateCall(tx));
      }
      async resolveName(name) {
          const provider = checkProvider(this, "resolveName");
          return await provider.resolveName(name);
      }
      async sendTransaction(tx) {
          const provider = checkProvider(this, "sendTransaction");
          const pop = await this.populateTransaction(tx);
          delete pop.from;
          const txObj = (0, _indexJs1.Transaction).from(pop);
          return await provider.broadcastTransaction(await this.signTransaction(txObj));
      }
  }
  class VoidSigner extends AbstractSigner {
      address;
      constructor(address, provider){
          super(provider);
          (0, _indexJs2.defineProperties)(this, {
              address
          });
      }
      async getAddress() {
          return this.address;
      }
      connect(provider) {
          return new VoidSigner(this.address, provider);
      }
      #throwUnsupported(suffix, operation) {
          (0, _indexJs2.assert)(false, `VoidSigner cannot sign ${suffix}`, "UNSUPPORTED_OPERATION", {
              operation
          });
      }
      async signTransaction(tx) {
          this.#throwUnsupported("transactions", "signTransaction");
      }
      async signMessage(message) {
          this.#throwUnsupported("messages", "signMessage");
      }
      async signTypedData(domain, types, value) {
          this.#throwUnsupported("typed-data", "signTypedData");
      }
  }
  
  },{"../address/index.js":"cuJ87","../transaction/index.js":"cOUq6","../utils/index.js":"jGhd9","./provider.js":"kIz6a","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"2jZ1F":[function(require,module,exports) {
  /**
   *  There are many awesome community services that provide Ethereum
   *  nodes both for developers just starting out and for large-scale
   *  communities.
   *
   *  @_section: api/providers/thirdparty: Community Providers  [thirdparty]
   */ // Show the throttle message only once per service
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Displays a warning in tht console when the community resource is
   *  being used too heavily by the app, recommending the developer
   *  acquire their own credentials instead of using the community
   *  credentials.
   *
   *  The notification will only occur once per service.
   */ parcelHelpers.export(exports, "showThrottleMessage", ()=>showThrottleMessage);
  const shown = new Set();
  function showThrottleMessage(service) {
      if (shown.has(service)) return;
      shown.add(service);
      console.log("========= NOTICE =========");
      console.log(`Request-Rate Exceeded for ${service} (this message will not be repeated)`);
      console.log("");
      console.log("The default API keys for each service are provided as a highly-throttled,");
      console.log("community resource for low-traffic projects and early prototyping.");
      console.log("");
      console.log("While your application will continue to function, we highly recommended");
      console.log("signing up for your own API keys to improve performance, increase your");
      console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
      console.log("");
      console.log("For more details: https://docs.ethers.org/api-keys/");
      console.log("==========================");
  }
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"8rTva":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "getDefaultProvider", ()=>getDefaultProvider);
  var _indexJs = require("../utils/index.js");
  var _providerAnkrJs = require("./provider-ankr.js");
  var _providerAlchemyJs = require("./provider-alchemy.js");
  var _providerCloudflareJs = require("./provider-cloudflare.js");
  var _providerEtherscanJs = require("./provider-etherscan.js");
  var _providerInfuraJs = require("./provider-infura.js");
  //import { PocketProvider } from "./provider-pocket.js";
  var _providerQuicknodeJs = require("./provider-quicknode.js");
  var _providerFallbackJs = require("./provider-fallback.js");
  var _providerJsonrpcJs = require("./provider-jsonrpc.js");
  var _providerWebsocketJs = require("./provider-websocket.js");
  function isWebSocketLike(value) {
      return value && typeof value.send === "function" && typeof value.close === "function";
  }
  function getDefaultProvider(network, options) {
      if (options == null) options = {};
      if (typeof network === "string" && network.match(/^https?:/)) return new (0, _providerJsonrpcJs.JsonRpcProvider)(network);
      if (typeof network === "string" && network.match(/^wss?:/) || isWebSocketLike(network)) return new (0, _providerWebsocketJs.WebSocketProvider)(network);
      const providers = [];
      if (options.alchemy !== "-") try {
          providers.push(new (0, _providerAlchemyJs.AlchemyProvider)(network, options.alchemy));
      } catch (error) {
          console.log(error);
      }
      if (options.ankr !== "-" && options.ankr != null) try {
          providers.push(new (0, _providerAnkrJs.AnkrProvider)(network, options.ankr));
      } catch (error) {
          console.log(error);
      }
      if (options.cloudflare !== "-") try {
          providers.push(new (0, _providerCloudflareJs.CloudflareProvider)(network));
      } catch (error) {
          console.log(error);
      }
      if (options.etherscan !== "-") try {
          providers.push(new (0, _providerEtherscanJs.EtherscanProvider)(network, options.etherscan));
      } catch (error) {
          console.log(error);
      }
      if (options.infura !== "-") try {
          let projectId = options.infura;
          let projectSecret = undefined;
          if (typeof projectId === "object") {
              projectSecret = projectId.projectSecret;
              projectId = projectId.projectId;
          }
          providers.push(new (0, _providerInfuraJs.InfuraProvider)(network, projectId, projectSecret));
      } catch (error) {
          console.log(error);
      }
      /*
          if (options.pocket !== "-") {
              try {
                  let appId = options.pocket;
                  let secretKey: undefined | string = undefined;
                  let loadBalancer: undefined | boolean = undefined;
                  if (typeof(appId) === "object") {
                      loadBalancer = !!appId.loadBalancer;
                      secretKey = appId.secretKey;
                      appId = appId.appId;
                  }
                  providers.push(new PocketProvider(network, appId, secretKey, loadBalancer));
              } catch (error) { console.log(error); }
          }
      */ if (options.quicknode !== "-") try {
          let token = options.quicknode;
          providers.push(new (0, _providerQuicknodeJs.QuickNodeProvider)(network, token));
      } catch (error) {
          console.log(error);
      }
      (0, _indexJs.assert)(providers.length, "unsupported default network", "UNSUPPORTED_OPERATION", {
          operation: "getDefaultProvider"
      });
      if (providers.length === 1) return providers[0];
      return new (0, _providerFallbackJs.FallbackProvider)(providers);
  }
  
  },{"../utils/index.js":"jGhd9","./provider-ankr.js":"lgpyB","./provider-alchemy.js":"l2S3x","./provider-cloudflare.js":"58LHx","./provider-etherscan.js":"3mCoe","./provider-infura.js":"6N06D","./provider-quicknode.js":"2q9T0","./provider-fallback.js":"ddSrT","./provider-jsonrpc.js":"8D9UU","./provider-websocket.js":"8V8wf","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"lgpyB":[function(require,module,exports) {
  /**
   *  [[link-ankr]] provides a third-party service for connecting to
   *  various blockchains over JSON-RPC.
   *
   *  **Supported Networks**
   *
   *  - Ethereum Mainnet (``mainnet``)
   *  - Goerli Testnet (``goerli``)
   *  - Polygon (``matic``)
   *  - Arbitrum (``arbitrum``)
   *
   *  @_subsection: api/providers/thirdparty:Ankr  [providers-ankr]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  The **AnkrProvider** connects to the [[link-ankr]]
   *  JSON-RPC end-points.
   *
   *  By default, a highly-throttled API key is used, which is
   *  appropriate for quick prototypes and simple scripts. To
   *  gain access to an increased rate-limit, it is highly
   *  recommended to [sign up here](link-ankr-signup).
   */ parcelHelpers.export(exports, "AnkrProvider", ()=>AnkrProvider);
  var _indexJs = require("../utils/index.js");
  var _communityJs = require("./community.js");
  var _networkJs = require("./network.js");
  var _providerJsonrpcJs = require("./provider-jsonrpc.js");
  const defaultApiKey = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
  function getHost(name) {
      switch(name){
          case "mainnet":
              return "rpc.ankr.com/eth";
          case "goerli":
              return "rpc.ankr.com/eth_goerli";
          case "matic":
              return "rpc.ankr.com/polygon";
          case "arbitrum":
              return "rpc.ankr.com/arbitrum";
      }
      (0, _indexJs.assertArgument)(false, "unsupported network", "network", name);
  }
  class AnkrProvider extends (0, _providerJsonrpcJs.JsonRpcProvider) {
      /**
       *  The API key for the Ankr connection.
       */ apiKey;
      /**
       *  Create a new **AnkrProvider**.
       *
       *  By default connecting to ``mainnet`` with a highly throttled
       *  API key.
       */ constructor(_network, apiKey){
          if (_network == null) _network = "mainnet";
          const network = (0, _networkJs.Network).from(_network);
          if (apiKey == null) apiKey = defaultApiKey;
          // Ankr does not support filterId, so we force polling
          const options = {
              polling: true,
              staticNetwork: network
          };
          const request = AnkrProvider.getRequest(network, apiKey);
          super(request, network, options);
          (0, _indexJs.defineProperties)(this, {
              apiKey
          });
      }
      _getProvider(chainId) {
          try {
              return new AnkrProvider(chainId, this.apiKey);
          } catch (error) {}
          return super._getProvider(chainId);
      }
      /**
       *  Returns a prepared request for connecting to %%network%% with
       *  %%apiKey%%.
       */ static getRequest(network, apiKey) {
          if (apiKey == null) apiKey = defaultApiKey;
          const request = new (0, _indexJs.FetchRequest)(`https:/\/${getHost(network.name)}/${apiKey}`);
          request.allowGzip = true;
          if (apiKey === defaultApiKey) request.retryFunc = async (request, response, attempt)=>{
              (0, _communityJs.showThrottleMessage)("AnkrProvider");
              return true;
          };
          return request;
      }
      getRpcError(payload, error) {
          if (payload.method === "eth_sendRawTransaction") {
              if (error && error.error && error.error.message === "INTERNAL_ERROR: could not replace existing tx") error.error.message = "replacement transaction underpriced";
          }
          return super.getRpcError(payload, error);
      }
      isCommunityResource() {
          return this.apiKey === defaultApiKey;
      }
  }
  
  },{"../utils/index.js":"jGhd9","./community.js":"2jZ1F","./network.js":"bE61r","./provider-jsonrpc.js":"8D9UU","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"8D9UU":[function(require,module,exports) {
  /**
   *  About JSON-RPC...
   *
   * @_section: api/providers/jsonrpc:JSON-RPC Provider  [about-jsonrpcProvider]
   */ // @TODO:
  // - Add the batching API
  // https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/ethereum/eth1.0-apis/assembled-spec/openrpc.json&uiSchema%5BappBar%5D%5Bui:splitView%5D=true&uiSchema%5BappBar%5D%5Bui:input%5D=false&uiSchema%5BappBar%5D%5Bui:examplesDropdown%5D=false
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  // @TODO: Unchecked Signers
  parcelHelpers.export(exports, "JsonRpcSigner", ()=>JsonRpcSigner);
  /**
   *  The JsonRpcApiProvider is an abstract class and **MUST** be
   *  sub-classed.
   *
   *  It provides the base for all JSON-RPC-based Provider interaction.
   *
   *  Sub-classing Notes:
   *  - a sub-class MUST override _send
   *  - a sub-class MUST call the `_start()` method once connected
   */ parcelHelpers.export(exports, "JsonRpcApiProvider", ()=>JsonRpcApiProvider);
  parcelHelpers.export(exports, "JsonRpcApiPollingProvider", ()=>JsonRpcApiPollingProvider);
  /**
   *  The JsonRpcProvider is one of the most common Providers,
   *  which performs all operations over HTTP (or HTTPS) requests.
   *
   *  Events are processed by polling the backend for the current block
   *  number; when it advances, all block-base events are then checked
   *  for updates.
   */ parcelHelpers.export(exports, "JsonRpcProvider", ()=>JsonRpcProvider);
  var _indexJs = require("../abi/index.js");
  var _indexJs1 = require("../address/index.js");
  var _indexJs2 = require("../hash/index.js");
  var _indexJs3 = require("../transaction/index.js");
  var _indexJs4 = require("../utils/index.js");
  var _abstractProviderJs = require("./abstract-provider.js");
  var _abstractSignerJs = require("./abstract-signer.js");
  var _networkJs = require("./network.js");
  var _subscriberFilteridJs = require("./subscriber-filterid.js");
  var _subscriberPollingJs = require("./subscriber-polling.js");
  const Primitive = "bigint,boolean,function,number,string,symbol".split(/,/g);
  //const Methods = "getAddress,then".split(/,/g);
  function deepCopy(value) {
      if (value == null || Primitive.indexOf(typeof value) >= 0) return value;
      // Keep any Addressable
      if (typeof value.getAddress === "function") return value;
      if (Array.isArray(value)) return value.map(deepCopy);
      if (typeof value === "object") return Object.keys(value).reduce((accum, key)=>{
          accum[key] = value[key];
          return accum;
      }, {});
      throw new Error(`should not happen: ${value} (${typeof value})`);
  }
  function stall(duration) {
      return new Promise((resolve)=>{
          setTimeout(resolve, duration);
      });
  }
  function getLowerCase(value) {
      if (value) return value.toLowerCase();
      return value;
  }
  function isPollable(value) {
      return value && typeof value.pollingInterval === "number";
  }
  const defaultOptions = {
      polling: false,
      staticNetwork: null,
      batchStallTime: 10,
      batchMaxSize: 1048576,
      batchMaxCount: 100 // 100 requests
  };
  class JsonRpcSigner extends (0, _abstractSignerJs.AbstractSigner) {
      address;
      constructor(provider, address){
          super(provider);
          address = (0, _indexJs1.getAddress)(address);
          (0, _indexJs4.defineProperties)(this, {
              address
          });
      }
      connect(provider) {
          (0, _indexJs4.assert)(false, "cannot reconnect JsonRpcSigner", "UNSUPPORTED_OPERATION", {
              operation: "signer.connect"
          });
      }
      async getAddress() {
          return this.address;
      }
      // JSON-RPC will automatially fill in nonce, etc. so we just check from
      async populateTransaction(tx) {
          return await this.populateCall(tx);
      }
      // Returns just the hash of the transaction after sent, which is what
      // the bare JSON-RPC API does;
      async sendUncheckedTransaction(_tx) {
          const tx = deepCopy(_tx);
          const promises = [];
          // Make sure the from matches the sender
          if (tx.from) {
              const _from = tx.from;
              promises.push((async ()=>{
                  const from = await (0, _indexJs1.resolveAddress)(_from, this.provider);
                  (0, _indexJs4.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
                  tx.from = from;
              })());
          } else tx.from = this.address;
          // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user
          // wishes to use this, it is easy to specify explicitly, otherwise
          // we look it up for them.
          if (tx.gasLimit == null) promises.push((async ()=>{
              tx.gasLimit = await this.provider.estimateGas({
                  ...tx,
                  from: this.address
              });
          })());
          // The address may be an ENS name or Addressable
          if (tx.to != null) {
              const _to = tx.to;
              promises.push((async ()=>{
                  tx.to = await (0, _indexJs1.resolveAddress)(_to, this.provider);
              })());
          }
          // Wait until all of our properties are filled in
          if (promises.length) await Promise.all(promises);
          const hexTx = this.provider.getRpcTransaction(tx);
          return this.provider.send("eth_sendTransaction", [
              hexTx
          ]);
      }
      async sendTransaction(tx) {
          // This cannot be mined any earlier than any recent block
          const blockNumber = await this.provider.getBlockNumber();
          // Send the transaction
          const hash = await this.sendUncheckedTransaction(tx);
          // Unfortunately, JSON-RPC only provides and opaque transaction hash
          // for a response, and we need the actual transaction, so we poll
          // for it; it should show up very quickly
          return await new Promise((resolve, reject)=>{
              const timeouts = [
                  1000,
                  100
              ];
              const checkTx = async ()=>{
                  // Try getting the transaction
                  const tx = await this.provider.getTransaction(hash);
                  if (tx != null) {
                      resolve(tx.replaceableTransaction(blockNumber));
                      return;
                  }
                  // Wait another 4 seconds
                  this.provider._setTimeout(()=>{
                      checkTx();
                  }, timeouts.pop() || 4000);
              };
              checkTx();
          });
      }
      async signTransaction(_tx) {
          const tx = deepCopy(_tx);
          // Make sure the from matches the sender
          if (tx.from) {
              const from = await (0, _indexJs1.resolveAddress)(tx.from, this.provider);
              (0, _indexJs4.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
              tx.from = from;
          } else tx.from = this.address;
          const hexTx = this.provider.getRpcTransaction(tx);
          return await this.provider.send("eth_signTransaction", [
              hexTx
          ]);
      }
      async signMessage(_message) {
          const message = typeof _message === "string" ? (0, _indexJs4.toUtf8Bytes)(_message) : _message;
          return await this.provider.send("personal_sign", [
              (0, _indexJs4.hexlify)(message),
              this.address.toLowerCase()
          ]);
      }
      async signTypedData(domain, types, _value) {
          const value = deepCopy(_value);
          // Populate any ENS names (in-place)
          const populated = await (0, _indexJs2.TypedDataEncoder).resolveNames(domain, types, value, async (value)=>{
              const address = await (0, _indexJs1.resolveAddress)(value);
              (0, _indexJs4.assertArgument)(address != null, "TypedData does not support null address", "value", value);
              return address;
          });
          return await this.provider.send("eth_signTypedData_v4", [
              this.address.toLowerCase(),
              JSON.stringify((0, _indexJs2.TypedDataEncoder).getPayload(populated.domain, types, populated.value))
          ]);
      }
      async unlock(password) {
          return this.provider.send("personal_unlockAccount", [
              this.address.toLowerCase(),
              password,
              null
          ]);
      }
      // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
      async _legacySignMessage(_message) {
          const message = typeof _message === "string" ? (0, _indexJs4.toUtf8Bytes)(_message) : _message;
          return await this.provider.send("eth_sign", [
              this.address.toLowerCase(),
              (0, _indexJs4.hexlify)(message)
          ]);
      }
  }
  class JsonRpcApiProvider extends (0, _abstractProviderJs.AbstractProvider) {
      #options;
      // The next ID to use for the JSON-RPC ID field
      #nextId;
      // Payloads are queued and triggered in batches using the drainTimer
      #payloads;
      #drainTimer;
      #notReady;
      #network;
      #scheduleDrain() {
          if (this.#drainTimer) return;
          // If we aren't using batching, no hard in sending it immeidately
          const stallTime = this._getOption("batchMaxCount") === 1 ? 0 : this._getOption("batchStallTime");
          this.#drainTimer = setTimeout(()=>{
              this.#drainTimer = null;
              const payloads = this.#payloads;
              this.#payloads = [];
              while(payloads.length){
                  // Create payload batches that satisfy our batch constraints
                  const batch = [
                      payloads.shift()
                  ];
                  while(payloads.length){
                      if (batch.length === this.#options.batchMaxCount) break;
                      batch.push(payloads.shift());
                      const bytes = JSON.stringify(batch.map((p)=>p.payload));
                      if (bytes.length > this.#options.batchMaxSize) {
                          payloads.unshift(batch.pop());
                          break;
                      }
                  }
                  // Process the result to each payload
                  (async ()=>{
                      const payload = batch.length === 1 ? batch[0].payload : batch.map((p)=>p.payload);
                      this.emit("debug", {
                          action: "sendRpcPayload",
                          payload
                      });
                      try {
                          const result = await this._send(payload);
                          this.emit("debug", {
                              action: "receiveRpcResult",
                              result
                          });
                          // Process results in batch order
                          for (const { resolve , reject , payload  } of batch){
                              // Find the matching result
                              const resp = result.filter((r)=>r.id === payload.id)[0];
                              // No result; the node failed us in unexpected ways
                              if (resp == null) return reject((0, _indexJs4.makeError)("no response from server", "BAD_DATA", {
                                  value: result,
                                  info: {
                                      payload
                                  }
                              }));
                              // The response is an error
                              if ("error" in resp) return reject(this.getRpcError(payload, resp));
                              // All good; send the result
                              resolve(resp.result);
                          }
                      } catch (error) {
                          this.emit("debug", {
                              action: "receiveRpcError",
                              error
                          });
                          for (const { reject  } of batch)// @TODO: augment the error with the payload
                          reject(error);
                      }
                  })();
              }
          }, stallTime);
      }
      constructor(network, options){
          super(network);
          this.#nextId = 1;
          this.#options = Object.assign({}, defaultOptions, options || {});
          this.#payloads = [];
          this.#drainTimer = null;
          this.#network = null;
          {
              let resolve = null;
              const promise = new Promise((_resolve)=>{
                  resolve = _resolve;
              });
              this.#notReady = {
                  promise,
                  resolve
              };
          }
          // This could be relaxed in the future to just check equivalent networks
          const staticNetwork = this._getOption("staticNetwork");
          if (staticNetwork) {
              (0, _indexJs4.assertArgument)(staticNetwork === network, "staticNetwork MUST match network object", "options", options);
              this.#network = staticNetwork;
          }
      }
      /**
       *  Returns the value associated with the option %%key%%.
       *
       *  Sub-classes can use this to inquire about configuration options.
       */ _getOption(key) {
          return this.#options[key];
      }
      /**
       *  Gets the [[Network]] this provider has committed to. On each call, the network
       *  is detected, and if it has changed, the call will reject.
       */ get _network() {
          (0, _indexJs4.assert)(this.#network, "network is not available yet", "NETWORK_ERROR");
          return this.#network;
      }
      /*
       {
          assert(false, "sub-classes must override _send", "UNSUPPORTED_OPERATION", {
              operation: "jsonRpcApiProvider._send"
          });
      }
      */ /**
       *  Resolves to the non-normalized value by performing %%req%%.
       *
       *  Sub-classes may override this to modify behavior of actions,
       *  and should generally call ``super._perform`` as a fallback.
       */ async _perform(req) {
          // Legacy networks do not like the type field being passed along (which
          // is fair), so we delete type if it is 0 and a non-EIP-1559 network
          if (req.method === "call" || req.method === "estimateGas") {
              let tx = req.transaction;
              if (tx && tx.type != null && (0, _indexJs4.getBigInt)(tx.type)) // If there are no EIP-1559 properties, it might be non-EIP-a559
              {
                  if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
                      const feeData = await this.getFeeData();
                      if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) // Network doesn't know about EIP-1559 (and hence type)
                      req = Object.assign({}, req, {
                          transaction: Object.assign({}, tx, {
                              type: undefined
                          })
                      });
                  }
              }
          }
          const request = this.getRpcRequest(req);
          if (request != null) return await this.send(request.method, request.args);
          return super._perform(req);
      }
      /**
       *  Sub-classes may override this; it detects the *actual* network that
       *  we are **currently** connected to.
       *
       *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the
       *  _send primitive must be used instead.
       */ async _detectNetwork() {
          const network = this._getOption("staticNetwork");
          if (network) return network;
          // If we are ready, use ``send``, which enabled requests to be batched
          if (this.ready) return (0, _networkJs.Network).from((0, _indexJs4.getBigInt)(await this.send("eth_chainId", [])));
          // We are not ready yet; use the primitive _send
          const payload = {
              id: this.#nextId++,
              method: "eth_chainId",
              params: [],
              jsonrpc: "2.0"
          };
          this.emit("debug", {
              action: "sendRpcPayload",
              payload
          });
          let result;
          try {
              result = (await this._send(payload))[0];
          } catch (error) {
              this.emit("debug", {
                  action: "receiveRpcError",
                  error
              });
              throw error;
          }
          this.emit("debug", {
              action: "receiveRpcResult",
              result
          });
          if ("result" in result) return (0, _networkJs.Network).from((0, _indexJs4.getBigInt)(result.result));
          throw this.getRpcError(payload, result);
      }
      /**
       *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls
       *  will be passed to [[_send]] from [[send]]. If it is overridden, then
       *  ``super._start()`` **MUST** be called.
       *
       *  Calling it multiple times is safe and has no effect.
       */ _start() {
          if (this.#notReady == null || this.#notReady.resolve == null) return;
          this.#notReady.resolve();
          this.#notReady = null;
          (async ()=>{
              // Bootstrap the network
              while(this.#network == null)try {
                  this.#network = await this._detectNetwork();
              } catch (error) {
                  console.log("JsonRpcProvider failed to startup; retry in 1s");
                  await stall(1000);
              }
              // Start dispatching requests
              this.#scheduleDrain();
          })();
      }
      /**
       *  Resolves once the [[_start]] has been called. This can be used in
       *  sub-classes to defer sending data until the connection has been
       *  established.
       */ async _waitUntilReady() {
          if (this.#notReady == null) return;
          return await this.#notReady.promise;
      }
      /**
       *  Return a Subscriber that will manage the %%sub%%.
       *
       *  Sub-classes may override this to modify the behavior of
       *  subscription management.
       */ _getSubscriber(sub) {
          // Pending Filters aren't availble via polling
          if (sub.type === "pending") return new (0, _subscriberFilteridJs.FilterIdPendingSubscriber)(this);
          if (sub.type === "event") {
              if (this._getOption("polling")) return new (0, _subscriberPollingJs.PollingEventSubscriber)(this, sub.filter);
              return new (0, _subscriberFilteridJs.FilterIdEventSubscriber)(this, sub.filter);
          }
          // Orphaned Logs are handled automatically, by the filter, since
          // logs with removed are emitted by it
          if (sub.type === "orphan" && sub.filter.orphan === "drop-log") return new (0, _abstractProviderJs.UnmanagedSubscriber)("orphan");
          return super._getSubscriber(sub);
      }
      /**
       *  Returns true only if the [[_start]] has been called.
       */ get ready() {
          return this.#notReady == null;
      }
      /**
       *  Returns %%tx%% as a normalized JSON-RPC transaction request,
       *  which has all values hexlified and any numeric values converted
       *  to Quantity values.
       */ getRpcTransaction(tx) {
          const result = {};
          // JSON-RPC now requires numeric values to be "quantity" values
          [
              "chainId",
              "gasLimit",
              "gasPrice",
              "type",
              "maxFeePerGas",
              "maxPriorityFeePerGas",
              "nonce",
              "value"
          ].forEach((key)=>{
              if (tx[key] == null) return;
              let dstKey = key;
              if (key === "gasLimit") dstKey = "gas";
              result[dstKey] = (0, _indexJs4.toQuantity)((0, _indexJs4.getBigInt)(tx[key], `tx.${key}`));
          });
          // Make sure addresses and data are lowercase
          [
              "from",
              "to",
              "data"
          ].forEach((key)=>{
              if (tx[key] == null) return;
              result[key] = (0, _indexJs4.hexlify)(tx[key]);
          });
          // Normalize the access list object
          if (tx.accessList) result["accessList"] = (0, _indexJs3.accessListify)(tx.accessList);
          return result;
      }
      /**
       *  Returns the request method and arguments required to perform
       *  %%req%%.
       */ getRpcRequest(req) {
          switch(req.method){
              case "chainId":
                  return {
                      method: "eth_chainId",
                      args: []
                  };
              case "getBlockNumber":
                  return {
                      method: "eth_blockNumber",
                      args: []
                  };
              case "getGasPrice":
                  return {
                      method: "eth_gasPrice",
                      args: []
                  };
              case "getBalance":
                  return {
                      method: "eth_getBalance",
                      args: [
                          getLowerCase(req.address),
                          req.blockTag
                      ]
                  };
              case "getTransactionCount":
                  return {
                      method: "eth_getTransactionCount",
                      args: [
                          getLowerCase(req.address),
                          req.blockTag
                      ]
                  };
              case "getCode":
                  return {
                      method: "eth_getCode",
                      args: [
                          getLowerCase(req.address),
                          req.blockTag
                      ]
                  };
              case "getStorage":
                  return {
                      method: "eth_getStorageAt",
                      args: [
                          getLowerCase(req.address),
                          "0x" + req.position.toString(16),
                          req.blockTag
                      ]
                  };
              case "broadcastTransaction":
                  return {
                      method: "eth_sendRawTransaction",
                      args: [
                          req.signedTransaction
                      ]
                  };
              case "getBlock":
                  if ("blockTag" in req) return {
                      method: "eth_getBlockByNumber",
                      args: [
                          req.blockTag,
                          !!req.includeTransactions
                      ]
                  };
                  else if ("blockHash" in req) return {
                      method: "eth_getBlockByHash",
                      args: [
                          req.blockHash,
                          !!req.includeTransactions
                      ]
                  };
                  break;
              case "getTransaction":
                  return {
                      method: "eth_getTransactionByHash",
                      args: [
                          req.hash
                      ]
                  };
              case "getTransactionReceipt":
                  return {
                      method: "eth_getTransactionReceipt",
                      args: [
                          req.hash
                      ]
                  };
              case "call":
                  return {
                      method: "eth_call",
                      args: [
                          this.getRpcTransaction(req.transaction),
                          req.blockTag
                      ]
                  };
              case "estimateGas":
                  return {
                      method: "eth_estimateGas",
                      args: [
                          this.getRpcTransaction(req.transaction)
                      ]
                  };
              case "getLogs":
                  if (req.filter && req.filter.address != null) {
                      if (Array.isArray(req.filter.address)) req.filter.address = req.filter.address.map(getLowerCase);
                      else req.filter.address = getLowerCase(req.filter.address);
                  }
                  return {
                      method: "eth_getLogs",
                      args: [
                          req.filter
                      ]
                  };
          }
          return null;
      }
      /**
       *  Returns an ethers-style Error for the given JSON-RPC error
       *  %%payload%%, coalescing the various strings and error shapes
       *  that different nodes return, coercing them into a machine-readable
       *  standardized error.
       */ getRpcError(payload, _error) {
          const { method  } = payload;
          const { error  } = _error;
          if (method === "eth_estimateGas" && error.message) {
              const msg = error.message;
              if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) return (0, _indexJs4.makeError)("insufficient funds", "INSUFFICIENT_FUNDS", {
                  transaction: payload.params[0],
                  info: {
                      payload,
                      error
                  }
              });
          }
          if (method === "eth_call" || method === "eth_estimateGas") {
              const result = spelunkData(error);
              const e = (0, _indexJs.AbiCoder).getBuiltinCallException(method === "eth_call" ? "call" : "estimateGas", payload.params[0], result ? result.data : null);
              e.info = {
                  error,
                  payload
              };
              return e;
          }
          // Only estimateGas and call can return arbitrary contract-defined text, so now we
          // we can process text safely.
          const message = JSON.stringify(spelunkMessage(error));
          if (typeof error.message === "string" && error.message.match(/user denied|ethers-user-denied/i)) {
              const actionMap = {
                  eth_sign: "signMessage",
                  personal_sign: "signMessage",
                  eth_signTypedData_v4: "signTypedData",
                  eth_signTransaction: "signTransaction",
                  eth_sendTransaction: "sendTransaction",
                  eth_requestAccounts: "requestAccess",
                  wallet_requestAccounts: "requestAccess"
              };
              return (0, _indexJs4.makeError)(`user rejected action`, "ACTION_REJECTED", {
                  action: actionMap[method] || "unknown",
                  reason: "rejected",
                  info: {
                      payload,
                      error
                  }
              });
          }
          if (method === "eth_sendRawTransaction" || method === "eth_sendTransaction") {
              const transaction = payload.params[0];
              if (message.match(/insufficient funds|base fee exceeds gas limit/i)) return (0, _indexJs4.makeError)("insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
                  transaction,
                  info: {
                      error
                  }
              });
              if (message.match(/nonce/i) && message.match(/too low/i)) return (0, _indexJs4.makeError)("nonce has already been used", "NONCE_EXPIRED", {
                  transaction,
                  info: {
                      error
                  }
              });
              // "replacement transaction underpriced"
              if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) return (0, _indexJs4.makeError)("replacement fee too low", "REPLACEMENT_UNDERPRICED", {
                  transaction,
                  info: {
                      error
                  }
              });
              if (message.match(/only replay-protected/i)) return (0, _indexJs4.makeError)("legacy pre-eip-155 transactions not supported", "UNSUPPORTED_OPERATION", {
                  operation: method,
                  info: {
                      transaction,
                      info: {
                          error
                      }
                  }
              });
          }
          if (message.match(/the method .* does not exist/i)) return (0, _indexJs4.makeError)("unsupported operation", "UNSUPPORTED_OPERATION", {
              operation: payload.method,
              info: {
                  error
              }
          });
          return (0, _indexJs4.makeError)("could not coalesce error", "UNKNOWN_ERROR", {
              error
          });
      }
      /**
       *  Requests the %%method%% with %%params%% via the JSON-RPC protocol
       *  over the underlying channel. This can be used to call methods
       *  on the backend that do not have a high-level API within the Provider
       *  API.
       *
       *  This method queues requests according to the batch constraints
       *  in the options, assigns the request a unique ID.
       *
       *  **Do NOT override** this method in sub-classes; instead
       *  override [[_send]] or force the options values in the
       *  call to the constructor to modify this method's behavior.
       */ send(method, params) {
          // @TODO: cache chainId?? purge on switch_networks
          const id = this.#nextId++;
          const promise = new Promise((resolve, reject)=>{
              this.#payloads.push({
                  resolve,
                  reject,
                  payload: {
                      method,
                      params,
                      id,
                      jsonrpc: "2.0"
                  }
              });
          });
          // If there is not a pending drainTimer, set one
          this.#scheduleDrain();
          return promise;
      }
      /**
       *  Resolves to the [[Signer]] account for  %%address%% managed by
       *  the client.
       *
       *  If the %%address%% is a number, it is used as an index in the
       *  the accounts from [[listAccounts]].
       *
       *  This can only be used on clients which manage accounts (such as
       *  Geth with imported account or MetaMask).
       *
       *  Throws if the account doesn't exist.
       */ async getSigner(address) {
          if (address == null) address = 0;
          const accountsPromise = this.send("eth_accounts", []);
          // Account index
          if (typeof address === "number") {
              const accounts = await accountsPromise;
              if (address >= accounts.length) throw new Error("no such account");
              return new JsonRpcSigner(this, accounts[address]);
          }
          const { accounts  } = await (0, _indexJs4.resolveProperties)({
              network: this.getNetwork(),
              accounts: accountsPromise
          });
          // Account address
          address = (0, _indexJs1.getAddress)(address);
          for (const account of accounts){
              if ((0, _indexJs1.getAddress)(account) === address) return new JsonRpcSigner(this, address);
          }
          throw new Error("invalid account");
      }
      async listAccounts() {
          const accounts = await this.send("eth_accounts", []);
          return accounts.map((a)=>new JsonRpcSigner(this, a));
      }
  }
  class JsonRpcApiPollingProvider extends JsonRpcApiProvider {
      #pollingInterval;
      constructor(network, options){
          super(network, options);
          this.#pollingInterval = 4000;
      }
      _getSubscriber(sub) {
          const subscriber = super._getSubscriber(sub);
          if (isPollable(subscriber)) subscriber.pollingInterval = this.#pollingInterval;
          return subscriber;
      }
      /**
       *  The polling interval (default: 4000 ms)
       */ get pollingInterval() {
          return this.#pollingInterval;
      }
      set pollingInterval(value) {
          if (!Number.isInteger(value) || value < 0) throw new Error("invalid interval");
          this.#pollingInterval = value;
          this._forEachSubscriber((sub)=>{
              if (isPollable(sub)) sub.pollingInterval = this.#pollingInterval;
          });
      }
  }
  class JsonRpcProvider extends JsonRpcApiPollingProvider {
      #connect;
      constructor(url, network, options){
          if (url == null) url = "http://localhost:8545";
          super(network, options);
          if (typeof url === "string") this.#connect = new (0, _indexJs4.FetchRequest)(url);
          else this.#connect = url.clone();
      }
      _getConnection() {
          return this.#connect.clone();
      }
      async send(method, params) {
          // All requests are over HTTP, so we can just start handling requests
          // We do this here rather than the constructor so that we don't send any
          // requests to the network (i.e. eth_chainId) until we absolutely have to.
          await this._start();
          return await super.send(method, params);
      }
      async _send(payload) {
          // Configure a POST connection for the requested method
          const request = this._getConnection();
          request.body = JSON.stringify(payload);
          request.setHeader("content-type", "application/json");
          const response = await request.send();
          response.assertOk();
          let resp = response.bodyJson;
          if (!Array.isArray(resp)) resp = [
              resp
          ];
          return resp;
      }
  }
  function spelunkData(value) {
      if (value == null) return null;
      // These *are* the droids we're looking for.
      if (typeof value.message === "string" && value.message.match("reverted") && (0, _indexJs4.isHexString)(value.data)) return {
          message: value.message,
          data: value.data
      };
      // Spelunk further...
      if (typeof value === "object") {
          for(const key in value){
              const result = spelunkData(value[key]);
              if (result) return result;
          }
          return null;
      }
      // Might be a JSON string we can further descend...
      if (typeof value === "string") try {
          return spelunkData(JSON.parse(value));
      } catch (error) {}
      return null;
  }
  function _spelunkMessage(value, result) {
      if (value == null) return;
      // These *are* the droids we're looking for.
      if (typeof value.message === "string") result.push(value.message);
      // Spelunk further...
      if (typeof value === "object") for(const key in value)_spelunkMessage(value[key], result);
      // Might be a JSON string we can further descend...
      if (typeof value === "string") try {
          return _spelunkMessage(JSON.parse(value), result);
      } catch (error) {}
  }
  function spelunkMessage(value) {
      const result = [];
      _spelunkMessage(value, result);
      return result;
  }
  
  },{"../abi/index.js":"3U93s","../address/index.js":"cuJ87","../hash/index.js":"bTSS2","../transaction/index.js":"cOUq6","../utils/index.js":"jGhd9","./abstract-provider.js":"20UeU","./abstract-signer.js":"8n6Nd","./network.js":"bE61r","./subscriber-filterid.js":"3RMbR","./subscriber-polling.js":"2iveV","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"3RMbR":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Some backends support subscribing to events using a Filter ID.
   *
   *  When subscribing with this technique, the node issues a unique
   *  //Filter ID//. At this point the node dedicates resources to
   *  the filter, so that periodic calls to follow up on the //Filter ID//
   *  will receive any events since the last call.
   *
   *  @_docloc: api/providers/abstract-provider
   */ parcelHelpers.export(exports, "FilterIdSubscriber", ()=>FilterIdSubscriber);
  /**
   *  A **FilterIdSubscriber** for receiving contract events.
   *
   *  @_docloc: api/providers/abstract-provider
   */ parcelHelpers.export(exports, "FilterIdEventSubscriber", ()=>FilterIdEventSubscriber);
  /**
   *  A **FilterIdSubscriber** for receiving pending transactions events.
   *
   *  @_docloc: api/providers/abstract-provider
   */ parcelHelpers.export(exports, "FilterIdPendingSubscriber", ()=>FilterIdPendingSubscriber);
  var _indexJs = require("../utils/index.js");
  var _subscriberPollingJs = require("./subscriber-polling.js");
  function copy(obj) {
      return JSON.parse(JSON.stringify(obj));
  }
  class FilterIdSubscriber {
      #provider;
      #filterIdPromise;
      #poller;
      #running;
      #network;
      #hault;
      constructor(provider){
          this.#provider = provider;
          this.#filterIdPromise = null;
          this.#poller = this.#poll.bind(this);
          this.#running = false;
          this.#network = null;
          this.#hault = false;
      }
      _subscribe(provider) {
          throw new Error("subclasses must override this");
      }
      _emitResults(provider, result) {
          throw new Error("subclasses must override this");
      }
      _recover(provider) {
          throw new Error("subclasses must override this");
      }
      async #poll(blockNumber) {
          try {
              // Subscribe if necessary
              if (this.#filterIdPromise == null) this.#filterIdPromise = this._subscribe(this.#provider);
              // Get the Filter ID
              let filterId = null;
              try {
                  filterId = await this.#filterIdPromise;
              } catch (error) {
                  if (!(0, _indexJs.isError)(error, "UNSUPPORTED_OPERATION") || error.operation !== "eth_newFilter") throw error;
              }
              // The backend does not support Filter ID; downgrade to
              // polling
              if (filterId == null) {
                  this.#filterIdPromise = null;
                  this.#provider._recoverSubscriber(this, this._recover(this.#provider));
                  return;
              }
              const network = await this.#provider.getNetwork();
              if (!this.#network) this.#network = network;
              if (this.#network.chainId !== network.chainId) throw new Error("chaid changed");
              if (this.#hault) return;
              const result = await this.#provider.send("eth_getFilterChanges", [
                  filterId
              ]);
              await this._emitResults(this.#provider, result);
          } catch (error) {
              console.log("@TODO", error);
          }
          this.#provider.once("block", this.#poller);
      }
      #teardown() {
          const filterIdPromise = this.#filterIdPromise;
          if (filterIdPromise) {
              this.#filterIdPromise = null;
              filterIdPromise.then((filterId)=>{
                  this.#provider.send("eth_uninstallFilter", [
                      filterId
                  ]);
              });
          }
      }
      start() {
          if (this.#running) return;
          this.#running = true;
          this.#poll(-2);
      }
      stop() {
          if (!this.#running) return;
          this.#running = false;
          this.#hault = true;
          this.#teardown();
          this.#provider.off("block", this.#poller);
      }
      pause(dropWhilePaused) {
          if (dropWhilePaused) this.#teardown();
          this.#provider.off("block", this.#poller);
      }
      resume() {
          this.start();
      }
  }
  class FilterIdEventSubscriber extends FilterIdSubscriber {
      #event;
      constructor(provider, filter){
          super(provider);
          this.#event = copy(filter);
      }
      _recover(provider) {
          return new (0, _subscriberPollingJs.PollingEventSubscriber)(provider, this.#event);
      }
      async _subscribe(provider) {
          const filterId = await provider.send("eth_newFilter", [
              this.#event
          ]);
          return filterId;
      }
      async _emitResults(provider, results) {
          for (const result of results)provider.emit(this.#event, provider._wrapLog(result, provider._network));
      }
  }
  class FilterIdPendingSubscriber extends FilterIdSubscriber {
      async _subscribe(provider) {
          return await provider.send("eth_newPendingTransactionFilter", []);
      }
      async _emitResults(provider, results) {
          for (const result of results)provider.emit("pending", result);
      }
  }
  
  },{"../utils/index.js":"jGhd9","./subscriber-polling.js":"2iveV","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"l2S3x":[function(require,module,exports) {
  /**
   *  About Alchemy
   *
   *  @_subsection: api/providers/thirdparty:Alchemy  [providers-alchemy]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  The **AlchemyProvider** connects to the [[link-alchemy]]
   *  JSON-RPC end-points.
   *
   *  By default, a highly-throttled API key is used, which is
   *  appropriate for quick prototypes and simple scripts. To
   *  gain access to an increased rate-limit, it is highly
   *  recommended to [sign up here](link-alchemy-signup).
   *
   *  @_docloc: api/providers/thirdparty
   */ parcelHelpers.export(exports, "AlchemyProvider", ()=>AlchemyProvider);
  var _indexJs = require("../utils/index.js");
  var _communityJs = require("./community.js");
  var _networkJs = require("./network.js");
  var _providerJsonrpcJs = require("./provider-jsonrpc.js");
  const defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
  function getHost(name) {
      switch(name){
          case "mainnet":
              return "eth-mainnet.alchemyapi.io";
          case "goerli":
              return "eth-goerli.g.alchemy.com";
          case "sepolia":
              return "eth-sepolia.g.alchemy.com";
          case "arbitrum":
              return "arb-mainnet.g.alchemy.com";
          case "arbitrum-goerli":
              return "arb-goerli.g.alchemy.com";
          case "matic":
              return "polygon-mainnet.g.alchemy.com";
          case "matic-mumbai":
              return "polygon-mumbai.g.alchemy.com";
          case "optimism":
              return "opt-mainnet.g.alchemy.com";
          case "optimism-goerli":
              return "opt-goerli.g.alchemy.com";
      }
      (0, _indexJs.assertArgument)(false, "unsupported network", "network", name);
  }
  class AlchemyProvider extends (0, _providerJsonrpcJs.JsonRpcProvider) {
      apiKey;
      constructor(_network, apiKey){
          if (_network == null) _network = "mainnet";
          const network = (0, _networkJs.Network).from(_network);
          if (apiKey == null) apiKey = defaultApiKey;
          const request = AlchemyProvider.getRequest(network, apiKey);
          super(request, network, {
              staticNetwork: network
          });
          (0, _indexJs.defineProperties)(this, {
              apiKey
          });
      }
      _getProvider(chainId) {
          try {
              return new AlchemyProvider(chainId, this.apiKey);
          } catch (error) {}
          return super._getProvider(chainId);
      }
      async _perform(req) {
          // https://docs.alchemy.com/reference/trace-transaction
          if (req.method === "getTransactionResult") {
              const { trace , tx  } = await (0, _indexJs.resolveProperties)({
                  trace: this.send("trace_transaction", [
                      req.hash
                  ]),
                  tx: this.getTransaction(req.hash)
              });
              if (trace == null || tx == null) return null;
              let data;
              let error = false;
              try {
                  data = trace[0].result.output;
                  error = trace[0].error === "Reverted";
              } catch (error) {}
              if (data) {
                  (0, _indexJs.assert)(!error, "an error occurred during transaction executions", "CALL_EXCEPTION", {
                      action: "getTransactionResult",
                      data,
                      reason: null,
                      transaction: tx,
                      invocation: null,
                      revert: null // @TODO
                  });
                  return data;
              }
              (0, _indexJs.assert)(false, "could not parse trace result", "BAD_DATA", {
                  value: trace
              });
          }
          return await super._perform(req);
      }
      isCommunityResource() {
          return this.apiKey === defaultApiKey;
      }
      static getRequest(network, apiKey) {
          if (apiKey == null) apiKey = defaultApiKey;
          const request = new (0, _indexJs.FetchRequest)(`https:/\/${getHost(network.name)}/v2/${apiKey}`);
          request.allowGzip = true;
          if (apiKey === defaultApiKey) request.retryFunc = async (request, response, attempt)=>{
              (0, _communityJs.showThrottleMessage)("alchemy");
              return true;
          };
          return request;
      }
  }
  
  },{"../utils/index.js":"jGhd9","./community.js":"2jZ1F","./network.js":"bE61r","./provider-jsonrpc.js":"8D9UU","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"58LHx":[function(require,module,exports) {
  /**
   *  About Cloudflare
   *
   *  @_subsection: api/providers/thirdparty:Cloudflare  [providers-cloudflare]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  About Cloudflare...
   */ parcelHelpers.export(exports, "CloudflareProvider", ()=>CloudflareProvider);
  var _indexJs = require("../utils/index.js");
  var _networkJs = require("./network.js");
  var _providerJsonrpcJs = require("./provider-jsonrpc.js");
  class CloudflareProvider extends (0, _providerJsonrpcJs.JsonRpcProvider) {
      constructor(_network){
          if (_network == null) _network = "mainnet";
          const network = (0, _networkJs.Network).from(_network);
          (0, _indexJs.assertArgument)(network.name === "mainnet", "unsupported network", "network", _network);
          super("https://cloudflare-eth.com/", network, {
              staticNetwork: network
          });
      }
  }
  
  },{"../utils/index.js":"jGhd9","./network.js":"bE61r","./provider-jsonrpc.js":"8D9UU","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"3mCoe":[function(require,module,exports) {
  /**
   *  [[link-etherscan]] provides a third-party service for connecting to
   *  various blockchains over a combination of JSON-RPC and custom API
   *  endpoints.
   *
   *  **Supported Networks**
   *
   *  - Ethereum Mainnet (``mainnet``)
   *  - Goerli Testnet (``goerli``)
   *  - Sepolia Testnet (``sepolia``)
   *  - Arbitrum (``arbitrum``)
   *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)
   *  - Optimism (``optimism``)
   *  - Optimism Goerli Testnet (``optimism-goerli``)
   *  - Polygon (``matic``)
   *  - Polygon Mumbai Testnet (``matic-mumbai``)
   *
   *  @_subsection api/providers/thirdparty:Etherscan  [providers-etherscan]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  A Network can include an **EtherscanPlugin** to provide
   *  a custom base URL.
   *
   *  @_docloc: api/providers/thirdparty:Etherscan
   */ parcelHelpers.export(exports, "EtherscanPlugin", ()=>EtherscanPlugin);
  /**
   *  The **EtherscanBaseProvider** is the super-class of
   *  [[EtherscanProvider]], which should generally be used instead.
   *
   *  Since the **EtherscanProvider** includes additional code for
   *  [[Contract]] access, in //rare cases// that contracts are not
   *  used, this class can reduce code size.
   *
   *  @_docloc: api/providers/thirdparty:Etherscan
   */ parcelHelpers.export(exports, "EtherscanProvider", ()=>EtherscanProvider);
  var _indexJs = require("../abi/index.js");
  var _indexJs1 = require("../contract/index.js");
  var _indexJs2 = require("../transaction/index.js");
  var _indexJs3 = require("../utils/index.js");
  var _abstractProviderJs = require("./abstract-provider.js");
  var _networkJs = require("./network.js");
  var _pluginsNetworkJs = require("./plugins-network.js");
  var _communityJs = require("./community.js");
  const THROTTLE = 2000;
  function isPromise(value) {
      return value && typeof value.then === "function";
  }
  const EtherscanPluginId = "org.ethers.plugins.provider.Etherscan";
  class EtherscanPlugin extends (0, _pluginsNetworkJs.NetworkPlugin) {
      /**
       *  The Etherscan API base URL.
       */ baseUrl;
      /**
       *  Creates a new **EtherscanProvider** which will use
       *  %%baseUrl%%.
       */ constructor(baseUrl){
          super(EtherscanPluginId);
          (0, _indexJs3.defineProperties)(this, {
              baseUrl
          });
      }
      clone() {
          return new EtherscanPlugin(this.baseUrl);
      }
  }
  let nextId = 1;
  class EtherscanProvider extends (0, _abstractProviderJs.AbstractProvider) {
      /**
       *  The connected network.
       */ network;
      /**
       *  The API key or null if using the community provided bandwidth.
       */ apiKey;
      #plugin;
      /**
       *  Creates a new **EtherscanBaseProvider**.
       */ constructor(_network, _apiKey){
          const apiKey = _apiKey != null ? _apiKey : null;
          super();
          const network = (0, _networkJs.Network).from(_network);
          this.#plugin = network.getPlugin(EtherscanPluginId);
          (0, _indexJs3.defineProperties)(this, {
              apiKey,
              network
          });
          // Test that the network is supported by Etherscan
          this.getBaseUrl();
      }
      /**
       *  Returns the base URL.
       *
       *  If an [[EtherscanPlugin]] is configured on the
       *  [[EtherscanBaseProvider_network]], returns the plugin's
       *  baseUrl.
       */ getBaseUrl() {
          if (this.#plugin) return this.#plugin.baseUrl;
          switch(this.network.name){
              case "mainnet":
                  return "https://api.etherscan.io";
              case "goerli":
                  return "https://api-goerli.etherscan.io";
              case "sepolia":
                  return "https://api-sepolia.etherscan.io";
              case "arbitrum":
                  return "https://api.arbiscan.io";
              case "arbitrum-goerli":
                  return "https://api-goerli.arbiscan.io";
              case "matic":
                  return "https://api.polygonscan.com";
              case "matic-mumbai":
                  return "https://api-testnet.polygonscan.com";
              case "optimism":
                  return "https://api-optimistic.etherscan.io";
              case "optimism-goerli":
                  return "https://api-goerli-optimistic.etherscan.io";
              default:
          }
          (0, _indexJs3.assertArgument)(false, "unsupported network", "network", this.network);
      }
      /**
       *  Returns the URL for the %%module%% and %%params%%.
       */ getUrl(module, params) {
          const query = Object.keys(params).reduce((accum, key)=>{
              const value = params[key];
              if (value != null) accum += `&${key}=${value}`;
              return accum;
          }, "");
          const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : "";
          return `${this.getBaseUrl()}/api?module=${module}${query}${apiKey}`;
      }
      /**
       *  Returns the URL for using POST requests.
       */ getPostUrl() {
          return `${this.getBaseUrl()}/api`;
      }
      /**
       *  Returns the parameters for using POST requests.
       */ getPostData(module, params) {
          params.module = module;
          params.apikey = this.apiKey;
          return params;
      }
      async detectNetwork() {
          return this.network;
      }
      /**
       *  Resolves to the result of calling %%module%% with %%params%%.
       *
       *  If %%post%%, the request is made as a POST request.
       */ async fetch(module, params, post) {
          const id = nextId++;
          const url = post ? this.getPostUrl() : this.getUrl(module, params);
          const payload = post ? this.getPostData(module, params) : null;
          this.emit("debug", {
              action: "sendRequest",
              id,
              url,
              payload: payload
          });
          const request = new (0, _indexJs3.FetchRequest)(url);
          request.setThrottleParams({
              slotInterval: 1000
          });
          request.retryFunc = (req, resp, attempt)=>{
              if (this.isCommunityResource()) (0, _communityJs.showThrottleMessage)("Etherscan");
              return Promise.resolve(true);
          };
          request.processFunc = async (request, response)=>{
              const result = response.hasBody() ? JSON.parse((0, _indexJs3.toUtf8String)(response.body)) : {};
              const throttle = (typeof result.result === "string" ? result.result : "").toLowerCase().indexOf("rate limit") >= 0;
              if (module === "proxy") // This JSON response indicates we are being throttled
              {
                  if (result && result.status == 0 && result.message == "NOTOK" && throttle) {
                      this.emit("debug", {
                          action: "receiveError",
                          id,
                          reason: "proxy-NOTOK",
                          error: result
                      });
                      response.throwThrottleError(result.result, THROTTLE);
                  }
              } else if (throttle) {
                  this.emit("debug", {
                      action: "receiveError",
                      id,
                      reason: "null result",
                      error: result.result
                  });
                  response.throwThrottleError(result.result, THROTTLE);
              }
              return response;
          };
          if (payload) {
              request.setHeader("content-type", "application/x-www-form-urlencoded; charset=UTF-8");
              request.body = Object.keys(payload).map((k)=>`${k}=${payload[k]}`).join("&");
          }
          const response = await request.send();
          try {
              response.assertOk();
          } catch (error) {
              this.emit("debug", {
                  action: "receiveError",
                  id,
                  error,
                  reason: "assertOk"
              });
              (0, _indexJs3.assert)(false, "response error", "SERVER_ERROR", {
                  request,
                  response
              });
          }
          if (!response.hasBody()) {
              this.emit("debug", {
                  action: "receiveError",
                  id,
                  error: "missing body",
                  reason: "null body"
              });
              (0, _indexJs3.assert)(false, "missing response", "SERVER_ERROR", {
                  request,
                  response
              });
          }
          const result = JSON.parse((0, _indexJs3.toUtf8String)(response.body));
          if (module === "proxy") {
              if (result.jsonrpc != "2.0") {
                  this.emit("debug", {
                      action: "receiveError",
                      id,
                      result,
                      reason: "invalid JSON-RPC"
                  });
                  (0, _indexJs3.assert)(false, "invalid JSON-RPC response (missing jsonrpc='2.0')", "SERVER_ERROR", {
                      request,
                      response,
                      info: {
                          result
                      }
                  });
              }
              if (result.error) {
                  this.emit("debug", {
                      action: "receiveError",
                      id,
                      result,
                      reason: "JSON-RPC error"
                  });
                  (0, _indexJs3.assert)(false, "error response", "SERVER_ERROR", {
                      request,
                      response,
                      info: {
                          result
                      }
                  });
              }
              this.emit("debug", {
                  action: "receiveRequest",
                  id,
                  result
              });
              return result.result;
          } else {
              // getLogs, getHistory have weird success responses
              if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
                  this.emit("debug", {
                      action: "receiveRequest",
                      id,
                      result
                  });
                  return result.result;
              }
              if (result.status != 1 || typeof result.message === "string" && !result.message.match(/^OK/)) {
                  this.emit("debug", {
                      action: "receiveError",
                      id,
                      result
                  });
                  (0, _indexJs3.assert)(false, "error response", "SERVER_ERROR", {
                      request,
                      response,
                      info: {
                          result
                      }
                  });
              }
              this.emit("debug", {
                  action: "receiveRequest",
                  id,
                  result
              });
              return result.result;
          }
      }
      /**
       *  Returns %%transaction%% normalized for the Etherscan API.
       */ _getTransactionPostData(transaction) {
          const result = {};
          for(let key in transaction){
              if (transaction[key] == null) continue;
              let value = transaction[key];
              if (key === "type" && value === 0) continue;
              // Quantity-types require no leading zero, unless 0
              if (({
                  type: true,
                  gasLimit: true,
                  gasPrice: true,
                  maxFeePerGs: true,
                  maxPriorityFeePerGas: true,
                  nonce: true,
                  value: true
              })[key]) value = (0, _indexJs3.toQuantity)(value);
              else if (key === "accessList") value = "[" + (0, _indexJs2.accessListify)(value).map((set)=>{
                  return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
              }).join(",") + "]";
              else value = (0, _indexJs3.hexlify)(value);
              result[key] = value;
          }
          return result;
      }
      /**
       *  Throws the normalized Etherscan error.
       */ _checkError(req, error, transaction) {
          // Pull any message out if, possible
          let message = "";
          if ((0, _indexJs3.isError)(error, "SERVER_ERROR")) {
              // Check for an error emitted by a proxy call
              try {
                  message = error.info.result.error.message;
              } catch (e) {}
              if (!message) try {
                  message = error.info.message;
              } catch (e) {}
          }
          if (req.method === "estimateGas") {
              if (!message.match(/revert/i) && message.match(/insufficient funds/i)) (0, _indexJs3.assert)(false, "insufficient funds", "INSUFFICIENT_FUNDS", {
                  transaction: req.transaction
              });
          }
          if (req.method === "call" || req.method === "estimateGas") {
              if (message.match(/execution reverted/i)) {
                  let data = "";
                  try {
                      data = error.info.result.error.data;
                  } catch (error) {}
                  const e = (0, _indexJs.AbiCoder).getBuiltinCallException(req.method, req.transaction, data);
                  e.info = {
                      request: req,
                      error
                  };
                  throw e;
              }
          }
          if (message) {
              if (req.method === "broadcastTransaction") {
                  const transaction = (0, _indexJs2.Transaction).from(req.signedTransaction);
                  if (message.match(/replacement/i) && message.match(/underpriced/i)) (0, _indexJs3.assert)(false, "replacement fee too low", "REPLACEMENT_UNDERPRICED", {
                      transaction
                  });
                  if (message.match(/insufficient funds/)) (0, _indexJs3.assert)(false, "insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
                      transaction
                  });
                  if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) (0, _indexJs3.assert)(false, "nonce has already been used", "NONCE_EXPIRED", {
                      transaction
                  });
              }
          }
          // Something we could not process
          throw error;
      }
      async _detectNetwork() {
          return this.network;
      }
      async _perform(req) {
          switch(req.method){
              case "chainId":
                  return this.network.chainId;
              case "getBlockNumber":
                  return this.fetch("proxy", {
                      action: "eth_blockNumber"
                  });
              case "getGasPrice":
                  return this.fetch("proxy", {
                      action: "eth_gasPrice"
                  });
              case "getBalance":
                  // Returns base-10 result
                  return this.fetch("account", {
                      action: "balance",
                      address: req.address,
                      tag: req.blockTag
                  });
              case "getTransactionCount":
                  return this.fetch("proxy", {
                      action: "eth_getTransactionCount",
                      address: req.address,
                      tag: req.blockTag
                  });
              case "getCode":
                  return this.fetch("proxy", {
                      action: "eth_getCode",
                      address: req.address,
                      tag: req.blockTag
                  });
              case "getStorage":
                  return this.fetch("proxy", {
                      action: "eth_getStorageAt",
                      address: req.address,
                      position: req.position,
                      tag: req.blockTag
                  });
              case "broadcastTransaction":
                  return this.fetch("proxy", {
                      action: "eth_sendRawTransaction",
                      hex: req.signedTransaction
                  }, true).catch((error)=>{
                      return this._checkError(req, error, req.signedTransaction);
                  });
              case "getBlock":
                  if ("blockTag" in req) return this.fetch("proxy", {
                      action: "eth_getBlockByNumber",
                      tag: req.blockTag,
                      boolean: req.includeTransactions ? "true" : "false"
                  });
                  (0, _indexJs3.assert)(false, "getBlock by blockHash not supported by Etherscan", "UNSUPPORTED_OPERATION", {
                      operation: "getBlock(blockHash)"
                  });
              case "getTransaction":
                  return this.fetch("proxy", {
                      action: "eth_getTransactionByHash",
                      txhash: req.hash
                  });
              case "getTransactionReceipt":
                  return this.fetch("proxy", {
                      action: "eth_getTransactionReceipt",
                      txhash: req.hash
                  });
              case "call":
                  {
                      if (req.blockTag !== "latest") throw new Error("EtherscanProvider does not support blockTag for call");
                      const postData = this._getTransactionPostData(req.transaction);
                      postData.module = "proxy";
                      postData.action = "eth_call";
                      try {
                          return await this.fetch("proxy", postData, true);
                      } catch (error) {
                          return this._checkError(req, error, req.transaction);
                      }
                  }
              case "estimateGas":
                  {
                      const postData = this._getTransactionPostData(req.transaction);
                      postData.module = "proxy";
                      postData.action = "eth_estimateGas";
                      try {
                          return await this.fetch("proxy", postData, true);
                      } catch (error) {
                          return this._checkError(req, error, req.transaction);
                      }
                  }
              /*
                          case "getLogs": {
                              // Needs to complain if more than one address is passed in
                              const args: Record<string, any> = { action: "getLogs" }
              
                              if (params.filter.fromBlock) {
                                  args.fromBlock = checkLogTag(params.filter.fromBlock);
                              }
              
                              if (params.filter.toBlock) {
                                  args.toBlock = checkLogTag(params.filter.toBlock);
                              }
              
                              if (params.filter.address) {
                                  args.address = params.filter.address;
                              }
              
                              // @TODO: We can handle slightly more complicated logs using the logs API
                              if (params.filter.topics && params.filter.topics.length > 0) {
                                  if (params.filter.topics.length > 1) {
                                      logger.throwError("unsupported topic count", Logger.Errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });
                                  }
                                  if (params.filter.topics.length === 1) {
                                      const topic0 = params.filter.topics[0];
                                      if (typeof(topic0) !== "string" || topic0.length !== 66) {
                                          logger.throwError("unsupported topic format", Logger.Errors.UNSUPPORTED_OPERATION, { topic0: topic0 });
                                      }
                                      args.topic0 = topic0;
                                  }
                              }
              
                              const logs: Array<any> = await this.fetch("logs", args);
              
                              // Cache txHash => blockHash
                              let blocks: { [tag: string]: string } = {};
              
                              // Add any missing blockHash to the logs
                              for (let i = 0; i < logs.length; i++) {
                                  const log = logs[i];
                                  if (log.blockHash != null) { continue; }
                                  if (blocks[log.blockNumber] == null) {
                                      const block = await this.getBlock(log.blockNumber);
                                      if (block) {
                                          blocks[log.blockNumber] = block.hash;
                                      }
                                  }
              
                                  log.blockHash = blocks[log.blockNumber];
                              }
              
                              return logs;
                          }
              */ default:
                  break;
          }
          return super._perform(req);
      }
      async getNetwork() {
          return this.network;
      }
      /**
       *  Resolves to the current price of ether.
       *
       *  This returns ``0`` on any network other than ``mainnet``.
       */ async getEtherPrice() {
          if (this.network.name !== "mainnet") return 0.0;
          return parseFloat((await this.fetch("stats", {
              action: "ethprice"
          })).ethusd);
      }
      /**
       *  Resolves to a [Contract]] for %%address%%, using the
       *  Etherscan API to retreive the Contract ABI.
       */ async getContract(_address) {
          let address = this._getAddress(_address);
          if (isPromise(address)) address = await address;
          try {
              const resp = await this.fetch("contract", {
                  action: "getabi",
                  address
              });
              const abi = JSON.parse(resp);
              return new (0, _indexJs1.Contract)(address, abi, this);
          } catch (error) {
              return null;
          }
      }
      isCommunityResource() {
          return this.apiKey == null;
      }
  }
  
  },{"../abi/index.js":"3U93s","../contract/index.js":"3yTtn","../transaction/index.js":"cOUq6","../utils/index.js":"jGhd9","./abstract-provider.js":"20UeU","./network.js":"bE61r","./plugins-network.js":"dHYWi","./community.js":"2jZ1F","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"6N06D":[function(require,module,exports) {
  /**
   *  [[link-infura]] provides a third-party service for connecting to
   *  various blockchains over JSON-RPC.
   *
   *  **Supported Networks**
   *
   *  - Ethereum Mainnet (``mainnet``)
   *  - Goerli Testnet (``goerli``)
   *  - Sepolia Testnet (``sepolia``)
   *  - Arbitrum (``arbitrum``)
   *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)
   *  - Optimism (``optimism``)
   *  - Optimism Goerli Testnet (``optimism-goerli``)
   *  - Polygon (``matic``)
   *  - Polygon Mumbai Testnet (``matic-mumbai``)
   *
   *  @_subsection: api/providers/thirdparty:INFURA  [providers-infura]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  The **InfuraWebSocketProvider** connects to the [[link-infura]]
   *  WebSocket end-points.
   *
   *  By default, a highly-throttled API key is used, which is
   *  appropriate for quick prototypes and simple scripts. To
   *  gain access to an increased rate-limit, it is highly
   *  recommended to [sign up here](link-infura-signup).
   */ parcelHelpers.export(exports, "InfuraWebSocketProvider", ()=>InfuraWebSocketProvider);
  /**
   *  The **InfuraProvider** connects to the [[link-infura]]
   *  JSON-RPC end-points.
   *
   *  By default, a highly-throttled API key is used, which is
   *  appropriate for quick prototypes and simple scripts. To
   *  gain access to an increased rate-limit, it is highly
   *  recommended to [sign up here](link-infura-signup).
   */ parcelHelpers.export(exports, "InfuraProvider", ()=>InfuraProvider);
  var _indexJs = require("../utils/index.js");
  var _communityJs = require("./community.js");
  var _networkJs = require("./network.js");
  var _providerJsonrpcJs = require("./provider-jsonrpc.js");
  var _providerWebsocketJs = require("./provider-websocket.js");
  const defaultProjectId = "84842078b09946638c03157f83405213";
  function getHost(name) {
      switch(name){
          case "mainnet":
              return "mainnet.infura.io";
          case "goerli":
              return "goerli.infura.io";
          case "sepolia":
              return "sepolia.infura.io";
          case "arbitrum":
              return "arbitrum-mainnet.infura.io";
          case "arbitrum-goerli":
              return "arbitrum-goerli.infura.io";
          case "matic":
              return "polygon-mainnet.infura.io";
          case "matic-mumbai":
              return "polygon-mumbai.infura.io";
          case "optimism":
              return "optimism-mainnet.infura.io";
          case "optimism-goerli":
              return "optimism-goerli.infura.io";
      }
      (0, _indexJs.assertArgument)(false, "unsupported network", "network", name);
  }
  class InfuraWebSocketProvider extends (0, _providerWebsocketJs.WebSocketProvider) {
      /**
       *  The Project ID for the INFURA connection.
       */ projectId;
      /**
       *  The Project Secret.
       *
       *  If null, no authenticated requests are made. This should not
       *  be used outside of private contexts.
       */ projectSecret;
      /**
       *  Creates a new **InfuraWebSocketProvider**.
       */ constructor(network, projectId){
          const provider = new InfuraProvider(network, projectId);
          const req = provider._getConnection();
          (0, _indexJs.assert)(!req.credentials, "INFURA WebSocket project secrets unsupported", "UNSUPPORTED_OPERATION", {
              operation: "InfuraProvider.getWebSocketProvider()"
          });
          const url = req.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
          super(url, network);
          (0, _indexJs.defineProperties)(this, {
              projectId: provider.projectId,
              projectSecret: provider.projectSecret
          });
      }
      isCommunityResource() {
          return this.projectId === defaultProjectId;
      }
  }
  class InfuraProvider extends (0, _providerJsonrpcJs.JsonRpcProvider) {
      /**
       *  The Project ID for the INFURA connection.
       */ projectId;
      /**
       *  The Project Secret.
       *
       *  If null, no authenticated requests are made. This should not
       *  be used outside of private contexts.
       */ projectSecret;
      /**
       *  Creates a new **InfuraProvider**.
       */ constructor(_network, projectId, projectSecret){
          if (_network == null) _network = "mainnet";
          const network = (0, _networkJs.Network).from(_network);
          if (projectId == null) projectId = defaultProjectId;
          if (projectSecret == null) projectSecret = null;
          const request = InfuraProvider.getRequest(network, projectId, projectSecret);
          super(request, network, {
              staticNetwork: network
          });
          (0, _indexJs.defineProperties)(this, {
              projectId,
              projectSecret
          });
      }
      _getProvider(chainId) {
          try {
              return new InfuraProvider(chainId, this.projectId, this.projectSecret);
          } catch (error) {}
          return super._getProvider(chainId);
      }
      isCommunityResource() {
          return this.projectId === defaultProjectId;
      }
      /**
       *  Creates a new **InfuraWebSocketProvider**.
       */ static getWebSocketProvider(network, projectId) {
          return new InfuraWebSocketProvider(network, projectId);
      }
      /**
       *  Returns a prepared request for connecting to %%network%%
       *  with %%projectId%% and %%projectSecret%%.
       */ static getRequest(network, projectId, projectSecret) {
          if (projectId == null) projectId = defaultProjectId;
          if (projectSecret == null) projectSecret = null;
          const request = new (0, _indexJs.FetchRequest)(`https:/\/${getHost(network.name)}/v3/${projectId}`);
          request.allowGzip = true;
          if (projectSecret) request.setCredentials("", projectSecret);
          if (projectId === defaultProjectId) request.retryFunc = async (request, response, attempt)=>{
              (0, _communityJs.showThrottleMessage)("InfuraProvider");
              return true;
          };
          return request;
      }
  }
  
  },{"../utils/index.js":"jGhd9","./community.js":"2jZ1F","./network.js":"bE61r","./provider-jsonrpc.js":"8D9UU","./provider-websocket.js":"8V8wf","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"8V8wf":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "WebSocketProvider", ()=>WebSocketProvider);
  var _wsJs = require("./ws.js"); /*-browser*/ 
  var _providerSocketJs = require("./provider-socket.js");
  class WebSocketProvider extends (0, _providerSocketJs.SocketProvider) {
      #connect;
      #websocket;
      get websocket() {
          if (this.#websocket == null) throw new Error("websocket closed");
          return this.#websocket;
      }
      constructor(url, network){
          super(network);
          if (typeof url === "string") {
              this.#connect = ()=>{
                  return new (0, _wsJs.WebSocket)(url);
              };
              this.#websocket = this.#connect();
          } else if (typeof url === "function") {
              this.#connect = url;
              this.#websocket = url();
          } else {
              this.#connect = null;
              this.#websocket = url;
          }
          this.websocket.onopen = async ()=>{
              try {
                  await this._start();
                  this.resume();
              } catch (error) {
                  console.log("failed to start WebsocketProvider", error);
              // @TODO: now what? Attempt reconnect?
              }
          };
          this.websocket.onmessage = (message)=>{
              this._processMessage(message.data);
          };
      /*
                  this.websocket.onclose = (event) => {
                      // @TODO: What event.code should we reconnect on?
                      const reconnect = false;
                      if (reconnect) {
                          this.pause(true);
                          if (this.#connect) {
                              this.#websocket = this.#connect();
                              this.#websocket.onopen = ...
                              // @TODO: this requires the super class to rebroadcast; move it there
                          }
                          this._reconnect();
                      }
                  };
          */ }
      async _write(message) {
          this.websocket.send(message);
      }
      async destroy() {
          if (this.#websocket != null) {
              this.#websocket.close();
              this.#websocket = null;
          }
          super.destroy();
      }
  }
  
  },{"./ws.js":"24iBu","./provider-socket.js":"f4Kqf","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"24iBu":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "WebSocket", ()=>_WebSocket);
  var global = arguments[3];
  function getGlobal() {
      if (typeof self !== "undefined") return self;
      if (typeof window !== "undefined") return window;
      if (typeof global !== "undefined") return global;
      throw new Error("unable to locate global object");
  }
  const _WebSocket = getGlobal().WebSocket;
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"f4Kqf":[function(require,module,exports) {
  /**
   *  Generic long-lived socket provider.
   *
   *  Sub-classing notes
   *  - a sub-class MUST call the `_start()` method once connected
   *  - a sub-class MUST override the `_write(string)` method
   *  - a sub-class MUST call `_processMessage(string)` for each message
   *
   *  @_subsection: api/providers/abstract-provider
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "SocketSubscriber", ()=>SocketSubscriber);
  parcelHelpers.export(exports, "SocketBlockSubscriber", ()=>SocketBlockSubscriber);
  parcelHelpers.export(exports, "SocketPendingSubscriber", ()=>SocketPendingSubscriber);
  parcelHelpers.export(exports, "SocketEventSubscriber", ()=>SocketEventSubscriber);
  /**
   *  SocketProvider...
   *
   */ parcelHelpers.export(exports, "SocketProvider", ()=>SocketProvider);
  var _abstractProviderJs = require("./abstract-provider.js");
  var _indexJs = require("../utils/index.js");
  var _providerJsonrpcJs = require("./provider-jsonrpc.js");
  class SocketSubscriber {
      #provider;
      #filter;
      get filter() {
          return JSON.parse(this.#filter);
      }
      #filterId;
      #paused;
      #emitPromise;
      constructor(provider, filter){
          this.#provider = provider;
          this.#filter = JSON.stringify(filter);
          this.#filterId = null;
          this.#paused = null;
          this.#emitPromise = null;
      }
      start() {
          this.#filterId = this.#provider.send("eth_subscribe", this.filter).then((filterId)=>{
              this.#provider._register(filterId, this);
              return filterId;
          });
      }
      stop() {
          this.#filterId.then((filterId)=>{
              this.#provider.send("eth_unsubscribe", [
                  filterId
              ]);
          });
          this.#filterId = null;
      }
      // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs
      //        and resume
      pause(dropWhilePaused) {
          (0, _indexJs.assert)(dropWhilePaused, "preserve logs while paused not supported by SocketSubscriber yet", "UNSUPPORTED_OPERATION", {
              operation: "pause(false)"
          });
          this.#paused = !!dropWhilePaused;
      }
      resume() {
          this.#paused = null;
      }
      _handleMessage(message) {
          if (this.#filterId == null) return;
          if (this.#paused === null) {
              let emitPromise = this.#emitPromise;
              if (emitPromise == null) emitPromise = this._emit(this.#provider, message);
              else emitPromise = emitPromise.then(async ()=>{
                  await this._emit(this.#provider, message);
              });
              this.#emitPromise = emitPromise.then(()=>{
                  if (this.#emitPromise === emitPromise) this.#emitPromise = null;
              });
          }
      }
      async _emit(provider, message) {
          throw new Error("sub-classes must implemente this; _emit");
      }
  }
  class SocketBlockSubscriber extends SocketSubscriber {
      constructor(provider){
          super(provider, [
              "newHeads"
          ]);
      }
      async _emit(provider, message) {
          provider.emit("block", parseInt(message.number));
      }
  }
  class SocketPendingSubscriber extends SocketSubscriber {
      constructor(provider){
          super(provider, [
              "newPendingTransactions"
          ]);
      }
      async _emit(provider, message) {
          provider.emit("pending", message);
      }
  }
  class SocketEventSubscriber extends SocketSubscriber {
      #logFilter;
      get logFilter() {
          return JSON.parse(this.#logFilter);
      }
      constructor(provider, filter){
          super(provider, [
              "logs",
              filter
          ]);
          this.#logFilter = JSON.stringify(filter);
      }
      async _emit(provider, message) {
          provider.emit(this.logFilter, provider._wrapLog(message, provider._network));
      }
  }
  class SocketProvider extends (0, _providerJsonrpcJs.JsonRpcApiProvider) {
      #callbacks;
      // Maps each filterId to its subscriber
      #subs;
      // If any events come in before a subscriber has finished
      // registering, queue them
      #pending;
      constructor(network){
          super(network, {
              batchMaxCount: 1
          });
          this.#callbacks = new Map();
          this.#subs = new Map();
          this.#pending = new Map();
      }
      // This value is only valid after _start has been called
      /*
      get _network(): Network {
          if (this.#network == null) {
              throw new Error("this shouldn't happen");
          }
          return this.#network.clone();
      }
      */ _getSubscriber(sub) {
          switch(sub.type){
              case "close":
                  return new (0, _abstractProviderJs.UnmanagedSubscriber)("close");
              case "block":
                  return new SocketBlockSubscriber(this);
              case "pending":
                  return new SocketPendingSubscriber(this);
              case "event":
                  return new SocketEventSubscriber(this, sub.filter);
              case "orphan":
                  // Handled auto-matically within AbstractProvider
                  // when the log.removed = true
                  if (sub.filter.orphan === "drop-log") return new (0, _abstractProviderJs.UnmanagedSubscriber)("drop-log");
          }
          return super._getSubscriber(sub);
      }
      _register(filterId, subscriber) {
          this.#subs.set(filterId, subscriber);
          const pending = this.#pending.get(filterId);
          if (pending) {
              for (const message of pending)subscriber._handleMessage(message);
              this.#pending.delete(filterId);
          }
      }
      async _send(payload) {
          // WebSocket provider doesn't accept batches
          (0, _indexJs.assertArgument)(!Array.isArray(payload), "WebSocket does not support batch send", "payload", payload);
          // @TODO: stringify payloads here and store to prevent mutations
          // Prepare a promise to respond to
          const promise = new Promise((resolve, reject)=>{
              this.#callbacks.set(payload.id, {
                  payload,
                  resolve,
                  reject
              });
          });
          // Wait until the socket is connected before writing to it
          await this._waitUntilReady();
          // Write the request to the socket
          await this._write(JSON.stringify(payload));
          return [
              await promise
          ];
      }
      // Sub-classes must call this once they are connected
      /*
      async _start(): Promise<void> {
          if (this.#ready) { return; }
  
          for (const { payload } of this.#callbacks.values()) {
              await this._write(JSON.stringify(payload));
          }
  
          this.#ready = (async function() {
              await super._start();
          })();
      }
      */ // Sub-classes must call this for each message
      async _processMessage(message) {
          const result = JSON.parse(message);
          if ("id" in result) {
              const callback = this.#callbacks.get(result.id);
              if (callback == null) {
                  console.log("Weird... Response for not a thing we sent");
                  return;
              }
              this.#callbacks.delete(result.id);
              callback.resolve(result);
          /*
                          if ("error" in result) {
                              const { message, code, data } = result.error;
                              const error = makeError(message || "unkonwn error", "SERVER_ERROR", {
                                  request: `ws:${ JSON.stringify(callback.payload) }`,
                                  info: { code, data }
                              });
                              callback.reject(error);
                          } else {
                              callback.resolve(result.result);
                          }
              */ } else if (result.method === "eth_subscription") {
              const filterId = result.params.subscription;
              const subscriber = this.#subs.get(filterId);
              if (subscriber) subscriber._handleMessage(result.params.result);
              else {
                  let pending = this.#pending.get(filterId);
                  if (pending == null) {
                      pending = [];
                      this.#pending.set(filterId, pending);
                  }
                  pending.push(result.params.result);
              }
          }
      }
      async _write(message) {
          throw new Error("sub-classes must override this");
      }
  }
  
  },{"./abstract-provider.js":"20UeU","../utils/index.js":"jGhd9","./provider-jsonrpc.js":"8D9UU","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"2q9T0":[function(require,module,exports) {
  /**
   *  [[link-quicknode]] provides a third-party service for connecting to
   *  various blockchains over JSON-RPC.
   *
   *  **Supported Networks**
   *
   *  - Ethereum Mainnet (``mainnet``)
   *  - Goerli Testnet (``goerli``)
   *  - Arbitrum (``arbitrum``)
   *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)
   *  - Optimism (``optimism``)
   *  - Optimism Goerli Testnet (``optimism-goerli``)
   *  - Polygon (``matic``)
   *  - Polygon Mumbai Testnet (``matic-mumbai``)
   *
   *  @_subsection: api/providers/thirdparty:QuickNode  [providers-quicknode]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  The **QuickNodeProvider** connects to the [[link-quicknode]]
   *  JSON-RPC end-points.
   *
   *  By default, a highly-throttled API token is used, which is
   *  appropriate for quick prototypes and simple scripts. To
   *  gain access to an increased rate-limit, it is highly
   *  recommended to [sign up here](link-quicknode).
   */ parcelHelpers.export(exports, "QuickNodeProvider", ()=>QuickNodeProvider);
  var _indexJs = require("../utils/index.js");
  var _communityJs = require("./community.js");
  var _networkJs = require("./network.js");
  var _providerJsonrpcJs = require("./provider-jsonrpc.js");
  const defaultToken = "919b412a057b5e9c9b6dce193c5a60242d6efadb";
  function getHost(name) {
      switch(name){
          case "mainnet":
              return "ethers.quiknode.pro";
          case "goerli":
              return "ethers.ethereum-goerli.quiknode.pro";
          //case "sepolia":
          //    return "sepolia.infura.io";
          case "arbitrum":
              return "ethers.arbitrum-mainnet.quiknode.pro";
          case "arbitrum-goerli":
              return "ethers.arbitrum-goerli.quiknode.pro";
          case "matic":
              return "ethers.matic.quiknode.pro";
          case "matic-mumbai":
              return "ethers.matic-testnet.quiknode.pro";
          case "optimism":
              return "ethers.optimism.quiknode.pro";
          case "optimism-goerli":
              return "ethers.optimism-goerli.quiknode.pro";
      }
      (0, _indexJs.assertArgument)(false, "unsupported network", "network", name);
  }
  class QuickNodeProvider extends (0, _providerJsonrpcJs.JsonRpcProvider) {
      /**
       *  The API token.
       */ token;
      /**
       *  Creates a new **QuickNodeProvider**.
       */ constructor(_network, token){
          if (_network == null) _network = "mainnet";
          const network = (0, _networkJs.Network).from(_network);
          if (token == null) token = defaultToken;
          const request = QuickNodeProvider.getRequest(network, token);
          super(request, network, {
              staticNetwork: network
          });
          (0, _indexJs.defineProperties)(this, {
              token
          });
      }
      _getProvider(chainId) {
          try {
              return new QuickNodeProvider(chainId, this.token);
          } catch (error) {}
          return super._getProvider(chainId);
      }
      isCommunityResource() {
          return this.token === defaultToken;
      }
      /**
       *  Returns a new request prepared for %%network%% and the
       *  %%token%%.
       */ static getRequest(network, token) {
          if (token == null) token = defaultToken;
          const request = new (0, _indexJs.FetchRequest)(`https:/\/${getHost(network.name)}/${token}`);
          request.allowGzip = true;
          //if (projectSecret) { request.setCredentials("", projectSecret); }
          if (token === defaultToken) request.retryFunc = async (request, response, attempt)=>{
              (0, _communityJs.showThrottleMessage)("QuickNodeProvider");
              return true;
          };
          return request;
      }
  }
  
  },{"../utils/index.js":"jGhd9","./community.js":"2jZ1F","./network.js":"bE61r","./provider-jsonrpc.js":"8D9UU","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"ddSrT":[function(require,module,exports) {
  /**
   *  Explain all the nitty-gritty about the **FallbackProvider**.
   *
   *  @_section: api/providers/fallback-provider:Fallback Provider [about-fallback-provider]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  A Fallback Provider.
   *
   */ parcelHelpers.export(exports, "FallbackProvider", ()=>FallbackProvider);
  var _indexJs = require("../utils/index.js");
  var _abstractProviderJs = require("./abstract-provider.js");
  var _networkJs = require("./network.js");
  const BN_1 = BigInt("1");
  const BN_2 = BigInt("2");
  function shuffle(array) {
      for(let i = array.length - 1; i > 0; i--){
          const j = Math.floor(Math.random() * (i + 1));
          const tmp = array[i];
          array[i] = array[j];
          array[j] = tmp;
      }
  }
  function stall(duration) {
      return new Promise((resolve)=>{
          setTimeout(resolve, duration);
      });
  }
  function getTime() {
      return new Date().getTime();
  }
  function stringify(value) {
      return JSON.stringify(value, (key, value)=>{
          if (typeof value === "bigint") return {
              type: "bigint",
              value: value.toString()
          };
          return value;
      });
  }
  const defaultConfig = {
      stallTimeout: 400,
      priority: 1,
      weight: 1
  };
  const defaultState = {
      blockNumber: -2,
      requests: 0,
      lateResponses: 0,
      errorResponses: 0,
      outOfSync: -1,
      unsupportedEvents: 0,
      rollingDuration: 0,
      score: 0,
      _network: null,
      _updateNumber: null,
      _totalTime: 0
  };
  async function waitForSync(config, blockNumber) {
      while(config.blockNumber < 0 || config.blockNumber < blockNumber){
          if (!config._updateNumber) config._updateNumber = (async ()=>{
              const blockNumber = await config.provider.getBlockNumber();
              if (blockNumber > config.blockNumber) config.blockNumber = blockNumber;
              config._updateNumber = null;
          })();
          await config._updateNumber;
          config.outOfSync++;
      }
  }
  function _normalize(value) {
      if (value == null) return "null";
      if (Array.isArray(value)) return "[" + value.map(_normalize).join(",") + "]";
      if (typeof value === "object" && typeof value.toJSON === "function") return _normalize(value.toJSON());
      switch(typeof value){
          case "boolean":
          case "symbol":
              return value.toString();
          case "bigint":
          case "number":
              return BigInt(value).toString();
          case "string":
              return JSON.stringify(value);
          case "object":
              {
                  const keys = Object.keys(value);
                  keys.sort();
                  return "{" + keys.map((k)=>`${JSON.stringify(k)}:${_normalize(value[k])}`).join(",") + "}";
              }
      }
      console.log("Could not serialize", value);
      throw new Error("Hmm...");
  }
  function normalizeResult(value) {
      if ("error" in value) {
          const error = value.error;
          return {
              tag: _normalize(error),
              value: error
          };
      }
      const result = value.result;
      return {
          tag: _normalize(result),
          value: result
      };
  }
  // This strategy picks the highest weight result, as long as the weight is
  // equal to or greater than quorum
  function checkQuorum(quorum, results) {
      const tally = new Map();
      for (const { value , tag , weight  } of results){
          const t = tally.get(tag) || {
              value,
              weight: 0
          };
          t.weight += weight;
          tally.set(tag, t);
      }
      let best = null;
      for (const r of tally.values())if (r.weight >= quorum && (!best || r.weight > best.weight)) best = r;
      if (best) return best.value;
      return undefined;
  }
  function getMedian(quorum, results) {
      let resultWeight = 0;
      const errorMap = new Map();
      let bestError = null;
      const values = [];
      for (const { value , tag , weight  } of results)if (value instanceof Error) {
          const e = errorMap.get(tag) || {
              value,
              weight: 0
          };
          e.weight += weight;
          errorMap.set(tag, e);
          if (bestError == null || e.weight > bestError.weight) bestError = e;
      } else {
          values.push(BigInt(value));
          resultWeight += weight;
      }
      if (resultWeight < quorum) {
          // We have quorum for an error
          if (bestError && bestError.weight >= quorum) return bestError.value;
          // We do not have quorum for a result
          return undefined;
      }
      // Get the sorted values
      values.sort((a, b)=>a < b ? -1 : b > a ? 1 : 0);
      const mid = Math.floor(values.length / 2);
      // Odd-length; take the middle value
      if (values.length % 2) return values[mid];
      // Even length; take the ceiling of the mean of the center two values
      return (values[mid - 1] + values[mid] + BN_1) / BN_2;
  }
  function getAnyResult(quorum, results) {
      // If any value or error meets quorum, that is our preferred result
      const result = checkQuorum(quorum, results);
      if (result !== undefined) return result;
      // Otherwise, do we have any result?
      for (const r of results){
          if (r.value) return r.value;
      }
      // Nope!
      return undefined;
  }
  function getFuzzyMode(quorum, results) {
      if (quorum === 1) return (0, _indexJs.getNumber)(getMedian(quorum, results), "%internal");
      const tally = new Map();
      const add = (result, weight)=>{
          const t = tally.get(result) || {
              result,
              weight: 0
          };
          t.weight += weight;
          tally.set(result, t);
      };
      for (const { weight , value  } of results){
          const r = (0, _indexJs.getNumber)(value);
          add(r - 1, weight);
          add(r, weight);
          add(r + 1, weight);
      }
      let bestWeight = 0;
      let bestResult = undefined;
      for (const { weight , result  } of tally.values())// Use this result, if this result meets quorum and has either:
      // - a better weight
      // - or equal weight, but the result is larger
      if (weight >= quorum && (weight > bestWeight || bestResult != null && weight === bestWeight && result > bestResult)) {
          bestWeight = weight;
          bestResult = result;
      }
      return bestResult;
  }
  class FallbackProvider extends (0, _abstractProviderJs.AbstractProvider) {
      quorum;
      eventQuorum;
      eventWorkers;
      #configs;
      #height;
      #initialSyncPromise;
      constructor(providers, network){
          super(network);
          this.#configs = providers.map((p)=>{
              if (p instanceof (0, _abstractProviderJs.AbstractProvider)) return Object.assign({
                  provider: p
              }, defaultConfig, defaultState);
              else return Object.assign({}, defaultConfig, p, defaultState);
          });
          this.#height = -2;
          this.#initialSyncPromise = null;
          this.quorum = 2; //Math.ceil(providers.length /  2);
          this.eventQuorum = 1;
          this.eventWorkers = 1;
          (0, _indexJs.assertArgument)(this.quorum <= this.#configs.reduce((a, c)=>a + c.weight, 0), "quorum exceed provider wieght", "quorum", this.quorum);
      }
      get providerConfigs() {
          return this.#configs.map((c)=>{
              const result = Object.assign({}, c);
              for(const key in result)if (key[0] === "_") delete result[key];
              return result;
          });
      }
      async _detectNetwork() {
          return (0, _networkJs.Network).from((0, _indexJs.getBigInt)(await this._perform({
              method: "chainId"
          })));
      }
      // @TODO: Add support to select providers to be the event subscriber
      //_getSubscriber(sub: Subscription): Subscriber {
      //    throw new Error("@TODO");
      //}
      async _translatePerform(provider, req) {
          switch(req.method){
              case "broadcastTransaction":
                  return await provider.broadcastTransaction(req.signedTransaction);
              case "call":
                  return await provider.call(Object.assign({}, req.transaction, {
                      blockTag: req.blockTag
                  }));
              case "chainId":
                  return (await provider.getNetwork()).chainId;
              case "estimateGas":
                  return await provider.estimateGas(req.transaction);
              case "getBalance":
                  return await provider.getBalance(req.address, req.blockTag);
              case "getBlock":
                  {
                      const block = "blockHash" in req ? req.blockHash : req.blockTag;
                      return await provider.getBlock(block, req.includeTransactions);
                  }
              case "getBlockNumber":
                  return await provider.getBlockNumber();
              case "getCode":
                  return await provider.getCode(req.address, req.blockTag);
              case "getGasPrice":
                  return (await provider.getFeeData()).gasPrice;
              case "getLogs":
                  return await provider.getLogs(req.filter);
              case "getStorage":
                  return await provider.getStorage(req.address, req.position, req.blockTag);
              case "getTransaction":
                  return await provider.getTransaction(req.hash);
              case "getTransactionCount":
                  return await provider.getTransactionCount(req.address, req.blockTag);
              case "getTransactionReceipt":
                  return await provider.getTransactionReceipt(req.hash);
              case "getTransactionResult":
                  return await provider.getTransactionResult(req.hash);
          }
      }
      // Grab the next (random) config that is not already part of
      // the running set
      #getNextConfig(running) {
          // @TODO: Maybe do a check here to favour (heavily) providers that
          //        do not require waitForSync and disfavour providers that
          //        seem down-ish or are behaving slowly
          const configs = Array.from(running).map((r)=>r.config);
          // Shuffle the states, sorted by priority
          const allConfigs = this.#configs.slice();
          shuffle(allConfigs);
          allConfigs.sort((a, b)=>b.priority - a.priority);
          for (const config of allConfigs){
              if (configs.indexOf(config) === -1) return config;
          }
          return null;
      }
      // Adds a new runner (if available) to running.
      #addRunner(running1, req) {
          const config = this.#getNextConfig(running1);
          // No runners available
          if (config == null) return null;
          // Create a new runner
          const runner = {
              config,
              result: null,
              didBump: false,
              perform: null,
              staller: null
          };
          const now = getTime();
          // Start performing this operation
          runner.perform = (async ()=>{
              try {
                  config.requests++;
                  const result = await this._translatePerform(config.provider, req);
                  runner.result = {
                      result
                  };
              } catch (error) {
                  config.errorResponses++;
                  runner.result = {
                      error
                  };
              }
              const dt = getTime() - now;
              config._totalTime += dt;
              config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;
              runner.perform = null;
          })();
          // Start a staller; when this times out, it's time to force
          // kicking off another runner because we are taking too long
          runner.staller = (async ()=>{
              await stall(config.stallTimeout);
              runner.staller = null;
          })();
          running1.add(runner);
          return runner;
      }
      // Initializes the blockNumber and network for each runner and
      // blocks until initialized
      async #initialSync() {
          let initialSync = this.#initialSyncPromise;
          if (!initialSync) {
              const promises = [];
              this.#configs.forEach((config)=>{
                  promises.push(waitForSync(config, 0));
                  promises.push((async ()=>{
                      config._network = await config.provider.getNetwork();
                  })());
              });
              this.#initialSyncPromise = initialSync = (async ()=>{
                  // Wait for all providers to have a block number and network
                  await Promise.all(promises);
                  // Check all the networks match
                  let chainId = null;
                  for (const config of this.#configs){
                      const network = config._network;
                      if (chainId == null) chainId = network.chainId;
                      else if (network.chainId !== chainId) (0, _indexJs.assert)(false, "cannot mix providers on different networks", "UNSUPPORTED_OPERATION", {
                          operation: "new FallbackProvider"
                      });
                  }
              })();
          }
          await initialSync;
      }
      async #checkQuorum(running2, req1) {
          // Get all the result objects
          const results = [];
          for (const runner of running2)if (runner.result != null) {
              const { tag , value  } = normalizeResult(runner.result);
              results.push({
                  tag,
                  value,
                  weight: runner.config.weight
              });
          }
          // Are there enough results to event meet quorum?
          if (results.reduce((a, r)=>a + r.weight, 0) < this.quorum) return undefined;
          switch(req1.method){
              case "getBlockNumber":
                  {
                      // We need to get the bootstrap block height
                      if (this.#height === -2) this.#height = Math.ceil((0, _indexJs.getNumber)(getMedian(this.quorum, this.#configs.map((c)=>({
                              value: c.blockNumber,
                              tag: (0, _indexJs.getNumber)(c.blockNumber).toString(),
                              weight: c.weight
                          })))));
                      // Find the mode across all the providers, allowing for
                      // a little drift between block heights
                      const mode = getFuzzyMode(this.quorum, results);
                      if (mode === undefined) return undefined;
                      if (mode > this.#height) this.#height = mode;
                      return this.#height;
                  }
              case "getGasPrice":
              case "estimateGas":
                  return getMedian(this.quorum, results);
              case "getBlock":
                  // Pending blocks are in the mempool and already
                  // quite untrustworthy; just grab anything
                  if ("blockTag" in req1 && req1.blockTag === "pending") return getAnyResult(this.quorum, results);
                  return checkQuorum(this.quorum, results);
              case "call":
              case "chainId":
              case "getBalance":
              case "getTransactionCount":
              case "getCode":
              case "getStorage":
              case "getTransaction":
              case "getTransactionReceipt":
              case "getLogs":
                  return checkQuorum(this.quorum, results);
              case "broadcastTransaction":
                  return getAnyResult(this.quorum, results);
          }
          (0, _indexJs.assert)(false, "unsupported method", "UNSUPPORTED_OPERATION", {
              operation: `_perform(${stringify(req1.method)})`
          });
      }
      async #waitForQuorum(running3, req2) {
          if (running3.size === 0) throw new Error("no runners?!");
          // Any promises that are interesting to watch for; an expired stall
          // or a successful perform
          const interesting = [];
          let newRunners = 0;
          for (const runner of running3){
              // No responses, yet; keep an eye on it
              if (runner.perform) interesting.push(runner.perform);
              // Still stalling...
              if (runner.staller) {
                  interesting.push(runner.staller);
                  continue;
              }
              // This runner has already triggered another runner
              if (runner.didBump) continue;
              // Got a response (result or error) or stalled; kick off another runner
              runner.didBump = true;
              newRunners++;
          }
          // Check if we have reached quorum on a result (or error)
          const value = await this.#checkQuorum(running3, req2);
          if (value !== undefined) {
              if (value instanceof Error) throw value;
              return value;
          }
          // Add any new runners, because a staller timed out or a result
          // or error response came in.
          for(let i = 0; i < newRunners; i++)this.#addRunner(running3, req2);
          // All providers have returned, and we have no result
          (0, _indexJs.assert)(interesting.length > 0, "quorum not met", "SERVER_ERROR", {
              request: "%sub-requests",
              info: {
                  request: req2,
                  results: Array.from(running3).map((r)=>stringify(r.result))
              }
          });
          // Wait for someone to either complete its perform or stall out
          await Promise.race(interesting);
          // This is recursive, but at worst case the depth is 2x the
          // number of providers (each has a perform and a staller)
          return await this.#waitForQuorum(running3, req2);
      }
      async _perform(req) {
          // Broadcasting a transaction is rare (ish) and already incurs
          // a cost on the user, so spamming is safe-ish. Just send it to
          // every backend.
          if (req.method === "broadcastTransaction") {
              const results = await Promise.all(this.#configs.map(async ({ provider , weight  })=>{
                  try {
                      const result = await provider._perform(req);
                      return Object.assign(normalizeResult({
                          result
                      }), {
                          weight
                      });
                  } catch (error) {
                      return Object.assign(normalizeResult({
                          error
                      }), {
                          weight
                      });
                  }
              }));
              const result = getAnyResult(this.quorum, results);
              (0, _indexJs.assert)(result !== undefined, "problem multi-broadcasting", "SERVER_ERROR", {
                  request: "%sub-requests",
                  info: {
                      request: req,
                      results: results.map(stringify)
                  }
              });
              if (result instanceof Error) throw result;
              return result;
          }
          await this.#initialSync();
          // Bootstrap enough runners to meet quorum
          const running = new Set();
          for(let i = 0; i < this.quorum; i++)this.#addRunner(running, req);
          const result = await this.#waitForQuorum(running, req);
          // Track requests sent to a provider that are still
          // outstanding after quorum has been otherwise found
          for (const runner of running)if (runner.perform && runner.result == null) runner.config.lateResponses++;
          return result;
      }
      async destroy() {
          for (const { provider  } of this.#configs)provider.destroy();
          super.destroy();
      }
  }
  
  },{"../utils/index.js":"jGhd9","./abstract-provider.js":"20UeU","./network.js":"bE61r","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"bAYKY":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "NonceManager", ()=>NonceManager);
  var _indexJs = require("../utils/index.js");
  var _abstractSignerJs = require("./abstract-signer.js");
  class NonceManager extends (0, _abstractSignerJs.AbstractSigner) {
      signer;
      #noncePromise;
      #delta;
      constructor(signer){
          super(signer.provider);
          (0, _indexJs.defineProperties)(this, {
              signer
          });
          this.#noncePromise = null;
          this.#delta = 0;
      }
      async getAddress() {
          return this.signer.getAddress();
      }
      connect(provider) {
          return new NonceManager(this.signer.connect(provider));
      }
      async getNonce(blockTag) {
          if (blockTag === "pending") {
              if (this.#noncePromise == null) this.#noncePromise = super.getNonce("pending");
              const delta = this.#delta;
              return await this.#noncePromise + delta;
          }
          return super.getNonce(blockTag);
      }
      increment() {
          this.#delta++;
      }
      reset() {
          this.#delta = 0;
          this.#noncePromise = null;
      }
      async sendTransaction(tx) {
          const noncePromise = this.getNonce("pending");
          this.increment();
          tx = await this.signer.populateTransaction(tx);
          tx.nonce = await noncePromise;
          // @TODO: Maybe handle interesting/recoverable errors?
          // Like don't increment if the tx was certainly not sent
          return await this.signer.sendTransaction(tx);
      }
      signTransaction(tx) {
          return this.signer.signTransaction(tx);
      }
      signMessage(message) {
          return this.signer.signMessage(message);
      }
      signTypedData(domain, types, value) {
          return this.signer.signTypedData(domain, types, value);
      }
  }
  
  },{"../utils/index.js":"jGhd9","./abstract-signer.js":"8n6Nd","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"iDOkX":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "BrowserProvider", ()=>BrowserProvider);
  var _indexJs = require("../utils/index.js");
  var _providerJsonrpcJs = require("./provider-jsonrpc.js");
  class BrowserProvider extends (0, _providerJsonrpcJs.JsonRpcApiPollingProvider) {
      #request;
      constructor(ethereum, network){
          super(network, {
              batchMaxCount: 1
          });
          this.#request = async (method, params)=>{
              const payload = {
                  method,
                  params
              };
              this.emit("debug", {
                  action: "sendEip1193Request",
                  payload
              });
              try {
                  const result = await ethereum.request(payload);
                  this.emit("debug", {
                      action: "receiveEip1193Result",
                      result
                  });
                  return result;
              } catch (e) {
                  const error = new Error(e.message);
                  error.code = e.code;
                  error.data = e.data;
                  error.payload = payload;
                  this.emit("debug", {
                      action: "receiveEip1193Error",
                      error
                  });
                  throw error;
              }
          };
      }
      async send(method, params) {
          await this._start();
          return await super.send(method, params);
      }
      async _send(payload) {
          (0, _indexJs.assertArgument)(!Array.isArray(payload), "EIP-1193 does not support batch request", "payload", payload);
          try {
              const result = await this.#request(payload.method, payload.params || []);
              return [
                  {
                      id: payload.id,
                      result
                  }
              ];
          } catch (e) {
              return [
                  {
                      id: payload.id,
                      error: {
                          code: e.code,
                          data: e.data,
                          message: e.message
                      }
                  }
              ];
          }
      }
      getRpcError(payload, error) {
          error = JSON.parse(JSON.stringify(error));
          // EIP-1193 gives us some machine-readable error codes, so rewrite
          // them into 
          switch(error.error.code || -1){
              case 4001:
                  error.error.message = `ethers-user-denied: ${error.error.message}`;
                  break;
              case 4200:
                  error.error.message = `ethers-unsupported: ${error.error.message}`;
                  break;
          }
          return super.getRpcError(payload, error);
      }
      async hasSigner(address) {
          if (address == null) address = 0;
          const accounts = await this.send("eth_accounts", []);
          if (typeof address === "number") return accounts.length > address;
          address = address.toLowerCase();
          return accounts.filter((a)=>a.toLowerCase() === address).length !== 0;
      }
      async getSigner(address) {
          if (address == null) address = 0;
          if (!await this.hasSigner(address)) try {
              //const resp = 
              await this.#request("eth_requestAccounts", []);
          //console.log("RESP", resp);
          } catch (error) {
              const payload = error.payload;
              throw this.getRpcError(payload, {
                  id: payload.id,
                  error
              });
          }
          return await super.getSigner(address);
      }
  }
  
  },{"../utils/index.js":"jGhd9","./provider-jsonrpc.js":"8D9UU","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"8Fcyv":[function(require,module,exports) {
  /**
   *  [[link-pocket]] provides a third-party service for connecting to
   *  various blockchains over JSON-RPC.
   *
   *  **Supported Networks**
   *
   *  - Ethereum Mainnet (``mainnet``)
   *  - Goerli Testnet (``goerli``)
   *  - Polygon (``matic``)
   *  - Arbitrum (``arbitrum``)
   *
   *  @_subsection: api/providers/thirdparty:Pocket  [providers-pocket]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  The **PocketProvider** connects to the [[link-pocket]]
   *  JSON-RPC end-points.
   *
   *  By default, a highly-throttled API key is used, which is
   *  appropriate for quick prototypes and simple scripts. To
   *  gain access to an increased rate-limit, it is highly
   *  recommended to [sign up here](link-pocket-signup).
   */ parcelHelpers.export(exports, "PocketProvider", ()=>PocketProvider);
  var _indexJs = require("../utils/index.js");
  var _communityJs = require("./community.js");
  var _networkJs = require("./network.js");
  var _providerJsonrpcJs = require("./provider-jsonrpc.js");
  const defaultApplicationId = "62e1ad51b37b8e00394bda3b";
  function getHost(name) {
      switch(name){
          case "mainnet":
              return "eth-mainnet.gateway.pokt.network";
          case "goerli":
              return "eth-goerli.gateway.pokt.network";
          case "matic":
              return "poly-mainnet.gateway.pokt.network";
          case "matic-mumbai":
              return "polygon-mumbai-rpc.gateway.pokt.network";
      }
      (0, _indexJs.assertArgument)(false, "unsupported network", "network", name);
  }
  class PocketProvider extends (0, _providerJsonrpcJs.JsonRpcProvider) {
      /**
       *  The Application ID for the Pocket connection.
       */ applicationId;
      /**
       *  The Application Secret for making authenticated requests
       *  to the Pocket connection.
       */ applicationSecret;
      /**
       *  Create a new **PocketProvider**.
       *
       *  By default connecting to ``mainnet`` with a highly throttled
       *  API key.
       */ constructor(_network, applicationId, applicationSecret){
          if (_network == null) _network = "mainnet";
          const network = (0, _networkJs.Network).from(_network);
          if (applicationId == null) applicationId = defaultApplicationId;
          if (applicationSecret == null) applicationSecret = null;
          const options = {
              staticNetwork: network
          };
          const request = PocketProvider.getRequest(network, applicationId, applicationSecret);
          super(request, network, options);
          (0, _indexJs.defineProperties)(this, {
              applicationId,
              applicationSecret
          });
      }
      _getProvider(chainId) {
          try {
              return new PocketProvider(chainId, this.applicationId, this.applicationSecret);
          } catch (error) {}
          return super._getProvider(chainId);
      }
      /**
       *  Returns a prepared request for connecting to %%network%% with
       *  %%applicationId%%.
       */ static getRequest(network, applicationId, applicationSecret) {
          if (applicationId == null) applicationId = defaultApplicationId;
          const request = new (0, _indexJs.FetchRequest)(`https:/\/${getHost(network.name)}/v1/lb/${applicationId}`);
          request.allowGzip = true;
          if (applicationSecret) request.setCredentials("", applicationSecret);
          if (applicationId === defaultApplicationId) request.retryFunc = async (request, response, attempt)=>{
              (0, _communityJs.showThrottleMessage)("PocketProvider");
              return true;
          };
          return request;
      }
      isCommunityResource() {
          return this.applicationId === defaultApplicationId;
      }
  }
  
  },{"../utils/index.js":"jGhd9","./community.js":"2jZ1F","./network.js":"bE61r","./provider-jsonrpc.js":"8D9UU","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"3B94E":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "IpcSocketProvider", ()=>IpcSocketProvider);
  const IpcSocketProvider = undefined;
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"dugB1":[function(require,module,exports) {
  /**
   *  When interacting with Ethereum, it is necessary to use a private
   *  key authenticate actions by signing a payload.
   *
   *  Wallets are the simplest way to expose the concept of an
   *  //Externally Owner Account// (EOA) as it wraps a private key
   *  and supports high-level methods to sign common types of interaction
   *  and send transactions.
   *
   *  The class most developers will want to use is [[Wallet]], which
   *  can load a private key directly or from any common wallet format.
   *
   *  The [[HDNodeWallet]] can be used when it is necessary to access
   *  low-level details of how an HD wallets are derived, exported
   *  or imported.
   *
   *  @_section: api/wallet:Wallets  [about-wallets]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "BaseWallet", ()=>(0, _baseWalletJs.BaseWallet));
  parcelHelpers.export(exports, "defaultPath", ()=>(0, _hdwalletJs.defaultPath));
  parcelHelpers.export(exports, "getAccountPath", ()=>(0, _hdwalletJs.getAccountPath));
  parcelHelpers.export(exports, "getIndexedAccountPath", ()=>(0, _hdwalletJs.getIndexedAccountPath));
  parcelHelpers.export(exports, "HDNodeWallet", ()=>(0, _hdwalletJs.HDNodeWallet));
  parcelHelpers.export(exports, "HDNodeVoidWallet", ()=>(0, _hdwalletJs.HDNodeVoidWallet));
  parcelHelpers.export(exports, "isCrowdsaleJson", ()=>(0, _jsonCrowdsaleJs.isCrowdsaleJson));
  parcelHelpers.export(exports, "decryptCrowdsaleJson", ()=>(0, _jsonCrowdsaleJs.decryptCrowdsaleJson));
  parcelHelpers.export(exports, "isKeystoreJson", ()=>(0, _jsonKeystoreJs.isKeystoreJson));
  parcelHelpers.export(exports, "decryptKeystoreJsonSync", ()=>(0, _jsonKeystoreJs.decryptKeystoreJsonSync));
  parcelHelpers.export(exports, "decryptKeystoreJson", ()=>(0, _jsonKeystoreJs.decryptKeystoreJson));
  parcelHelpers.export(exports, "encryptKeystoreJson", ()=>(0, _jsonKeystoreJs.encryptKeystoreJson));
  parcelHelpers.export(exports, "encryptKeystoreJsonSync", ()=>(0, _jsonKeystoreJs.encryptKeystoreJsonSync));
  parcelHelpers.export(exports, "Mnemonic", ()=>(0, _mnemonicJs.Mnemonic));
  parcelHelpers.export(exports, "Wallet", ()=>(0, _walletJs.Wallet));
  var _baseWalletJs = require("./base-wallet.js");
  var _hdwalletJs = require("./hdwallet.js");
  var _jsonCrowdsaleJs = require("./json-crowdsale.js");
  var _jsonKeystoreJs = require("./json-keystore.js");
  var _mnemonicJs = require("./mnemonic.js");
  var _walletJs = require("./wallet.js");
  
  },{"./base-wallet.js":"jtsRw","./hdwallet.js":"1ZS1b","./json-crowdsale.js":"ykdRJ","./json-keystore.js":"iJXOk","./mnemonic.js":"duTnv","./wallet.js":"4pcZr","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"jtsRw":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  The **BaseWallet** is a stream-lined implementation of a
   *  [[Signer]] that operates with a private key.
   *
   *  It is preferred to use the [[Wallet]] class, as it offers
   *  additional functionality and simplifies loading a variety
   *  of JSON formats, Mnemonic Phrases, etc.
   *
   *  This class may be of use for those attempting to implement
   *  a minimal Signer.
   */ parcelHelpers.export(exports, "BaseWallet", ()=>BaseWallet);
  var _indexJs = require("../address/index.js");
  var _indexJs1 = require("../hash/index.js");
  var _indexJs2 = require("../providers/index.js");
  var _indexJs3 = require("../transaction/index.js");
  var _indexJs4 = require("../utils/index.js");
  class BaseWallet extends (0, _indexJs2.AbstractSigner) {
      /**
       *  The wallet address.
       */ address;
      #signingKey;
      /**
       *  Creates a new BaseWallet for %%privateKey%%, optionally
       *  connected to %%provider%%.
       *
       *  If %%provider%% is not specified, only offline methods can
       *  be used.
       */ constructor(privateKey, provider){
          super(provider);
          (0, _indexJs4.assertArgument)(privateKey && typeof privateKey.sign === "function", "invalid private key", "privateKey", "[ REDACTED ]");
          this.#signingKey = privateKey;
          const address = (0, _indexJs3.computeAddress)(this.signingKey.publicKey);
          (0, _indexJs4.defineProperties)(this, {
              address
          });
      }
      // Store private values behind getters to reduce visibility
      // in console.log
      /**
       *  The [[SigningKey]] used for signing payloads.
       */ get signingKey() {
          return this.#signingKey;
      }
      /**
       *  The private key for this wallet.
       */ get privateKey() {
          return this.signingKey.privateKey;
      }
      async getAddress() {
          return this.address;
      }
      connect(provider) {
          return new BaseWallet(this.#signingKey, provider);
      }
      async signTransaction(tx) {
          // Replace any Addressable or ENS name with an address
          const { to , from  } = await (0, _indexJs4.resolveProperties)({
              to: tx.to ? (0, _indexJs.resolveAddress)(tx.to, this.provider) : undefined,
              from: tx.from ? (0, _indexJs.resolveAddress)(tx.from, this.provider) : undefined
          });
          if (to != null) tx.to = to;
          if (from != null) tx.from = from;
          if (tx.from != null) {
              (0, _indexJs4.assertArgument)((0, _indexJs.getAddress)(tx.from) === this.address, "transaction from address mismatch", "tx.from", tx.from);
              delete tx.from;
          }
          // Build the transaction
          const btx = (0, _indexJs3.Transaction).from(tx);
          btx.signature = this.signingKey.sign(btx.unsignedHash);
          return btx.serialized;
      }
      async signMessage(message) {
          return this.signMessageSync(message);
      }
      // @TODO: Add a secialized signTx and signTyped sync that enforces
      // all parameters are known?
      /**
       *  Returns the signature for %%message%% signed with this wallet.
       */ signMessageSync(message) {
          return this.signingKey.sign((0, _indexJs1.hashMessage)(message)).serialized;
      }
      async signTypedData(domain, types, value) {
          // Populate any ENS names
          const populated = await (0, _indexJs1.TypedDataEncoder).resolveNames(domain, types, value, async (name)=>{
              // @TODO: this should use resolveName; addresses don't
              //        need a provider
              (0, _indexJs4.assert)(this.provider != null, "cannot resolve ENS names without a provider", "UNSUPPORTED_OPERATION", {
                  operation: "resolveName",
                  info: {
                      name
                  }
              });
              const address = await this.provider.resolveName(name);
              (0, _indexJs4.assert)(address != null, "unconfigured ENS name", "UNCONFIGURED_NAME", {
                  value: name
              });
              return address;
          });
          return this.signingKey.sign((0, _indexJs1.TypedDataEncoder).hash(populated.domain, types, populated.value)).serialized;
      }
  }
  
  },{"../address/index.js":"cuJ87","../hash/index.js":"bTSS2","../providers/index.js":"62nP6","../transaction/index.js":"cOUq6","../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"1ZS1b":[function(require,module,exports) {
  /**
   *  Explain HD Wallets..
   *
   *  @_subsection: api/wallet:HD Wallets  [hd-wallets]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "defaultPath", ()=>defaultPath);
  /**
   *  An **HDNodeWallet** is a [[Signer]] backed by the private key derived
   *  from an HD Node using the [[link-bip-32]] stantard.
   *
   *  An HD Node forms a hierarchal structure with each HD Node having a
   *  private key and the ability to derive child HD Nodes, defined by
   *  a path indicating the index of each child.
   */ parcelHelpers.export(exports, "HDNodeWallet", ()=>HDNodeWallet);
  /**
   *  A **HDNodeVoidWallet** cannot sign, but provides access to
   *  the children nodes of a [[link-bip-32]] HD wallet addresses.
   *
   *  The can be created by using an extended ``xpub`` key to
   *  [[HDNodeWallet_fromExtendedKey]] or by
   *  [nuetering](HDNodeWallet-neuter) a [[HDNodeWallet]].
   */ parcelHelpers.export(exports, "HDNodeVoidWallet", ()=>HDNodeVoidWallet);
  /*
  export class HDNodeWalletManager {
      #root: HDNodeWallet;
  
      constructor(phrase: string, password?: null | string, path?: null | string, locale?: null | Wordlist) {
          if (password == null) { password = ""; }
          if (path == null) { path = "m/44'/60'/0'/0"; }
          if (locale == null) { locale = LangEn.wordlist(); }
          this.#root = HDNodeWallet.fromPhrase(phrase, password, path, locale);
      }
  
      getSigner(index?: number): HDNodeWallet {
          return this.#root.deriveChild((index == null) ? 0: index);
      }
  }
  */ /**
   *  Returns the [[link-bip-32]] path for the acount at %%index%%.
   *
   *  This is the pattern used by wallets like Ledger.
   *
   *  There is also an [alternate pattern](getIndexedAccountPath) used by
   *  some software.
   */ parcelHelpers.export(exports, "getAccountPath", ()=>getAccountPath);
  /**
   *  Returns the path using an alternative pattern for deriving accounts,
   *  at %%index%%.
   *
   *  This derivation path uses the //index// component rather than the
   *  //account// component to derive sequential accounts.
   *
   *  This is the pattern used by wallets like MetaMask.
   */ parcelHelpers.export(exports, "getIndexedAccountPath", ()=>getIndexedAccountPath);
  var _indexJs = require("../crypto/index.js");
  var _indexJs1 = require("../providers/index.js");
  var _indexJs2 = require("../transaction/index.js");
  var _indexJs3 = require("../utils/index.js");
  var _langEnJs = require("../wordlists/lang-en.js");
  var _baseWalletJs = require("./base-wallet.js");
  var _mnemonicJs = require("./mnemonic.js");
  var _jsonKeystoreJs = require("./json-keystore.js");
  const defaultPath = "m/44'/60'/0'/0/0";
  // "Bitcoin seed"
  const MasterSecret = new Uint8Array([
      66,
      105,
      116,
      99,
      111,
      105,
      110,
      32,
      115,
      101,
      101,
      100
  ]);
  const HardenedBit = 0x80000000;
  const N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
  const Nibbles = "0123456789abcdef";
  function zpad(value, length) {
      let result = "";
      while(value){
          result = Nibbles[value % 16] + result;
          value = Math.trunc(value / 16);
      }
      while(result.length < length * 2)result = "0" + result;
      return "0x" + result;
  }
  function encodeBase58Check(_value) {
      const value = (0, _indexJs3.getBytes)(_value);
      const check = (0, _indexJs3.dataSlice)((0, _indexJs.sha256)((0, _indexJs.sha256)(value)), 0, 4);
      const bytes = (0, _indexJs3.concat)([
          value,
          check
      ]);
      return (0, _indexJs3.encodeBase58)(bytes);
  }
  const _guard = {};
  function ser_I(index, chainCode, publicKey, privateKey) {
      const data = new Uint8Array(37);
      if (index & HardenedBit) {
          (0, _indexJs3.assert)(privateKey != null, "cannot derive child of neutered node", "UNSUPPORTED_OPERATION", {
              operation: "deriveChild"
          });
          // Data = 0x00 || ser_256(k_par)
          data.set((0, _indexJs3.getBytes)(privateKey), 1);
      } else // Data = ser_p(point(k_par))
      data.set((0, _indexJs3.getBytes)(publicKey));
      // Data += ser_32(i)
      for(let i = 24; i >= 0; i -= 8)data[33 + (i >> 3)] = index >> 24 - i & 0xff;
      const I = (0, _indexJs3.getBytes)((0, _indexJs.computeHmac)("sha512", chainCode, data));
      return {
          IL: I.slice(0, 32),
          IR: I.slice(32)
      };
  }
  function derivePath(node, path) {
      const components = path.split("/");
      (0, _indexJs3.assertArgument)(components.length > 0 && (components[0] === "m" || node.depth > 0), "invalid path", "path", path);
      if (components[0] === "m") components.shift();
      let result = node;
      for(let i = 0; i < components.length; i++){
          const component = components[i];
          if (component.match(/^[0-9]+'$/)) {
              const index = parseInt(component.substring(0, component.length - 1));
              (0, _indexJs3.assertArgument)(index < HardenedBit, "invalid path index", `path[${i}]`, component);
              result = result.deriveChild(HardenedBit + index);
          } else if (component.match(/^[0-9]+$/)) {
              const index = parseInt(component);
              (0, _indexJs3.assertArgument)(index < HardenedBit, "invalid path index", `path[${i}]`, component);
              result = result.deriveChild(index);
          } else (0, _indexJs3.assertArgument)(false, "invalid path component", `path[${i}]`, component);
      }
      return result;
  }
  class HDNodeWallet extends (0, _baseWalletJs.BaseWallet) {
      /**
       *  The compressed public key.
       */ publicKey;
      /**
       *  The fingerprint.
       *
       *  A fingerprint allows quick qay to detect parent and child nodes,
       *  but developers should be prepared to deal with collisions as it
       *  is only 4 bytes.
       */ fingerprint;
      /**
       *  The parent fingerprint.
       */ parentFingerprint;
      /**
       *  The mnemonic used to create this HD Node, if available.
       *
       *  Sources such as extended keys do not encode the mnemonic, in
       *  which case this will be ``null``.
       */ mnemonic;
      /**
       *  The chaincode, which is effectively a public key used
       *  to derive children.
       */ chainCode;
      /**
       *  The derivation path of this wallet.
       *
       *  Since extended keys do not provider full path details, this
       *  may be ``null``, if instantiated from a source that does not
       *  enocde it.
       */ path;
      /**
       *  The child index of this wallet. Values over ``2 *\* 31`` indicate
       *  the node is hardened.
       */ index;
      /**
       *  The depth of this wallet, which is the number of components
       *  in its path.
       */ depth;
      /**
       *  @private
       */ constructor(guard, signingKey, parentFingerprint, chainCode, path, index, depth, mnemonic, provider){
          super(signingKey, provider);
          (0, _indexJs3.assertPrivate)(guard, _guard, "HDNodeWallet");
          (0, _indexJs3.defineProperties)(this, {
              publicKey: signingKey.compressedPublicKey
          });
          const fingerprint = (0, _indexJs3.dataSlice)((0, _indexJs.ripemd160)((0, _indexJs.sha256)(this.publicKey)), 0, 4);
          (0, _indexJs3.defineProperties)(this, {
              parentFingerprint,
              fingerprint,
              chainCode,
              path,
              index,
              depth
          });
          (0, _indexJs3.defineProperties)(this, {
              mnemonic
          });
      }
      connect(provider) {
          return new HDNodeWallet(_guard, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);
      }
      #account() {
          const account = {
              address: this.address,
              privateKey: this.privateKey
          };
          const m = this.mnemonic;
          if (this.path && m && m.wordlist.locale === "en" && m.password === "") account.mnemonic = {
              path: this.path,
              locale: "en",
              entropy: m.entropy
          };
          return account;
      }
      /**
       *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with
       *  %%password%%.
       *
       *  If %%progressCallback%% is specified, it will receive periodic
       *  updates as the encryption process progreses.
       */ async encrypt(password, progressCallback) {
          return await (0, _jsonKeystoreJs.encryptKeystoreJson)(this.#account(), password, {
              progressCallback
          });
      }
      /**
       *  Returns a [JSON Keystore Wallet](json-wallets) encryped with
       *  %%password%%.
       *
       *  It is preferred to use the [async version](encrypt) instead,
       *  which allows a [[ProgressCallback]] to keep the user informed.
       *
       *  This method will block the event loop (freezing all UI) until
       *  it is complete, which may be a non-trivial duration.
       */ encryptSync(password) {
          return (0, _jsonKeystoreJs.encryptKeystoreJsonSync)(this.#account(), password);
      }
      /**
       *  The extended key.
       *
       *  This key will begin with the prefix ``xpriv`` and can be used to
       *  reconstruct this HD Node to derive its children.
       */ get extendedKey() {
          // We only support the mainnet values for now, but if anyone needs
          // testnet values, let me know. I believe current sentiment is that
          // we should always use mainnet, and use BIP-44 to derive the network
          //   - Mainnet: public=0x0488B21E, private=0x0488ADE4
          //   - Testnet: public=0x043587CF, private=0x04358394
          (0, _indexJs3.assert)(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", {
              operation: "extendedKey"
          });
          return encodeBase58Check((0, _indexJs3.concat)([
              "0x0488ADE4",
              zpad(this.depth, 1),
              this.parentFingerprint,
              zpad(this.index, 4),
              this.chainCode,
              (0, _indexJs3.concat)([
                  "0x00",
                  this.privateKey
              ])
          ]));
      }
      /**
       *  Returns true if this wallet has a path, providing a Type Guard
       *  that the path is non-null.
       */ hasPath() {
          return this.path != null;
      }
      /**
       *  Returns a neutered HD Node, which removes the private details
       *  of an HD Node.
       *
       *  A neutered node has no private key, but can be used to derive
       *  child addresses and other public data about the HD Node.
       */ neuter() {
          return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);
      }
      /**
       *  Return the child for %%index%%.
       */ deriveChild(_index) {
          const index = (0, _indexJs3.getNumber)(_index, "index");
          (0, _indexJs3.assertArgument)(index <= 0xffffffff, "invalid index", "index", index);
          // Base path
          let path = this.path;
          if (path) {
              path += "/" + (index & ~HardenedBit);
              if (index & HardenedBit) path += "'";
          }
          const { IR , IL  } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);
          const ki = new (0, _indexJs.SigningKey)((0, _indexJs3.toBeHex)(((0, _indexJs3.toBigInt)(IL) + BigInt(this.privateKey)) % N, 32));
          return new HDNodeWallet(_guard, ki, this.fingerprint, (0, _indexJs3.hexlify)(IR), path, index, this.depth + 1, this.mnemonic, this.provider);
      }
      /**
       *  Return the HDNode for %%path%% from this node.
       */ derivePath(path) {
          return derivePath(this, path);
      }
      static #fromSeed(_seed, mnemonic) {
          (0, _indexJs3.assertArgument)((0, _indexJs3.isBytesLike)(_seed), "invalid seed", "seed", "[REDACTED]");
          const seed = (0, _indexJs3.getBytes)(_seed, "seed");
          (0, _indexJs3.assertArgument)(seed.length >= 16 && seed.length <= 64, "invalid seed", "seed", "[REDACTED]");
          const I = (0, _indexJs3.getBytes)((0, _indexJs.computeHmac)("sha512", MasterSecret, seed));
          const signingKey = new (0, _indexJs.SigningKey)((0, _indexJs3.hexlify)(I.slice(0, 32)));
          return new HDNodeWallet(_guard, signingKey, "0x00000000", (0, _indexJs3.hexlify)(I.slice(32)), "m", 0, 0, mnemonic, null);
      }
      /**
       *  Creates a new HD Node from %%extendedKey%%.
       *
       *  If the %%extendedKey%% will either have a prefix or ``xpub`` or
       *  ``xpriv``, returning a neutered HD Node ([[HDNodeVoidWallet]])
       *  or full HD Node ([[HDNodeWallet) respectively.
       */ static fromExtendedKey(extendedKey) {
          const bytes = (0, _indexJs3.toBeArray)((0, _indexJs3.decodeBase58)(extendedKey)); // @TODO: redact
          (0, _indexJs3.assertArgument)(bytes.length === 82 || encodeBase58Check(bytes.slice(0, 78)) === extendedKey, "invalid extended key", "extendedKey", "[ REDACTED ]");
          const depth = bytes[4];
          const parentFingerprint = (0, _indexJs3.hexlify)(bytes.slice(5, 9));
          const index = parseInt((0, _indexJs3.hexlify)(bytes.slice(9, 13)).substring(2), 16);
          const chainCode = (0, _indexJs3.hexlify)(bytes.slice(13, 45));
          const key = bytes.slice(45, 78);
          switch((0, _indexJs3.hexlify)(bytes.slice(0, 4))){
              // Public Key
              case "0x0488b21e":
              case "0x043587cf":
                  {
                      const publicKey = (0, _indexJs3.hexlify)(key);
                      return new HDNodeVoidWallet(_guard, (0, _indexJs2.computeAddress)(publicKey), publicKey, parentFingerprint, chainCode, null, index, depth, null);
                  }
              // Private Key
              case "0x0488ade4":
              case "0x04358394 ":
                  if (key[0] !== 0) break;
                  return new HDNodeWallet(_guard, new (0, _indexJs.SigningKey)(key.slice(1)), parentFingerprint, chainCode, null, index, depth, null, null);
          }
          (0, _indexJs3.assertArgument)(false, "invalid extended key prefix", "extendedKey", "[ REDACTED ]");
      }
      /**
       *  Creates a new random HDNode.
       */ static createRandom(password, path, wordlist) {
          if (password == null) password = "";
          if (path == null) path = defaultPath;
          if (wordlist == null) wordlist = (0, _langEnJs.LangEn).wordlist();
          const mnemonic = (0, _mnemonicJs.Mnemonic).fromEntropy((0, _indexJs.randomBytes)(16), password, wordlist);
          return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);
      }
      /**
       *  Create am HD Node from %%mnemonic%%.
       */ static fromMnemonic(mnemonic, path) {
          if (!path) path = defaultPath;
          return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);
      }
      /**
       *  Creates an HD Node from a mnemonic %%phrase%%.
       */ static fromPhrase(phrase, password, path, wordlist) {
          if (password == null) password = "";
          if (path == null) path = defaultPath;
          if (wordlist == null) wordlist = (0, _langEnJs.LangEn).wordlist();
          const mnemonic = (0, _mnemonicJs.Mnemonic).fromPhrase(phrase, password, wordlist);
          return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);
      }
      /**
       *  Creates an HD Node from a %%seed%%.
       */ static fromSeed(seed) {
          return HDNodeWallet.#fromSeed(seed, null);
      }
  }
  class HDNodeVoidWallet extends (0, _indexJs1.VoidSigner) {
      /**
       *  The compressed public key.
       */ publicKey;
      /**
       *  The fingerprint.
       *
       *  A fingerprint allows quick qay to detect parent and child nodes,
       *  but developers should be prepared to deal with collisions as it
       *  is only 4 bytes.
       */ fingerprint;
      /**
       *  The parent node fingerprint.
       */ parentFingerprint;
      /**
       *  The chaincode, which is effectively a public key used
       *  to derive children.
       */ chainCode;
      /**
       *  The derivation path of this wallet.
       *
       *  Since extended keys do not provider full path details, this
       *  may be ``null``, if instantiated from a source that does not
       *  enocde it.
       */ path;
      /**
       *  The child index of this wallet. Values over ``2 *\* 31`` indicate
       *  the node is hardened.
       */ index;
      /**
       *  The depth of this wallet, which is the number of components
       *  in its path.
       */ depth;
      /**
       *  @private
       */ constructor(guard, address, publicKey, parentFingerprint, chainCode, path, index, depth, provider){
          super(address, provider);
          (0, _indexJs3.assertPrivate)(guard, _guard, "HDNodeVoidWallet");
          (0, _indexJs3.defineProperties)(this, {
              publicKey
          });
          const fingerprint = (0, _indexJs3.dataSlice)((0, _indexJs.ripemd160)((0, _indexJs.sha256)(publicKey)), 0, 4);
          (0, _indexJs3.defineProperties)(this, {
              publicKey,
              fingerprint,
              parentFingerprint,
              chainCode,
              path,
              index,
              depth
          });
      }
      connect(provider) {
          return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);
      }
      /**
       *  The extended key.
       *
       *  This key will begin with the prefix ``xpub`` and can be used to
       *  reconstruct this neutered key to derive its children addresses.
       */ get extendedKey() {
          // We only support the mainnet values for now, but if anyone needs
          // testnet values, let me know. I believe current sentiment is that
          // we should always use mainnet, and use BIP-44 to derive the network
          //   - Mainnet: public=0x0488B21E, private=0x0488ADE4
          //   - Testnet: public=0x043587CF, private=0x04358394
          (0, _indexJs3.assert)(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", {
              operation: "extendedKey"
          });
          return encodeBase58Check((0, _indexJs3.concat)([
              "0x0488B21E",
              zpad(this.depth, 1),
              this.parentFingerprint,
              zpad(this.index, 4),
              this.chainCode,
              this.publicKey
          ]));
      }
      /**
       *  Returns true if this wallet has a path, providing a Type Guard
       *  that the path is non-null.
       */ hasPath() {
          return this.path != null;
      }
      /**
       *  Return the child for %%index%%.
       */ deriveChild(_index) {
          const index = (0, _indexJs3.getNumber)(_index, "index");
          (0, _indexJs3.assertArgument)(index <= 0xffffffff, "invalid index", "index", index);
          // Base path
          let path = this.path;
          if (path) {
              path += "/" + (index & ~HardenedBit);
              if (index & HardenedBit) path += "'";
          }
          const { IR , IL  } = ser_I(index, this.chainCode, this.publicKey, null);
          const Ki = (0, _indexJs.SigningKey).addPoints(IL, this.publicKey, true);
          const address = (0, _indexJs2.computeAddress)(Ki);
          return new HDNodeVoidWallet(_guard, address, Ki, this.fingerprint, (0, _indexJs3.hexlify)(IR), path, index, this.depth + 1, this.provider);
      }
      /**
       *  Return the signer for %%path%% from this node.
       */ derivePath(path) {
          return derivePath(this, path);
      }
  }
  function getAccountPath(_index) {
      const index = (0, _indexJs3.getNumber)(_index, "index");
      (0, _indexJs3.assertArgument)(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
      return `m/44'/60'/${index}'/0/0`;
  }
  function getIndexedAccountPath(_index) {
      const index = (0, _indexJs3.getNumber)(_index, "index");
      (0, _indexJs3.assertArgument)(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
      return `m/44'/60'/0'/0/${index}`;
  }
  
  },{"../crypto/index.js":"4oi1q","../providers/index.js":"62nP6","../transaction/index.js":"cOUq6","../utils/index.js":"jGhd9","../wordlists/lang-en.js":"6yvx9","./base-wallet.js":"jtsRw","./mnemonic.js":"duTnv","./json-keystore.js":"iJXOk","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"6yvx9":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  The [[link-bip39-en]] for [mnemonic phrases](link-bip-39).
   *
   *  @_docloc: api/wordlists
   */ parcelHelpers.export(exports, "LangEn", ()=>LangEn);
  var _wordlistOwlJs = require("./wordlist-owl.js");
  const words = "0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO";
  const checksum = "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60";
  let wordlist = null;
  class LangEn extends (0, _wordlistOwlJs.WordlistOwl) {
      /**
       *  Creates a new instance of the English language Wordlist.
       *
       *  This should be unnecessary most of the time as the exported
       *  [[langEn]] should suffice.
       *
       *  @_ignore:
       */ constructor(){
          super("en", words, checksum);
      }
      /**
       *  Returns a singleton instance of a ``LangEn``, creating it
       *  if this is the first time being called.
       */ static wordlist() {
          if (wordlist == null) wordlist = new LangEn();
          return wordlist;
      }
  }
  
  },{"./wordlist-owl.js":"k14dg","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"k14dg":[function(require,module,exports) {
  // Use the encode-latin.js script to create the necessary
  // data files to be consumed by this class
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  An OWL format Wordlist is an encoding method that exploits
   *  the general locality of alphabetically sorted words to
   *  achieve a simple but effective means of compression.
   *
   *  This class is generally not useful to most developers as
   *  it is used mainly internally to keep Wordlists for languages
   *  based on ASCII-7 small.
   *
   *  If necessary, there are tools within the ``generation/`` folder
   *  to create these necessary data.
   */ parcelHelpers.export(exports, "WordlistOwl", ()=>WordlistOwl);
  var _indexJs = require("../hash/index.js");
  var _indexJs1 = require("../utils/index.js");
  var _decodeOwlJs = require("./decode-owl.js");
  var _wordlistJs = require("./wordlist.js");
  class WordlistOwl extends (0, _wordlistJs.Wordlist) {
      #data;
      #checksum;
      /**
       *  Creates a new Wordlist for %%locale%% using the OWL %%data%%
       *  and validated against the %%checksum%%.
       */ constructor(locale, data, checksum){
          super(locale);
          this.#data = data;
          this.#checksum = checksum;
          this.#words = null;
      }
      get _data() {
          return this.#data;
      }
      _decodeWords() {
          return (0, _decodeOwlJs.decodeOwl)(this.#data);
      }
      #words;
      #loadWords() {
          if (this.#words == null) {
              const words = this._decodeWords();
              // Verify the computed list matches the official list
              const checksum = (0, _indexJs.id)(words.join("\n") + "\n");
              /* c8 ignore start */ if (checksum !== this.#checksum) throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);
              /* c8 ignore stop */ this.#words = words;
          }
          return this.#words;
      }
      getWord(index) {
          const words = this.#loadWords();
          (0, _indexJs1.assertArgument)(index >= 0 && index < words.length, `invalid word index: ${index}`, "index", index);
          return words[index];
      }
      getWordIndex(word) {
          return this.#loadWords().indexOf(word);
      }
  }
  
  },{"../hash/index.js":"bTSS2","../utils/index.js":"jGhd9","./decode-owl.js":"cz2eX","./wordlist.js":"90nDK","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"cz2eX":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  @_ignore
   */ parcelHelpers.export(exports, "decode", ()=>decode);
  /**
   *  @_ignore
   */ parcelHelpers.export(exports, "decodeOwl", ()=>decodeOwl);
  var _indexJs = require("../utils/index.js");
  const subsChrs = " !#$%&'()*+,-./<=>?@[]^_`{|}~";
  const Word = /^[a-z]*$/i;
  function unfold(words, sep) {
      let initial = 97;
      return words.reduce((accum, word)=>{
          if (word === sep) initial++;
          else if (word.match(Word)) accum.push(String.fromCharCode(initial) + word);
          else {
              initial = 97;
              accum.push(word);
          }
          return accum;
      }, []);
  }
  function decode(data, subs) {
      // Replace all the substitutions with their expanded form
      for(let i = subsChrs.length - 1; i >= 0; i--)data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));
      // Get all tle clumps; each suffix, first-increment and second-increment
      const clumps = [];
      const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word)=>{
          if (semi) for(let i = parseInt(semi); i >= 0; i--)clumps.push(";");
          else clumps.push(item.toLowerCase());
          return "";
      });
      /* c8 ignore start */ if (leftover) throw new Error(`leftovers: ${JSON.stringify(leftover)}`);
      /* c8 ignore stop */ return unfold(unfold(clumps, ";"), ":");
  }
  function decodeOwl(data) {
      (0, _indexJs.assertArgument)(data[0] === "0", "unsupported auwl data", "data", data);
      return decode(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));
  }
  
  },{"../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"90nDK":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  A Wordlist represents a collection of language-specific
   *  words used to encode and devoce [[link-bip-39]] encoded data
   *  by mapping words to 11-bit values and vice versa.
   */ parcelHelpers.export(exports, "Wordlist", ()=>Wordlist);
  var _indexJs = require("../utils/index.js");
  class Wordlist {
      locale;
      /**
       *  Creates a new Wordlist instance.
       *
       *  Sub-classes MUST call this if they provide their own constructor,
       *  passing in the locale string of the language.
       *
       *  Generally there is no need to create instances of a Wordlist,
       *  since each language-specific Wordlist creates an instance and
       *  there is no state kept internally, so they are safe to share.
       */ constructor(locale){
          (0, _indexJs.defineProperties)(this, {
              locale
          });
      }
      /**
       *  Sub-classes may override this to provide a language-specific
       *  method for spliting %%phrase%% into individual words.
       *
       *  By default, %%phrase%% is split using any sequences of
       *  white-space as defined by regular expressions (i.e. ``/\s+/``).
       */ split(phrase) {
          return phrase.toLowerCase().split(/\s+/g);
      }
      /**
       *  Sub-classes may override this to provider a language-specific
       *  method for joining %%words%% into a phrase.
       *
       *  By default, %%words%% are joined by a single space.
       */ join(words) {
          return words.join(" ");
      }
  }
  
  },{"../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"duTnv":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  A **Mnemonic** wraps all properties required to compute [[link-bip-39]]
   *  seeds and convert between phrases and entropy.
   */ parcelHelpers.export(exports, "Mnemonic", ()=>Mnemonic);
  var _indexJs = require("../crypto/index.js");
  var _indexJs1 = require("../utils/index.js");
  var _langEnJs = require("../wordlists/lang-en.js");
  // Returns a byte with the MSB bits set
  function getUpperMask(bits) {
      return (1 << bits) - 1 << 8 - bits & 0xff;
  }
  // Returns a byte with the LSB bits set
  function getLowerMask(bits) {
      return (1 << bits) - 1 & 0xff;
  }
  function mnemonicToEntropy(mnemonic, wordlist) {
      (0, _indexJs1.assertNormalize)("NFKD");
      if (wordlist == null) wordlist = (0, _langEnJs.LangEn).wordlist();
      const words = wordlist.split(mnemonic);
      (0, _indexJs1.assertArgument)(words.length % 3 === 0 && words.length >= 12 && words.length <= 24, "invalid mnemonic length", "mnemonic", "[ REDACTED ]");
      const entropy = new Uint8Array(Math.ceil(11 * words.length / 8));
      let offset = 0;
      for(let i = 0; i < words.length; i++){
          let index = wordlist.getWordIndex(words[i].normalize("NFKD"));
          (0, _indexJs1.assertArgument)(index >= 0, `invalid mnemonic word at index ${i}`, "mnemonic", "[ REDACTED ]");
          for(let bit = 0; bit < 11; bit++){
              if (index & 1 << 10 - bit) entropy[offset >> 3] |= 1 << 7 - offset % 8;
              offset++;
          }
      }
      const entropyBits = 32 * words.length / 3;
      const checksumBits = words.length / 3;
      const checksumMask = getUpperMask(checksumBits);
      const checksum = (0, _indexJs1.getBytes)((0, _indexJs.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
      (0, _indexJs1.assertArgument)(checksum === (entropy[entropy.length - 1] & checksumMask), "invalid mnemonic checksum", "mnemonic", "[ REDACTED ]");
      return (0, _indexJs1.hexlify)(entropy.slice(0, entropyBits / 8));
  }
  function entropyToMnemonic(entropy, wordlist) {
      (0, _indexJs1.assertArgument)(entropy.length % 4 === 0 && entropy.length >= 16 && entropy.length <= 32, "invalid entropy size", "entropy", "[ REDACTED ]");
      if (wordlist == null) wordlist = (0, _langEnJs.LangEn).wordlist();
      const indices = [
          0
      ];
      let remainingBits = 11;
      for(let i = 0; i < entropy.length; i++)// Consume the whole byte (with still more to go)
      if (remainingBits > 8) {
          indices[indices.length - 1] <<= 8;
          indices[indices.length - 1] |= entropy[i];
          remainingBits -= 8;
      // This byte will complete an 11-bit index
      } else {
          indices[indices.length - 1] <<= remainingBits;
          indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;
          // Start the next word
          indices.push(entropy[i] & getLowerMask(8 - remainingBits));
          remainingBits += 3;
      }
      // Compute the checksum bits
      const checksumBits = entropy.length / 4;
      const checksum = parseInt((0, _indexJs.sha256)(entropy).substring(2, 4), 16) & getUpperMask(checksumBits);
      // Shift the checksum into the word indices
      indices[indices.length - 1] <<= checksumBits;
      indices[indices.length - 1] |= checksum >> 8 - checksumBits;
      return wordlist.join(indices.map((index)=>wordlist.getWord(index)));
  }
  const _guard = {};
  class Mnemonic {
      /**
       *  The mnemonic phrase of 12, 15, 18, 21 or 24 words.
       *
       *  Use the [[wordlist]] ``split`` method to get the individual words.
       */ phrase;
      /**
       *  The password used for this mnemonic. If no password is used this
       *  is the empty string (i.e. ``""``) as per the specification.
       */ password;
      /**
       *  The wordlist for this mnemonic.
       */ wordlist;
      /**
       *  The underlying entropy which the mnemonic encodes.
       */ entropy;
      /**
       *  @private
       */ constructor(guard, entropy, phrase, password, wordlist){
          if (password == null) password = "";
          if (wordlist == null) wordlist = (0, _langEnJs.LangEn).wordlist();
          (0, _indexJs1.assertPrivate)(guard, _guard, "Mnemonic");
          (0, _indexJs1.defineProperties)(this, {
              phrase,
              password,
              wordlist,
              entropy
          });
      }
      /**
       *  Returns the seed for the mnemonic.
       */ computeSeed() {
          const salt = (0, _indexJs1.toUtf8Bytes)("mnemonic" + this.password, "NFKD");
          return (0, _indexJs.pbkdf2)((0, _indexJs1.toUtf8Bytes)(this.phrase, "NFKD"), salt, 2048, 64, "sha512");
      }
      /**
       *  Creates a new Mnemonic for the %%phrase%%.
       *
       *  The default %%password%% is the empty string and the default
       *  wordlist is the [English wordlists](LangEn).
       */ static fromPhrase(phrase, password, wordlist) {
          // Normalize the case and space; throws if invalid
          const entropy = mnemonicToEntropy(phrase, wordlist);
          phrase = entropyToMnemonic((0, _indexJs1.getBytes)(entropy), wordlist);
          return new Mnemonic(_guard, entropy, phrase, password, wordlist);
      }
      /**
       *  Create a new **Mnemonic** from the %%entropy%%.
       *
       *  The default %%password%% is the empty string and the default
       *  wordlist is the [English wordlists](LangEn).
       */ static fromEntropy(_entropy, password, wordlist) {
          const entropy = (0, _indexJs1.getBytes)(_entropy, "entropy");
          const phrase = entropyToMnemonic(entropy, wordlist);
          return new Mnemonic(_guard, (0, _indexJs1.hexlify)(entropy), phrase, password, wordlist);
      }
      /**
       *  Returns the phrase for %%mnemonic%%.
       */ static entropyToPhrase(_entropy, wordlist) {
          const entropy = (0, _indexJs1.getBytes)(_entropy, "entropy");
          return entropyToMnemonic(entropy, wordlist);
      }
      /**
       *  Returns the entropy for %%phrase%%.
       */ static phraseToEntropy(phrase, wordlist) {
          return mnemonicToEntropy(phrase, wordlist);
      }
      /**
       *  Returns true if %%phrase%% is a valid [[link-bip-39]] phrase.
       *
       *  This checks all the provided words belong to the %%wordlist%%,
       *  that the length is valid and the checksum is correct.
       */ static isValidMnemonic(phrase, wordlist) {
          try {
              mnemonicToEntropy(phrase, wordlist);
              return true;
          } catch (error) {}
          return false;
      }
  }
  
  },{"../crypto/index.js":"4oi1q","../utils/index.js":"jGhd9","../wordlists/lang-en.js":"6yvx9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"iJXOk":[function(require,module,exports) {
  /**
   *  The JSON Wallet formats allow a simple way to store the private
   *  keys needed in Ethereum along with related information and allows
   *  for extensible forms of encryption.
   *
   *  These utilities facilitate decrypting and encrypting the most common
   *  JSON Wallet formats.
   *
   *  @_subsection: api/wallet:JSON Wallets  [json-wallets]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Returns true if %%json%% is a valid JSON Keystore Wallet.
   */ parcelHelpers.export(exports, "isKeystoreJson", ()=>isKeystoreJson);
  /**
   *  Returns the account details for the JSON Keystore Wallet %%json%%
   *  using %%password%%.
   *
   *  It is preferred to use the [async version](decryptKeystoreJson)
   *  instead, which allows a [[ProgressCallback]] to keep the user informed
   *  as to the decryption status.
   *
   *  This method will block the event loop (freezing all UI) until decryption
   *  is complete, which can take quite some time, depending on the wallet
   *  paramters and platform.
   */ parcelHelpers.export(exports, "decryptKeystoreJsonSync", ()=>decryptKeystoreJsonSync);
  /**
   *  Resolves to the decrypted JSON Keystore Wallet %%json%% using the
   *  %%password%%.
   *
   *  If provided, %%progress%% will be called periodically during the
   *  decrpytion to provide feedback, and if the function returns
   *  ``false`` will halt decryption.
   *
   *  The %%progressCallback%% will **always** receive ``0`` before
   *  decryption begins and ``1`` when complete.
   */ parcelHelpers.export(exports, "decryptKeystoreJson", ()=>decryptKeystoreJson);
  /**
   *  Return the JSON Keystore Wallet for %%account%% encrypted with
   *  %%password%%.
   *
   *  The %%options%% can be used to tune the password-based key
   *  derivation function parameters, explicitly set the random values
   *  used. Any provided [[ProgressCallback]] is ignord.
   */ parcelHelpers.export(exports, "encryptKeystoreJsonSync", ()=>encryptKeystoreJsonSync);
  /**
   *  Resolved to the JSON Keystore Wallet for %%account%% encrypted
   *  with %%password%%.
   *
   *  The %%options%% can be used to tune the password-based key
   *  derivation function parameters, explicitly set the random values
   *  used and provide a [[ProgressCallback]] to receive periodic updates
   *  on the completion status..
   */ parcelHelpers.export(exports, "encryptKeystoreJson", ()=>encryptKeystoreJson);
  var _aesJs = require("aes-js");
  var _indexJs = require("../address/index.js");
  var _indexJs1 = require("../crypto/index.js");
  var _indexJs2 = require("../transaction/index.js");
  var _indexJs3 = require("../utils/index.js");
  var _utilsJs = require("./utils.js");
  var _versionJs = require("../_version.js");
  const defaultPath = "m/44'/60'/0'/0/0";
  function isKeystoreJson(json) {
      try {
          const data = JSON.parse(json);
          const version = data.version != null ? parseInt(data.version) : 0;
          if (version === 3) return true;
      } catch (error) {}
      return false;
  }
  function decrypt(data, key, ciphertext) {
      const cipher = (0, _utilsJs.spelunk)(data, "crypto.cipher:string");
      if (cipher === "aes-128-ctr") {
          const iv = (0, _utilsJs.spelunk)(data, "crypto.cipherparams.iv:data!");
          const aesCtr = new (0, _aesJs.CTR)(key, iv);
          return (0, _indexJs3.hexlify)(aesCtr.decrypt(ciphertext));
      }
      (0, _indexJs3.assert)(false, "unsupported cipher", "UNSUPPORTED_OPERATION", {
          operation: "decrypt"
      });
  }
  function getAccount(data, _key) {
      const key = (0, _indexJs3.getBytes)(_key);
      const ciphertext = (0, _utilsJs.spelunk)(data, "crypto.ciphertext:data!");
      const computedMAC = (0, _indexJs3.hexlify)((0, _indexJs1.keccak256)((0, _indexJs3.concat)([
          key.slice(16, 32),
          ciphertext
      ]))).substring(2);
      (0, _indexJs3.assertArgument)(computedMAC === (0, _utilsJs.spelunk)(data, "crypto.mac:string!").toLowerCase(), "incorrect password", "password", "[ REDACTED ]");
      const privateKey = decrypt(data, key.slice(0, 16), ciphertext);
      const address = (0, _indexJs2.computeAddress)(privateKey);
      if (data.address) {
          let check = data.address.toLowerCase();
          if (!check.startsWith("0x")) check = "0x" + check;
          (0, _indexJs3.assertArgument)((0, _indexJs.getAddress)(check) === address, "keystore address/privateKey mismatch", "address", data.address);
      }
      const account = {
          address,
          privateKey
      };
      // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase
      const version = (0, _utilsJs.spelunk)(data, "x-ethers.version:string");
      if (version === "0.1") {
          const mnemonicKey = key.slice(32, 64);
          const mnemonicCiphertext = (0, _utilsJs.spelunk)(data, "x-ethers.mnemonicCiphertext:data!");
          const mnemonicIv = (0, _utilsJs.spelunk)(data, "x-ethers.mnemonicCounter:data!");
          const mnemonicAesCtr = new (0, _aesJs.CTR)(mnemonicKey, mnemonicIv);
          account.mnemonic = {
              path: (0, _utilsJs.spelunk)(data, "x-ethers.path:string") || defaultPath,
              locale: (0, _utilsJs.spelunk)(data, "x-ethers.locale:string") || "en",
              entropy: (0, _indexJs3.hexlify)((0, _indexJs3.getBytes)(mnemonicAesCtr.decrypt(mnemonicCiphertext)))
          };
      }
      return account;
  }
  function getDecryptKdfParams(data) {
      const kdf = (0, _utilsJs.spelunk)(data, "crypto.kdf:string");
      if (kdf && typeof kdf === "string") {
          if (kdf.toLowerCase() === "scrypt") {
              const salt = (0, _utilsJs.spelunk)(data, "crypto.kdfparams.salt:data!");
              const N = (0, _utilsJs.spelunk)(data, "crypto.kdfparams.n:int!");
              const r = (0, _utilsJs.spelunk)(data, "crypto.kdfparams.r:int!");
              const p = (0, _utilsJs.spelunk)(data, "crypto.kdfparams.p:int!");
              // Make sure N is a power of 2
              (0, _indexJs3.assertArgument)(N > 0 && (N & N - 1) === 0, "invalid kdf.N", "kdf.N", N);
              (0, _indexJs3.assertArgument)(r > 0 && p > 0, "invalid kdf", "kdf", kdf);
              const dkLen = (0, _utilsJs.spelunk)(data, "crypto.kdfparams.dklen:int!");
              (0, _indexJs3.assertArgument)(dkLen === 32, "invalid kdf.dklen", "kdf.dflen", dkLen);
              return {
                  name: "scrypt",
                  salt,
                  N,
                  r,
                  p,
                  dkLen: 64
              };
          } else if (kdf.toLowerCase() === "pbkdf2") {
              const salt = (0, _utilsJs.spelunk)(data, "crypto.kdfparams.salt:data!");
              const prf = (0, _utilsJs.spelunk)(data, "crypto.kdfparams.prf:string!");
              const algorithm = prf.split("-").pop();
              (0, _indexJs3.assertArgument)(algorithm === "sha256" || algorithm === "sha512", "invalid kdf.pdf", "kdf.pdf", prf);
              const count = (0, _utilsJs.spelunk)(data, "crypto.kdfparams.c:int!");
              const dkLen = (0, _utilsJs.spelunk)(data, "crypto.kdfparams.dklen:int!");
              (0, _indexJs3.assertArgument)(dkLen === 32, "invalid kdf.dklen", "kdf.dklen", dkLen);
              return {
                  name: "pbkdf2",
                  salt,
                  count,
                  dkLen,
                  algorithm
              };
          }
      }
      (0, _indexJs3.assertArgument)(false, "unsupported key-derivation function", "kdf", kdf);
  }
  function decryptKeystoreJsonSync(json, _password) {
      const data = JSON.parse(json);
      const password = (0, _utilsJs.getPassword)(_password);
      const params = getDecryptKdfParams(data);
      if (params.name === "pbkdf2") {
          const { salt , count , dkLen , algorithm  } = params;
          const key = (0, _indexJs1.pbkdf2)(password, salt, count, dkLen, algorithm);
          return getAccount(data, key);
      }
      (0, _indexJs3.assert)(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", {
          params
      });
      const { salt , N , r , p , dkLen  } = params;
      const key = (0, _indexJs1.scryptSync)(password, salt, N, r, p, dkLen);
      return getAccount(data, key);
  }
  function stall(duration) {
      return new Promise((resolve)=>{
          setTimeout(()=>{
              resolve();
          }, duration);
      });
  }
  async function decryptKeystoreJson(json, _password, progress) {
      const data = JSON.parse(json);
      const password = (0, _utilsJs.getPassword)(_password);
      const params = getDecryptKdfParams(data);
      if (params.name === "pbkdf2") {
          if (progress) {
              progress(0);
              await stall(0);
          }
          const { salt , count , dkLen , algorithm  } = params;
          const key = (0, _indexJs1.pbkdf2)(password, salt, count, dkLen, algorithm);
          if (progress) {
              progress(1);
              await stall(0);
          }
          return getAccount(data, key);
      }
      (0, _indexJs3.assert)(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", {
          params
      });
      const { salt , N , r , p , dkLen  } = params;
      const key = await (0, _indexJs1.scrypt)(password, salt, N, r, p, dkLen, progress);
      return getAccount(data, key);
  }
  function getEncryptKdfParams(options) {
      // Check/generate the salt
      const salt = options.salt != null ? (0, _indexJs3.getBytes)(options.salt, "options.salt") : (0, _indexJs1.randomBytes)(32);
      // Override the scrypt password-based key derivation function parameters
      let N = 131072, r = 8, p = 1;
      if (options.scrypt) {
          if (options.scrypt.N) N = options.scrypt.N;
          if (options.scrypt.r) r = options.scrypt.r;
          if (options.scrypt.p) p = options.scrypt.p;
      }
      (0, _indexJs3.assertArgument)(typeof N === "number" && N > 0 && Number.isSafeInteger(N) && (BigInt(N) & BigInt(N - 1)) === BigInt(0), "invalid scrypt N parameter", "options.N", N);
      (0, _indexJs3.assertArgument)(typeof r === "number" && r > 0 && Number.isSafeInteger(r), "invalid scrypt r parameter", "options.r", r);
      (0, _indexJs3.assertArgument)(typeof p === "number" && p > 0 && Number.isSafeInteger(p), "invalid scrypt p parameter", "options.p", p);
      return {
          name: "scrypt",
          dkLen: 32,
          salt,
          N,
          r,
          p
      };
  }
  function _encryptKeystore(key, kdf, account, options) {
      const privateKey = (0, _indexJs3.getBytes)(account.privateKey, "privateKey");
      // Override initialization vector
      const iv = options.iv != null ? (0, _indexJs3.getBytes)(options.iv, "options.iv") : (0, _indexJs1.randomBytes)(16);
      (0, _indexJs3.assertArgument)(iv.length === 16, "invalid options.iv length", "options.iv", options.iv);
      // Override the uuid
      const uuidRandom = options.uuid != null ? (0, _indexJs3.getBytes)(options.uuid, "options.uuid") : (0, _indexJs1.randomBytes)(16);
      (0, _indexJs3.assertArgument)(uuidRandom.length === 16, "invalid options.uuid length", "options.uuid", options.iv);
      // This will be used to encrypt the wallet (as per Web3 secret storage)
      // - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)
      // - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)
      const derivedKey = key.slice(0, 16);
      const macPrefix = key.slice(16, 32);
      // Encrypt the private key
      const aesCtr = new (0, _aesJs.CTR)(derivedKey, iv);
      const ciphertext = (0, _indexJs3.getBytes)(aesCtr.encrypt(privateKey));
      // Compute the message authentication code, used to check the password
      const mac = (0, _indexJs1.keccak256)((0, _indexJs3.concat)([
          macPrefix,
          ciphertext
      ]));
      // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition
      const data = {
          address: account.address.substring(2).toLowerCase(),
          id: (0, _indexJs3.uuidV4)(uuidRandom),
          version: 3,
          Crypto: {
              cipher: "aes-128-ctr",
              cipherparams: {
                  iv: (0, _indexJs3.hexlify)(iv).substring(2)
              },
              ciphertext: (0, _indexJs3.hexlify)(ciphertext).substring(2),
              kdf: "scrypt",
              kdfparams: {
                  salt: (0, _indexJs3.hexlify)(kdf.salt).substring(2),
                  n: kdf.N,
                  dklen: 32,
                  p: kdf.p,
                  r: kdf.r
              },
              mac: mac.substring(2)
          }
      };
      // If we have a mnemonic, encrypt it into the JSON wallet
      if (account.mnemonic) {
          const client = options.client != null ? options.client : `ethers/${0, _versionJs.version}`;
          const path = account.mnemonic.path || defaultPath;
          const locale = account.mnemonic.locale || "en";
          const mnemonicKey = key.slice(32, 64);
          const entropy = (0, _indexJs3.getBytes)(account.mnemonic.entropy, "account.mnemonic.entropy");
          const mnemonicIv = (0, _indexJs1.randomBytes)(16);
          const mnemonicAesCtr = new (0, _aesJs.CTR)(mnemonicKey, mnemonicIv);
          const mnemonicCiphertext = (0, _indexJs3.getBytes)(mnemonicAesCtr.encrypt(entropy));
          const now = new Date();
          const timestamp = now.getUTCFullYear() + "-" + (0, _utilsJs.zpad)(now.getUTCMonth() + 1, 2) + "-" + (0, _utilsJs.zpad)(now.getUTCDate(), 2) + "T" + (0, _utilsJs.zpad)(now.getUTCHours(), 2) + "-" + (0, _utilsJs.zpad)(now.getUTCMinutes(), 2) + "-" + (0, _utilsJs.zpad)(now.getUTCSeconds(), 2) + ".0Z";
          const gethFilename = "UTC--" + timestamp + "--" + data.address;
          data["x-ethers"] = {
              client,
              gethFilename,
              path,
              locale,
              mnemonicCounter: (0, _indexJs3.hexlify)(mnemonicIv).substring(2),
              mnemonicCiphertext: (0, _indexJs3.hexlify)(mnemonicCiphertext).substring(2),
              version: "0.1"
          };
      }
      return JSON.stringify(data);
  }
  function encryptKeystoreJsonSync(account, password, options) {
      if (options == null) options = {};
      const passwordBytes = (0, _utilsJs.getPassword)(password);
      const kdf = getEncryptKdfParams(options);
      const key = (0, _indexJs1.scryptSync)(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);
      return _encryptKeystore((0, _indexJs3.getBytes)(key), kdf, account, options);
  }
  async function encryptKeystoreJson(account, password, options) {
      if (options == null) options = {};
      const passwordBytes = (0, _utilsJs.getPassword)(password);
      const kdf = getEncryptKdfParams(options);
      const key = await (0, _indexJs1.scrypt)(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);
      return _encryptKeystore((0, _indexJs3.getBytes)(key), kdf, account, options);
  }
  
  },{"aes-js":"41GpS","../address/index.js":"cuJ87","../crypto/index.js":"4oi1q","../transaction/index.js":"cOUq6","../utils/index.js":"jGhd9","./utils.js":"9HSRk","../_version.js":"aosLW","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"41GpS":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "AES", ()=>(0, _aesJs.AES));
  parcelHelpers.export(exports, "ModeOfOperation", ()=>(0, _modeJs.ModeOfOperation));
  parcelHelpers.export(exports, "CBC", ()=>(0, _modeCbcJs.CBC));
  parcelHelpers.export(exports, "CFB", ()=>(0, _modeCfbJs.CFB));
  parcelHelpers.export(exports, "CTR", ()=>(0, _modeCtrJs.CTR));
  parcelHelpers.export(exports, "ECB", ()=>(0, _modeEcbJs.ECB));
  parcelHelpers.export(exports, "OFB", ()=>(0, _modeOfbJs.OFB));
  parcelHelpers.export(exports, "pkcs7Pad", ()=>(0, _paddingJs.pkcs7Pad));
  parcelHelpers.export(exports, "pkcs7Strip", ()=>(0, _paddingJs.pkcs7Strip));
  var _aesJs = require("./aes.js");
  var _modeJs = require("./mode.js");
  var _modeCbcJs = require("./mode-cbc.js");
  var _modeCfbJs = require("./mode-cfb.js");
  var _modeCtrJs = require("./mode-ctr.js");
  var _modeEcbJs = require("./mode-ecb.js");
  var _modeOfbJs = require("./mode-ofb.js");
  var _paddingJs = require("./padding.js");
  
  },{"./aes.js":"bEwGz","./mode.js":"5q2DJ","./mode-cbc.js":"keWoI","./mode-cfb.js":false,"./mode-ctr.js":"dKUqk","./mode-ecb.js":false,"./mode-ofb.js":false,"./padding.js":"5xFYX","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"bEwGz":[function(require,module,exports) {
  /*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "AES", ()=>AES);
  var __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  };
  var __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var _AES_key, _AES_Kd, _AES_Ke;
  // Number of rounds by keysize
  const numberOfRounds = {
      16: 10,
      24: 12,
      32: 14
  };
  // Round constant words
  const rcon = [
      0x01,
      0x02,
      0x04,
      0x08,
      0x10,
      0x20,
      0x40,
      0x80,
      0x1b,
      0x36,
      0x6c,
      0xd8,
      0xab,
      0x4d,
      0x9a,
      0x2f,
      0x5e,
      0xbc,
      0x63,
      0xc6,
      0x97,
      0x35,
      0x6a,
      0xd4,
      0xb3,
      0x7d,
      0xfa,
      0xef,
      0xc5,
      0x91
  ];
  // S-box and Inverse S-box (S is for Substitution)
  const S = [
      0x63,
      0x7c,
      0x77,
      0x7b,
      0xf2,
      0x6b,
      0x6f,
      0xc5,
      0x30,
      0x01,
      0x67,
      0x2b,
      0xfe,
      0xd7,
      0xab,
      0x76,
      0xca,
      0x82,
      0xc9,
      0x7d,
      0xfa,
      0x59,
      0x47,
      0xf0,
      0xad,
      0xd4,
      0xa2,
      0xaf,
      0x9c,
      0xa4,
      0x72,
      0xc0,
      0xb7,
      0xfd,
      0x93,
      0x26,
      0x36,
      0x3f,
      0xf7,
      0xcc,
      0x34,
      0xa5,
      0xe5,
      0xf1,
      0x71,
      0xd8,
      0x31,
      0x15,
      0x04,
      0xc7,
      0x23,
      0xc3,
      0x18,
      0x96,
      0x05,
      0x9a,
      0x07,
      0x12,
      0x80,
      0xe2,
      0xeb,
      0x27,
      0xb2,
      0x75,
      0x09,
      0x83,
      0x2c,
      0x1a,
      0x1b,
      0x6e,
      0x5a,
      0xa0,
      0x52,
      0x3b,
      0xd6,
      0xb3,
      0x29,
      0xe3,
      0x2f,
      0x84,
      0x53,
      0xd1,
      0x00,
      0xed,
      0x20,
      0xfc,
      0xb1,
      0x5b,
      0x6a,
      0xcb,
      0xbe,
      0x39,
      0x4a,
      0x4c,
      0x58,
      0xcf,
      0xd0,
      0xef,
      0xaa,
      0xfb,
      0x43,
      0x4d,
      0x33,
      0x85,
      0x45,
      0xf9,
      0x02,
      0x7f,
      0x50,
      0x3c,
      0x9f,
      0xa8,
      0x51,
      0xa3,
      0x40,
      0x8f,
      0x92,
      0x9d,
      0x38,
      0xf5,
      0xbc,
      0xb6,
      0xda,
      0x21,
      0x10,
      0xff,
      0xf3,
      0xd2,
      0xcd,
      0x0c,
      0x13,
      0xec,
      0x5f,
      0x97,
      0x44,
      0x17,
      0xc4,
      0xa7,
      0x7e,
      0x3d,
      0x64,
      0x5d,
      0x19,
      0x73,
      0x60,
      0x81,
      0x4f,
      0xdc,
      0x22,
      0x2a,
      0x90,
      0x88,
      0x46,
      0xee,
      0xb8,
      0x14,
      0xde,
      0x5e,
      0x0b,
      0xdb,
      0xe0,
      0x32,
      0x3a,
      0x0a,
      0x49,
      0x06,
      0x24,
      0x5c,
      0xc2,
      0xd3,
      0xac,
      0x62,
      0x91,
      0x95,
      0xe4,
      0x79,
      0xe7,
      0xc8,
      0x37,
      0x6d,
      0x8d,
      0xd5,
      0x4e,
      0xa9,
      0x6c,
      0x56,
      0xf4,
      0xea,
      0x65,
      0x7a,
      0xae,
      0x08,
      0xba,
      0x78,
      0x25,
      0x2e,
      0x1c,
      0xa6,
      0xb4,
      0xc6,
      0xe8,
      0xdd,
      0x74,
      0x1f,
      0x4b,
      0xbd,
      0x8b,
      0x8a,
      0x70,
      0x3e,
      0xb5,
      0x66,
      0x48,
      0x03,
      0xf6,
      0x0e,
      0x61,
      0x35,
      0x57,
      0xb9,
      0x86,
      0xc1,
      0x1d,
      0x9e,
      0xe1,
      0xf8,
      0x98,
      0x11,
      0x69,
      0xd9,
      0x8e,
      0x94,
      0x9b,
      0x1e,
      0x87,
      0xe9,
      0xce,
      0x55,
      0x28,
      0xdf,
      0x8c,
      0xa1,
      0x89,
      0x0d,
      0xbf,
      0xe6,
      0x42,
      0x68,
      0x41,
      0x99,
      0x2d,
      0x0f,
      0xb0,
      0x54,
      0xbb,
      0x16
  ];
  const Si = [
      0x52,
      0x09,
      0x6a,
      0xd5,
      0x30,
      0x36,
      0xa5,
      0x38,
      0xbf,
      0x40,
      0xa3,
      0x9e,
      0x81,
      0xf3,
      0xd7,
      0xfb,
      0x7c,
      0xe3,
      0x39,
      0x82,
      0x9b,
      0x2f,
      0xff,
      0x87,
      0x34,
      0x8e,
      0x43,
      0x44,
      0xc4,
      0xde,
      0xe9,
      0xcb,
      0x54,
      0x7b,
      0x94,
      0x32,
      0xa6,
      0xc2,
      0x23,
      0x3d,
      0xee,
      0x4c,
      0x95,
      0x0b,
      0x42,
      0xfa,
      0xc3,
      0x4e,
      0x08,
      0x2e,
      0xa1,
      0x66,
      0x28,
      0xd9,
      0x24,
      0xb2,
      0x76,
      0x5b,
      0xa2,
      0x49,
      0x6d,
      0x8b,
      0xd1,
      0x25,
      0x72,
      0xf8,
      0xf6,
      0x64,
      0x86,
      0x68,
      0x98,
      0x16,
      0xd4,
      0xa4,
      0x5c,
      0xcc,
      0x5d,
      0x65,
      0xb6,
      0x92,
      0x6c,
      0x70,
      0x48,
      0x50,
      0xfd,
      0xed,
      0xb9,
      0xda,
      0x5e,
      0x15,
      0x46,
      0x57,
      0xa7,
      0x8d,
      0x9d,
      0x84,
      0x90,
      0xd8,
      0xab,
      0x00,
      0x8c,
      0xbc,
      0xd3,
      0x0a,
      0xf7,
      0xe4,
      0x58,
      0x05,
      0xb8,
      0xb3,
      0x45,
      0x06,
      0xd0,
      0x2c,
      0x1e,
      0x8f,
      0xca,
      0x3f,
      0x0f,
      0x02,
      0xc1,
      0xaf,
      0xbd,
      0x03,
      0x01,
      0x13,
      0x8a,
      0x6b,
      0x3a,
      0x91,
      0x11,
      0x41,
      0x4f,
      0x67,
      0xdc,
      0xea,
      0x97,
      0xf2,
      0xcf,
      0xce,
      0xf0,
      0xb4,
      0xe6,
      0x73,
      0x96,
      0xac,
      0x74,
      0x22,
      0xe7,
      0xad,
      0x35,
      0x85,
      0xe2,
      0xf9,
      0x37,
      0xe8,
      0x1c,
      0x75,
      0xdf,
      0x6e,
      0x47,
      0xf1,
      0x1a,
      0x71,
      0x1d,
      0x29,
      0xc5,
      0x89,
      0x6f,
      0xb7,
      0x62,
      0x0e,
      0xaa,
      0x18,
      0xbe,
      0x1b,
      0xfc,
      0x56,
      0x3e,
      0x4b,
      0xc6,
      0xd2,
      0x79,
      0x20,
      0x9a,
      0xdb,
      0xc0,
      0xfe,
      0x78,
      0xcd,
      0x5a,
      0xf4,
      0x1f,
      0xdd,
      0xa8,
      0x33,
      0x88,
      0x07,
      0xc7,
      0x31,
      0xb1,
      0x12,
      0x10,
      0x59,
      0x27,
      0x80,
      0xec,
      0x5f,
      0x60,
      0x51,
      0x7f,
      0xa9,
      0x19,
      0xb5,
      0x4a,
      0x0d,
      0x2d,
      0xe5,
      0x7a,
      0x9f,
      0x93,
      0xc9,
      0x9c,
      0xef,
      0xa0,
      0xe0,
      0x3b,
      0x4d,
      0xae,
      0x2a,
      0xf5,
      0xb0,
      0xc8,
      0xeb,
      0xbb,
      0x3c,
      0x83,
      0x53,
      0x99,
      0x61,
      0x17,
      0x2b,
      0x04,
      0x7e,
      0xba,
      0x77,
      0xd6,
      0x26,
      0xe1,
      0x69,
      0x14,
      0x63,
      0x55,
      0x21,
      0x0c,
      0x7d
  ];
  // Transformations for encryption
  const T1 = [
      0xc66363a5,
      0xf87c7c84,
      0xee777799,
      0xf67b7b8d,
      0xfff2f20d,
      0xd66b6bbd,
      0xde6f6fb1,
      0x91c5c554,
      0x60303050,
      0x02010103,
      0xce6767a9,
      0x562b2b7d,
      0xe7fefe19,
      0xb5d7d762,
      0x4dababe6,
      0xec76769a,
      0x8fcaca45,
      0x1f82829d,
      0x89c9c940,
      0xfa7d7d87,
      0xeffafa15,
      0xb25959eb,
      0x8e4747c9,
      0xfbf0f00b,
      0x41adadec,
      0xb3d4d467,
      0x5fa2a2fd,
      0x45afafea,
      0x239c9cbf,
      0x53a4a4f7,
      0xe4727296,
      0x9bc0c05b,
      0x75b7b7c2,
      0xe1fdfd1c,
      0x3d9393ae,
      0x4c26266a,
      0x6c36365a,
      0x7e3f3f41,
      0xf5f7f702,
      0x83cccc4f,
      0x6834345c,
      0x51a5a5f4,
      0xd1e5e534,
      0xf9f1f108,
      0xe2717193,
      0xabd8d873,
      0x62313153,
      0x2a15153f,
      0x0804040c,
      0x95c7c752,
      0x46232365,
      0x9dc3c35e,
      0x30181828,
      0x379696a1,
      0x0a05050f,
      0x2f9a9ab5,
      0x0e070709,
      0x24121236,
      0x1b80809b,
      0xdfe2e23d,
      0xcdebeb26,
      0x4e272769,
      0x7fb2b2cd,
      0xea75759f,
      0x1209091b,
      0x1d83839e,
      0x582c2c74,
      0x341a1a2e,
      0x361b1b2d,
      0xdc6e6eb2,
      0xb45a5aee,
      0x5ba0a0fb,
      0xa45252f6,
      0x763b3b4d,
      0xb7d6d661,
      0x7db3b3ce,
      0x5229297b,
      0xdde3e33e,
      0x5e2f2f71,
      0x13848497,
      0xa65353f5,
      0xb9d1d168,
      0x00000000,
      0xc1eded2c,
      0x40202060,
      0xe3fcfc1f,
      0x79b1b1c8,
      0xb65b5bed,
      0xd46a6abe,
      0x8dcbcb46,
      0x67bebed9,
      0x7239394b,
      0x944a4ade,
      0x984c4cd4,
      0xb05858e8,
      0x85cfcf4a,
      0xbbd0d06b,
      0xc5efef2a,
      0x4faaaae5,
      0xedfbfb16,
      0x864343c5,
      0x9a4d4dd7,
      0x66333355,
      0x11858594,
      0x8a4545cf,
      0xe9f9f910,
      0x04020206,
      0xfe7f7f81,
      0xa05050f0,
      0x783c3c44,
      0x259f9fba,
      0x4ba8a8e3,
      0xa25151f3,
      0x5da3a3fe,
      0x804040c0,
      0x058f8f8a,
      0x3f9292ad,
      0x219d9dbc,
      0x70383848,
      0xf1f5f504,
      0x63bcbcdf,
      0x77b6b6c1,
      0xafdada75,
      0x42212163,
      0x20101030,
      0xe5ffff1a,
      0xfdf3f30e,
      0xbfd2d26d,
      0x81cdcd4c,
      0x180c0c14,
      0x26131335,
      0xc3ecec2f,
      0xbe5f5fe1,
      0x359797a2,
      0x884444cc,
      0x2e171739,
      0x93c4c457,
      0x55a7a7f2,
      0xfc7e7e82,
      0x7a3d3d47,
      0xc86464ac,
      0xba5d5de7,
      0x3219192b,
      0xe6737395,
      0xc06060a0,
      0x19818198,
      0x9e4f4fd1,
      0xa3dcdc7f,
      0x44222266,
      0x542a2a7e,
      0x3b9090ab,
      0x0b888883,
      0x8c4646ca,
      0xc7eeee29,
      0x6bb8b8d3,
      0x2814143c,
      0xa7dede79,
      0xbc5e5ee2,
      0x160b0b1d,
      0xaddbdb76,
      0xdbe0e03b,
      0x64323256,
      0x743a3a4e,
      0x140a0a1e,
      0x924949db,
      0x0c06060a,
      0x4824246c,
      0xb85c5ce4,
      0x9fc2c25d,
      0xbdd3d36e,
      0x43acacef,
      0xc46262a6,
      0x399191a8,
      0x319595a4,
      0xd3e4e437,
      0xf279798b,
      0xd5e7e732,
      0x8bc8c843,
      0x6e373759,
      0xda6d6db7,
      0x018d8d8c,
      0xb1d5d564,
      0x9c4e4ed2,
      0x49a9a9e0,
      0xd86c6cb4,
      0xac5656fa,
      0xf3f4f407,
      0xcfeaea25,
      0xca6565af,
      0xf47a7a8e,
      0x47aeaee9,
      0x10080818,
      0x6fbabad5,
      0xf0787888,
      0x4a25256f,
      0x5c2e2e72,
      0x381c1c24,
      0x57a6a6f1,
      0x73b4b4c7,
      0x97c6c651,
      0xcbe8e823,
      0xa1dddd7c,
      0xe874749c,
      0x3e1f1f21,
      0x964b4bdd,
      0x61bdbddc,
      0x0d8b8b86,
      0x0f8a8a85,
      0xe0707090,
      0x7c3e3e42,
      0x71b5b5c4,
      0xcc6666aa,
      0x904848d8,
      0x06030305,
      0xf7f6f601,
      0x1c0e0e12,
      0xc26161a3,
      0x6a35355f,
      0xae5757f9,
      0x69b9b9d0,
      0x17868691,
      0x99c1c158,
      0x3a1d1d27,
      0x279e9eb9,
      0xd9e1e138,
      0xebf8f813,
      0x2b9898b3,
      0x22111133,
      0xd26969bb,
      0xa9d9d970,
      0x078e8e89,
      0x339494a7,
      0x2d9b9bb6,
      0x3c1e1e22,
      0x15878792,
      0xc9e9e920,
      0x87cece49,
      0xaa5555ff,
      0x50282878,
      0xa5dfdf7a,
      0x038c8c8f,
      0x59a1a1f8,
      0x09898980,
      0x1a0d0d17,
      0x65bfbfda,
      0xd7e6e631,
      0x844242c6,
      0xd06868b8,
      0x824141c3,
      0x299999b0,
      0x5a2d2d77,
      0x1e0f0f11,
      0x7bb0b0cb,
      0xa85454fc,
      0x6dbbbbd6,
      0x2c16163a
  ];
  const T2 = [
      0xa5c66363,
      0x84f87c7c,
      0x99ee7777,
      0x8df67b7b,
      0x0dfff2f2,
      0xbdd66b6b,
      0xb1de6f6f,
      0x5491c5c5,
      0x50603030,
      0x03020101,
      0xa9ce6767,
      0x7d562b2b,
      0x19e7fefe,
      0x62b5d7d7,
      0xe64dabab,
      0x9aec7676,
      0x458fcaca,
      0x9d1f8282,
      0x4089c9c9,
      0x87fa7d7d,
      0x15effafa,
      0xebb25959,
      0xc98e4747,
      0x0bfbf0f0,
      0xec41adad,
      0x67b3d4d4,
      0xfd5fa2a2,
      0xea45afaf,
      0xbf239c9c,
      0xf753a4a4,
      0x96e47272,
      0x5b9bc0c0,
      0xc275b7b7,
      0x1ce1fdfd,
      0xae3d9393,
      0x6a4c2626,
      0x5a6c3636,
      0x417e3f3f,
      0x02f5f7f7,
      0x4f83cccc,
      0x5c683434,
      0xf451a5a5,
      0x34d1e5e5,
      0x08f9f1f1,
      0x93e27171,
      0x73abd8d8,
      0x53623131,
      0x3f2a1515,
      0x0c080404,
      0x5295c7c7,
      0x65462323,
      0x5e9dc3c3,
      0x28301818,
      0xa1379696,
      0x0f0a0505,
      0xb52f9a9a,
      0x090e0707,
      0x36241212,
      0x9b1b8080,
      0x3ddfe2e2,
      0x26cdebeb,
      0x694e2727,
      0xcd7fb2b2,
      0x9fea7575,
      0x1b120909,
      0x9e1d8383,
      0x74582c2c,
      0x2e341a1a,
      0x2d361b1b,
      0xb2dc6e6e,
      0xeeb45a5a,
      0xfb5ba0a0,
      0xf6a45252,
      0x4d763b3b,
      0x61b7d6d6,
      0xce7db3b3,
      0x7b522929,
      0x3edde3e3,
      0x715e2f2f,
      0x97138484,
      0xf5a65353,
      0x68b9d1d1,
      0x00000000,
      0x2cc1eded,
      0x60402020,
      0x1fe3fcfc,
      0xc879b1b1,
      0xedb65b5b,
      0xbed46a6a,
      0x468dcbcb,
      0xd967bebe,
      0x4b723939,
      0xde944a4a,
      0xd4984c4c,
      0xe8b05858,
      0x4a85cfcf,
      0x6bbbd0d0,
      0x2ac5efef,
      0xe54faaaa,
      0x16edfbfb,
      0xc5864343,
      0xd79a4d4d,
      0x55663333,
      0x94118585,
      0xcf8a4545,
      0x10e9f9f9,
      0x06040202,
      0x81fe7f7f,
      0xf0a05050,
      0x44783c3c,
      0xba259f9f,
      0xe34ba8a8,
      0xf3a25151,
      0xfe5da3a3,
      0xc0804040,
      0x8a058f8f,
      0xad3f9292,
      0xbc219d9d,
      0x48703838,
      0x04f1f5f5,
      0xdf63bcbc,
      0xc177b6b6,
      0x75afdada,
      0x63422121,
      0x30201010,
      0x1ae5ffff,
      0x0efdf3f3,
      0x6dbfd2d2,
      0x4c81cdcd,
      0x14180c0c,
      0x35261313,
      0x2fc3ecec,
      0xe1be5f5f,
      0xa2359797,
      0xcc884444,
      0x392e1717,
      0x5793c4c4,
      0xf255a7a7,
      0x82fc7e7e,
      0x477a3d3d,
      0xacc86464,
      0xe7ba5d5d,
      0x2b321919,
      0x95e67373,
      0xa0c06060,
      0x98198181,
      0xd19e4f4f,
      0x7fa3dcdc,
      0x66442222,
      0x7e542a2a,
      0xab3b9090,
      0x830b8888,
      0xca8c4646,
      0x29c7eeee,
      0xd36bb8b8,
      0x3c281414,
      0x79a7dede,
      0xe2bc5e5e,
      0x1d160b0b,
      0x76addbdb,
      0x3bdbe0e0,
      0x56643232,
      0x4e743a3a,
      0x1e140a0a,
      0xdb924949,
      0x0a0c0606,
      0x6c482424,
      0xe4b85c5c,
      0x5d9fc2c2,
      0x6ebdd3d3,
      0xef43acac,
      0xa6c46262,
      0xa8399191,
      0xa4319595,
      0x37d3e4e4,
      0x8bf27979,
      0x32d5e7e7,
      0x438bc8c8,
      0x596e3737,
      0xb7da6d6d,
      0x8c018d8d,
      0x64b1d5d5,
      0xd29c4e4e,
      0xe049a9a9,
      0xb4d86c6c,
      0xfaac5656,
      0x07f3f4f4,
      0x25cfeaea,
      0xafca6565,
      0x8ef47a7a,
      0xe947aeae,
      0x18100808,
      0xd56fbaba,
      0x88f07878,
      0x6f4a2525,
      0x725c2e2e,
      0x24381c1c,
      0xf157a6a6,
      0xc773b4b4,
      0x5197c6c6,
      0x23cbe8e8,
      0x7ca1dddd,
      0x9ce87474,
      0x213e1f1f,
      0xdd964b4b,
      0xdc61bdbd,
      0x860d8b8b,
      0x850f8a8a,
      0x90e07070,
      0x427c3e3e,
      0xc471b5b5,
      0xaacc6666,
      0xd8904848,
      0x05060303,
      0x01f7f6f6,
      0x121c0e0e,
      0xa3c26161,
      0x5f6a3535,
      0xf9ae5757,
      0xd069b9b9,
      0x91178686,
      0x5899c1c1,
      0x273a1d1d,
      0xb9279e9e,
      0x38d9e1e1,
      0x13ebf8f8,
      0xb32b9898,
      0x33221111,
      0xbbd26969,
      0x70a9d9d9,
      0x89078e8e,
      0xa7339494,
      0xb62d9b9b,
      0x223c1e1e,
      0x92158787,
      0x20c9e9e9,
      0x4987cece,
      0xffaa5555,
      0x78502828,
      0x7aa5dfdf,
      0x8f038c8c,
      0xf859a1a1,
      0x80098989,
      0x171a0d0d,
      0xda65bfbf,
      0x31d7e6e6,
      0xc6844242,
      0xb8d06868,
      0xc3824141,
      0xb0299999,
      0x775a2d2d,
      0x111e0f0f,
      0xcb7bb0b0,
      0xfca85454,
      0xd66dbbbb,
      0x3a2c1616
  ];
  const T3 = [
      0x63a5c663,
      0x7c84f87c,
      0x7799ee77,
      0x7b8df67b,
      0xf20dfff2,
      0x6bbdd66b,
      0x6fb1de6f,
      0xc55491c5,
      0x30506030,
      0x01030201,
      0x67a9ce67,
      0x2b7d562b,
      0xfe19e7fe,
      0xd762b5d7,
      0xabe64dab,
      0x769aec76,
      0xca458fca,
      0x829d1f82,
      0xc94089c9,
      0x7d87fa7d,
      0xfa15effa,
      0x59ebb259,
      0x47c98e47,
      0xf00bfbf0,
      0xadec41ad,
      0xd467b3d4,
      0xa2fd5fa2,
      0xafea45af,
      0x9cbf239c,
      0xa4f753a4,
      0x7296e472,
      0xc05b9bc0,
      0xb7c275b7,
      0xfd1ce1fd,
      0x93ae3d93,
      0x266a4c26,
      0x365a6c36,
      0x3f417e3f,
      0xf702f5f7,
      0xcc4f83cc,
      0x345c6834,
      0xa5f451a5,
      0xe534d1e5,
      0xf108f9f1,
      0x7193e271,
      0xd873abd8,
      0x31536231,
      0x153f2a15,
      0x040c0804,
      0xc75295c7,
      0x23654623,
      0xc35e9dc3,
      0x18283018,
      0x96a13796,
      0x050f0a05,
      0x9ab52f9a,
      0x07090e07,
      0x12362412,
      0x809b1b80,
      0xe23ddfe2,
      0xeb26cdeb,
      0x27694e27,
      0xb2cd7fb2,
      0x759fea75,
      0x091b1209,
      0x839e1d83,
      0x2c74582c,
      0x1a2e341a,
      0x1b2d361b,
      0x6eb2dc6e,
      0x5aeeb45a,
      0xa0fb5ba0,
      0x52f6a452,
      0x3b4d763b,
      0xd661b7d6,
      0xb3ce7db3,
      0x297b5229,
      0xe33edde3,
      0x2f715e2f,
      0x84971384,
      0x53f5a653,
      0xd168b9d1,
      0x00000000,
      0xed2cc1ed,
      0x20604020,
      0xfc1fe3fc,
      0xb1c879b1,
      0x5bedb65b,
      0x6abed46a,
      0xcb468dcb,
      0xbed967be,
      0x394b7239,
      0x4ade944a,
      0x4cd4984c,
      0x58e8b058,
      0xcf4a85cf,
      0xd06bbbd0,
      0xef2ac5ef,
      0xaae54faa,
      0xfb16edfb,
      0x43c58643,
      0x4dd79a4d,
      0x33556633,
      0x85941185,
      0x45cf8a45,
      0xf910e9f9,
      0x02060402,
      0x7f81fe7f,
      0x50f0a050,
      0x3c44783c,
      0x9fba259f,
      0xa8e34ba8,
      0x51f3a251,
      0xa3fe5da3,
      0x40c08040,
      0x8f8a058f,
      0x92ad3f92,
      0x9dbc219d,
      0x38487038,
      0xf504f1f5,
      0xbcdf63bc,
      0xb6c177b6,
      0xda75afda,
      0x21634221,
      0x10302010,
      0xff1ae5ff,
      0xf30efdf3,
      0xd26dbfd2,
      0xcd4c81cd,
      0x0c14180c,
      0x13352613,
      0xec2fc3ec,
      0x5fe1be5f,
      0x97a23597,
      0x44cc8844,
      0x17392e17,
      0xc45793c4,
      0xa7f255a7,
      0x7e82fc7e,
      0x3d477a3d,
      0x64acc864,
      0x5de7ba5d,
      0x192b3219,
      0x7395e673,
      0x60a0c060,
      0x81981981,
      0x4fd19e4f,
      0xdc7fa3dc,
      0x22664422,
      0x2a7e542a,
      0x90ab3b90,
      0x88830b88,
      0x46ca8c46,
      0xee29c7ee,
      0xb8d36bb8,
      0x143c2814,
      0xde79a7de,
      0x5ee2bc5e,
      0x0b1d160b,
      0xdb76addb,
      0xe03bdbe0,
      0x32566432,
      0x3a4e743a,
      0x0a1e140a,
      0x49db9249,
      0x060a0c06,
      0x246c4824,
      0x5ce4b85c,
      0xc25d9fc2,
      0xd36ebdd3,
      0xacef43ac,
      0x62a6c462,
      0x91a83991,
      0x95a43195,
      0xe437d3e4,
      0x798bf279,
      0xe732d5e7,
      0xc8438bc8,
      0x37596e37,
      0x6db7da6d,
      0x8d8c018d,
      0xd564b1d5,
      0x4ed29c4e,
      0xa9e049a9,
      0x6cb4d86c,
      0x56faac56,
      0xf407f3f4,
      0xea25cfea,
      0x65afca65,
      0x7a8ef47a,
      0xaee947ae,
      0x08181008,
      0xbad56fba,
      0x7888f078,
      0x256f4a25,
      0x2e725c2e,
      0x1c24381c,
      0xa6f157a6,
      0xb4c773b4,
      0xc65197c6,
      0xe823cbe8,
      0xdd7ca1dd,
      0x749ce874,
      0x1f213e1f,
      0x4bdd964b,
      0xbddc61bd,
      0x8b860d8b,
      0x8a850f8a,
      0x7090e070,
      0x3e427c3e,
      0xb5c471b5,
      0x66aacc66,
      0x48d89048,
      0x03050603,
      0xf601f7f6,
      0x0e121c0e,
      0x61a3c261,
      0x355f6a35,
      0x57f9ae57,
      0xb9d069b9,
      0x86911786,
      0xc15899c1,
      0x1d273a1d,
      0x9eb9279e,
      0xe138d9e1,
      0xf813ebf8,
      0x98b32b98,
      0x11332211,
      0x69bbd269,
      0xd970a9d9,
      0x8e89078e,
      0x94a73394,
      0x9bb62d9b,
      0x1e223c1e,
      0x87921587,
      0xe920c9e9,
      0xce4987ce,
      0x55ffaa55,
      0x28785028,
      0xdf7aa5df,
      0x8c8f038c,
      0xa1f859a1,
      0x89800989,
      0x0d171a0d,
      0xbfda65bf,
      0xe631d7e6,
      0x42c68442,
      0x68b8d068,
      0x41c38241,
      0x99b02999,
      0x2d775a2d,
      0x0f111e0f,
      0xb0cb7bb0,
      0x54fca854,
      0xbbd66dbb,
      0x163a2c16
  ];
  const T4 = [
      0x6363a5c6,
      0x7c7c84f8,
      0x777799ee,
      0x7b7b8df6,
      0xf2f20dff,
      0x6b6bbdd6,
      0x6f6fb1de,
      0xc5c55491,
      0x30305060,
      0x01010302,
      0x6767a9ce,
      0x2b2b7d56,
      0xfefe19e7,
      0xd7d762b5,
      0xababe64d,
      0x76769aec,
      0xcaca458f,
      0x82829d1f,
      0xc9c94089,
      0x7d7d87fa,
      0xfafa15ef,
      0x5959ebb2,
      0x4747c98e,
      0xf0f00bfb,
      0xadadec41,
      0xd4d467b3,
      0xa2a2fd5f,
      0xafafea45,
      0x9c9cbf23,
      0xa4a4f753,
      0x727296e4,
      0xc0c05b9b,
      0xb7b7c275,
      0xfdfd1ce1,
      0x9393ae3d,
      0x26266a4c,
      0x36365a6c,
      0x3f3f417e,
      0xf7f702f5,
      0xcccc4f83,
      0x34345c68,
      0xa5a5f451,
      0xe5e534d1,
      0xf1f108f9,
      0x717193e2,
      0xd8d873ab,
      0x31315362,
      0x15153f2a,
      0x04040c08,
      0xc7c75295,
      0x23236546,
      0xc3c35e9d,
      0x18182830,
      0x9696a137,
      0x05050f0a,
      0x9a9ab52f,
      0x0707090e,
      0x12123624,
      0x80809b1b,
      0xe2e23ddf,
      0xebeb26cd,
      0x2727694e,
      0xb2b2cd7f,
      0x75759fea,
      0x09091b12,
      0x83839e1d,
      0x2c2c7458,
      0x1a1a2e34,
      0x1b1b2d36,
      0x6e6eb2dc,
      0x5a5aeeb4,
      0xa0a0fb5b,
      0x5252f6a4,
      0x3b3b4d76,
      0xd6d661b7,
      0xb3b3ce7d,
      0x29297b52,
      0xe3e33edd,
      0x2f2f715e,
      0x84849713,
      0x5353f5a6,
      0xd1d168b9,
      0x00000000,
      0xeded2cc1,
      0x20206040,
      0xfcfc1fe3,
      0xb1b1c879,
      0x5b5bedb6,
      0x6a6abed4,
      0xcbcb468d,
      0xbebed967,
      0x39394b72,
      0x4a4ade94,
      0x4c4cd498,
      0x5858e8b0,
      0xcfcf4a85,
      0xd0d06bbb,
      0xefef2ac5,
      0xaaaae54f,
      0xfbfb16ed,
      0x4343c586,
      0x4d4dd79a,
      0x33335566,
      0x85859411,
      0x4545cf8a,
      0xf9f910e9,
      0x02020604,
      0x7f7f81fe,
      0x5050f0a0,
      0x3c3c4478,
      0x9f9fba25,
      0xa8a8e34b,
      0x5151f3a2,
      0xa3a3fe5d,
      0x4040c080,
      0x8f8f8a05,
      0x9292ad3f,
      0x9d9dbc21,
      0x38384870,
      0xf5f504f1,
      0xbcbcdf63,
      0xb6b6c177,
      0xdada75af,
      0x21216342,
      0x10103020,
      0xffff1ae5,
      0xf3f30efd,
      0xd2d26dbf,
      0xcdcd4c81,
      0x0c0c1418,
      0x13133526,
      0xecec2fc3,
      0x5f5fe1be,
      0x9797a235,
      0x4444cc88,
      0x1717392e,
      0xc4c45793,
      0xa7a7f255,
      0x7e7e82fc,
      0x3d3d477a,
      0x6464acc8,
      0x5d5de7ba,
      0x19192b32,
      0x737395e6,
      0x6060a0c0,
      0x81819819,
      0x4f4fd19e,
      0xdcdc7fa3,
      0x22226644,
      0x2a2a7e54,
      0x9090ab3b,
      0x8888830b,
      0x4646ca8c,
      0xeeee29c7,
      0xb8b8d36b,
      0x14143c28,
      0xdede79a7,
      0x5e5ee2bc,
      0x0b0b1d16,
      0xdbdb76ad,
      0xe0e03bdb,
      0x32325664,
      0x3a3a4e74,
      0x0a0a1e14,
      0x4949db92,
      0x06060a0c,
      0x24246c48,
      0x5c5ce4b8,
      0xc2c25d9f,
      0xd3d36ebd,
      0xacacef43,
      0x6262a6c4,
      0x9191a839,
      0x9595a431,
      0xe4e437d3,
      0x79798bf2,
      0xe7e732d5,
      0xc8c8438b,
      0x3737596e,
      0x6d6db7da,
      0x8d8d8c01,
      0xd5d564b1,
      0x4e4ed29c,
      0xa9a9e049,
      0x6c6cb4d8,
      0x5656faac,
      0xf4f407f3,
      0xeaea25cf,
      0x6565afca,
      0x7a7a8ef4,
      0xaeaee947,
      0x08081810,
      0xbabad56f,
      0x787888f0,
      0x25256f4a,
      0x2e2e725c,
      0x1c1c2438,
      0xa6a6f157,
      0xb4b4c773,
      0xc6c65197,
      0xe8e823cb,
      0xdddd7ca1,
      0x74749ce8,
      0x1f1f213e,
      0x4b4bdd96,
      0xbdbddc61,
      0x8b8b860d,
      0x8a8a850f,
      0x707090e0,
      0x3e3e427c,
      0xb5b5c471,
      0x6666aacc,
      0x4848d890,
      0x03030506,
      0xf6f601f7,
      0x0e0e121c,
      0x6161a3c2,
      0x35355f6a,
      0x5757f9ae,
      0xb9b9d069,
      0x86869117,
      0xc1c15899,
      0x1d1d273a,
      0x9e9eb927,
      0xe1e138d9,
      0xf8f813eb,
      0x9898b32b,
      0x11113322,
      0x6969bbd2,
      0xd9d970a9,
      0x8e8e8907,
      0x9494a733,
      0x9b9bb62d,
      0x1e1e223c,
      0x87879215,
      0xe9e920c9,
      0xcece4987,
      0x5555ffaa,
      0x28287850,
      0xdfdf7aa5,
      0x8c8c8f03,
      0xa1a1f859,
      0x89898009,
      0x0d0d171a,
      0xbfbfda65,
      0xe6e631d7,
      0x4242c684,
      0x6868b8d0,
      0x4141c382,
      0x9999b029,
      0x2d2d775a,
      0x0f0f111e,
      0xb0b0cb7b,
      0x5454fca8,
      0xbbbbd66d,
      0x16163a2c
  ];
  // Transformations for decryption
  const T5 = [
      0x51f4a750,
      0x7e416553,
      0x1a17a4c3,
      0x3a275e96,
      0x3bab6bcb,
      0x1f9d45f1,
      0xacfa58ab,
      0x4be30393,
      0x2030fa55,
      0xad766df6,
      0x88cc7691,
      0xf5024c25,
      0x4fe5d7fc,
      0xc52acbd7,
      0x26354480,
      0xb562a38f,
      0xdeb15a49,
      0x25ba1b67,
      0x45ea0e98,
      0x5dfec0e1,
      0xc32f7502,
      0x814cf012,
      0x8d4697a3,
      0x6bd3f9c6,
      0x038f5fe7,
      0x15929c95,
      0xbf6d7aeb,
      0x955259da,
      0xd4be832d,
      0x587421d3,
      0x49e06929,
      0x8ec9c844,
      0x75c2896a,
      0xf48e7978,
      0x99583e6b,
      0x27b971dd,
      0xbee14fb6,
      0xf088ad17,
      0xc920ac66,
      0x7dce3ab4,
      0x63df4a18,
      0xe51a3182,
      0x97513360,
      0x62537f45,
      0xb16477e0,
      0xbb6bae84,
      0xfe81a01c,
      0xf9082b94,
      0x70486858,
      0x8f45fd19,
      0x94de6c87,
      0x527bf8b7,
      0xab73d323,
      0x724b02e2,
      0xe31f8f57,
      0x6655ab2a,
      0xb2eb2807,
      0x2fb5c203,
      0x86c57b9a,
      0xd33708a5,
      0x302887f2,
      0x23bfa5b2,
      0x02036aba,
      0xed16825c,
      0x8acf1c2b,
      0xa779b492,
      0xf307f2f0,
      0x4e69e2a1,
      0x65daf4cd,
      0x0605bed5,
      0xd134621f,
      0xc4a6fe8a,
      0x342e539d,
      0xa2f355a0,
      0x058ae132,
      0xa4f6eb75,
      0x0b83ec39,
      0x4060efaa,
      0x5e719f06,
      0xbd6e1051,
      0x3e218af9,
      0x96dd063d,
      0xdd3e05ae,
      0x4de6bd46,
      0x91548db5,
      0x71c45d05,
      0x0406d46f,
      0x605015ff,
      0x1998fb24,
      0xd6bde997,
      0x894043cc,
      0x67d99e77,
      0xb0e842bd,
      0x07898b88,
      0xe7195b38,
      0x79c8eedb,
      0xa17c0a47,
      0x7c420fe9,
      0xf8841ec9,
      0x00000000,
      0x09808683,
      0x322bed48,
      0x1e1170ac,
      0x6c5a724e,
      0xfd0efffb,
      0x0f853856,
      0x3daed51e,
      0x362d3927,
      0x0a0fd964,
      0x685ca621,
      0x9b5b54d1,
      0x24362e3a,
      0x0c0a67b1,
      0x9357e70f,
      0xb4ee96d2,
      0x1b9b919e,
      0x80c0c54f,
      0x61dc20a2,
      0x5a774b69,
      0x1c121a16,
      0xe293ba0a,
      0xc0a02ae5,
      0x3c22e043,
      0x121b171d,
      0x0e090d0b,
      0xf28bc7ad,
      0x2db6a8b9,
      0x141ea9c8,
      0x57f11985,
      0xaf75074c,
      0xee99ddbb,
      0xa37f60fd,
      0xf701269f,
      0x5c72f5bc,
      0x44663bc5,
      0x5bfb7e34,
      0x8b432976,
      0xcb23c6dc,
      0xb6edfc68,
      0xb8e4f163,
      0xd731dcca,
      0x42638510,
      0x13972240,
      0x84c61120,
      0x854a247d,
      0xd2bb3df8,
      0xaef93211,
      0xc729a16d,
      0x1d9e2f4b,
      0xdcb230f3,
      0x0d8652ec,
      0x77c1e3d0,
      0x2bb3166c,
      0xa970b999,
      0x119448fa,
      0x47e96422,
      0xa8fc8cc4,
      0xa0f03f1a,
      0x567d2cd8,
      0x223390ef,
      0x87494ec7,
      0xd938d1c1,
      0x8ccaa2fe,
      0x98d40b36,
      0xa6f581cf,
      0xa57ade28,
      0xdab78e26,
      0x3fadbfa4,
      0x2c3a9de4,
      0x5078920d,
      0x6a5fcc9b,
      0x547e4662,
      0xf68d13c2,
      0x90d8b8e8,
      0x2e39f75e,
      0x82c3aff5,
      0x9f5d80be,
      0x69d0937c,
      0x6fd52da9,
      0xcf2512b3,
      0xc8ac993b,
      0x10187da7,
      0xe89c636e,
      0xdb3bbb7b,
      0xcd267809,
      0x6e5918f4,
      0xec9ab701,
      0x834f9aa8,
      0xe6956e65,
      0xaaffe67e,
      0x21bccf08,
      0xef15e8e6,
      0xbae79bd9,
      0x4a6f36ce,
      0xea9f09d4,
      0x29b07cd6,
      0x31a4b2af,
      0x2a3f2331,
      0xc6a59430,
      0x35a266c0,
      0x744ebc37,
      0xfc82caa6,
      0xe090d0b0,
      0x33a7d815,
      0xf104984a,
      0x41ecdaf7,
      0x7fcd500e,
      0x1791f62f,
      0x764dd68d,
      0x43efb04d,
      0xccaa4d54,
      0xe49604df,
      0x9ed1b5e3,
      0x4c6a881b,
      0xc12c1fb8,
      0x4665517f,
      0x9d5eea04,
      0x018c355d,
      0xfa877473,
      0xfb0b412e,
      0xb3671d5a,
      0x92dbd252,
      0xe9105633,
      0x6dd64713,
      0x9ad7618c,
      0x37a10c7a,
      0x59f8148e,
      0xeb133c89,
      0xcea927ee,
      0xb761c935,
      0xe11ce5ed,
      0x7a47b13c,
      0x9cd2df59,
      0x55f2733f,
      0x1814ce79,
      0x73c737bf,
      0x53f7cdea,
      0x5ffdaa5b,
      0xdf3d6f14,
      0x7844db86,
      0xcaaff381,
      0xb968c43e,
      0x3824342c,
      0xc2a3405f,
      0x161dc372,
      0xbce2250c,
      0x283c498b,
      0xff0d9541,
      0x39a80171,
      0x080cb3de,
      0xd8b4e49c,
      0x6456c190,
      0x7bcb8461,
      0xd532b670,
      0x486c5c74,
      0xd0b85742
  ];
  const T6 = [
      0x5051f4a7,
      0x537e4165,
      0xc31a17a4,
      0x963a275e,
      0xcb3bab6b,
      0xf11f9d45,
      0xabacfa58,
      0x934be303,
      0x552030fa,
      0xf6ad766d,
      0x9188cc76,
      0x25f5024c,
      0xfc4fe5d7,
      0xd7c52acb,
      0x80263544,
      0x8fb562a3,
      0x49deb15a,
      0x6725ba1b,
      0x9845ea0e,
      0xe15dfec0,
      0x02c32f75,
      0x12814cf0,
      0xa38d4697,
      0xc66bd3f9,
      0xe7038f5f,
      0x9515929c,
      0xebbf6d7a,
      0xda955259,
      0x2dd4be83,
      0xd3587421,
      0x2949e069,
      0x448ec9c8,
      0x6a75c289,
      0x78f48e79,
      0x6b99583e,
      0xdd27b971,
      0xb6bee14f,
      0x17f088ad,
      0x66c920ac,
      0xb47dce3a,
      0x1863df4a,
      0x82e51a31,
      0x60975133,
      0x4562537f,
      0xe0b16477,
      0x84bb6bae,
      0x1cfe81a0,
      0x94f9082b,
      0x58704868,
      0x198f45fd,
      0x8794de6c,
      0xb7527bf8,
      0x23ab73d3,
      0xe2724b02,
      0x57e31f8f,
      0x2a6655ab,
      0x07b2eb28,
      0x032fb5c2,
      0x9a86c57b,
      0xa5d33708,
      0xf2302887,
      0xb223bfa5,
      0xba02036a,
      0x5ced1682,
      0x2b8acf1c,
      0x92a779b4,
      0xf0f307f2,
      0xa14e69e2,
      0xcd65daf4,
      0xd50605be,
      0x1fd13462,
      0x8ac4a6fe,
      0x9d342e53,
      0xa0a2f355,
      0x32058ae1,
      0x75a4f6eb,
      0x390b83ec,
      0xaa4060ef,
      0x065e719f,
      0x51bd6e10,
      0xf93e218a,
      0x3d96dd06,
      0xaedd3e05,
      0x464de6bd,
      0xb591548d,
      0x0571c45d,
      0x6f0406d4,
      0xff605015,
      0x241998fb,
      0x97d6bde9,
      0xcc894043,
      0x7767d99e,
      0xbdb0e842,
      0x8807898b,
      0x38e7195b,
      0xdb79c8ee,
      0x47a17c0a,
      0xe97c420f,
      0xc9f8841e,
      0x00000000,
      0x83098086,
      0x48322bed,
      0xac1e1170,
      0x4e6c5a72,
      0xfbfd0eff,
      0x560f8538,
      0x1e3daed5,
      0x27362d39,
      0x640a0fd9,
      0x21685ca6,
      0xd19b5b54,
      0x3a24362e,
      0xb10c0a67,
      0x0f9357e7,
      0xd2b4ee96,
      0x9e1b9b91,
      0x4f80c0c5,
      0xa261dc20,
      0x695a774b,
      0x161c121a,
      0x0ae293ba,
      0xe5c0a02a,
      0x433c22e0,
      0x1d121b17,
      0x0b0e090d,
      0xadf28bc7,
      0xb92db6a8,
      0xc8141ea9,
      0x8557f119,
      0x4caf7507,
      0xbbee99dd,
      0xfda37f60,
      0x9ff70126,
      0xbc5c72f5,
      0xc544663b,
      0x345bfb7e,
      0x768b4329,
      0xdccb23c6,
      0x68b6edfc,
      0x63b8e4f1,
      0xcad731dc,
      0x10426385,
      0x40139722,
      0x2084c611,
      0x7d854a24,
      0xf8d2bb3d,
      0x11aef932,
      0x6dc729a1,
      0x4b1d9e2f,
      0xf3dcb230,
      0xec0d8652,
      0xd077c1e3,
      0x6c2bb316,
      0x99a970b9,
      0xfa119448,
      0x2247e964,
      0xc4a8fc8c,
      0x1aa0f03f,
      0xd8567d2c,
      0xef223390,
      0xc787494e,
      0xc1d938d1,
      0xfe8ccaa2,
      0x3698d40b,
      0xcfa6f581,
      0x28a57ade,
      0x26dab78e,
      0xa43fadbf,
      0xe42c3a9d,
      0x0d507892,
      0x9b6a5fcc,
      0x62547e46,
      0xc2f68d13,
      0xe890d8b8,
      0x5e2e39f7,
      0xf582c3af,
      0xbe9f5d80,
      0x7c69d093,
      0xa96fd52d,
      0xb3cf2512,
      0x3bc8ac99,
      0xa710187d,
      0x6ee89c63,
      0x7bdb3bbb,
      0x09cd2678,
      0xf46e5918,
      0x01ec9ab7,
      0xa8834f9a,
      0x65e6956e,
      0x7eaaffe6,
      0x0821bccf,
      0xe6ef15e8,
      0xd9bae79b,
      0xce4a6f36,
      0xd4ea9f09,
      0xd629b07c,
      0xaf31a4b2,
      0x312a3f23,
      0x30c6a594,
      0xc035a266,
      0x37744ebc,
      0xa6fc82ca,
      0xb0e090d0,
      0x1533a7d8,
      0x4af10498,
      0xf741ecda,
      0x0e7fcd50,
      0x2f1791f6,
      0x8d764dd6,
      0x4d43efb0,
      0x54ccaa4d,
      0xdfe49604,
      0xe39ed1b5,
      0x1b4c6a88,
      0xb8c12c1f,
      0x7f466551,
      0x049d5eea,
      0x5d018c35,
      0x73fa8774,
      0x2efb0b41,
      0x5ab3671d,
      0x5292dbd2,
      0x33e91056,
      0x136dd647,
      0x8c9ad761,
      0x7a37a10c,
      0x8e59f814,
      0x89eb133c,
      0xeecea927,
      0x35b761c9,
      0xede11ce5,
      0x3c7a47b1,
      0x599cd2df,
      0x3f55f273,
      0x791814ce,
      0xbf73c737,
      0xea53f7cd,
      0x5b5ffdaa,
      0x14df3d6f,
      0x867844db,
      0x81caaff3,
      0x3eb968c4,
      0x2c382434,
      0x5fc2a340,
      0x72161dc3,
      0x0cbce225,
      0x8b283c49,
      0x41ff0d95,
      0x7139a801,
      0xde080cb3,
      0x9cd8b4e4,
      0x906456c1,
      0x617bcb84,
      0x70d532b6,
      0x74486c5c,
      0x42d0b857
  ];
  const T7 = [
      0xa75051f4,
      0x65537e41,
      0xa4c31a17,
      0x5e963a27,
      0x6bcb3bab,
      0x45f11f9d,
      0x58abacfa,
      0x03934be3,
      0xfa552030,
      0x6df6ad76,
      0x769188cc,
      0x4c25f502,
      0xd7fc4fe5,
      0xcbd7c52a,
      0x44802635,
      0xa38fb562,
      0x5a49deb1,
      0x1b6725ba,
      0x0e9845ea,
      0xc0e15dfe,
      0x7502c32f,
      0xf012814c,
      0x97a38d46,
      0xf9c66bd3,
      0x5fe7038f,
      0x9c951592,
      0x7aebbf6d,
      0x59da9552,
      0x832dd4be,
      0x21d35874,
      0x692949e0,
      0xc8448ec9,
      0x896a75c2,
      0x7978f48e,
      0x3e6b9958,
      0x71dd27b9,
      0x4fb6bee1,
      0xad17f088,
      0xac66c920,
      0x3ab47dce,
      0x4a1863df,
      0x3182e51a,
      0x33609751,
      0x7f456253,
      0x77e0b164,
      0xae84bb6b,
      0xa01cfe81,
      0x2b94f908,
      0x68587048,
      0xfd198f45,
      0x6c8794de,
      0xf8b7527b,
      0xd323ab73,
      0x02e2724b,
      0x8f57e31f,
      0xab2a6655,
      0x2807b2eb,
      0xc2032fb5,
      0x7b9a86c5,
      0x08a5d337,
      0x87f23028,
      0xa5b223bf,
      0x6aba0203,
      0x825ced16,
      0x1c2b8acf,
      0xb492a779,
      0xf2f0f307,
      0xe2a14e69,
      0xf4cd65da,
      0xbed50605,
      0x621fd134,
      0xfe8ac4a6,
      0x539d342e,
      0x55a0a2f3,
      0xe132058a,
      0xeb75a4f6,
      0xec390b83,
      0xefaa4060,
      0x9f065e71,
      0x1051bd6e,
      0x8af93e21,
      0x063d96dd,
      0x05aedd3e,
      0xbd464de6,
      0x8db59154,
      0x5d0571c4,
      0xd46f0406,
      0x15ff6050,
      0xfb241998,
      0xe997d6bd,
      0x43cc8940,
      0x9e7767d9,
      0x42bdb0e8,
      0x8b880789,
      0x5b38e719,
      0xeedb79c8,
      0x0a47a17c,
      0x0fe97c42,
      0x1ec9f884,
      0x00000000,
      0x86830980,
      0xed48322b,
      0x70ac1e11,
      0x724e6c5a,
      0xfffbfd0e,
      0x38560f85,
      0xd51e3dae,
      0x3927362d,
      0xd9640a0f,
      0xa621685c,
      0x54d19b5b,
      0x2e3a2436,
      0x67b10c0a,
      0xe70f9357,
      0x96d2b4ee,
      0x919e1b9b,
      0xc54f80c0,
      0x20a261dc,
      0x4b695a77,
      0x1a161c12,
      0xba0ae293,
      0x2ae5c0a0,
      0xe0433c22,
      0x171d121b,
      0x0d0b0e09,
      0xc7adf28b,
      0xa8b92db6,
      0xa9c8141e,
      0x198557f1,
      0x074caf75,
      0xddbbee99,
      0x60fda37f,
      0x269ff701,
      0xf5bc5c72,
      0x3bc54466,
      0x7e345bfb,
      0x29768b43,
      0xc6dccb23,
      0xfc68b6ed,
      0xf163b8e4,
      0xdccad731,
      0x85104263,
      0x22401397,
      0x112084c6,
      0x247d854a,
      0x3df8d2bb,
      0x3211aef9,
      0xa16dc729,
      0x2f4b1d9e,
      0x30f3dcb2,
      0x52ec0d86,
      0xe3d077c1,
      0x166c2bb3,
      0xb999a970,
      0x48fa1194,
      0x642247e9,
      0x8cc4a8fc,
      0x3f1aa0f0,
      0x2cd8567d,
      0x90ef2233,
      0x4ec78749,
      0xd1c1d938,
      0xa2fe8cca,
      0x0b3698d4,
      0x81cfa6f5,
      0xde28a57a,
      0x8e26dab7,
      0xbfa43fad,
      0x9de42c3a,
      0x920d5078,
      0xcc9b6a5f,
      0x4662547e,
      0x13c2f68d,
      0xb8e890d8,
      0xf75e2e39,
      0xaff582c3,
      0x80be9f5d,
      0x937c69d0,
      0x2da96fd5,
      0x12b3cf25,
      0x993bc8ac,
      0x7da71018,
      0x636ee89c,
      0xbb7bdb3b,
      0x7809cd26,
      0x18f46e59,
      0xb701ec9a,
      0x9aa8834f,
      0x6e65e695,
      0xe67eaaff,
      0xcf0821bc,
      0xe8e6ef15,
      0x9bd9bae7,
      0x36ce4a6f,
      0x09d4ea9f,
      0x7cd629b0,
      0xb2af31a4,
      0x23312a3f,
      0x9430c6a5,
      0x66c035a2,
      0xbc37744e,
      0xcaa6fc82,
      0xd0b0e090,
      0xd81533a7,
      0x984af104,
      0xdaf741ec,
      0x500e7fcd,
      0xf62f1791,
      0xd68d764d,
      0xb04d43ef,
      0x4d54ccaa,
      0x04dfe496,
      0xb5e39ed1,
      0x881b4c6a,
      0x1fb8c12c,
      0x517f4665,
      0xea049d5e,
      0x355d018c,
      0x7473fa87,
      0x412efb0b,
      0x1d5ab367,
      0xd25292db,
      0x5633e910,
      0x47136dd6,
      0x618c9ad7,
      0x0c7a37a1,
      0x148e59f8,
      0x3c89eb13,
      0x27eecea9,
      0xc935b761,
      0xe5ede11c,
      0xb13c7a47,
      0xdf599cd2,
      0x733f55f2,
      0xce791814,
      0x37bf73c7,
      0xcdea53f7,
      0xaa5b5ffd,
      0x6f14df3d,
      0xdb867844,
      0xf381caaf,
      0xc43eb968,
      0x342c3824,
      0x405fc2a3,
      0xc372161d,
      0x250cbce2,
      0x498b283c,
      0x9541ff0d,
      0x017139a8,
      0xb3de080c,
      0xe49cd8b4,
      0xc1906456,
      0x84617bcb,
      0xb670d532,
      0x5c74486c,
      0x5742d0b8
  ];
  const T8 = [
      0xf4a75051,
      0x4165537e,
      0x17a4c31a,
      0x275e963a,
      0xab6bcb3b,
      0x9d45f11f,
      0xfa58abac,
      0xe303934b,
      0x30fa5520,
      0x766df6ad,
      0xcc769188,
      0x024c25f5,
      0xe5d7fc4f,
      0x2acbd7c5,
      0x35448026,
      0x62a38fb5,
      0xb15a49de,
      0xba1b6725,
      0xea0e9845,
      0xfec0e15d,
      0x2f7502c3,
      0x4cf01281,
      0x4697a38d,
      0xd3f9c66b,
      0x8f5fe703,
      0x929c9515,
      0x6d7aebbf,
      0x5259da95,
      0xbe832dd4,
      0x7421d358,
      0xe0692949,
      0xc9c8448e,
      0xc2896a75,
      0x8e7978f4,
      0x583e6b99,
      0xb971dd27,
      0xe14fb6be,
      0x88ad17f0,
      0x20ac66c9,
      0xce3ab47d,
      0xdf4a1863,
      0x1a3182e5,
      0x51336097,
      0x537f4562,
      0x6477e0b1,
      0x6bae84bb,
      0x81a01cfe,
      0x082b94f9,
      0x48685870,
      0x45fd198f,
      0xde6c8794,
      0x7bf8b752,
      0x73d323ab,
      0x4b02e272,
      0x1f8f57e3,
      0x55ab2a66,
      0xeb2807b2,
      0xb5c2032f,
      0xc57b9a86,
      0x3708a5d3,
      0x2887f230,
      0xbfa5b223,
      0x036aba02,
      0x16825ced,
      0xcf1c2b8a,
      0x79b492a7,
      0x07f2f0f3,
      0x69e2a14e,
      0xdaf4cd65,
      0x05bed506,
      0x34621fd1,
      0xa6fe8ac4,
      0x2e539d34,
      0xf355a0a2,
      0x8ae13205,
      0xf6eb75a4,
      0x83ec390b,
      0x60efaa40,
      0x719f065e,
      0x6e1051bd,
      0x218af93e,
      0xdd063d96,
      0x3e05aedd,
      0xe6bd464d,
      0x548db591,
      0xc45d0571,
      0x06d46f04,
      0x5015ff60,
      0x98fb2419,
      0xbde997d6,
      0x4043cc89,
      0xd99e7767,
      0xe842bdb0,
      0x898b8807,
      0x195b38e7,
      0xc8eedb79,
      0x7c0a47a1,
      0x420fe97c,
      0x841ec9f8,
      0x00000000,
      0x80868309,
      0x2bed4832,
      0x1170ac1e,
      0x5a724e6c,
      0x0efffbfd,
      0x8538560f,
      0xaed51e3d,
      0x2d392736,
      0x0fd9640a,
      0x5ca62168,
      0x5b54d19b,
      0x362e3a24,
      0x0a67b10c,
      0x57e70f93,
      0xee96d2b4,
      0x9b919e1b,
      0xc0c54f80,
      0xdc20a261,
      0x774b695a,
      0x121a161c,
      0x93ba0ae2,
      0xa02ae5c0,
      0x22e0433c,
      0x1b171d12,
      0x090d0b0e,
      0x8bc7adf2,
      0xb6a8b92d,
      0x1ea9c814,
      0xf1198557,
      0x75074caf,
      0x99ddbbee,
      0x7f60fda3,
      0x01269ff7,
      0x72f5bc5c,
      0x663bc544,
      0xfb7e345b,
      0x4329768b,
      0x23c6dccb,
      0xedfc68b6,
      0xe4f163b8,
      0x31dccad7,
      0x63851042,
      0x97224013,
      0xc6112084,
      0x4a247d85,
      0xbb3df8d2,
      0xf93211ae,
      0x29a16dc7,
      0x9e2f4b1d,
      0xb230f3dc,
      0x8652ec0d,
      0xc1e3d077,
      0xb3166c2b,
      0x70b999a9,
      0x9448fa11,
      0xe9642247,
      0xfc8cc4a8,
      0xf03f1aa0,
      0x7d2cd856,
      0x3390ef22,
      0x494ec787,
      0x38d1c1d9,
      0xcaa2fe8c,
      0xd40b3698,
      0xf581cfa6,
      0x7ade28a5,
      0xb78e26da,
      0xadbfa43f,
      0x3a9de42c,
      0x78920d50,
      0x5fcc9b6a,
      0x7e466254,
      0x8d13c2f6,
      0xd8b8e890,
      0x39f75e2e,
      0xc3aff582,
      0x5d80be9f,
      0xd0937c69,
      0xd52da96f,
      0x2512b3cf,
      0xac993bc8,
      0x187da710,
      0x9c636ee8,
      0x3bbb7bdb,
      0x267809cd,
      0x5918f46e,
      0x9ab701ec,
      0x4f9aa883,
      0x956e65e6,
      0xffe67eaa,
      0xbccf0821,
      0x15e8e6ef,
      0xe79bd9ba,
      0x6f36ce4a,
      0x9f09d4ea,
      0xb07cd629,
      0xa4b2af31,
      0x3f23312a,
      0xa59430c6,
      0xa266c035,
      0x4ebc3774,
      0x82caa6fc,
      0x90d0b0e0,
      0xa7d81533,
      0x04984af1,
      0xecdaf741,
      0xcd500e7f,
      0x91f62f17,
      0x4dd68d76,
      0xefb04d43,
      0xaa4d54cc,
      0x9604dfe4,
      0xd1b5e39e,
      0x6a881b4c,
      0x2c1fb8c1,
      0x65517f46,
      0x5eea049d,
      0x8c355d01,
      0x877473fa,
      0x0b412efb,
      0x671d5ab3,
      0xdbd25292,
      0x105633e9,
      0xd647136d,
      0xd7618c9a,
      0xa10c7a37,
      0xf8148e59,
      0x133c89eb,
      0xa927eece,
      0x61c935b7,
      0x1ce5ede1,
      0x47b13c7a,
      0xd2df599c,
      0xf2733f55,
      0x14ce7918,
      0xc737bf73,
      0xf7cdea53,
      0xfdaa5b5f,
      0x3d6f14df,
      0x44db8678,
      0xaff381ca,
      0x68c43eb9,
      0x24342c38,
      0xa3405fc2,
      0x1dc37216,
      0xe2250cbc,
      0x3c498b28,
      0x0d9541ff,
      0xa8017139,
      0x0cb3de08,
      0xb4e49cd8,
      0x56c19064,
      0xcb84617b,
      0x32b670d5,
      0x6c5c7448,
      0xb85742d0
  ];
  // Transformations for decryption key expansion
  const U1 = [
      0x00000000,
      0x0e090d0b,
      0x1c121a16,
      0x121b171d,
      0x3824342c,
      0x362d3927,
      0x24362e3a,
      0x2a3f2331,
      0x70486858,
      0x7e416553,
      0x6c5a724e,
      0x62537f45,
      0x486c5c74,
      0x4665517f,
      0x547e4662,
      0x5a774b69,
      0xe090d0b0,
      0xee99ddbb,
      0xfc82caa6,
      0xf28bc7ad,
      0xd8b4e49c,
      0xd6bde997,
      0xc4a6fe8a,
      0xcaaff381,
      0x90d8b8e8,
      0x9ed1b5e3,
      0x8ccaa2fe,
      0x82c3aff5,
      0xa8fc8cc4,
      0xa6f581cf,
      0xb4ee96d2,
      0xbae79bd9,
      0xdb3bbb7b,
      0xd532b670,
      0xc729a16d,
      0xc920ac66,
      0xe31f8f57,
      0xed16825c,
      0xff0d9541,
      0xf104984a,
      0xab73d323,
      0xa57ade28,
      0xb761c935,
      0xb968c43e,
      0x9357e70f,
      0x9d5eea04,
      0x8f45fd19,
      0x814cf012,
      0x3bab6bcb,
      0x35a266c0,
      0x27b971dd,
      0x29b07cd6,
      0x038f5fe7,
      0x0d8652ec,
      0x1f9d45f1,
      0x119448fa,
      0x4be30393,
      0x45ea0e98,
      0x57f11985,
      0x59f8148e,
      0x73c737bf,
      0x7dce3ab4,
      0x6fd52da9,
      0x61dc20a2,
      0xad766df6,
      0xa37f60fd,
      0xb16477e0,
      0xbf6d7aeb,
      0x955259da,
      0x9b5b54d1,
      0x894043cc,
      0x87494ec7,
      0xdd3e05ae,
      0xd33708a5,
      0xc12c1fb8,
      0xcf2512b3,
      0xe51a3182,
      0xeb133c89,
      0xf9082b94,
      0xf701269f,
      0x4de6bd46,
      0x43efb04d,
      0x51f4a750,
      0x5ffdaa5b,
      0x75c2896a,
      0x7bcb8461,
      0x69d0937c,
      0x67d99e77,
      0x3daed51e,
      0x33a7d815,
      0x21bccf08,
      0x2fb5c203,
      0x058ae132,
      0x0b83ec39,
      0x1998fb24,
      0x1791f62f,
      0x764dd68d,
      0x7844db86,
      0x6a5fcc9b,
      0x6456c190,
      0x4e69e2a1,
      0x4060efaa,
      0x527bf8b7,
      0x5c72f5bc,
      0x0605bed5,
      0x080cb3de,
      0x1a17a4c3,
      0x141ea9c8,
      0x3e218af9,
      0x302887f2,
      0x223390ef,
      0x2c3a9de4,
      0x96dd063d,
      0x98d40b36,
      0x8acf1c2b,
      0x84c61120,
      0xaef93211,
      0xa0f03f1a,
      0xb2eb2807,
      0xbce2250c,
      0xe6956e65,
      0xe89c636e,
      0xfa877473,
      0xf48e7978,
      0xdeb15a49,
      0xd0b85742,
      0xc2a3405f,
      0xccaa4d54,
      0x41ecdaf7,
      0x4fe5d7fc,
      0x5dfec0e1,
      0x53f7cdea,
      0x79c8eedb,
      0x77c1e3d0,
      0x65daf4cd,
      0x6bd3f9c6,
      0x31a4b2af,
      0x3fadbfa4,
      0x2db6a8b9,
      0x23bfa5b2,
      0x09808683,
      0x07898b88,
      0x15929c95,
      0x1b9b919e,
      0xa17c0a47,
      0xaf75074c,
      0xbd6e1051,
      0xb3671d5a,
      0x99583e6b,
      0x97513360,
      0x854a247d,
      0x8b432976,
      0xd134621f,
      0xdf3d6f14,
      0xcd267809,
      0xc32f7502,
      0xe9105633,
      0xe7195b38,
      0xf5024c25,
      0xfb0b412e,
      0x9ad7618c,
      0x94de6c87,
      0x86c57b9a,
      0x88cc7691,
      0xa2f355a0,
      0xacfa58ab,
      0xbee14fb6,
      0xb0e842bd,
      0xea9f09d4,
      0xe49604df,
      0xf68d13c2,
      0xf8841ec9,
      0xd2bb3df8,
      0xdcb230f3,
      0xcea927ee,
      0xc0a02ae5,
      0x7a47b13c,
      0x744ebc37,
      0x6655ab2a,
      0x685ca621,
      0x42638510,
      0x4c6a881b,
      0x5e719f06,
      0x5078920d,
      0x0a0fd964,
      0x0406d46f,
      0x161dc372,
      0x1814ce79,
      0x322bed48,
      0x3c22e043,
      0x2e39f75e,
      0x2030fa55,
      0xec9ab701,
      0xe293ba0a,
      0xf088ad17,
      0xfe81a01c,
      0xd4be832d,
      0xdab78e26,
      0xc8ac993b,
      0xc6a59430,
      0x9cd2df59,
      0x92dbd252,
      0x80c0c54f,
      0x8ec9c844,
      0xa4f6eb75,
      0xaaffe67e,
      0xb8e4f163,
      0xb6edfc68,
      0x0c0a67b1,
      0x02036aba,
      0x10187da7,
      0x1e1170ac,
      0x342e539d,
      0x3a275e96,
      0x283c498b,
      0x26354480,
      0x7c420fe9,
      0x724b02e2,
      0x605015ff,
      0x6e5918f4,
      0x44663bc5,
      0x4a6f36ce,
      0x587421d3,
      0x567d2cd8,
      0x37a10c7a,
      0x39a80171,
      0x2bb3166c,
      0x25ba1b67,
      0x0f853856,
      0x018c355d,
      0x13972240,
      0x1d9e2f4b,
      0x47e96422,
      0x49e06929,
      0x5bfb7e34,
      0x55f2733f,
      0x7fcd500e,
      0x71c45d05,
      0x63df4a18,
      0x6dd64713,
      0xd731dcca,
      0xd938d1c1,
      0xcb23c6dc,
      0xc52acbd7,
      0xef15e8e6,
      0xe11ce5ed,
      0xf307f2f0,
      0xfd0efffb,
      0xa779b492,
      0xa970b999,
      0xbb6bae84,
      0xb562a38f,
      0x9f5d80be,
      0x91548db5,
      0x834f9aa8,
      0x8d4697a3
  ];
  const U2 = [
      0x00000000,
      0x0b0e090d,
      0x161c121a,
      0x1d121b17,
      0x2c382434,
      0x27362d39,
      0x3a24362e,
      0x312a3f23,
      0x58704868,
      0x537e4165,
      0x4e6c5a72,
      0x4562537f,
      0x74486c5c,
      0x7f466551,
      0x62547e46,
      0x695a774b,
      0xb0e090d0,
      0xbbee99dd,
      0xa6fc82ca,
      0xadf28bc7,
      0x9cd8b4e4,
      0x97d6bde9,
      0x8ac4a6fe,
      0x81caaff3,
      0xe890d8b8,
      0xe39ed1b5,
      0xfe8ccaa2,
      0xf582c3af,
      0xc4a8fc8c,
      0xcfa6f581,
      0xd2b4ee96,
      0xd9bae79b,
      0x7bdb3bbb,
      0x70d532b6,
      0x6dc729a1,
      0x66c920ac,
      0x57e31f8f,
      0x5ced1682,
      0x41ff0d95,
      0x4af10498,
      0x23ab73d3,
      0x28a57ade,
      0x35b761c9,
      0x3eb968c4,
      0x0f9357e7,
      0x049d5eea,
      0x198f45fd,
      0x12814cf0,
      0xcb3bab6b,
      0xc035a266,
      0xdd27b971,
      0xd629b07c,
      0xe7038f5f,
      0xec0d8652,
      0xf11f9d45,
      0xfa119448,
      0x934be303,
      0x9845ea0e,
      0x8557f119,
      0x8e59f814,
      0xbf73c737,
      0xb47dce3a,
      0xa96fd52d,
      0xa261dc20,
      0xf6ad766d,
      0xfda37f60,
      0xe0b16477,
      0xebbf6d7a,
      0xda955259,
      0xd19b5b54,
      0xcc894043,
      0xc787494e,
      0xaedd3e05,
      0xa5d33708,
      0xb8c12c1f,
      0xb3cf2512,
      0x82e51a31,
      0x89eb133c,
      0x94f9082b,
      0x9ff70126,
      0x464de6bd,
      0x4d43efb0,
      0x5051f4a7,
      0x5b5ffdaa,
      0x6a75c289,
      0x617bcb84,
      0x7c69d093,
      0x7767d99e,
      0x1e3daed5,
      0x1533a7d8,
      0x0821bccf,
      0x032fb5c2,
      0x32058ae1,
      0x390b83ec,
      0x241998fb,
      0x2f1791f6,
      0x8d764dd6,
      0x867844db,
      0x9b6a5fcc,
      0x906456c1,
      0xa14e69e2,
      0xaa4060ef,
      0xb7527bf8,
      0xbc5c72f5,
      0xd50605be,
      0xde080cb3,
      0xc31a17a4,
      0xc8141ea9,
      0xf93e218a,
      0xf2302887,
      0xef223390,
      0xe42c3a9d,
      0x3d96dd06,
      0x3698d40b,
      0x2b8acf1c,
      0x2084c611,
      0x11aef932,
      0x1aa0f03f,
      0x07b2eb28,
      0x0cbce225,
      0x65e6956e,
      0x6ee89c63,
      0x73fa8774,
      0x78f48e79,
      0x49deb15a,
      0x42d0b857,
      0x5fc2a340,
      0x54ccaa4d,
      0xf741ecda,
      0xfc4fe5d7,
      0xe15dfec0,
      0xea53f7cd,
      0xdb79c8ee,
      0xd077c1e3,
      0xcd65daf4,
      0xc66bd3f9,
      0xaf31a4b2,
      0xa43fadbf,
      0xb92db6a8,
      0xb223bfa5,
      0x83098086,
      0x8807898b,
      0x9515929c,
      0x9e1b9b91,
      0x47a17c0a,
      0x4caf7507,
      0x51bd6e10,
      0x5ab3671d,
      0x6b99583e,
      0x60975133,
      0x7d854a24,
      0x768b4329,
      0x1fd13462,
      0x14df3d6f,
      0x09cd2678,
      0x02c32f75,
      0x33e91056,
      0x38e7195b,
      0x25f5024c,
      0x2efb0b41,
      0x8c9ad761,
      0x8794de6c,
      0x9a86c57b,
      0x9188cc76,
      0xa0a2f355,
      0xabacfa58,
      0xb6bee14f,
      0xbdb0e842,
      0xd4ea9f09,
      0xdfe49604,
      0xc2f68d13,
      0xc9f8841e,
      0xf8d2bb3d,
      0xf3dcb230,
      0xeecea927,
      0xe5c0a02a,
      0x3c7a47b1,
      0x37744ebc,
      0x2a6655ab,
      0x21685ca6,
      0x10426385,
      0x1b4c6a88,
      0x065e719f,
      0x0d507892,
      0x640a0fd9,
      0x6f0406d4,
      0x72161dc3,
      0x791814ce,
      0x48322bed,
      0x433c22e0,
      0x5e2e39f7,
      0x552030fa,
      0x01ec9ab7,
      0x0ae293ba,
      0x17f088ad,
      0x1cfe81a0,
      0x2dd4be83,
      0x26dab78e,
      0x3bc8ac99,
      0x30c6a594,
      0x599cd2df,
      0x5292dbd2,
      0x4f80c0c5,
      0x448ec9c8,
      0x75a4f6eb,
      0x7eaaffe6,
      0x63b8e4f1,
      0x68b6edfc,
      0xb10c0a67,
      0xba02036a,
      0xa710187d,
      0xac1e1170,
      0x9d342e53,
      0x963a275e,
      0x8b283c49,
      0x80263544,
      0xe97c420f,
      0xe2724b02,
      0xff605015,
      0xf46e5918,
      0xc544663b,
      0xce4a6f36,
      0xd3587421,
      0xd8567d2c,
      0x7a37a10c,
      0x7139a801,
      0x6c2bb316,
      0x6725ba1b,
      0x560f8538,
      0x5d018c35,
      0x40139722,
      0x4b1d9e2f,
      0x2247e964,
      0x2949e069,
      0x345bfb7e,
      0x3f55f273,
      0x0e7fcd50,
      0x0571c45d,
      0x1863df4a,
      0x136dd647,
      0xcad731dc,
      0xc1d938d1,
      0xdccb23c6,
      0xd7c52acb,
      0xe6ef15e8,
      0xede11ce5,
      0xf0f307f2,
      0xfbfd0eff,
      0x92a779b4,
      0x99a970b9,
      0x84bb6bae,
      0x8fb562a3,
      0xbe9f5d80,
      0xb591548d,
      0xa8834f9a,
      0xa38d4697
  ];
  const U3 = [
      0x00000000,
      0x0d0b0e09,
      0x1a161c12,
      0x171d121b,
      0x342c3824,
      0x3927362d,
      0x2e3a2436,
      0x23312a3f,
      0x68587048,
      0x65537e41,
      0x724e6c5a,
      0x7f456253,
      0x5c74486c,
      0x517f4665,
      0x4662547e,
      0x4b695a77,
      0xd0b0e090,
      0xddbbee99,
      0xcaa6fc82,
      0xc7adf28b,
      0xe49cd8b4,
      0xe997d6bd,
      0xfe8ac4a6,
      0xf381caaf,
      0xb8e890d8,
      0xb5e39ed1,
      0xa2fe8cca,
      0xaff582c3,
      0x8cc4a8fc,
      0x81cfa6f5,
      0x96d2b4ee,
      0x9bd9bae7,
      0xbb7bdb3b,
      0xb670d532,
      0xa16dc729,
      0xac66c920,
      0x8f57e31f,
      0x825ced16,
      0x9541ff0d,
      0x984af104,
      0xd323ab73,
      0xde28a57a,
      0xc935b761,
      0xc43eb968,
      0xe70f9357,
      0xea049d5e,
      0xfd198f45,
      0xf012814c,
      0x6bcb3bab,
      0x66c035a2,
      0x71dd27b9,
      0x7cd629b0,
      0x5fe7038f,
      0x52ec0d86,
      0x45f11f9d,
      0x48fa1194,
      0x03934be3,
      0x0e9845ea,
      0x198557f1,
      0x148e59f8,
      0x37bf73c7,
      0x3ab47dce,
      0x2da96fd5,
      0x20a261dc,
      0x6df6ad76,
      0x60fda37f,
      0x77e0b164,
      0x7aebbf6d,
      0x59da9552,
      0x54d19b5b,
      0x43cc8940,
      0x4ec78749,
      0x05aedd3e,
      0x08a5d337,
      0x1fb8c12c,
      0x12b3cf25,
      0x3182e51a,
      0x3c89eb13,
      0x2b94f908,
      0x269ff701,
      0xbd464de6,
      0xb04d43ef,
      0xa75051f4,
      0xaa5b5ffd,
      0x896a75c2,
      0x84617bcb,
      0x937c69d0,
      0x9e7767d9,
      0xd51e3dae,
      0xd81533a7,
      0xcf0821bc,
      0xc2032fb5,
      0xe132058a,
      0xec390b83,
      0xfb241998,
      0xf62f1791,
      0xd68d764d,
      0xdb867844,
      0xcc9b6a5f,
      0xc1906456,
      0xe2a14e69,
      0xefaa4060,
      0xf8b7527b,
      0xf5bc5c72,
      0xbed50605,
      0xb3de080c,
      0xa4c31a17,
      0xa9c8141e,
      0x8af93e21,
      0x87f23028,
      0x90ef2233,
      0x9de42c3a,
      0x063d96dd,
      0x0b3698d4,
      0x1c2b8acf,
      0x112084c6,
      0x3211aef9,
      0x3f1aa0f0,
      0x2807b2eb,
      0x250cbce2,
      0x6e65e695,
      0x636ee89c,
      0x7473fa87,
      0x7978f48e,
      0x5a49deb1,
      0x5742d0b8,
      0x405fc2a3,
      0x4d54ccaa,
      0xdaf741ec,
      0xd7fc4fe5,
      0xc0e15dfe,
      0xcdea53f7,
      0xeedb79c8,
      0xe3d077c1,
      0xf4cd65da,
      0xf9c66bd3,
      0xb2af31a4,
      0xbfa43fad,
      0xa8b92db6,
      0xa5b223bf,
      0x86830980,
      0x8b880789,
      0x9c951592,
      0x919e1b9b,
      0x0a47a17c,
      0x074caf75,
      0x1051bd6e,
      0x1d5ab367,
      0x3e6b9958,
      0x33609751,
      0x247d854a,
      0x29768b43,
      0x621fd134,
      0x6f14df3d,
      0x7809cd26,
      0x7502c32f,
      0x5633e910,
      0x5b38e719,
      0x4c25f502,
      0x412efb0b,
      0x618c9ad7,
      0x6c8794de,
      0x7b9a86c5,
      0x769188cc,
      0x55a0a2f3,
      0x58abacfa,
      0x4fb6bee1,
      0x42bdb0e8,
      0x09d4ea9f,
      0x04dfe496,
      0x13c2f68d,
      0x1ec9f884,
      0x3df8d2bb,
      0x30f3dcb2,
      0x27eecea9,
      0x2ae5c0a0,
      0xb13c7a47,
      0xbc37744e,
      0xab2a6655,
      0xa621685c,
      0x85104263,
      0x881b4c6a,
      0x9f065e71,
      0x920d5078,
      0xd9640a0f,
      0xd46f0406,
      0xc372161d,
      0xce791814,
      0xed48322b,
      0xe0433c22,
      0xf75e2e39,
      0xfa552030,
      0xb701ec9a,
      0xba0ae293,
      0xad17f088,
      0xa01cfe81,
      0x832dd4be,
      0x8e26dab7,
      0x993bc8ac,
      0x9430c6a5,
      0xdf599cd2,
      0xd25292db,
      0xc54f80c0,
      0xc8448ec9,
      0xeb75a4f6,
      0xe67eaaff,
      0xf163b8e4,
      0xfc68b6ed,
      0x67b10c0a,
      0x6aba0203,
      0x7da71018,
      0x70ac1e11,
      0x539d342e,
      0x5e963a27,
      0x498b283c,
      0x44802635,
      0x0fe97c42,
      0x02e2724b,
      0x15ff6050,
      0x18f46e59,
      0x3bc54466,
      0x36ce4a6f,
      0x21d35874,
      0x2cd8567d,
      0x0c7a37a1,
      0x017139a8,
      0x166c2bb3,
      0x1b6725ba,
      0x38560f85,
      0x355d018c,
      0x22401397,
      0x2f4b1d9e,
      0x642247e9,
      0x692949e0,
      0x7e345bfb,
      0x733f55f2,
      0x500e7fcd,
      0x5d0571c4,
      0x4a1863df,
      0x47136dd6,
      0xdccad731,
      0xd1c1d938,
      0xc6dccb23,
      0xcbd7c52a,
      0xe8e6ef15,
      0xe5ede11c,
      0xf2f0f307,
      0xfffbfd0e,
      0xb492a779,
      0xb999a970,
      0xae84bb6b,
      0xa38fb562,
      0x80be9f5d,
      0x8db59154,
      0x9aa8834f,
      0x97a38d46
  ];
  const U4 = [
      0x00000000,
      0x090d0b0e,
      0x121a161c,
      0x1b171d12,
      0x24342c38,
      0x2d392736,
      0x362e3a24,
      0x3f23312a,
      0x48685870,
      0x4165537e,
      0x5a724e6c,
      0x537f4562,
      0x6c5c7448,
      0x65517f46,
      0x7e466254,
      0x774b695a,
      0x90d0b0e0,
      0x99ddbbee,
      0x82caa6fc,
      0x8bc7adf2,
      0xb4e49cd8,
      0xbde997d6,
      0xa6fe8ac4,
      0xaff381ca,
      0xd8b8e890,
      0xd1b5e39e,
      0xcaa2fe8c,
      0xc3aff582,
      0xfc8cc4a8,
      0xf581cfa6,
      0xee96d2b4,
      0xe79bd9ba,
      0x3bbb7bdb,
      0x32b670d5,
      0x29a16dc7,
      0x20ac66c9,
      0x1f8f57e3,
      0x16825ced,
      0x0d9541ff,
      0x04984af1,
      0x73d323ab,
      0x7ade28a5,
      0x61c935b7,
      0x68c43eb9,
      0x57e70f93,
      0x5eea049d,
      0x45fd198f,
      0x4cf01281,
      0xab6bcb3b,
      0xa266c035,
      0xb971dd27,
      0xb07cd629,
      0x8f5fe703,
      0x8652ec0d,
      0x9d45f11f,
      0x9448fa11,
      0xe303934b,
      0xea0e9845,
      0xf1198557,
      0xf8148e59,
      0xc737bf73,
      0xce3ab47d,
      0xd52da96f,
      0xdc20a261,
      0x766df6ad,
      0x7f60fda3,
      0x6477e0b1,
      0x6d7aebbf,
      0x5259da95,
      0x5b54d19b,
      0x4043cc89,
      0x494ec787,
      0x3e05aedd,
      0x3708a5d3,
      0x2c1fb8c1,
      0x2512b3cf,
      0x1a3182e5,
      0x133c89eb,
      0x082b94f9,
      0x01269ff7,
      0xe6bd464d,
      0xefb04d43,
      0xf4a75051,
      0xfdaa5b5f,
      0xc2896a75,
      0xcb84617b,
      0xd0937c69,
      0xd99e7767,
      0xaed51e3d,
      0xa7d81533,
      0xbccf0821,
      0xb5c2032f,
      0x8ae13205,
      0x83ec390b,
      0x98fb2419,
      0x91f62f17,
      0x4dd68d76,
      0x44db8678,
      0x5fcc9b6a,
      0x56c19064,
      0x69e2a14e,
      0x60efaa40,
      0x7bf8b752,
      0x72f5bc5c,
      0x05bed506,
      0x0cb3de08,
      0x17a4c31a,
      0x1ea9c814,
      0x218af93e,
      0x2887f230,
      0x3390ef22,
      0x3a9de42c,
      0xdd063d96,
      0xd40b3698,
      0xcf1c2b8a,
      0xc6112084,
      0xf93211ae,
      0xf03f1aa0,
      0xeb2807b2,
      0xe2250cbc,
      0x956e65e6,
      0x9c636ee8,
      0x877473fa,
      0x8e7978f4,
      0xb15a49de,
      0xb85742d0,
      0xa3405fc2,
      0xaa4d54cc,
      0xecdaf741,
      0xe5d7fc4f,
      0xfec0e15d,
      0xf7cdea53,
      0xc8eedb79,
      0xc1e3d077,
      0xdaf4cd65,
      0xd3f9c66b,
      0xa4b2af31,
      0xadbfa43f,
      0xb6a8b92d,
      0xbfa5b223,
      0x80868309,
      0x898b8807,
      0x929c9515,
      0x9b919e1b,
      0x7c0a47a1,
      0x75074caf,
      0x6e1051bd,
      0x671d5ab3,
      0x583e6b99,
      0x51336097,
      0x4a247d85,
      0x4329768b,
      0x34621fd1,
      0x3d6f14df,
      0x267809cd,
      0x2f7502c3,
      0x105633e9,
      0x195b38e7,
      0x024c25f5,
      0x0b412efb,
      0xd7618c9a,
      0xde6c8794,
      0xc57b9a86,
      0xcc769188,
      0xf355a0a2,
      0xfa58abac,
      0xe14fb6be,
      0xe842bdb0,
      0x9f09d4ea,
      0x9604dfe4,
      0x8d13c2f6,
      0x841ec9f8,
      0xbb3df8d2,
      0xb230f3dc,
      0xa927eece,
      0xa02ae5c0,
      0x47b13c7a,
      0x4ebc3774,
      0x55ab2a66,
      0x5ca62168,
      0x63851042,
      0x6a881b4c,
      0x719f065e,
      0x78920d50,
      0x0fd9640a,
      0x06d46f04,
      0x1dc37216,
      0x14ce7918,
      0x2bed4832,
      0x22e0433c,
      0x39f75e2e,
      0x30fa5520,
      0x9ab701ec,
      0x93ba0ae2,
      0x88ad17f0,
      0x81a01cfe,
      0xbe832dd4,
      0xb78e26da,
      0xac993bc8,
      0xa59430c6,
      0xd2df599c,
      0xdbd25292,
      0xc0c54f80,
      0xc9c8448e,
      0xf6eb75a4,
      0xffe67eaa,
      0xe4f163b8,
      0xedfc68b6,
      0x0a67b10c,
      0x036aba02,
      0x187da710,
      0x1170ac1e,
      0x2e539d34,
      0x275e963a,
      0x3c498b28,
      0x35448026,
      0x420fe97c,
      0x4b02e272,
      0x5015ff60,
      0x5918f46e,
      0x663bc544,
      0x6f36ce4a,
      0x7421d358,
      0x7d2cd856,
      0xa10c7a37,
      0xa8017139,
      0xb3166c2b,
      0xba1b6725,
      0x8538560f,
      0x8c355d01,
      0x97224013,
      0x9e2f4b1d,
      0xe9642247,
      0xe0692949,
      0xfb7e345b,
      0xf2733f55,
      0xcd500e7f,
      0xc45d0571,
      0xdf4a1863,
      0xd647136d,
      0x31dccad7,
      0x38d1c1d9,
      0x23c6dccb,
      0x2acbd7c5,
      0x15e8e6ef,
      0x1ce5ede1,
      0x07f2f0f3,
      0x0efffbfd,
      0x79b492a7,
      0x70b999a9,
      0x6bae84bb,
      0x62a38fb5,
      0x5d80be9f,
      0x548db591,
      0x4f9aa883,
      0x4697a38d
  ];
  function convertToInt32(bytes) {
      const result = [];
      for(let i = 0; i < bytes.length; i += 4)result.push(bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]);
      return result;
  }
  class AES {
      constructor(key){
          _AES_key.set(this, void 0);
          _AES_Kd.set(this, void 0);
          _AES_Ke.set(this, void 0);
          if (!(this instanceof AES)) throw Error("AES must be instanitated with `new`");
          __classPrivateFieldSet(this, _AES_key, new Uint8Array(key), "f");
          const rounds = numberOfRounds[this.key.length];
          if (rounds == null) throw new TypeError("invalid key size (must be 16, 24 or 32 bytes)");
          // encryption round keys
          __classPrivateFieldSet(this, _AES_Ke, [], "f");
          // decryption round keys
          __classPrivateFieldSet(this, _AES_Kd, [], "f");
          for(let i = 0; i <= rounds; i++){
              __classPrivateFieldGet(this, _AES_Ke, "f").push([
                  0,
                  0,
                  0,
                  0
              ]);
              __classPrivateFieldGet(this, _AES_Kd, "f").push([
                  0,
                  0,
                  0,
                  0
              ]);
          }
          const roundKeyCount = (rounds + 1) * 4;
          const KC = this.key.length / 4;
          // convert the key into ints
          const tk = convertToInt32(this.key);
          // copy values into round key arrays
          let index;
          for(let i = 0; i < KC; i++){
              index = i >> 2;
              __classPrivateFieldGet(this, _AES_Ke, "f")[index][i % 4] = tk[i];
              __classPrivateFieldGet(this, _AES_Kd, "f")[rounds - index][i % 4] = tk[i];
          }
          // key expansion (fips-197 section 5.2)
          let rconpointer = 0;
          let t = KC, tt;
          while(t < roundKeyCount){
              tt = tk[KC - 1];
              tk[0] ^= S[tt >> 16 & 0xFF] << 24 ^ S[tt >> 8 & 0xFF] << 16 ^ S[tt & 0xFF] << 8 ^ S[tt >> 24 & 0xFF] ^ rcon[rconpointer] << 24;
              rconpointer += 1;
              // key expansion (for non-256 bit)
              if (KC != 8) for(let i = 1; i < KC; i++)tk[i] ^= tk[i - 1];
              else {
                  for(let i = 1; i < KC / 2; i++)tk[i] ^= tk[i - 1];
                  tt = tk[KC / 2 - 1];
                  tk[KC / 2] ^= S[tt & 0xFF] ^ S[tt >> 8 & 0xFF] << 8 ^ S[tt >> 16 & 0xFF] << 16 ^ S[tt >> 24 & 0xFF] << 24;
                  for(let i = KC / 2 + 1; i < KC; i++)tk[i] ^= tk[i - 1];
              }
              // copy values into round key arrays
              let i = 0, r, c;
              while(i < KC && t < roundKeyCount){
                  r = t >> 2;
                  c = t % 4;
                  __classPrivateFieldGet(this, _AES_Ke, "f")[r][c] = tk[i];
                  __classPrivateFieldGet(this, _AES_Kd, "f")[rounds - r][c] = tk[i++];
                  t++;
              }
          }
          // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
          for(let r = 1; r < rounds; r++)for(let c = 0; c < 4; c++){
              tt = __classPrivateFieldGet(this, _AES_Kd, "f")[r][c];
              __classPrivateFieldGet(this, _AES_Kd, "f")[r][c] = U1[tt >> 24 & 0xFF] ^ U2[tt >> 16 & 0xFF] ^ U3[tt >> 8 & 0xFF] ^ U4[tt & 0xFF];
          }
      }
      get key() {
          return __classPrivateFieldGet(this, _AES_key, "f").slice();
      }
      encrypt(plaintext) {
          if (plaintext.length != 16) throw new TypeError("invalid plaintext size (must be 16 bytes)");
          const rounds = __classPrivateFieldGet(this, _AES_Ke, "f").length - 1;
          const a = [
              0,
              0,
              0,
              0
          ];
          // convert plaintext to (ints ^ key)
          let t = convertToInt32(plaintext);
          for(let i = 0; i < 4; i++)t[i] ^= __classPrivateFieldGet(this, _AES_Ke, "f")[0][i];
          // apply round transforms
          for(let r = 1; r < rounds; r++){
              for(let i = 0; i < 4; i++)a[i] = T1[t[i] >> 24 & 0xff] ^ T2[t[(i + 1) % 4] >> 16 & 0xff] ^ T3[t[(i + 2) % 4] >> 8 & 0xff] ^ T4[t[(i + 3) % 4] & 0xff] ^ __classPrivateFieldGet(this, _AES_Ke, "f")[r][i];
              t = a.slice();
          }
          // the last round is special
          const result = new Uint8Array(16);
          let tt = 0;
          for(let i = 0; i < 4; i++){
              tt = __classPrivateFieldGet(this, _AES_Ke, "f")[rounds][i];
              result[4 * i] = (S[t[i] >> 24 & 0xff] ^ tt >> 24) & 0xff;
              result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 0xff] ^ tt >> 16) & 0xff;
              result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 0xff] ^ tt >> 8) & 0xff;
              result[4 * i + 3] = (S[t[(i + 3) % 4] & 0xff] ^ tt) & 0xff;
          }
          return result;
      }
      decrypt(ciphertext) {
          if (ciphertext.length != 16) throw new TypeError("invalid ciphertext size (must be 16 bytes)");
          const rounds = __classPrivateFieldGet(this, _AES_Kd, "f").length - 1;
          const a = [
              0,
              0,
              0,
              0
          ];
          // convert plaintext to (ints ^ key)
          let t = convertToInt32(ciphertext);
          for(let i = 0; i < 4; i++)t[i] ^= __classPrivateFieldGet(this, _AES_Kd, "f")[0][i];
          // apply round transforms
          for(let r = 1; r < rounds; r++){
              for(let i = 0; i < 4; i++)a[i] = T5[t[i] >> 24 & 0xff] ^ T6[t[(i + 3) % 4] >> 16 & 0xff] ^ T7[t[(i + 2) % 4] >> 8 & 0xff] ^ T8[t[(i + 1) % 4] & 0xff] ^ __classPrivateFieldGet(this, _AES_Kd, "f")[r][i];
              t = a.slice();
          }
          // the last round is special
          const result = new Uint8Array(16);
          let tt = 0;
          for(let i = 0; i < 4; i++){
              tt = __classPrivateFieldGet(this, _AES_Kd, "f")[rounds][i];
              result[4 * i] = (Si[t[i] >> 24 & 0xff] ^ tt >> 24) & 0xff;
              result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 0xff] ^ tt >> 16) & 0xff;
              result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 0xff] ^ tt >> 8) & 0xff;
              result[4 * i + 3] = (Si[t[(i + 1) % 4] & 0xff] ^ tt) & 0xff;
          }
          return result;
      }
  }
  _AES_key = new WeakMap(), _AES_Kd = new WeakMap(), _AES_Ke = new WeakMap();
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"5q2DJ":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "ModeOfOperation", ()=>ModeOfOperation);
  var _aesJs = require("./aes.js");
  class ModeOfOperation {
      constructor(name, key, cls){
          if (cls && !(this instanceof cls)) throw new Error(`${name} must be instantiated with "new"`);
          Object.defineProperties(this, {
              aes: {
                  enumerable: true,
                  value: new (0, _aesJs.AES)(key)
              },
              name: {
                  enumerable: true,
                  value: name
              }
          });
      }
  }
  
  },{"./aes.js":"bEwGz","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"keWoI":[function(require,module,exports) {
  // Cipher Block Chaining
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "CBC", ()=>CBC);
  var _modeJs = require("./mode.js");
  var __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  };
  var __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var _CBC_iv, _CBC_lastBlock;
  class CBC extends (0, _modeJs.ModeOfOperation) {
      constructor(key, iv){
          super("ECC", key, CBC);
          _CBC_iv.set(this, void 0);
          _CBC_lastBlock.set(this, void 0);
          if (iv) {
              if (iv.length % 16) throw new TypeError("invalid iv size (must be 16 bytes)");
              __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(iv), "f");
          } else __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(16), "f");
          __classPrivateFieldSet(this, _CBC_lastBlock, this.iv, "f");
      }
      get iv() {
          return new Uint8Array(__classPrivateFieldGet(this, _CBC_iv, "f"));
      }
      encrypt(plaintext) {
          if (plaintext.length % 16) throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
          const ciphertext = new Uint8Array(plaintext.length);
          for(let i = 0; i < plaintext.length; i += 16){
              for(let j = 0; j < 16; j++)__classPrivateFieldGet(this, _CBC_lastBlock, "f")[j] ^= plaintext[i + j];
              __classPrivateFieldSet(this, _CBC_lastBlock, this.aes.encrypt(__classPrivateFieldGet(this, _CBC_lastBlock, "f")), "f");
              ciphertext.set(__classPrivateFieldGet(this, _CBC_lastBlock, "f"), i);
          }
          return ciphertext;
      }
      decrypt(ciphertext) {
          if (ciphertext.length % 16) throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
          const plaintext = new Uint8Array(ciphertext.length);
          for(let i = 0; i < ciphertext.length; i += 16){
              const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));
              for(let j = 0; j < 16; j++){
                  plaintext[i + j] = block[j] ^ __classPrivateFieldGet(this, _CBC_lastBlock, "f")[j];
                  __classPrivateFieldGet(this, _CBC_lastBlock, "f")[j] = ciphertext[i + j];
              }
          }
          return plaintext;
      }
  }
  _CBC_iv = new WeakMap(), _CBC_lastBlock = new WeakMap();
  
  },{"./mode.js":"5q2DJ","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"dKUqk":[function(require,module,exports) {
  // Counter Mode
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "CTR", ()=>CTR);
  var _modeJs = require("./mode.js");
  var __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  };
  var __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var _CTR_remaining, _CTR_remainingIndex, _CTR_counter;
  class CTR extends (0, _modeJs.ModeOfOperation) {
      constructor(key, initialValue){
          super("CTR", key, CTR);
          // Remaining bytes for the one-time pad
          _CTR_remaining.set(this, void 0);
          _CTR_remainingIndex.set(this, void 0);
          // The current counter
          _CTR_counter.set(this, void 0);
          __classPrivateFieldSet(this, _CTR_counter, new Uint8Array(16), "f");
          __classPrivateFieldGet(this, _CTR_counter, "f").fill(0);
          __classPrivateFieldSet(this, _CTR_remaining, __classPrivateFieldGet(this, _CTR_counter, "f"), "f"); // This will be discarded immediately
          __classPrivateFieldSet(this, _CTR_remainingIndex, 16, "f");
          if (initialValue == null) initialValue = 1;
          if (typeof initialValue === "number") this.setCounterValue(initialValue);
          else this.setCounterBytes(initialValue);
      }
      get counter() {
          return new Uint8Array(__classPrivateFieldGet(this, _CTR_counter, "f"));
      }
      setCounterValue(value) {
          if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) throw new TypeError("invalid counter initial integer value");
          for(let index = 15; index >= 0; --index){
              __classPrivateFieldGet(this, _CTR_counter, "f")[index] = value % 256;
              value = Math.floor(value / 256);
          }
      }
      setCounterBytes(value) {
          if (value.length !== 16) throw new TypeError("invalid counter initial Uint8Array value length");
          __classPrivateFieldGet(this, _CTR_counter, "f").set(value);
      }
      increment() {
          for(let i = 15; i >= 0; i--)if (__classPrivateFieldGet(this, _CTR_counter, "f")[i] === 255) __classPrivateFieldGet(this, _CTR_counter, "f")[i] = 0;
          else {
              __classPrivateFieldGet(this, _CTR_counter, "f")[i]++;
              break;
          }
      }
      encrypt(plaintext) {
          var _a, _b;
          const crypttext = new Uint8Array(plaintext);
          for(let i = 0; i < crypttext.length; i++){
              if (__classPrivateFieldGet(this, _CTR_remainingIndex, "f") === 16) {
                  __classPrivateFieldSet(this, _CTR_remaining, this.aes.encrypt(__classPrivateFieldGet(this, _CTR_counter, "f")), "f");
                  __classPrivateFieldSet(this, _CTR_remainingIndex, 0, "f");
                  this.increment();
              }
              crypttext[i] ^= __classPrivateFieldGet(this, _CTR_remaining, "f")[__classPrivateFieldSet(this, _CTR_remainingIndex, (_b = __classPrivateFieldGet(this, _CTR_remainingIndex, "f"), _a = _b++, _b), "f"), _a];
          }
          return crypttext;
      }
      decrypt(ciphertext) {
          return this.encrypt(ciphertext);
      }
  }
  _CTR_remaining = new WeakMap(), _CTR_remainingIndex = new WeakMap(), _CTR_counter = new WeakMap();
  
  },{"./mode.js":"5q2DJ","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"5xFYX":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "pkcs7Pad", ()=>pkcs7Pad);
  parcelHelpers.export(exports, "pkcs7Strip", ()=>pkcs7Strip);
  function pkcs7Pad(data) {
      const padder = 16 - data.length % 16;
      const result = new Uint8Array(data.length + padder);
      result.set(data);
      for(let i = data.length; i < result.length; i++)result[i] = padder;
      return result;
  }
  function pkcs7Strip(data) {
      if (data.length < 16) throw new TypeError("PKCS#7 invalid length");
      const padder = data[data.length - 1];
      if (padder > 16) throw new TypeError("PKCS#7 padding byte out of range");
      const length = data.length - padder;
      for(let i = 0; i < padder; i++){
          if (data[length + i] !== padder) throw new TypeError("PKCS#7 invalid padding byte");
      }
      return new Uint8Array(data.subarray(0, length));
  }
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"9HSRk":[function(require,module,exports) {
  /**
   *  @_ignore
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "looseArrayify", ()=>looseArrayify);
  parcelHelpers.export(exports, "zpad", ()=>zpad);
  parcelHelpers.export(exports, "getPassword", ()=>getPassword);
  parcelHelpers.export(exports, "spelunk", ()=>spelunk) /*
  export function follow(object: any, path: string): null | string {
      let currentChild = object;
  
      for (const comp of path.toLowerCase().split('/')) {
  
          // Search for a child object with a case-insensitive matching key
          let matchingChild = null;
          for (const key in currentChild) {
               if (key.toLowerCase() === comp) {
                   matchingChild = currentChild[key];
                   break;
               }
          }
  
          if (matchingChild === null) { return null; }
  
          currentChild = matchingChild;
      }
  
      return currentChild;
  }
  
  // "path/to/something:type!"
  export function followRequired(data: any, path: string): string {
      const value = follow(data, path);
      if (value != null) { return value; }
      return logger.throwArgumentError("invalid value", `data:${ path }`,
      JSON.stringify(data));
  }
  */  // See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)
   /*
  export function uuidV4(randomBytes: BytesLike): string {
      const bytes = getBytes(randomBytes, "randomBytes");
  
      // Section: 4.1.3:
      // - time_hi_and_version[12:16] = 0b0100
      bytes[6] = (bytes[6] & 0x0f) | 0x40;
  
      // Section 4.4
      // - clock_seq_hi_and_reserved[6] = 0b0
      // - clock_seq_hi_and_reserved[7] = 0b1
      bytes[8] = (bytes[8] & 0x3f) | 0x80;
  
      const value = hexlify(bytes);
  
      return [
         value.substring(2, 10),
         value.substring(10, 14),
         value.substring(14, 18),
         value.substring(18, 22),
         value.substring(22, 34),
      ].join("-");
  }
  */ ;
  var _indexJs = require("../utils/index.js");
  function looseArrayify(hexString) {
      if (typeof hexString === "string" && !hexString.startsWith("0x")) hexString = "0x" + hexString;
      return (0, _indexJs.getBytesCopy)(hexString);
  }
  function zpad(value, length) {
      value = String(value);
      while(value.length < length)value = "0" + value;
      return value;
  }
  function getPassword(password) {
      if (typeof password === "string") return (0, _indexJs.toUtf8Bytes)(password, "NFKC");
      return (0, _indexJs.getBytesCopy)(password);
  }
  function spelunk(object, _path) {
      const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);
      (0, _indexJs.assertArgument)(match != null, "invalid path", "path", _path);
      const path = match[1];
      const type = match[3];
      const reqd = match[4] === "!";
      let cur = object;
      for (const comp of path.toLowerCase().split(".")){
          // Search for a child object with a case-insensitive matching key
          if (Array.isArray(cur)) {
              if (!comp.match(/^[0-9]+$/)) break;
              cur = cur[parseInt(comp)];
          } else if (typeof cur === "object") {
              let found = null;
              for(const key in cur)if (key.toLowerCase() === comp) {
                  found = cur[key];
                  break;
              }
              cur = found;
          } else cur = null;
          if (cur == null) break;
      }
      (0, _indexJs.assertArgument)(!reqd || cur != null, "missing required value", "path", path);
      if (type && cur != null) {
          if (type === "int") {
              if (typeof cur === "string" && cur.match(/^-?[0-9]+$/)) return parseInt(cur);
              else if (Number.isSafeInteger(cur)) return cur;
          }
          if (type === "number") {
              if (typeof cur === "string" && cur.match(/^-?[0-9.]*$/)) return parseFloat(cur);
          }
          if (type === "data") {
              if (typeof cur === "string") return looseArrayify(cur);
          }
          if (type === "array" && Array.isArray(cur)) return cur;
          if (type === typeof cur) return cur;
          (0, _indexJs.assertArgument)(false, `wrong type found for ${type} `, "path", path);
      }
      return cur;
  }
  
  },{"../utils/index.js":"jGhd9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"ykdRJ":[function(require,module,exports) {
  /**
   *  @_subsection: api/wallet:JSON Wallets  [json-wallets]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  Returns true if %%json%% is a valid JSON Crowdsale wallet.
   */ parcelHelpers.export(exports, "isCrowdsaleJson", ()=>isCrowdsaleJson);
  // See: https://github.com/ethereum/pyethsaletool
  /**
   *  Before Ethereum launched, it was necessary to create a wallet
   *  format for backers to use, which would be used to receive ether
   *  as a reward for contributing to the project.
   *
   *  The [[link-crowdsale]] format is now obsolete, but it is still
   *  useful to support and the additional code is fairly trivial as
   *  all the primitives required are used through core portions of
   *  the library.
   */ parcelHelpers.export(exports, "decryptCrowdsaleJson", ()=>decryptCrowdsaleJson);
  var _aesJs = require("aes-js");
  var _indexJs = require("../address/index.js");
  var _indexJs1 = require("../crypto/index.js");
  var _indexJs2 = require("../hash/index.js");
  var _indexJs3 = require("../utils/index.js");
  var _utilsJs = require("./utils.js");
  function isCrowdsaleJson(json) {
      try {
          const data = JSON.parse(json);
          if (data.encseed) return true;
      } catch (error) {}
      return false;
  }
  function decryptCrowdsaleJson(json, _password) {
      const data = JSON.parse(json);
      const password = (0, _utilsJs.getPassword)(_password);
      // Ethereum Address
      const address = (0, _indexJs.getAddress)((0, _utilsJs.spelunk)(data, "ethaddr:string!"));
      // Encrypted Seed
      const encseed = (0, _utilsJs.looseArrayify)((0, _utilsJs.spelunk)(data, "encseed:string!"));
      (0, _indexJs3.assertArgument)(encseed && encseed.length % 16 === 0, "invalid encseed", "json", json);
      const key = (0, _indexJs3.getBytes)((0, _indexJs1.pbkdf2)(password, password, 2000, 32, "sha256")).slice(0, 16);
      const iv = encseed.slice(0, 16);
      const encryptedSeed = encseed.slice(16);
      // Decrypt the seed
      const aesCbc = new (0, _aesJs.CBC)(key, iv);
      const seed = (0, _aesJs.pkcs7Strip)((0, _indexJs3.getBytes)(aesCbc.decrypt(encryptedSeed)));
      // This wallet format is weird... Convert the binary encoded hex to a string.
      let seedHex = "";
      for(let i = 0; i < seed.length; i++)seedHex += String.fromCharCode(seed[i]);
      return {
          address,
          privateKey: (0, _indexJs2.id)(seedHex)
      };
  }
  
  },{"aes-js":"41GpS","../address/index.js":"cuJ87","../crypto/index.js":"4oi1q","../hash/index.js":"bTSS2","../utils/index.js":"jGhd9","./utils.js":"9HSRk","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"4pcZr":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  A **Wallet** manages a single private key which is used to sign
   *  transactions, messages and other common payloads.
   *
   *  This class is generally the main entry point for developers
   *  that wish to use a private key directly, as it can create
   *  instances from a large variety of common sources, including
   *  raw private key, [[link-bip-39]] mnemonics and encrypte JSON
   *  wallets.
   */ parcelHelpers.export(exports, "Wallet", ()=>Wallet);
  var _indexJs = require("../crypto/index.js");
  var _indexJs1 = require("../utils/index.js");
  var _baseWalletJs = require("./base-wallet.js");
  var _hdwalletJs = require("./hdwallet.js");
  var _jsonCrowdsaleJs = require("./json-crowdsale.js");
  var _jsonKeystoreJs = require("./json-keystore.js");
  var _mnemonicJs = require("./mnemonic.js");
  function stall(duration) {
      return new Promise((resolve)=>{
          setTimeout(()=>{
              resolve();
          }, duration);
      });
  }
  class Wallet extends (0, _baseWalletJs.BaseWallet) {
      /**
       *  Create a new wallet for the %%privateKey%%, optionally connected
       *  to %%provider%%.
       */ constructor(key, provider){
          if (typeof key === "string" && !key.startsWith("0x")) key = "0x" + key;
          let signingKey = typeof key === "string" ? new (0, _indexJs.SigningKey)(key) : key;
          super(signingKey, provider);
      }
      connect(provider) {
          return new Wallet(this.signingKey, provider);
      }
      /**
       *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with
       *  %%password%%.
       *
       *  If %%progressCallback%% is specified, it will receive periodic
       *  updates as the encryption process progreses.
       */ async encrypt(password, progressCallback) {
          const account = {
              address: this.address,
              privateKey: this.privateKey
          };
          return await (0, _jsonKeystoreJs.encryptKeystoreJson)(account, password, {
              progressCallback
          });
      }
      /**
       *  Returns a [JSON Keystore Wallet](json-wallets) encryped with
       *  %%password%%.
       *
       *  It is preferred to use the [async version](encrypt) instead,
       *  which allows a [[ProgressCallback]] to keep the user informed.
       *
       *  This method will block the event loop (freezing all UI) until
       *  it is complete, which may be a non-trivial duration.
       */ encryptSync(password) {
          const account = {
              address: this.address,
              privateKey: this.privateKey
          };
          return (0, _jsonKeystoreJs.encryptKeystoreJsonSync)(account, password);
      }
      static #fromAccount(account) {
          (0, _indexJs1.assertArgument)(account, "invalid JSON wallet", "json", "[ REDACTED ]");
          if ("mnemonic" in account && account.mnemonic && account.mnemonic.locale === "en") {
              const mnemonic = (0, _mnemonicJs.Mnemonic).fromEntropy(account.mnemonic.entropy);
              const wallet = (0, _hdwalletJs.HDNodeWallet).fromMnemonic(mnemonic, account.mnemonic.path);
              if (wallet.address === account.address && wallet.privateKey === account.privateKey) return wallet;
              console.log("WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key");
          }
          const wallet = new Wallet(account.privateKey);
          (0, _indexJs1.assertArgument)(wallet.address === account.address, "address/privateKey mismatch", "json", "[ REDACTED ]");
          return wallet;
      }
      /**
       *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%
       *  with %%password%%.
       *
       *  If %%progress%% is provided, it is called periodically during
       *  decryption so that any UI can be updated.
       */ static async fromEncryptedJson(json, password, progress) {
          let account = null;
          if ((0, _jsonKeystoreJs.isKeystoreJson)(json)) account = await (0, _jsonKeystoreJs.decryptKeystoreJson)(json, password, progress);
          else if ((0, _jsonCrowdsaleJs.isCrowdsaleJson)(json)) {
              if (progress) {
                  progress(0);
                  await stall(0);
              }
              account = (0, _jsonCrowdsaleJs.decryptCrowdsaleJson)(json, password);
              if (progress) {
                  progress(1);
                  await stall(0);
              }
          }
          return Wallet.#fromAccount(account);
      }
      /**
       *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.
       *
       *  The [[fromEncryptedJson]] method is preferred, as this method
       *  will lock up and freeze the UI during decryption, which may take
       *  some time.
       */ static fromEncryptedJsonSync(json, password) {
          let account = null;
          if ((0, _jsonKeystoreJs.isKeystoreJson)(json)) account = (0, _jsonKeystoreJs.decryptKeystoreJsonSync)(json, password);
          else if ((0, _jsonCrowdsaleJs.isCrowdsaleJson)(json)) account = (0, _jsonCrowdsaleJs.decryptCrowdsaleJson)(json, password);
          else (0, _indexJs1.assertArgument)(false, "invalid JSON wallet", "json", "[ REDACTED ]");
          return Wallet.#fromAccount(account);
      }
      /**
       *  Creates a new random [[HDNodeWallet]] using the avavilable
       *  [cryptographic random source](randomBytes).
       *
       *  If there is no crytographic random source, this will throw.
       */ static createRandom(provider) {
          const wallet = (0, _hdwalletJs.HDNodeWallet).createRandom();
          if (provider) return wallet.connect(provider);
          return wallet;
      }
      /**
       *  Creates a [[HDNodeWallet]] for %%phrase%%.
       */ static fromPhrase(phrase, provider) {
          const wallet = (0, _hdwalletJs.HDNodeWallet).fromPhrase(phrase);
          if (provider) return wallet.connect(provider);
          return wallet;
      }
  }
  
  },{"../crypto/index.js":"4oi1q","../utils/index.js":"jGhd9","./base-wallet.js":"jtsRw","./hdwallet.js":"1ZS1b","./json-crowdsale.js":"ykdRJ","./json-keystore.js":"iJXOk","./mnemonic.js":"duTnv","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"3hO2f":[function(require,module,exports) {
  /**
   *  A Wordlist is a set of 2048 words used to encode private keys
   *  (or other binary data) that is easier for humans to write down,
   *  transcribe and dictate.
   *
   *  The [[link-bip-39]] standard includes several checksum bits,
   *  depending on the size of the mnemonic phrase.
   *
   *  A mnemonic phrase may be 12, 15, 18, 21 or 24 words long. For
   *  most purposes 12 word mnemonics should be used, as including
   *  additional words increases the difficulty and potential for
   *  mistakes and does not offer any effective improvement on security.
   *
   *  There are a variety of [[link-bip39-wordlists]] for different
   *  languages, but for maximal compatibility, the
   *  [English Wordlist](LangEn) is recommended.
   *
   *  @_section: api/wordlists:Wordlists [about-wordlists]
   */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "Wordlist", ()=>(0, _wordlistJs.Wordlist));
  parcelHelpers.export(exports, "LangEn", ()=>(0, _langEnJs.LangEn));
  parcelHelpers.export(exports, "WordlistOwl", ()=>(0, _wordlistOwlJs.WordlistOwl));
  parcelHelpers.export(exports, "WordlistOwlA", ()=>(0, _wordlistOwlaJs.WordlistOwlA));
  parcelHelpers.export(exports, "wordlists", ()=>(0, _wordlistsJs.wordlists));
  var _wordlistJs = require("./wordlist.js");
  var _langEnJs = require("./lang-en.js");
  var _wordlistOwlJs = require("./wordlist-owl.js");
  var _wordlistOwlaJs = require("./wordlist-owla.js");
  var _wordlistsJs = require("./wordlists.js");
  
  },{"./wordlist.js":"90nDK","./lang-en.js":"6yvx9","./wordlist-owl.js":"k14dg","./wordlist-owla.js":"8MHCK","./wordlists.js":"7nljy","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"8MHCK":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  An OWL-A format Wordlist extends the OWL format to add an
   *  overlay onto an OWL format Wordlist to support diacritic
   *  marks.
   *
   *  This class is generally not useful to most developers as
   *  it is used mainly internally to keep Wordlists for languages
   *  based on latin-1 small.
   *
   *  If necessary, there are tools within the ``generation/`` folder
   *  to create these necessary data.
   */ parcelHelpers.export(exports, "WordlistOwlA", ()=>WordlistOwlA);
  var _wordlistOwlJs = require("./wordlist-owl.js");
  var _decodeOwlaJs = require("./decode-owla.js");
  class WordlistOwlA extends (0, _wordlistOwlJs.WordlistOwl) {
      #accent;
      constructor(locale, data, accent, checksum){
          super(locale, data, checksum);
          this.#accent = accent;
      }
      get _accent() {
          return this.#accent;
      }
      _decodeWords() {
          return (0, _decodeOwlaJs.decodeOwlA)(this._data, this._accent);
      }
  }
  
  },{"./wordlist-owl.js":"k14dg","./decode-owla.js":"1GJHQ","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"1GJHQ":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  @_ignore
   */ parcelHelpers.export(exports, "decodeOwlA", ()=>decodeOwlA);
  var _indexJs = require("../utils/index.js");
  var _bitReaderJs = require("./bit-reader.js");
  var _decodeOwlJs = require("./decode-owl.js");
  function decodeOwlA(data, accents) {
      let words = (0, _decodeOwlJs.decodeOwl)(data).join(",");
      // Inject the accents
      accents.split(/,/g).forEach((accent)=>{
          const match = accent.match(/^([a-z]*)([0-9]+)([0-9])(.*)$/);
          (0, _indexJs.assertArgument)(match !== null, "internal error parsing accents", "accents", accents);
          let posOffset = 0;
          const positions = (0, _bitReaderJs.decodeBits)(parseInt(match[3]), match[4]);
          const charCode = parseInt(match[2]);
          const regex = new RegExp(`([${match[1]}])`, "g");
          words = words.replace(regex, (all, letter)=>{
              const rem = --positions[posOffset];
              if (rem === 0) {
                  letter = String.fromCharCode(letter.charCodeAt(0), charCode);
                  posOffset++;
              }
              return letter;
          });
      });
      return words.split(",");
  }
  
  },{"../utils/index.js":"jGhd9","./bit-reader.js":"jljtI","./decode-owl.js":"cz2eX","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"jljtI":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  /**
   *  @_ignore
   */ parcelHelpers.export(exports, "decodeBits", ()=>decodeBits);
  const Base64 = ")!@#$%^&*(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_";
  function decodeBits(width, data) {
      const maxValue = (1 << width) - 1;
      const result = [];
      let accum = 0, bits = 0, flood = 0;
      for(let i = 0; i < data.length; i++){
          // Accumulate 6 bits of data
          accum = accum << 6 | Base64.indexOf(data[i]);
          bits += 6;
          // While we have enough for a word...
          while(bits >= width){
              // ...read the word
              const value = accum >> bits - width;
              accum &= (1 << bits - width) - 1;
              bits -= width;
              // A value of 0 indicates we exceeded maxValue, it
              // floods over into the next value
              if (value === 0) flood += maxValue;
              else {
                  result.push(value + flood);
                  flood = 0;
              }
          }
      }
      return result;
  }
  
  },{"@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}],"7nljy":[function(require,module,exports) {
  var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
  parcelHelpers.defineInteropFlag(exports);
  parcelHelpers.export(exports, "wordlists", ()=>wordlists);
  var _langEnJs = require("./lang-en.js");
  const wordlists = {
      en: (0, _langEnJs.LangEn).wordlist()
  };
  
  },{"./lang-en.js":"6yvx9","@parcel/transformer-js/src/esmodule-helpers.js":"939WJ"}]},["jfcMC","bNKaB"], "bNKaB", "parcelRequirefc40")
  
  //# sourceMappingURL=index.0641b553.js.map
  